diff --git a/FindFFMPEG.cmake b/FindFFMPEG.cmake
index 19671cb..d03f329 100644
--- a/FindFFMPEG.cmake
+++ b/FindFFMPEG.cmake
@@ -33,15 +33,14 @@
 #
 
 # required ffmpeg library versions
-set(REQUIRED_FFMPEG_VERSION 4.0)
-set(_avcodec_ver ">=58.18.100")
-set(_avfilter_ver ">=7.16.100")
-set(_avformat_ver ">=58.12.100")
-set(_avutil_ver ">=56.14.100")
-set(_swscale_ver ">=5.1.100")
-set(_swresample_ver ">=3.1.100")
-set(_postproc_ver ">=55.1.100")
-
+set(REQUIRED_FFMPEG_VERSION 5.0.0)
+set(_avcodec_ver ">=59.18.100")
+set(_avfilter_ver ">=8.24.100")
+set(_avformat_ver ">=59.16.100")
+set(_avutil_ver ">=57.17.100")
+set(_postproc_ver ">=56.3.100")
+set(_swresample_ver ">=4.3.100")
+set(_swscale_ver ">=6.4.100")
 
 # Allows building with external ffmpeg not found in system paths,
 # without library version checks
diff --git a/depends/common/ffmpeg/CMakeLists.txt b/depends/common/ffmpeg/CMakeLists.txt
index bad6399..66d757c 100644
--- a/depends/common/ffmpeg/CMakeLists.txt
+++ b/depends/common/ffmpeg/CMakeLists.txt
@@ -110,6 +110,7 @@ if(NOT WIN32)
     else()
       list(APPEND EXTRA_CONF "--as=${CMAKE_INSTALL_PREFIX}/bin/gas-preprocessor.pl -arch aarch64 -- ${CMAKE_C_COMPILER}")
       list(APPEND EXTRA_CONF --arch=aarch64)
+      list(APPEND EXTRA_CONF --disable-filter=yadif_videotoolbox)
     endif()
     list(APPEND EXTRA_CONF --disable-decoder=mpeg_xvmc --disable-crystalhd --enable-videotoolbox
                            --target-os=darwin)
diff --git a/depends/common/ffmpeg/ffmpeg.sha256 b/depends/common/ffmpeg/ffmpeg.sha256
index 4b76427..119bbed 100644
--- a/depends/common/ffmpeg/ffmpeg.sha256
+++ b/depends/common/ffmpeg/ffmpeg.sha256
@@ -1 +1 @@
-bea6d9f91cdbe4c5ad98e0878955ad5077df3883ef321fd4668ee1076de793fe
+ea84f1f7f72d0d7c4c2cbb6b4f2170b908a090448fc1834353a9f5fbf7c31fb4
diff --git a/depends/common/ffmpeg/ffmpeg.txt b/depends/common/ffmpeg/ffmpeg.txt
index b38972c..c1af4e7 100644
--- a/depends/common/ffmpeg/ffmpeg.txt
+++ b/depends/common/ffmpeg/ffmpeg.txt
@@ -1 +1 @@
-ffmpeg https://github.com/FFmpeg/FFmpeg/archive/n4.4.tar.gz
\ No newline at end of file
+ffmpeg https://github.com/FFmpeg/FFmpeg/archive/refs/tags/n5.1.2.tar.gz
diff --git a/src/stream/FFmpegStream.cpp b/src/stream/FFmpegStream.cpp
index 73e0963..5706bd6 100644
--- a/src/stream/FFmpegStream.cpp
+++ b/src/stream/FFmpegStream.cpp
@@ -29,6 +29,7 @@
 #endif
 
 extern "C" {
+#include <libavcodec/bsf.h>
 #include <libavutil/dict.h>
 #include <libavutil/opt.h>
 }
@@ -462,7 +463,9 @@ DEMUX_PACKET* FFmpegStream::DemuxRead()
     // we already check for a valid m_streams[pPacket->iStreamId] above
     else if (stream->type == INPUTSTREAM_TYPE_AUDIO)
     {
-      if (static_cast<DemuxStreamAudio*>(stream)->iChannels != m_pFormatContext->streams[pPacket->iStreamId]->codecpar->channels ||
+      int codecparChannels =
+          m_pFormatContext->streams[pPacket->iStreamId]->codecpar->ch_layout.nb_channels;
+      if (static_cast<DemuxStreamAudio*>(stream)->iChannels != codecparChannels ||
           static_cast<DemuxStreamAudio*>(stream)->iSampleRate != m_pFormatContext->streams[pPacket->iStreamId]->codecpar->sample_rate)
       {
         // content has changed
@@ -658,7 +661,7 @@ bool FFmpegStream::Aborted()
 
 bool FFmpegStream::Open(bool fileinfo)
 {
-  AVInputFormat* iformat = NULL;
+  const AVInputFormat* iformat = nullptr;
   std::string strFile;
   m_streaminfo = !m_isRealTimeStream && !m_reopen;;
   m_currentPts = STREAM_NOPTS_VALUE;
@@ -729,14 +732,6 @@ bool FFmpegStream::Open(bool fileinfo)
     m_streaminfo = true;
   }
 
-  if (iformat && (strcmp(iformat->name, "mov,mp4,m4a,3gp,3g2,mj2") == 0))
-  {
-    CURL url(m_streamUrl);
-    //if (URIUtils::IsRemote(strFile))
-    if (!url.GetProtocol().empty() && !url.IsProtocol("file"))
-      m_pFormatContext->iformat->flags |= AVFMT_NOGENSEARCH;
-  }
-
   // we need to know if this is matroska, avi or sup later
   m_bMatroska = strncmp(m_pFormatContext->iformat->name, "matroska", 8) == 0;	// for "matroska.webm"
   m_bAVI = strcmp(m_pFormatContext->iformat->name, "avi") == 0;
@@ -785,9 +780,6 @@ bool FFmpegStream::Open(bool fileinfo)
   // if format can be nonblocking, let's use that
   m_pFormatContext->flags |= AVFMT_FLAG_NONBLOCK;
 
-  // deprecated, will be always set in future versions
-  m_pFormatContext->flags |= AVFMT_FLAG_KEEP_SIDE_DATA;
-
   UpdateCurrentPTS();
 
   // select the correct program if requested
@@ -828,7 +820,9 @@ bool FFmpegStream::Open(bool fileinfo)
           {
             int idx = m_pFormatContext->programs[i]->stream_index[j];
             AVStream* st = m_pFormatContext->streams[idx];
-            if ((st->codecpar->codec_type == AVMEDIA_TYPE_VIDEO && st->codec_info_nb_frames > 0) ||
+            // Related to https://patchwork.ffmpeg.org/project/ffmpeg/patch/20210429143825.53040-1-jamrial@gmail.com/
+            // has been replaced with AVSTREAM_EVENT_FLAG_NEW_PACKETS.
+            if ((st->codecpar->codec_type == AVMEDIA_TYPE_VIDEO && (st->event_flags & AVSTREAM_EVENT_FLAG_NEW_PACKETS)) ||
                 (st->codecpar->codec_type == AVMEDIA_TYPE_AUDIO && st->codecpar->sample_rate > 0))
             {
               nProgram = i;
@@ -870,7 +864,7 @@ bool FFmpegStream::Open(bool fileinfo)
   return true;
 }
 
-bool FFmpegStream::OpenWithFFmpeg(AVInputFormat* iformat, const AVIOInterruptCB& int_cb)
+bool FFmpegStream::OpenWithFFmpeg(const AVInputFormat* iformat, const AVIOInterruptCB& int_cb)
 {
   Log(LOGLEVEL_INFO, "%s - IO handled by FFmpeg's AVFormat", __FUNCTION__);
 
@@ -959,7 +953,7 @@ bool FFmpegStream::OpenWithFFmpeg(AVInputFormat* iformat, const AVIOInterruptCB&
   return true;
 }
 
-bool FFmpegStream::OpenWithCURL(AVInputFormat* iformat)
+bool FFmpegStream::OpenWithCURL(const AVInputFormat* iformat)
 {
   Log(LOGLEVEL_INFO, "%s - IO handled by Kodi's cURL", __FUNCTION__);
 
@@ -1039,8 +1033,7 @@ bool FFmpegStream::OpenWithCURL(AVInputFormat* iformat)
         // is present, we assume it is PCM audio.
         // AC3 is always wrapped in iec61937 (ffmpeg "spdif"), while DTS
         // may be just padded.
-        AVInputFormat* iformat2;
-        iformat2 = av_find_input_format("spdif");
+        const AVInputFormat* iformat2 = av_find_input_format("spdif");
 
         if (iformat2 && iformat2->read_probe(&pd) > AVPROBE_SCORE_MAX / 4)
         {
@@ -1147,9 +1140,9 @@ void FFmpegStream::UpdateCurrentPTS()
   if (idx >= 0)
   {
     AVStream* stream = m_pFormatContext->streams[idx];
-    if (stream && stream->cur_dts != (int64_t)AV_NOPTS_VALUE)
+    if (stream && m_pkt.pkt.dts != (int64_t)AV_NOPTS_VALUE)
     {
-      double ts = ConvertTimestamp(stream->cur_dts, stream->time_base.den, stream->time_base.num);
+      double ts = ConvertTimestamp(m_pkt.pkt.dts, stream->time_base.den, stream->time_base.num);
       m_currentPts = ts;
     }
   }
@@ -1230,9 +1223,10 @@ bool FFmpegStream::IsProgramChange()
       return true;
     if (m_pFormatContext->streams[idx]->codecpar->codec_id != stream->codec)
       return true;
+      int codecparChannels =
+          m_pFormatContext->streams[idx]->codecpar->ch_layout.nb_channels;
     if (m_pFormatContext->streams[idx]->codecpar->codec_type == AVMEDIA_TYPE_AUDIO &&
-        m_pFormatContext->streams[idx]->codecpar->channels !=
-            static_cast<DemuxStreamAudio*>(stream)->iChannels)
+        codecparChannels != static_cast<DemuxStreamAudio*>(stream)->iChannels)
       return true;
     if (m_pFormatContext->streams[idx]->codecpar->extradata_size != static_cast<int>(stream->ExtraSize))
       return true;
@@ -1549,6 +1543,138 @@ bool FFmpegStream::SeekTime(double time, bool backwards, double* startpts)
     return false;
 }
 
+int FFmpegStream::GetPacketExtradata(const AVPacket* pkt, const AVCodecParserContext* parserCtx, AVCodecContext* codecCtx, uint8_t **p_extradata)
+{
+  int extradata_size = 0;
+
+  if (!pkt || !p_extradata)
+    return 0;
+
+  *p_extradata = nullptr;
+
+  /* extract_extradata bitstream filter is implemented only
+   * for certain codecs, as noted in discussion of PR#21248
+   */
+
+  AVCodecID codecId = codecCtx->codec_id;
+
+  // clang-format off
+  if (
+    codecId != AV_CODEC_ID_MPEG1VIDEO &&
+    codecId != AV_CODEC_ID_MPEG2VIDEO &&
+    codecId != AV_CODEC_ID_H264 &&
+    codecId != AV_CODEC_ID_HEVC &&
+    codecId != AV_CODEC_ID_MPEG4 &&
+    codecId != AV_CODEC_ID_VC1 &&
+    codecId != AV_CODEC_ID_AV1 &&
+    codecId != AV_CODEC_ID_AVS2 &&
+    codecId != AV_CODEC_ID_AVS3 &&
+    codecId != AV_CODEC_ID_CAVS
+  )
+    // clang-format on
+    return 0;
+
+  AVBSFContext *bsf = nullptr;
+  AVPacket *dst_pkt = nullptr;
+  const AVBitStreamFilter *f;
+  AVPacket *pkt_ref = nullptr;
+  int ret = 0;
+  uint8_t *ret_extradata = nullptr;
+  size_t ret_extradata_size = 0;
+
+  f = av_bsf_get_by_name("extract_extradata");
+  if (!f)
+    return 0;
+
+  bsf = nullptr;
+  ret = av_bsf_alloc(f, &bsf);
+  if (ret < 0)
+    return 0;
+
+  bsf->par_in->codec_id = codecCtx->codec_id;
+
+  ret = av_bsf_init(bsf);
+  if (ret < 0)
+  {
+    av_bsf_free(&bsf);
+    return 0;
+  }
+
+  dst_pkt = av_packet_alloc();
+  pkt_ref = dst_pkt;
+
+  ret = av_packet_ref(pkt_ref, pkt);
+  if (ret < 0)
+  {
+    av_bsf_free(&bsf);
+    av_packet_free(&dst_pkt);
+    return 0;
+  }
+
+  ret = av_bsf_send_packet(bsf, pkt_ref);
+  if (ret < 0)
+  {
+    av_packet_unref(pkt_ref);
+    av_bsf_free(&bsf);
+    av_packet_free(&dst_pkt);
+    return 0;
+  }
+
+  ret = 0;
+  while (ret >= 0)
+  {
+    ret = av_bsf_receive_packet(bsf, pkt_ref);
+    if (ret < 0)
+    {
+      if (ret != AVERROR(EAGAIN) && ret != AVERROR_EOF)
+        break;
+
+      continue;
+    }
+
+    ret_extradata = av_packet_get_side_data(pkt_ref,
+                                            AV_PKT_DATA_NEW_EXTRADATA,
+                                            &ret_extradata_size);
+    if (ret_extradata &&
+        ret_extradata_size > 0 &&
+        ret_extradata_size < FF_MAX_EXTRADATA_SIZE)
+    {
+      *p_extradata = (uint8_t*)av_malloc(ret_extradata_size + AV_INPUT_BUFFER_PADDING_SIZE);
+      if (!*p_extradata)
+      {
+        Log(LOGLEVEL_ERROR,
+            "%s - failed to allocate %zu bytes for extradata",
+            __FUNCTION__,
+            ret_extradata_size);
+
+        av_packet_unref(pkt_ref);
+        av_bsf_free(&bsf);
+        av_packet_free(&dst_pkt);
+        return 0;
+      }
+
+      Log(LOGLEVEL_DEBUG,
+          "%s - fetching extradata, extradata_size(%zu)",
+          __FUNCTION__,
+          ret_extradata_size);
+
+      memcpy(*p_extradata, ret_extradata, ret_extradata_size);
+      memset(*p_extradata + ret_extradata_size, 0, AV_INPUT_BUFFER_PADDING_SIZE);
+      extradata_size = ret_extradata_size;
+
+      av_packet_unref(pkt_ref);
+      break;
+    }
+
+    av_packet_unref(pkt_ref);
+  }
+
+  av_bsf_free(&bsf);
+  av_packet_free(&dst_pkt);
+
+  return extradata_size;
+}
+
 void FFmpegStream::ParsePacket(AVPacket* pkt)
 {
   AVStream* st = m_pFormatContext->streams[pkt->stream_index];
@@ -1564,7 +1690,7 @@ void FFmpegStream::ParsePacket(AVPacket* pkt)
 
       parser->second->m_parserCtx = av_parser_init(st->codecpar->codec_id);
 
-      AVCodec* codec = avcodec_find_decoder(st->codecpar->codec_id);
+      const AVCodec* codec = avcodec_find_decoder(st->codecpar->codec_id);
       if (codec == nullptr)
       {
         Log(LOGLEVEL_ERROR, "%s - can't find decoder", __FUNCTION__);
@@ -1580,43 +1706,38 @@ void FFmpegStream::ParsePacket(AVPacket* pkt)
 
     if (parser->second->m_parserCtx &&
         parser->second->m_parserCtx->parser &&
-        parser->second->m_parserCtx->parser->split &&
         !st->codecpar->extradata)
     {
-      int i = parser->second->m_parserCtx->parser->split(parser->second->m_codecCtx, pkt->data, pkt->size);
-      if (i > 0 && i < FF_MAX_EXTRADATA_SIZE)
+      int i = GetPacketExtradata(pkt,
+                               parser->second->m_parserCtx,
+                               parser->second->m_codecCtx,
+                               &st->codecpar->extradata);
+      if (i > 0)
       {
-        st->codecpar->extradata = (uint8_t*)av_malloc(i + AV_INPUT_BUFFER_PADDING_SIZE);
-        if (st->codecpar->extradata)
-        {
-          Log(LOGLEVEL_DEBUG, "CDVDDemuxFFmpeg::ParsePacket() fetching extradata, extradata_size(%d)", i);
-          st->codecpar->extradata_size = i;
-          memcpy(st->codecpar->extradata, pkt->data, i);
-          memset(st->codecpar->extradata + i, 0, AV_INPUT_BUFFER_PADDING_SIZE);
+        st->codecpar->extradata_size = i;
 
-          if (parser->second->m_parserCtx->parser->parser_parse)
+        if (parser->second->m_parserCtx->parser->parser_parse)
+        {
+          parser->second->m_codecCtx->extradata = st->codecpar->extradata;
+          parser->second->m_codecCtx->extradata_size = st->codecpar->extradata_size;
+          const uint8_t* outbufptr;
+          int bufSize;
+          parser->second->m_parserCtx->flags |= PARSER_FLAG_COMPLETE_FRAMES;
+          parser->second->m_parserCtx->parser->parser_parse(parser->second->m_parserCtx,
+                                                            parser->second->m_codecCtx,
+                                                            &outbufptr, &bufSize,
+                                                            pkt->data, pkt->size);
+          parser->second->m_codecCtx->extradata = nullptr;
+          parser->second->m_codecCtx->extradata_size = 0;
+
+          if (parser->second->m_parserCtx->width != 0)
           {
-            parser->second->m_codecCtx->extradata = st->codecpar->extradata;
-            parser->second->m_codecCtx->extradata_size = st->codecpar->extradata_size;
-            const uint8_t* outbufptr;
-            int bufSize;
-            parser->second->m_parserCtx->flags |= PARSER_FLAG_COMPLETE_FRAMES;
-            parser->second->m_parserCtx->parser->parser_parse(parser->second->m_parserCtx,
-                                                              parser->second->m_codecCtx,
-                                                              &outbufptr, &bufSize,
-                                                              pkt->data, pkt->size);
-            parser->second->m_codecCtx->extradata = nullptr;
-            parser->second->m_codecCtx->extradata_size = 0;
-
-            if (parser->second->m_parserCtx->width != 0)
-            {
-              st->codecpar->width = parser->second->m_parserCtx->width;
-              st->codecpar->height = parser->second->m_parserCtx->height;
-            }
-            else
-            {
-              Log(LOGLEVEL_ERROR, "CDVDDemuxFFmpeg::ParsePacket() invalid width/height");
-            }
+            st->codecpar->width = parser->second->m_parserCtx->width;
+            st->codecpar->height = parser->second->m_parserCtx->height;
+          }
+          else
+          {
+            Log(LOGLEVEL_ERROR, "CDVDDemuxFFmpeg::ParsePacket() invalid width/height");
           }
         }
       }
@@ -1641,7 +1762,7 @@ TRANSPORT_STREAM_STATE FFmpegStream::TransportStreamAudioState()
         {
           if (!m_startTime)
           {
-            m_startTime = av_rescale(st->cur_dts, st->time_base.num, st->time_base.den) - 0.000001;
+            m_startTime = av_rescale(m_pkt.pkt.dts, st->time_base.num, st->time_base.den) - 0.000001;
             m_seekStream = idx;
           }
           return TRANSPORT_STREAM_STATE::READY;
@@ -1661,7 +1782,7 @@ TRANSPORT_STREAM_STATE FFmpegStream::TransportStreamAudioState()
         {
           if (!m_startTime)
           {
-            m_startTime = av_rescale(st->cur_dts, st->time_base.num, st->time_base.den) - 0.000001;
+            m_startTime = av_rescale(m_pkt.pkt.dts, st->time_base.num, st->time_base.den) - 0.000001;
             m_seekStream = i;
           }
           return TRANSPORT_STREAM_STATE::READY;
@@ -1694,7 +1815,7 @@ TRANSPORT_STREAM_STATE FFmpegStream::TransportStreamVideoState()
         {
           if (!m_startTime)
           {
-            m_startTime = av_rescale(st->cur_dts, st->time_base.num, st->time_base.den) - 0.000001;
+            m_startTime = av_rescale(m_pkt.pkt.dts, st->time_base.num, st->time_base.den) - 0.000001;
             m_seekStream = idx;
           }
           return TRANSPORT_STREAM_STATE::READY;
@@ -1714,7 +1835,7 @@ TRANSPORT_STREAM_STATE FFmpegStream::TransportStreamVideoState()
         {
           if (!m_startTime)
           {
-            m_startTime = av_rescale(st->cur_dts, st->time_base.num, st->time_base.den) - 0.000001;
+            m_startTime = av_rescale(m_pkt.pkt.dts, st->time_base.num, st->time_base.den) - 0.000001;
             m_seekStream = i;
           }
           return TRANSPORT_STREAM_STATE::READY;
@@ -1824,14 +1945,20 @@ DemuxStream* FFmpegStream::AddStream(int streamIdx)
       {
         DemuxStreamAudioFFmpeg* st = new DemuxStreamAudioFFmpeg(pStream);
         stream = st;
-        st->iChannels = pStream->codecpar->channels;
+        int codecparChannels = pStream->codecpar->ch_layout.nb_channels;
+        int codecparChannelLayout = pStream->codecpar->ch_layout.u.mask;
+        st->iChannels = codecparChannels;
+        st->iChannelLayout = codecparChannelLayout;
         st->iSampleRate = pStream->codecpar->sample_rate;
         st->iBlockAlign = pStream->codecpar->block_align;
         st->iBitRate = static_cast<int>(pStream->codecpar->bit_rate);
         st->iBitsPerSample = pStream->codecpar->bits_per_raw_sample;
-        st->iChannelLayout = pStream->codecpar->channel_layout;
         char buf[32] = { 0 };
-        av_get_channel_layout_string(buf, 31, st->iChannels, st->iChannelLayout);
+        // https://github.com/FFmpeg/FFmpeg/blob/6ccc3989d15/doc/APIchanges#L50-L53
+        AVChannelLayout layout = {};
+        av_channel_layout_from_mask(&layout, st->iChannelLayout);
+        av_channel_layout_describe(&layout, buf, sizeof(buf));
+        av_channel_layout_uninit(&layout);
         st->m_channelLayoutName = buf;
         if (st->iBitsPerSample == 0)
           st->iBitsPerSample = pStream->codecpar->bits_per_coded_sample;
@@ -2070,7 +2197,7 @@ std::string FFmpegStream::GetStreamCodecName(int iStreamId)
       return strName;
     }
 
-    AVCodec* codec = avcodec_find_decoder(stream->codec);
+    const AVCodec* codec = avcodec_find_decoder(stream->codec);
     if (codec)
       strName = codec->name;
   }
diff --git a/src/stream/FFmpegStream.h b/src/stream/FFmpegStream.h
index bf8a50f..7355785 100644
--- a/src/stream/FFmpegStream.h
+++ b/src/stream/FFmpegStream.h
@@ -33,6 +33,7 @@ extern "C"
 #include <libavcodec/avcodec.h>
 #include <libavformat/avformat.h>
 #include <libavutil/mastering_display_metadata.h>
+#include <libavutil/version.h>
 }
 
 #ifndef __GNUC__
@@ -107,6 +108,8 @@ protected:
   bool IsPaused() { return m_speed == STREAM_PLAYSPEED_PAUSE; }
   virtual bool CheckReturnEmptyOnPacketResult(int result);
 
+  int GetPacketExtradata(const AVPacket* pkt, const AVCodecParserContext* parserCtx, AVCodecContext* codecCtx, uint8_t **p_extradata);
+
   int64_t m_demuxerId;
   mutable std::recursive_mutex m_mutex;
   double m_currentPts; // used for stream length estimation
@@ -117,8 +120,8 @@ protected:
 
 private:
   bool Open(bool fileinfo);
-  bool OpenWithFFmpeg(AVInputFormat* iformat, const AVIOInterruptCB& int_cb);
-  bool OpenWithCURL(AVInputFormat* iformat);
+  bool OpenWithFFmpeg(const AVInputFormat* iformat, const AVIOInterruptCB& int_cb);
+  bool OpenWithCURL(const AVInputFormat* iformat);
   AVDictionary* GetFFMpegOptionsFromInput();
   void ResetVideoStreams();
   double ConvertTimestamp(int64_t pts, int den, int num);

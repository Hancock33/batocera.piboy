diff --git a/kernel/Makefile b/kernel/Makefile
index 2597080a4a..0d0dcc484d 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -164,16 +164,16 @@ COMPILE_TESTS = \
 #
 
 ifdef NV_BUILD_MODULE_INSTANCES
- EXTRA_CFLAGS += -DNV_BUILD_MODULE_INSTANCES=1
+ ccflags-y += -DNV_BUILD_MODULE_INSTANCES=1
  ifneq ($(NV_MODULE_SUFFIX),frontend)
- EXTRA_CFLAGS += -DNV_MODULE_INSTANCE=$(NV_MODULE_SUFFIX)
+ ccflags-y += -DNV_MODULE_INSTANCE=$(NV_MODULE_SUFFIX)
  endif
 else
- EXTRA_CFLAGS += -DNV_MODULE_INSTANCE=0
- EXTRA_CFLAGS += -DNV_BUILD_MODULE_INSTANCES=0
+ ccflags-y += -DNV_MODULE_INSTANCE=0
+ ccflags-y += -DNV_BUILD_MODULE_INSTANCES=0
 endif
 
-EXTRA_CFLAGS += -UDEBUG -U_DEBUG -DNDEBUG
+ccflags-y += -UDEBUG -U_DEBUG -DNDEBUG
 
 #
 # Include common definitions; we rely on the definition of the source path to
diff --git a/kernel/nvidia-modules-common.mk b/kernel/nvidia-modules-common.mk
index 0e4c228423..dfbe22a95e 100644
--- a/kernel/nvidia-modules-common.mk
+++ b/kernel/nvidia-modules-common.mk
@@ -37,8 +37,8 @@ obj-m := $(MODULE_NAME).o
 # warning types that are of little interest to us.
 #
 
-EXTRA_CFLAGS += -I$(src)
-EXTRA_CFLAGS += -Wall -MD $(DEFINES) $(INCLUDES) -Wsign-compare -Wno-cast-qual -Wno-error
+ccflags-y += -I$(src)
+ccflags-y += -Wall -MD $(DEFINES) $(INCLUDES) -Wsign-compare -Wno-cast-qual -Wno-error
 
 #
 # Output directory for the build; default to the source directory if not set.
@@ -116,13 +116,13 @@ MODULE_OBJECT := $(MODULE_NAME).ko
 # NVIDIA specific CFLAGS and #define's.
 #
 
-EXTRA_CFLAGS += -D__KERNEL__ -DMODULE -DNVRM -DNV_VERSION_STRING=\"340.108\" -Wno-unused-function -Wuninitialized -fno-strict-aliasing -mno-red-zone -mcmodel=kernel -DNV_UVM_ENABLE -D__linux__ -DNV_DEV_NAME=\"$(MODULE_NAME)\"
+ccflags-y += -D__KERNEL__ -DMODULE -DNVRM -DNV_VERSION_STRING=\"340.108\" -Wno-unused-function -Wuninitialized -fno-strict-aliasing -mno-red-zone -mcmodel=kernel -DNV_UVM_ENABLE -D__linux__ -DNV_DEV_NAME=\"$(MODULE_NAME)\"
 
 #
 # Detect SGI UV systems and apply system-specific optimizations.
 #
 ifneq ($(wildcard /proc/sgi_uv),)
- EXTRA_CFLAGS += -DNV_CONFIG_X86_UV
+ ccflags-y += -DNV_CONFIG_X86_UV
 endif
 
 #
diff --git a/kernel/uvm/Makefile b/kernel/uvm/Makefile
index ec24244344..74bddc7511 100644
--- a/kernel/uvm/Makefile
+++ b/kernel/uvm/Makefile
@@ -47,14 +47,14 @@
 UVM_BUILD_TYPE ?= release
 
 ifeq ($(UVM_BUILD_TYPE),debug)
-  EXTRA_CFLAGS += -DDEBUG -O0 -g
+  ccflags-y += -DDEBUG -O0 -g
 else
     ifeq ($(UVM_BUILD_TYPE),develop)
 	  # -DDEBUG is required, in order to allow pr_devel() print statements to
 	  # work:
-      EXTRA_CFLAGS += -DDEBUG -O2
+      ccflags-y += -DDEBUG -O2
 	else
-      EXTRA_CFLAGS += -O2
+      ccflags-y += -O2
     endif
 endif
 
@@ -201,9 +201,9 @@ ifneq ($(RM_ENABLED),0)
     NV_DEFINES += -DNVIDIA_UVM_RM_ENABLED
 endif
 
-EXTRA_CFLAGS += $(NV_DEFINES) $(NV_TARGET_DEFINES) $(NV_INCLUDES)
+ccflags-y += $(NV_DEFINES) $(NV_TARGET_DEFINES) $(NV_INCLUDES)
 
-ccflags-y += $(EXTRA_CFLAGS)
+ccflags-y += $(ccflags-y)
 
 RM_MODULE_SYMVERS:= $(RM_OUT_DIR)/Module.symvers
 UVM_MODULE_SYMVERS:= $(obj)/../Module.symvers
@@ -229,7 +229,7 @@ ifeq ($(NV_VERBOSE),1)
 	@echo "NVIDIA UVM: CC=$(CC), HOST_CC=$(HOST_CC) NV_TARGET_ARCH=$(NV_TARGET_ARCH)"
 	@echo "NVIDIA UVM: CONFTEST=$(CONFTEST)"
 	@echo "KERNEL_SOURCES: $(KERNEL_SOURCES)"
-	@echo "EXTRA_CFLAGS: $(EXTRA_CFLAGS)"
+	@echo "ccflags-y: $(ccflags-y)"
 endif
 
 .PHONY: debug_diagnostics_printing
diff --git a/kernel/nv.c b/kernel/nv.c
index be4e0f8062..73c2d3ba77 100644
--- a/kernel/nv.c
+++ b/kernel/nv.c
@@ -2447,7 +2447,7 @@ int NV_API_CALL nv_stop_rc_timer(
 
     nv_printf(NV_DBG_INFO, "NVRM: stopping rc timer\n");
     nv->rc_timer_enabled = 0;
-    del_timer_sync(&nvl->rc_timer);
+    timer_delete_sync(&nvl->rc_timer);
     nv_printf(NV_DBG_INFO, "NVRM: rc timer stopped\n");
 
     return 0;
diff --git a/kernel/nv-mmap.c b/kernel/nv-mmap.c
index cbdabe1381..feaf2b7528 100644
--- a/kernel/nv-mmap.c
+++ b/kernel/nv-mmap.c
@@ -312,10 +312,12 @@ int nvidia_mmap(
             goto done;
         }
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
-        vm_flags_set(vma, VM_IO);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+       vm_flags_reset(vma, vma->vm_flags | VM_IO);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
+       vm_flags_set(vma, VM_IO);
 #else
-        vma->vm_flags |= VM_IO;
+       vma->vm_flags |= VM_IO;
 #endif
     }
     else
@@ -367,12 +369,13 @@ int nvidia_mmap(
 
         NV_PRINT_AT(NV_DBG_MEMINFO, at);
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
-        vm_flags_set(vma, VM_IO | VM_LOCKED | VM_RESERVED);
-        vm_flags_set(vma, VM_DONTEXPAND | VM_DONTDUMP);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+       vm_flags_reset(vma, vma->vm_flags | (VM_IO | VM_LOCKED | VM_RESERVED | VM_DONTEXPAND | VM_DONTDUMP));
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
+       vm_flags_set(vma, VM_IO | VM_LOCKED | VM_RESERVED);
+       vm_flags_set(vma, VM_DONTEXPAND | VM_DONTDUMP);
 #else
-        vma->vm_flags |= (VM_IO | VM_LOCKED | VM_RESERVED);
-        vma->vm_flags |= (VM_DONTEXPAND | VM_DONTDUMP);
+       vma->vm_flags |= (VM_IO | VM_LOCKED | VM_RESERVED | VM_DONTEXPAND | VM_DONTDUMP);
 #endif
     }
 
@@ -383,12 +386,14 @@ int nvidia_mmap(
         if ((prot & NV_PROTECT_WRITEABLE) == 0)
         {
             vma->vm_page_prot = NV_PGPROT_READ_ONLY(vma->vm_page_prot);
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
-            vm_flags_clear(vma, VM_WRITE);
-            vm_flags_clear(vma, VM_MAYWRITE);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+        vm_flags_reset(vma, vma->vm_flags & ~(VM_WRITE | VM_MAYWRITE));
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
+        vm_flags_clear(vma, VM_WRITE);
+        vm_flags_clear(vma, VM_MAYWRITE);
 #else
-            vma->vm_flags &= ~VM_WRITE;
-            vma->vm_flags &= ~VM_MAYWRITE;
+        vma->vm_flags &= ~VM_WRITE;
+        vma->vm_flags &= ~VM_MAYWRITE;
 #endif
         }
 
diff --git a/kernel/uvm/nvidia_uvm_lite.c b/kernel/uvm/nvidia_uvm_lite.c
index 6b76dbbe1a..4a19b490bd 100644
--- a/kernel/uvm/nvidia_uvm_lite.c
+++ b/kernel/uvm/nvidia_uvm_lite.c
@@ -1524,7 +1524,9 @@ static int uvmlite_mmap(struct file * filp, struct vm_area_struct * vma)
 
         vma->vm_ops   = &uvmlite_vma_ops;
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+       vm_flags_reset(vma, vma->vm_flags | VM_DONTCOPY | VM_DONTEXPAND);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
         // Prohibit copying the vma on fork().
         vm_flags_set(vma, VM_DONTCOPY);
         // Prohibt mremap() that would expand the vma.
@@ -1553,7 +1555,9 @@ static int uvmlite_mmap(struct file * filp, struct vm_area_struct * vma)
             return -EINVAL;
 
         vma->vm_ops = &counters_vma_ops;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+       vm_flags_reset(vma, (vma->vm_flags & ~VM_MAYWRITE) | VM_MIXEDMAP);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
         vm_flags_clear(vma, VM_MAYWRITE);
         // prevent vm_insert_page from modifying the vma's flags:
         vm_flags_set(vma, VM_MIXEDMAP);
@@ -2540,7 +2544,9 @@ static void _set_vma_inaccessible(struct vm_area_struct * vma)
     // Subsequent access from userspace after the pages are unmapped will cause
     // a SIGSEGV.
     //
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+    vm_flags_reset(vma, vma->vm_flags & ~(VM_READ | VM_MAYREAD | VM_WRITE | VM_MAYWRITE));
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
     vm_flags_clear(vma, VM_READ|VM_MAYREAD);
     vm_flags_clear(vma, VM_WRITE|VM_MAYWRITE);
 #else
@@ -2554,7 +2560,9 @@ static void _set_vma_inaccessible(struct vm_area_struct * vma)
 //
 static void _set_vma_accessible(struct vm_area_struct * vma)
 {
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+    vm_flags_reset(vma, vma->vm_flags | VM_READ|VM_MAYREAD | VM_WRITE|VM_MAYWRITE);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
     vm_flags_set(vma, VM_READ|VM_MAYREAD);
     vm_flags_set(vma, VM_WRITE|VM_MAYWRITE);
 #else

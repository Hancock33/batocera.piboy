diff --git a/SPIRV/GlslangToSpv.cpp b/SPIRV/GlslangToSpv.cpp
index 79bcd139..3fef6077 100755
--- a/SPIRV/GlslangToSpv.cpp
+++ b/SPIRV/GlslangToSpv.cpp
@@ -4513,27 +4513,26 @@ spv::Id TGlslangToSpvTraverser::convertGlslangToSpvType(const glslang::TType& ty
 
         std::vector<spv::IdImmediate> operands;
         for (const auto& typeParam : spirvType.typeParams) {
-            if (typeParam.getAsConstant() != nullptr) {
+            if (typeParam.constant != nullptr) {
                 // Constant expression
-                auto constant = typeParam.getAsConstant();
-                if (constant->isLiteral()) {
-                    if (constant->getBasicType() == glslang::EbtFloat) {
-                        float floatValue = static_cast<float>(constant->getConstArray()[0].getDConst());
+                if (typeParam.constant->isLiteral()) {
+                    if (typeParam.constant->getBasicType() == glslang::EbtFloat) {
+                        float floatValue = static_cast<float>(typeParam.constant->getConstArray()[0].getDConst());
                         unsigned literal;
                         static_assert(sizeof(literal) == sizeof(floatValue), "sizeof(unsigned) != sizeof(float)");
                         memcpy(&literal, &floatValue, sizeof(literal));
                         operands.push_back({false, literal});
-                    } else if (constant->getBasicType() == glslang::EbtInt) {
-                        unsigned literal = constant->getConstArray()[0].getIConst();
+                    } else if (typeParam.constant->getBasicType() == glslang::EbtInt) {
+                        unsigned literal = typeParam.constant->getConstArray()[0].getIConst();
                         operands.push_back({false, literal});
-                    } else if (constant->getBasicType() == glslang::EbtUint) {
-                        unsigned literal = constant->getConstArray()[0].getUConst();
+                    } else if (typeParam.constant->getBasicType() == glslang::EbtUint) {
+                        unsigned literal = typeParam.constant->getConstArray()[0].getUConst();
                         operands.push_back({false, literal});
-                    } else if (constant->getBasicType() == glslang::EbtBool) {
-                        unsigned literal = constant->getConstArray()[0].getBConst();
+                    } else if (typeParam.constant->getBasicType() == glslang::EbtBool) {
+                        unsigned literal = typeParam.constant->getConstArray()[0].getBConst();
                         operands.push_back({false, literal});
-                    } else if (constant->getBasicType() == glslang::EbtString) {
-                        auto str = constant->getConstArray()[0].getSConst()->c_str();
+                    } else if (typeParam.constant->getBasicType() == glslang::EbtString) {
+                        auto str = typeParam.constant->getConstArray()[0].getSConst()->c_str();
                         unsigned literal = 0;
                         char* literalPtr = reinterpret_cast<char*>(&literal);
                         unsigned charCount = 0;
@@ -4558,11 +4557,11 @@ spv::Id TGlslangToSpvTraverser::convertGlslangToSpvType(const glslang::TType& ty
                     } else
                         assert(0); // Unexpected type
                 } else
-                    operands.push_back({true, createSpvConstant(*constant)});
+                    operands.push_back({true, createSpvConstant(*typeParam.constant)});
             } else {
                 // Type specifier
-                assert(typeParam.getAsType() != nullptr);
-                operands.push_back({true, convertGlslangToSpvType(*typeParam.getAsType())});
+                assert(typeParam.type != nullptr);
+                operands.push_back({true, convertGlslangToSpvType(*typeParam.type)});
             }
         }
 
diff --git a/glslang/Include/SpirvIntrinsics.h b/glslang/Include/SpirvIntrinsics.h
index 0082a4d4..bfb551e4 100644
--- a/glslang/Include/SpirvIntrinsics.h
+++ b/glslang/Include/SpirvIntrinsics.h
@@ -39,7 +39,6 @@
 // GL_EXT_spirv_intrinsics
 //
 #include "Common.h"
-#include <variant>
 
 namespace glslang {
 
@@ -97,27 +96,23 @@ struct TSpirvInstruction {
 struct TSpirvTypeParameter {
     POOL_ALLOCATOR_NEW_DELETE(GetThreadPoolAllocator())
 
-    TSpirvTypeParameter(const TIntermConstantUnion* arg) { value = arg; }
-    TSpirvTypeParameter(const TType* arg) { value = arg; }
-
-    const TIntermConstantUnion* getAsConstant() const
+    TSpirvTypeParameter(const TIntermConstantUnion* arg)
     {
-        if (value.index() == 0)
-            return std::get<const TIntermConstantUnion*>(value);
-        return nullptr;
+        constant = arg;
+        type = nullptr;
     }
-    const TType* getAsType() const
+
+    TSpirvTypeParameter(const TType *arg)
     {
-        if (value.index() == 1)
-            return std::get<const TType*>(value);
-        return nullptr;
+        constant = nullptr;
+        type = arg;
     }
 
     bool operator==(const TSpirvTypeParameter& rhs) const;
     bool operator!=(const TSpirvTypeParameter& rhs) const { return !operator==(rhs); }
 
-    // Parameter value: constant expression or type specifier
-    std::variant<const TIntermConstantUnion*, const TType*> value;
+    const TIntermConstantUnion* constant; // Constant expression
+    const TType* type;                    // Type specifier
 };
 
 typedef TVector<TSpirvTypeParameter> TSpirvTypeParameters;
diff --git a/glslang/MachineIndependent/SpirvIntrinsics.cpp b/glslang/MachineIndependent/SpirvIntrinsics.cpp
index 1d08797a..4e130c31 100644
--- a/glslang/MachineIndependent/SpirvIntrinsics.cpp
+++ b/glslang/MachineIndependent/SpirvIntrinsics.cpp
@@ -45,11 +45,11 @@ namespace glslang {
 
 bool TSpirvTypeParameter::operator==(const TSpirvTypeParameter& rhs) const
 {
-    if (getAsConstant() != nullptr)
-        return getAsConstant()->getConstArray() == rhs.getAsConstant()->getConstArray();
+    if (constant != nullptr)
+        return constant->getConstArray() == rhs.constant->getConstArray();
 
-    assert(getAsType() != nullptr);
-    return *getAsType() == *rhs.getAsType();
+    assert(type != nullptr);
+    return *type == *rhs.type;
 }
 
 //

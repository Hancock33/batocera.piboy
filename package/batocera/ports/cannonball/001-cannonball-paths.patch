diff --git a/src/main/frontend/config.cpp b/src/main/frontend/config.cpp
index ee21251..846ecd6 100644
--- a/src/main/frontend/config.cpp
+++ b/src/main/frontend/config.cpp
@@ -87,9 +87,9 @@ void Config::load()
     // ------------------------------------------------------------------------
     // Data Settings
     // ------------------------------------------------------------------------
-    data.rom_path         = pt_config.get("data.rompath", "roms/");  // Path to ROMs
-    data.res_path         = pt_config.get("data.respath", "res/");   // Path to ROMs
-    data.save_path        = pt_config.get("data.savepath", "./");    // Path to Save Data
+    data.rom_path         = "/userdata/roms/cannonball/";       // Path to ROMs
+    data.res_path         = "/userdata/roms/cannonball/res/";   // Path to ROMs
+    data.save_path        = "/userdata/saves/cannonball/";      // Path to Save Data
     data.crc32            = pt_config.get("data.crc32", 1);
 
     data.file_scores      = data.save_path + "hiscores.xml";
@@ -110,26 +110,26 @@ void Config::load()
     // Video Settings
     // ------------------------------------------------------------------------
    
-    video.mode       = pt_config.get("video.mode",               2); // Video Mode: Default is Full Screen 
-    video.scale      = pt_config.get("video.window.scale",       2); // Video Scale: Default is 2x    
-    video.scanlines  = pt_config.get("video.scanlines",          0); // Scanlines
-    video.fps        = pt_config.get("video.fps",                2); // Default is 60 fps
-    video.fps_count  = pt_config.get("video.fps_counter",        0); // FPS Counter
-    video.widescreen = pt_config.get("video.widescreen",         1); // Enable Widescreen Mode
-    video.hires      = pt_config.get("video.hires",              0); // Hi-Resolution Mode
-    video.filtering  = pt_config.get("video.filtering",          0); // Open GL Filtering Mode
-    video.vsync      = pt_config.get("video.vsync",              1); // Use V-Sync where available (e.g. Open GL)
-    video.shadow     = pt_config.get("video.shadow",             0); // Shadow Settings
+    video.mode       = pt_config.get("config.video.mode",               2); // Video Mode: Default is Full Screen 
+    video.scale      = pt_config.get("config.video.window.scale",       2); // Video Scale: Default is 2x    
+    video.scanlines  = pt_config.get("config.video.scanlines",          0); // Scanlines
+    video.fps        = pt_config.get("config.video.fps",                2); // Default is 60 fps
+    video.fps_count  = pt_config.get("config.video.fps_counter",        0); // FPS Counter
+    video.widescreen = pt_config.get("config.video.widescreen",         1); // Enable Widescreen Mode
+    video.hires      = pt_config.get("config.video.hires",              0); // Hi-Resolution Mode
+    video.filtering  = pt_config.get("config.video.filtering",          0); // Open GL Filtering Mode
+    video.vsync      = pt_config.get("config.video.vsync",              1); // Use V-Sync where available (e.g. Open GL)
+    video.shadow     = pt_config.get("config.video.shadow",             0); // Shadow Settings
 
     // ------------------------------------------------------------------------
     // Sound Settings
     // ------------------------------------------------------------------------
-    sound.enabled     = pt_config.get("sound.enable",      1);
-    sound.rate        = pt_config.get("sound.rate",        44100);
-    sound.advertise   = pt_config.get("sound.advertise",   1);
-    sound.preview     = pt_config.get("sound.preview",     1);
-    sound.fix_samples = pt_config.get("sound.fix_samples", 1);
-    sound.music_timer = pt_config.get("sound.music_timer", 0);
+    sound.enabled     = pt_config.get("config.sound.enable",      1);
+    sound.rate        = pt_config.get("config.sound.rate",        44100);
+    sound.advertise   = pt_config.get("config.sound.advertise",   1);
+    sound.preview     = pt_config.get("config.sound.preview",     1);
+    sound.fix_samples = pt_config.get("config.sound.fix_samples", 1);
+    sound.music_timer = pt_config.get("config.sound.music_timer", 0);
 
     // Custom Music. Search for enabled custom tracks
     for (int i = 0;; i++)
@@ -161,91 +161,92 @@ void Config::load()
     // ------------------------------------------------------------------------
     // SMARTYPI Settings
     // ------------------------------------------------------------------------
-    smartypi.enabled = pt_config.get("smartypi.<xmlattr>.enabled", 0);
-    smartypi.ouputs  = pt_config.get("smartypi.outputs", 1);
-    smartypi.cabinet = pt_config.get("smartypi.cabinet", 1);
+    smartypi.enabled = pt_config.get("config.smartypi.<xmlattr>.enabled", 0);
+    smartypi.ouputs  = pt_config.get("config.smartypi.outputs", 1);
+    smartypi.cabinet = pt_config.get("config.smartypi.cabinet", 1);
 
     // ------------------------------------------------------------------------
     // Controls
     // ------------------------------------------------------------------------
-    controls.gear          = pt_config.get("controls.gear", 0);
-    controls.steer_speed   = pt_config.get("controls.steerspeed", 3);
-    controls.pedal_speed   = pt_config.get("controls.pedalspeed", 4);
-    controls.rumble        = pt_config.get("controls.rumble", 1.0f);
-    controls.keyconfig[0]  = pt_config.get("controls.keyconfig.up",      273);
-    controls.keyconfig[1]  = pt_config.get("controls.keyconfig.down",    274);
-    controls.keyconfig[2]  = pt_config.get("controls.keyconfig.left",    276);
-    controls.keyconfig[3]  = pt_config.get("controls.keyconfig.right",   275);
-    controls.keyconfig[4]  = pt_config.get("controls.keyconfig.acc",     122);
-    controls.keyconfig[5]  = pt_config.get("controls.keyconfig.brake",   120);
-    controls.keyconfig[6]  = pt_config.get("controls.keyconfig.gear1",   32);
-    controls.keyconfig[7]  = pt_config.get("controls.keyconfig.gear2",   32);
-    controls.keyconfig[8]  = pt_config.get("controls.keyconfig.start",   49);
-    controls.keyconfig[9]  = pt_config.get("controls.keyconfig.coin",    53);
-    controls.keyconfig[10] = pt_config.get("controls.keyconfig.menu",    286);
-    controls.keyconfig[11] = pt_config.get("controls.keyconfig.view",    304);
-    controls.padconfig[0]  = pt_config.get("controls.padconfig.acc",     -1);
-    controls.padconfig[1]  = pt_config.get("controls.padconfig.brake",   -1);
-    controls.padconfig[2]  = pt_config.get("controls.padconfig.gear1",   -1);
-    controls.padconfig[3]  = pt_config.get("controls.padconfig.gear2",   -1);
-    controls.padconfig[4]  = pt_config.get("controls.padconfig.start",   -1);
-    controls.padconfig[5]  = pt_config.get("controls.padconfig.coin",    -1);
-    controls.padconfig[6]  = pt_config.get("controls.padconfig.menu",    -1);
-    controls.padconfig[7]  = pt_config.get("controls.padconfig.view",    -1);
-    controls.padconfig[8]  = pt_config.get("controls.padconfig.up",      -1);
-    controls.padconfig[9]  = pt_config.get("controls.padconfig.down",    -1);
-    controls.padconfig[10] = pt_config.get("controls.padconfig.left",    -1);
-    controls.padconfig[11] = pt_config.get("controls.padconfig.right",   -1);
-    controls.padconfig[12] = pt_config.get("controls.padconfig.limit_l", -1);
-    controls.padconfig[13] = pt_config.get("controls.padconfig.limit_c", -1);
-    controls.padconfig[14] = pt_config.get("controls.padconfig.limit_r", -1);
-    controls.analog        = pt_config.get("controls.analog.<xmlattr>.enabled", 1);
-    controls.pad_id        = pt_config.get("controls.pad_id", 0);
-    controls.axis[0]       = pt_config.get("controls.analog.axis.wheel", -1);
-    controls.axis[1]       = pt_config.get("controls.analog.axis.accel", -1);
-    controls.axis[2]       = pt_config.get("controls.analog.axis.brake", -1);
-    controls.axis[3]       = pt_config.get("controls.analog.axis.motor", -1);
-    controls.invert[1]     = pt_config.get("controls.analog.axis.accel.<xmlattr>.invert", 0);
-    controls.invert[2]     = pt_config.get("controls.analog.axis.brake.<xmlattr>.invert", 0);
-    controls.asettings[0]  = pt_config.get("controls.analog.wheel.zone", 75);
-    controls.asettings[1]  = pt_config.get("controls.analog.wheel.dead", 0);
+    controls.gear          = pt_config.get("config.controls.gear", 0);
+    controls.steer_speed   = pt_config.get("config.controls.steerspeed", 3);
+    controls.pedal_speed   = pt_config.get("config.controls.pedalspeed", 4);
+    controls.rumble        = pt_config.get("config.controls.rumble", 1.0f);
+    controls.keyconfig[0]  = pt_config.get("config.controls.keyconfig.up",      273);
+    controls.keyconfig[1]  = pt_config.get("config.controls.keyconfig.down",    274);
+    controls.keyconfig[2]  = pt_config.get("config.controls.keyconfig.left",    276);
+    controls.keyconfig[3]  = pt_config.get("config.controls.keyconfig.right",   275);
+    controls.keyconfig[4]  = pt_config.get("config.controls.keyconfig.acc",     122);
+    controls.keyconfig[5]  = pt_config.get("config.controls.keyconfig.brake",   120);
+    controls.keyconfig[6]  = pt_config.get("config.controls.keyconfig.gear1",   32);
+    controls.keyconfig[7]  = pt_config.get("config.controls.keyconfig.gear2",   32);
+    controls.keyconfig[8]  = pt_config.get("config.controls.keyconfig.start",   49);
+    controls.keyconfig[9]  = pt_config.get("config.controls.keyconfig.coin",    53);
+    controls.keyconfig[10] = pt_config.get("config.controls.keyconfig.menu",    286);
+    controls.keyconfig[11] = pt_config.get("config.controls.keyconfig.view",    304);
+    controls.padconfig[0]  = pt_config.get("config.controls.padconfig.acc",     1);
+    controls.padconfig[1]  = pt_config.get("config.controls.padconfig.brake",   4);
+    controls.padconfig[2]  = pt_config.get("config.controls.padconfig.gear1",   -1);
+    controls.padconfig[3]  = pt_config.get("config.controls.padconfig.gear2",   3);
+    controls.padconfig[4]  = pt_config.get("config.controls.padconfig.start",   9);
+    controls.padconfig[5]  = pt_config.get("config.controls.padconfig.coin",    8);
+    controls.padconfig[6]  = pt_config.get("config.controls.padconfig.menu",    5);
+    controls.padconfig[7]  = pt_config.get("config.controls.padconfig.view",    7);
+    controls.padconfig[8]  = pt_config.get("config.controls.padconfig.up",      -1);
+    controls.padconfig[9]  = pt_config.get("config.controls.padconfig.down",    -1);
+    controls.padconfig[10] = pt_config.get("config.controls.padconfig.left",    -1);
+    controls.padconfig[11] = pt_config.get("config.controls.padconfig.right",   -1);
+    controls.padconfig[12] = pt_config.get("config.controls.padconfig.limit_l", -1);
+    controls.padconfig[13] = pt_config.get("config.controls.padconfig.limit_c", -1);
+    controls.padconfig[14] = pt_config.get("config.controls.padconfig.limit_r", -1);
+    controls.padconfig[15] = pt_config.get("config.controls.padconfig.hotkey",  10);    
+    controls.analog        = pt_config.get("config.controls.analog.<xmlattr>.enabled", 0);
+    controls.pad_id        = pt_config.get("config.controls.pad_id", 0);
+    controls.axis[0]       = pt_config.get("config.controls.analog.axis.wheel", -1);
+    controls.axis[1]       = pt_config.get("config.controls.analog.axis.accel", -1);
+    controls.axis[2]       = pt_config.get("config.controls.analog.axis.brake", -1);
+    controls.axis[3]       = pt_config.get("config.controls.analog.axis.motor", -1);
+    controls.invert[1]     = pt_config.get("config.controls.analog.axis.accel.<xmlattr>.invert", 0);
+    controls.invert[2]     = pt_config.get("config.controls.analog.axis.brake.<xmlattr>.invert", 0);
+    controls.asettings[0]  = pt_config.get("config.controls.analog.wheel.zone", 75);
+    controls.asettings[1]  = pt_config.get("config.controls.analog.wheel.dead", 0);
     
-    controls.haptic        = pt_config.get("controls.analog.haptic.<xmlattr>.enabled", 0);
-    controls.max_force     = pt_config.get("controls.analog.haptic.max_force", 9000);
-    controls.min_force     = pt_config.get("controls.analog.haptic.min_force", 8500);
-    controls.force_duration= pt_config.get("controls.analog.haptic.force_duration", 20);
+    controls.haptic        = pt_config.get("config.controls.analog.haptic.<xmlattr>.enabled", 0);
+    controls.max_force     = pt_config.get("config.controls.analog.haptic.max_force", 9000);
+    controls.min_force     = pt_config.get("config.controls.analog.haptic.min_force", 8500);
+    controls.force_duration= pt_config.get("config.controls.analog.haptic.force_duration", 20);
 
     // ------------------------------------------------------------------------
     // Engine Settings
     // ------------------------------------------------------------------------
 
-    engine.dip_time      = pt_config.get("engine.time",    0);
-    engine.dip_traffic   = pt_config.get("engine.traffic", 1);
+    engine.dip_time      = pt_config.get("config.engine.time",    0);
+    engine.dip_traffic   = pt_config.get("config.engine.traffic", 1);
     
     engine.freeze_timer    = engine.dip_time == 4;
     engine.disable_traffic = engine.dip_traffic == 4;
     engine.dip_time    &= 3;
     engine.dip_traffic &= 3;
 
-    engine.freeplay      = pt_config.get("engine.freeplay",        0) != 0;
-    engine.jap           = pt_config.get("engine.japanese_tracks", 0);
-    engine.prototype     = pt_config.get("engine.prototype",       0);
+    engine.freeplay      = pt_config.get("config.engine.freeplay",        0) != 0;
+    engine.jap           = pt_config.get("config.engine.japanese_tracks", 0);
+    engine.prototype     = pt_config.get("config.engine.prototype",       0);
     
     // Additional Level Objects
-    engine.level_objects   = pt_config.get("engine.levelobjects", 1);
-    engine.randomgen       = pt_config.get("engine.randomgen",    1);
+    engine.level_objects   = pt_config.get("config.engine.levelobjects", 1);
+    engine.randomgen       = pt_config.get("config.engine.randomgen",    1);
     engine.fix_bugs_backup = 
-    engine.fix_bugs        = pt_config.get("engine.fix_bugs",     1) != 0;
-    engine.fix_timer       = pt_config.get("engine.fix_timer",    0) != 0;
-    engine.layout_debug    = pt_config.get("engine.layout_debug", 0) != 0;
-    engine.hiscore_delete  = pt_config.get("scores.delete_last_entry", 1);
-    engine.hiscore_timer   = pt_config.get("scores.hiscore_timer", 0);
-    engine.new_attract     = pt_config.get("engine.new_attract", 1) != 0;
-    engine.offroad         = pt_config.get("engine.offroad", 0);
-    engine.grippy_tyres    = pt_config.get("engine.grippy_tyres", 0);
-    engine.bumper          = pt_config.get("engine.bumper", 0);
-    engine.turbo           = pt_config.get("engine.turbo", 0);
-    engine.car_pal         = pt_config.get("engine.car_color", 0);
+    engine.fix_bugs        = pt_config.get("config.engine.fix_bugs",     1) != 0;
+    engine.fix_timer       = pt_config.get("config.engine.fix_timer",    0) != 0;
+    engine.layout_debug    = pt_config.get("config.engine.layout_debug", 0) != 0;
+    engine.hiscore_delete  = pt_config.get("config.scores.delete_last_entry", 1);
+    engine.hiscore_timer   = pt_config.get("config.scores.hiscore_timer", 0);
+    engine.new_attract     = pt_config.get("config.engine.new_attract", 1) != 0;
+    engine.offroad         = pt_config.get("config.engine.offroad", 0);
+    engine.grippy_tyres    = pt_config.get("config.engine.grippy_tyres", 0);
+    engine.bumper          = pt_config.get("config.engine.bumper", 0);
+    engine.turbo           = pt_config.get("config.engine.turbo", 0);
+    engine.car_pal         = pt_config.get("config.engine.car_color", 0);
 
     if (!engine.hiscore_timer)
         engine.hiscore_timer = HIGHSCORE_TIMER;
@@ -260,85 +261,85 @@ void Config::load()
     // Time Trial Mode
     // ------------------------------------------------------------------------
 
-    ttrial.laps    = pt_config.get("time_trial.laps",    5);
-    ttrial.traffic = pt_config.get("time_trial.traffic", 3);
+    ttrial.laps    = pt_config.get("config.time_trial.laps",    5);
+    ttrial.traffic = pt_config.get("config.time_trial.traffic", 3);
 
-    cont_traffic   = pt_config.get("continuous.traffic", 3);
+    cont_traffic   = pt_config.get("config.continuous.traffic", 3);
 }
 
 bool Config::save()
 {
     // Save stuff
-    pt_config.put("video.mode",               video.mode);
-    pt_config.put("video.window.scale",       video.scale);
-    pt_config.put("video.scanlines",          video.scanlines);
-    pt_config.put("video.fps",                video.fps);
-    pt_config.put("video.widescreen",         video.widescreen);
-    pt_config.put("video.hires",              video.hires);
-
-    pt_config.put("sound.enable",             sound.enabled);
-    pt_config.put("sound.advertise",          sound.advertise);
-    pt_config.put("sound.preview",            sound.preview);
-    pt_config.put("sound.fix_samples",        sound.fix_samples);
+    pt_config.put("config.video.mode",               video.mode);
+    pt_config.put("config.video.window.scale",       video.scale);
+    pt_config.put("config.video.scanlines",          video.scanlines);
+    pt_config.put("config.video.fps",                video.fps);
+    pt_config.put("config.video.widescreen",         video.widescreen);
+    pt_config.put("config.video.hires",              video.hires);
+
+    pt_config.put("config.sound.enable",             sound.enabled);
+    pt_config.put("config.sound.advertise",          sound.advertise);
+    pt_config.put("config.sound.preview",            sound.preview);
+    pt_config.put("config.sound.fix_samples",        sound.fix_samples);
 
     if (config.smartypi.enabled)
-        pt_config.put("smartypi.cabinet",     config.smartypi.cabinet);
-
-    pt_config.put("controls.gear",            controls.gear);
-    pt_config.put("controls.rumble",          controls.rumble);
-    pt_config.put("controls.steerspeed",      controls.steer_speed);
-    pt_config.put("controls.pedalspeed",      controls.pedal_speed);
-    pt_config.put("controls.keyconfig.up",    controls.keyconfig[0]);
-    pt_config.put("controls.keyconfig.down",  controls.keyconfig[1]);
-    pt_config.put("controls.keyconfig.left",  controls.keyconfig[2]);
-    pt_config.put("controls.keyconfig.right", controls.keyconfig[3]);
-    pt_config.put("controls.keyconfig.acc",   controls.keyconfig[4]);
-    pt_config.put("controls.keyconfig.brake", controls.keyconfig[5]);
-    pt_config.put("controls.keyconfig.gear1", controls.keyconfig[6]);
-    pt_config.put("controls.keyconfig.gear2", controls.keyconfig[7]);
-    pt_config.put("controls.keyconfig.start", controls.keyconfig[8]);
-    pt_config.put("controls.keyconfig.coin",  controls.keyconfig[9]);
-    pt_config.put("controls.keyconfig.menu",  controls.keyconfig[10]);
-    pt_config.put("controls.keyconfig.view",  controls.keyconfig[11]);
-    pt_config.put("controls.padconfig.acc",   controls.padconfig[0]);
-    pt_config.put("controls.padconfig.brake", controls.padconfig[1]);
-    pt_config.put("controls.padconfig.gear1", controls.padconfig[2]);
-    pt_config.put("controls.padconfig.gear2", controls.padconfig[3]);
-    pt_config.put("controls.padconfig.start", controls.padconfig[4]);
-    pt_config.put("controls.padconfig.coin",  controls.padconfig[5]);
-    pt_config.put("controls.padconfig.menu",  controls.padconfig[6]);
-    pt_config.put("controls.padconfig.view",  controls.padconfig[7]);
-    pt_config.put("controls.padconfig.up",    controls.padconfig[8]);
-    pt_config.put("controls.padconfig.down",  controls.padconfig[9]);
-    pt_config.put("controls.padconfig.left",  controls.padconfig[10]);
-    pt_config.put("controls.padconfig.right", controls.padconfig[11]);
-    pt_config.put("controls.analog.<xmlattr>.enabled", controls.analog);
-    pt_config.put("controls.analog.axis.wheel", controls.axis[0]);
-    pt_config.put("controls.analog.axis.accel", controls.axis[1]);
-    pt_config.put("controls.analog.axis.brake", controls.axis[2]);
-
-    pt_config.put("engine.freeplay",        (int) engine.freeplay);
-    pt_config.put("engine.time",            engine.freeze_timer ? 4 : engine.dip_time);
-    pt_config.put("engine.traffic",         engine.disable_traffic ? 4 : engine.dip_traffic);
-    pt_config.put("engine.japanese_tracks", engine.jap);
-    pt_config.put("engine.prototype",       engine.prototype);
-    pt_config.put("engine.levelobjects",    engine.level_objects);
-    pt_config.put("engine.fix_bugs",        (int) engine.fix_bugs);
-    pt_config.put("engine.fix_timer",       (int) engine.fix_timer);
-    pt_config.put("engine.new_attract",     engine.new_attract);
-    pt_config.put("engine.offroad",         (int) engine.offroad);
-    pt_config.put("engine.grippy_tyres",    (int) engine.grippy_tyres);
-    pt_config.put("engine.bumper",          (int) engine.bumper);
-    pt_config.put("engine.turbo",           (int) engine.turbo);
-    pt_config.put("engine.car_color",       engine.car_pal);
-
-    pt_config.put("time_trial.laps",    ttrial.laps);
-    pt_config.put("time_trial.traffic", ttrial.traffic);
-    pt_config.put("continuous.traffic", cont_traffic), 
-
-    ttrial.laps    = pt_config.get("time_trial.laps",    5);
-    ttrial.traffic = pt_config.get("time_trial.traffic", 3);
-    cont_traffic   = pt_config.get("continuous.traffic", 3);
+        pt_config.put("config.smartypi.cabinet",     config.smartypi.cabinet);
+
+    pt_config.put("config.controls.gear",            controls.gear);
+    pt_config.put("config.controls.rumble",          controls.rumble);
+    pt_config.put("config.controls.steerspeed",      controls.steer_speed);
+    pt_config.put("config.controls.pedalspeed",      controls.pedal_speed);
+    pt_config.put("config.controls.keyconfig.up",    controls.keyconfig[0]);
+    pt_config.put("config.controls.keyconfig.down",  controls.keyconfig[1]);
+    pt_config.put("config.controls.keyconfig.left",  controls.keyconfig[2]);
+    pt_config.put("config.controls.keyconfig.right", controls.keyconfig[3]);
+    pt_config.put("config.controls.keyconfig.acc",   controls.keyconfig[4]);
+    pt_config.put("config.controls.keyconfig.brake", controls.keyconfig[5]);
+    pt_config.put("config.controls.keyconfig.gear1", controls.keyconfig[6]);
+    pt_config.put("config.controls.keyconfig.gear2", controls.keyconfig[7]);
+    pt_config.put("config.controls.keyconfig.start", controls.keyconfig[8]);
+    pt_config.put("config.controls.keyconfig.coin",  controls.keyconfig[9]);
+    pt_config.put("config.controls.keyconfig.menu",  controls.keyconfig[10]);
+    pt_config.put("config.controls.keyconfig.view",  controls.keyconfig[11]);
+    pt_config.put("config.controls.padconfig.acc",   controls.padconfig[0]);
+    pt_config.put("config.controls.padconfig.brake", controls.padconfig[1]);
+    pt_config.put("config.controls.padconfig.gear1", controls.padconfig[2]);
+    pt_config.put("config.controls.padconfig.gear2", controls.padconfig[3]);
+    pt_config.put("config.controls.padconfig.start", controls.padconfig[4]);
+    pt_config.put("config.controls.padconfig.coin",  controls.padconfig[5]);
+    pt_config.put("config.controls.padconfig.menu",  controls.padconfig[6]);
+    pt_config.put("config.controls.padconfig.view",  controls.padconfig[7]);
+    pt_config.put("config.controls.padconfig.up",    controls.padconfig[8]);
+    pt_config.put("config.controls.padconfig.down",  controls.padconfig[9]);
+    pt_config.put("config.controls.padconfig.left",  controls.padconfig[10]);
+    pt_config.put("config.controls.padconfig.right", controls.padconfig[11]);
+    pt_config.put("config.controls.analog.<xmlattr>.enabled", controls.analog);
+    pt_config.put("config.controls.analog.axis.wheel", controls.axis[0]);
+    pt_config.put("config.controls.analog.axis.accel", controls.axis[1]);
+    pt_config.put("config.controls.analog.axis.brake", controls.axis[2]);
+
+    pt_config.put("config.engine.freeplay",        (int) engine.freeplay);
+    pt_config.put("config.engine.time",            engine.freeze_timer ? 4 : engine.dip_time);
+    pt_config.put("config.engine.traffic",         engine.disable_traffic ? 4 : engine.dip_traffic);
+    pt_config.put("config.engine.japanese_tracks", engine.jap);
+    pt_config.put("config.engine.prototype",       engine.prototype);
+    pt_config.put("config.engine.levelobjects",    engine.level_objects);
+    pt_config.put("config.engine.fix_bugs",        (int) engine.fix_bugs);
+    pt_config.put("config.engine.fix_timer",       (int) engine.fix_timer);
+    pt_config.put("config.engine.new_attract",     engine.new_attract);
+    pt_config.put("config.engine.offroad",         (int) engine.offroad);
+    pt_config.put("config.engine.grippy_tyres",    (int) engine.grippy_tyres);
+    pt_config.put("config.engine.bumper",          (int) engine.bumper);
+    pt_config.put("config.engine.turbo",           (int) engine.turbo);
+    pt_config.put("config.engine.car_color",       engine.car_pal);
+
+    pt_config.put("config.time_trial.laps",    ttrial.laps);
+    pt_config.put("config.time_trial.traffic", ttrial.traffic);
+    pt_config.put("config.continuous.traffic", cont_traffic), 
+
+    ttrial.laps    = pt_config.get("config.time_trial.laps",    5);
+    ttrial.traffic = pt_config.get("config.time_trial.traffic", 3);
+    cont_traffic   = pt_config.get("config.continuous.traffic", 3);
 
     try
     {
@@ -550,4 +551,4 @@ void Config::inc_traffic()
     }
     else
         engine.dip_traffic++;
-}
\ No newline at end of file
+}
diff --git a/src/main/frontend/config.hpp b/src/main/frontend/config.hpp
index da3c721..705146e 100644
--- a/src/main/frontend/config.hpp
+++ b/src/main/frontend/config.hpp
@@ -96,7 +96,7 @@ struct controls_settings_t
     int gear;
     int steer_speed;   // Steering Digital Speed
     int pedal_speed;   // Pedal Digital Speed
-    int padconfig[15]; // Joypad Button Config
+    int padconfig[16]; // Joypad Button Config
     int keyconfig[12]; // Keyboard Button Config
     int pad_id;        // Use the N'th joystick on the system.
     int analog;        // Use analog controls
diff --git a/src/main/sdl2/input.cpp b/src/main/sdl2/input.cpp
index 3eb9bb0..7a3c187 100644
--- a/src/main/sdl2/input.cpp
+++ b/src/main/sdl2/input.cpp
@@ -12,6 +12,7 @@
 #include <cstring>
 #include <cstdlib> // abs
 #include "sdl2/input.hpp"
+#include "main.hpp"
 
 Input input;
 
@@ -364,6 +365,10 @@ void Input::handle_joy(const uint8_t button, const bool is_pressed)
     if (button == pad_config[12])  motor_limits[SW_LEFT]   = is_pressed;
     if (button == pad_config[13])  motor_limits[SW_CENTRE] = is_pressed;
     if (button == pad_config[14])  motor_limits[SW_RIGHT]  = is_pressed;
+    
+    static int hotkey = 0;
+    if (button == pad_config[15]) hotkey = is_pressed ? 1: 0;
+    if (button == pad_config[4] && hotkey == 1) cannonball::state = cannonball::STATE_QUIT;
 }
 
 void Input::handle_joy_hat(SDL_JoyHatEvent* evt)

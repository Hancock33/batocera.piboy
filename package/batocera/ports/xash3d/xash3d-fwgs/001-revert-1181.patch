diff --git a/wscript b/wscript
index 0e3afb73..1097e21c 100644
--- a/wscript
+++ b/wscript
@@ -348,6 +348,14 @@ def configure(conf):
 		conf.env.append_unique('CFLAGS', cflags)
 		conf.env.append_unique('CXXFLAGS', cxxflags)
 
+	# check if we can use C99 stdint
+	if conf.check_cc(header_name='stdint.h', mandatory=False):
+		# use system
+		conf.define('STDINT_H', 'stdint.h')
+	else:
+		# include portable stdint by Paul Hsich
+		conf.define('STDINT_H', 'pstdint.h')
+
 	conf.env.TESTS         = conf.options.TESTS
 	conf.env.ENABLE_UTILS  = conf.options.ENABLE_UTILS
 	conf.env.ENABLE_FUZZER = conf.options.ENABLE_FUZZER
@@ -371,16 +379,16 @@ def configure(conf):
 	conf.define_cond('XASH_ALL_SERVERS', conf.options.ALL_SERVERS)
 
 	# check if we can use C99 stdint
-	conf.define('STDINT_H', 'stdint.h' if conf.check_cc(header_name='stdint.h', mandatory=False) else 'pstdint.h')
+	#conf.define('STDINT_H', 'stdint.h' if conf.check_cc(header_name='stdint.h', mandatory=False) else 'pstdint.h')
 
 	# check if we can use alloca.h or malloc.h
-	if conf.check_cc(header_name='alloca.h', mandatory=False):
-		conf.define('ALLOCA_H', 'alloca.h')
-	elif conf.check_cc(header_name='malloc.h', mandatory=False):
-		conf.define('ALLOCA_H', 'malloc.h')
-	elif conf.check_cc(fragment = '''#include <stdlib.h>
-		int main(void) { alloca(1); }''', msg = 'Checking for alloca in stdlib.h'):
-		conf.define('ALLOCA_H', 'stdlib.h')
+	#if conf.check_cc(header_name='alloca.h', mandatory=False):
+	#	conf.define('ALLOCA_H', 'alloca.h')
+	#elif conf.check_cc(header_name='malloc.h', mandatory=False):
+	#	conf.define('ALLOCA_H', 'malloc.h')
+	#elif conf.check_cc(fragment = '''#include <stdlib.h>
+	#	int main(void) { alloca(1); }''', msg = 'Checking for alloca in stdlib.h'):
+	#	conf.define('ALLOCA_H', 'stdlib.h')
 
 	if conf.env.DEST_OS == 'nswitch':
 		conf.check_cfg(package='solder', args='--cflags --libs', uselib_store='SOLDER')
@@ -399,7 +407,16 @@ def configure(conf):
 		# Don't check them more than once, to save time
 		# Usually, they are always available
 		# but we need them in uselib
-		a = [ 'user32', 'shell32', 'gdi32', 'advapi32', 'dbghelp', 'psapi', 'ws2_32' ]
+		a = [
+			'user32',
+			'shell32',
+			'gdi32',
+			'advapi32',
+			'dbghelp',
+			'psapi',
+			'ws2_32'
+		]
+
 		if conf.env.COMPILER_CC == 'msvc':
 			for i in a:
 				conf.start_msg('Checking for MSVC library')
@@ -446,17 +463,18 @@ def configure(conf):
 	if conf.env.DEST_OS != 'win32':
 		strcasestr_frag = '''#include <string.h>
 int main(int argc, char **argv) { strcasestr(argv[1], argv[2]); return 0; }'''
-		strchrnul_frag  = '''#include <string.h>
-int main(int argc, char **argv) { strchrnul(argv[1], 'x'); return 0; }'''
-
-		def check_gnu_function(frag, msg, define):
-			if conf.check_cc(msg=msg, mandatory=False, fragment=frag):
-				conf.define(define, 1)
-			elif conf.check_cc(msg='... with _GNU_SOURCE?', mandatory=False, fragment=frag, defines='_GNU_SOURCE=1'):
-				conf.define(define, 1)
-				conf.define('_GNU_SOURCE', 1)
-		check_gnu_function(strcasestr_frag, 'Checking for strcasestr', 'HAVE_STRCASESTR')
-		check_gnu_function(strchrnul_frag, 'Checking for strchrnul', 'HAVE_STRCHRNUL')
+
+		if conf.check_cc(msg='Checking for strcasestr', mandatory=False, fragment=strcasestr_frag):
+			conf.define('HAVE_STRCASESTR', 1)
+		elif conf.check_cc(msg='... with _GNU_SOURCE?', mandatory=False, fragment=strcasestr_frag, defines='_GNU_SOURCE=1'):
+			conf.define('_GNU_SOURCE', 1)
+			conf.define('HAVE_STRCASESTR', 1)
+
+	# check if we can use alloca.h or malloc.h
+	if conf.check_cc(header_name='alloca.h', mandatory=False):
+		conf.define('ALLOCA_H', 'alloca.h')
+	elif conf.check_cc(header_name='malloc.h', mandatory=False):
+		conf.define('ALLOCA_H', 'malloc.h')
 
 	# indicate if we are packaging for Linux/BSD
 	conf.env.PACKAGING = conf.options.PACKAGING

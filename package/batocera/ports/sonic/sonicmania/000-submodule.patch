diff --git a/Makefile b/Makefile
index 998c35da..d2307eb2 100644
--- a/Makefile
+++ b/Makefile
@@ -1,10 +1,10 @@
 .DEFAULT_GOAL := all
 
 PKGCONFIG	=  pkg-config
-STRIP		?= strip
+STRIP		?= $(STRIP)
 
 STATIC		?= 0
-DEBUG		?= 1
+DEBUG		?= 0
 VERBOSE		?= 0
 PROFILE		?= 0
 
@@ -127,7 +127,7 @@ $(GAME_OBJDIR)/%.o: $(GAME_PREBUILD) %.c
 $(GAME_PATH): $(GAME_PRELINK) $(GAME_OBJECTS)
 	@echo linking game...
 	$(CXX) $(CXXFLAGS_ALL) $(LDFLAGS_ALL) $(GAME_LDFLAGS) $(GAME_OBJECTS) $(GAME_LIBS) -o $@ 
- 	$(STRIP) $@
+	$(STRIP) $@
 	@echo done linking game
 
 all: $(GAME_POSTLINK) $(GAME_PATH)
Submodule dependencies/RSDKv5 contains modified content
Submodule dependencies/RSDKv5 3b5cda69..94120f52:
diff --git a/dependencies/RSDKv5/FAQ.md b/dependencies/RSDKv5/FAQ.md
index 2a4a992..2bc596d 100644
--- a/dependencies/RSDKv5/FAQ.md
+++ b/dependencies/RSDKv5/FAQ.md
@@ -1,6 +1,6 @@
 # General
 ### Q: Why is the DLC disabled in release builds and autobuilds?
-A: Long story short, it's to minimize piracy and ensure an extra layer of legal protection for Mania Plus. Giving players paid content for free is not the goal of this project.
+A: Long story short, it's to minimize piracy and ensure an extra layer of legal protection for Sonic Mania Plus and Sonic Origins Plus. Giving players paid content for free is not the goal of this project.
 
 ### Q: How do I change the username?
 A: In the `Game` category of settings.ini, add a tag called `username` and enter the desired username in it.
@@ -18,6 +18,10 @@ A: Sonic Origins doesn't have any music or sound effects contained in the games'
 ### Q: Why is the Drop Dash disabled by default? How do I turn it on?
 A: By default, the game mode is set to Classic Mode, which disables the Drop Dash. The only way to change this is through a mod, either by changing the default value of the `game.playMode` global variable in `GameConfig.bin` or by setting the variable to another value via scripts.
 
+### Q: How do I play as the Origins Plus characters?
+A: Sonic Team implemented Amy (and Knuckles in Sonic CD) in a way where they aren't playable on the decomp out of the box. This can be fixed via mods. **Do not ask about this in an issue, as we will not be able to help you.**
+There are also checks implemented in the engine to prevent playing as these characters on release builds and autobuilds.
+
 # Miscellaneous
 ### Q: Is there a decompilation for RSDKv3 and/or RSDKv4 alone?
 A: There is! You can find RSDKv3 [here](https://github.com/Rubberduckycooly/Sonic-CD-11-Decompilation) and RSDKv4 [here](https://github.com/Rubberduckycooly/Sonic-1-2-2013-Decompilation).
diff --git a/dependencies/RSDKv5/LICENSE.md b/dependencies/RSDKv5/LICENSE.md
index fcf6d91..2caaa06 100644
--- a/dependencies/RSDKv5/LICENSE.md
+++ b/dependencies/RSDKv5/LICENSE.md
@@ -1,4 +1,4 @@
-# RSDKv5(U) DECOMPILATION SOURCE CODE LICENSE v2
+# RSDKv5(U) DECOMPILATION SOURCE CODE LICENSE v2.1
 
 The code in this repository is a decompilation of RSDK (Retro-Engine) version 5 and 5-Ultimate.
 There is original code in this repo, but most of the code is to be functionally the same as the version of RSDK this repo specifies.
@@ -8,10 +8,10 @@ Original authors of RSDK and authors of the decompilation are not held responsib
 
 You may copy, modify, contribute, and distribute, for public or private use, **as long as the following are followed:**
 - All pre-built executables provided TO ANYONE *PRIVATE OR OTHERWISE* **must be built with DLC disabled by __default.__**
-  - DLC is managed by the DummyCore Usercore. A define, `RSDK_AUTOBUILD`, is already provided for you to force DLC off. 
+  - DLC is managed by the DummyCore Usercore. A define, `RSDK_AUTOBUILD`, and a CMake flag, `RETRO_DISABLE_PLUS`, are already provided for you to force DLC off.
   - Creating a configuration setting *is allowed,* so long as it is set to off by default.
     - *No such configuration will be pushed to the master repository.*
-  - This is to ensure an extra layer of legal protection for Mania Plus.
+  - This is to ensure an extra layer of legal protection for Sonic Mania Plus and Sonic Origins Plus.
 - You may not use the decompilation for commercial (any sort of profit) use.
 - You must clearly specify that the decompilation and original code are not yours: the developers of both must be credited.
 - You may not distribute assets used to run any game not directly provided by the repository (other than unique, modded assets).
diff --git a/dependencies/RSDKv5/Makefile b/dependencies/RSDKv5/Makefile
index 1e3180c..3669f47 100644
--- a/dependencies/RSDKv5/Makefile
+++ b/dependencies/RSDKv5/Makefile
@@ -1,10 +1,10 @@
 .DEFAULT_GOAL := all
 
 PKGCONFIG	=  pkg-config
-STRIP		?= strip
+STRIP		?= $(STRIP)
 
 STATIC		?= 1
-DEBUG		?= 1
+DEBUG		?= 0
 VERBOSE		?= 0
 PROFILE		?= 0
 
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Audio/Legacy/AudioLegacy.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Audio/Legacy/AudioLegacy.cpp
index 7b5248d..c6f8625 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Audio/Legacy/AudioLegacy.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Audio/Legacy/AudioLegacy.cpp
@@ -85,7 +85,7 @@ void RSDK::Legacy::LoadSfx(char *filename, uint8 slot, uint8 scope)
 
 void RSDK::Legacy::v3::SetSfxAttributes(int32 channelID, int32 loop, int8 pan)
 {
-    if (channelID < 0 || channelID > CHANNEL_COUNT)
+    if (channelID < 0 || channelID >= CHANNEL_COUNT)
         return;
 
     if (channels[channelID].state == CHANNEL_SFX) {
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v3/RetroEnginev3.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v3/RetroEnginev3.cpp
index 433b45a..0b86a9c 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v3/RetroEnginev3.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v3/RetroEnginev3.cpp
@@ -169,11 +169,7 @@ bool32 RSDK::Legacy::v3::LoadGameConfig(const char *filepath)
         v3::LoadGameXML();
         SetGlobalVariableByName("Options.DevMenuFlag", engine.devMenu ? 1 : 0);
         SetGlobalVariableByName("Engine.Standalone", 0);
-#if !RSDK_AUTOBUILD
-        SetGlobalVariableByName("game.hasPlusDLC", 1);
-#else
-        SetGlobalVariableByName("game.hasPlusDLC", 0);
-#endif
+        SetGlobalVariableByName("game.hasPlusDLC", !RSDK_AUTOBUILD);
 #endif
 
         SetGlobalVariableByName("Engine.PlatformId", gamePlatformID);
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v4/RetroEnginev4.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v4/RetroEnginev4.cpp
index a16fd3b..0e84459 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v4/RetroEnginev4.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v4/RetroEnginev4.cpp
@@ -175,11 +175,7 @@ bool32 RSDK::Legacy::v4::LoadGameConfig(const char *filepath)
         SetGlobalVariableByName("engine.standalone", 0);
 #endif
 
-#if !RSDK_AUTOBUILD
-        SetGlobalVariableByName("game.hasPlusDLC", 1);
-#else
-        SetGlobalVariableByName("game.hasPlusDLC", 0);
-#endif
+        SetGlobalVariableByName("game.hasPlusDLC", !RSDK_AUTOBUILD);
 
         usingBytecode = false;
         InitFileInfo(&info);
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.cpp
index 12ffa52..96fed5c 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.cpp
@@ -215,7 +215,7 @@ void RSDK::SortMods()
         }
     }
 
-    std::stable_sort(modList.begin(), modList.end(), [](ModInfo a, ModInfo b) {
+    std::stable_sort(modList.begin(), modList.end(), [](const ModInfo& a, const ModInfo& b) {
         if (!(a.active && b.active))
             return a.active;
         // keep it unsorted i guess
@@ -428,7 +428,7 @@ bool32 RSDK::ScanModFolder(ModInfo *info, const char *targetFile, bool32 fromLoa
                     RenderDevice::FlipScreen();
                 }
             }
-        } catch (fs::filesystem_error fe) {
+        } catch (fs::filesystem_error& fe) {
             PrintLog(PRINT_ERROR, "Mod File Scanning Error: %s", fe.what());
         }
     }
@@ -572,7 +572,7 @@ void RSDK::LoadMods(bool newOnly, bool32 getVersion)
                     }
                 }
             }
-        } catch (fs::filesystem_error fe) {
+        } catch (fs::filesystem_error& fe) {
             PrintLog(PRINT_ERROR, "Mods folder scanning error: %s", fe.what());
         }
     }
@@ -587,7 +587,7 @@ void RSDK::LoadMods(bool newOnly, bool32 getVersion)
     LoadModSettings();
 }
 
-void loadCfg(ModInfo *info, std::string path)
+void loadCfg(ModInfo *info, const std::string& path)
 {
     FileInfo cfg;
     InitFileInfo(&cfg);
@@ -621,7 +621,7 @@ void loadCfg(ModInfo *info, std::string path)
     }
 }
 
-bool32 RSDK::LoadMod(ModInfo *info, std::string modsPath, std::string folder, bool32 active, bool32 getVersion)
+bool32 RSDK::LoadMod(ModInfo *info, const std::string& modsPath, const std::string& folder, bool32 active, bool32 getVersion)
 {
     if (!info)
         return false;
@@ -1512,7 +1512,7 @@ bool32 RSDK::ForeachSetting(const char *id, String *setting)
 }
 #endif
 
-void SetModSettingsValue(const char *key, std::string val)
+void SetModSettingsValue(const char *key, const std::string& val)
 {
     if (!currentMod)
         return;
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.hpp b/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.hpp
index bd7c23e..876c067 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.hpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.hpp
@@ -238,7 +238,7 @@ inline void SetActiveMod(int32 id) { modSettings.activeMod = id; }
 void InitModAPI(bool32 getVersion = false);
 void UnloadMods();
 void LoadMods(bool newOnly = false, bool32 getVersion = false);
-bool32 LoadMod(ModInfo *info, std::string modsPath, std::string folder, bool32 active, bool32 getVersion = false);
+bool32 LoadMod(ModInfo *info, const std::string& modsPath, const std::string& folder, bool32 active, bool32 getVersion);
 void SaveMods();
 void SortMods();
 void LoadModSettings();
@@ -290,7 +290,7 @@ Object *ModFindObject(const char *name);
 
 void *GetGlobals();
 
-bool32 LoadModInfo(const char *folder, String *name, String *description, String *version, bool32 *active);
+bool32 LoadModInfo(const char *id, String *name, String *description, String *version, bool32 *active);
 void GetModPath(const char *id, String *result);
 int32 GetModCount(bool32 active);
 const char *GetModIDByIndex(uint32 index);
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Core/RetroEngine.hpp b/dependencies/RSDKv5/RSDKv5/RSDK/Core/RetroEngine.hpp
index 485b055..cc0f39f 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Core/RetroEngine.hpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Core/RetroEngine.hpp
@@ -230,15 +230,20 @@ enum GameRegions {
 // Determines if the engine should use EGS features like achievements or not (must be rev02)
 #define RETRO_VER_EGS (RETRO_REV02 && 0)
 
-// enables only EGS's ingame achievements popup without enabling anything else
+// Enables only EGS's ingame achievements popup without enabling anything else
 #define RETRO_USE_DUMMY_ACHIEVEMENTS (RETRO_REV02 && 1)
 
-// enables the use of the mod loader
+// Forces all DLC flags to be disabled, this should be enabled in any public releases
+#ifndef RSDK_AUTOBUILD
+#define RSDK_AUTOBUILD (0)
+#endif
+
+// Enables the use of the mod loader
 #ifndef RETRO_USE_MOD_LOADER
 #define RETRO_USE_MOD_LOADER (!RETRO_USE_ORIGINAL_CODE && 1)
 #endif
 
-// defines the version of the mod loader, this should be changed ONLY if the ModFunctionTable is updated in any way
+// Defines the version of the mod loader, this should be changed ONLY if the ModFunctionTable is updated in any way
 #ifndef RETRO_MOD_LOADER_VER
 #define RETRO_MOD_LOADER_VER (2)
 #endif
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/EGL/EGLRenderDevice.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/EGL/EGLRenderDevice.cpp
index 6b466d5..33ed3c2 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/EGL/EGLRenderDevice.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/EGL/EGLRenderDevice.cpp
@@ -895,6 +895,7 @@ void RenderDevice::LoadShader(const char *fileName, bool32 linear)
         vert                   = glCreateShader(GL_VERTEX_SHADER);
         glShaderSource(vert, 4, glchar, NULL);
         glCompileShader(vert);
+        RemoveStorageEntry((void **)&fileData);
 
         glGetShaderiv(vert, GL_COMPILE_STATUS, &success);
         if (!success) {
@@ -919,6 +920,7 @@ void RenderDevice::LoadShader(const char *fileName, bool32 linear)
         frag                   = glCreateShader(GL_FRAGMENT_SHADER);
         glShaderSource(frag, 4, glchar, NULL);
         glCompileShader(frag);
+        RemoveStorageEntry((void **)&fileData);
 
         glGetShaderiv(frag, GL_COMPILE_STATUS, &success);
         if (!success) {
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/GLFW/GLFWRenderDevice.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/GLFW/GLFWRenderDevice.cpp
index b2af38d..0bec16a 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/GLFW/GLFWRenderDevice.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/GLFW/GLFWRenderDevice.cpp
@@ -761,6 +761,7 @@ void RenderDevice::LoadShader(const char *fileName, bool32 linear)
         vert                   = glCreateShader(GL_VERTEX_SHADER);
         glShaderSource(vert, 3, glchar, NULL);
         glCompileShader(vert);
+        RemoveStorageEntry((void **)&fileData);
 
         glGetShaderiv(vert, GL_COMPILE_STATUS, &success);
         if (!success) {
@@ -785,6 +786,7 @@ void RenderDevice::LoadShader(const char *fileName, bool32 linear)
         frag                   = glCreateShader(GL_FRAGMENT_SHADER);
         glShaderSource(frag, 3, glchar, NULL);
         glCompileShader(frag);
+        RemoveStorageEntry((void **)&fileData);
 
         glGetShaderiv(frag, GL_COMPILE_STATUS, &success);
         if (!success) {
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Sprite.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Sprite.cpp
index 957d0ad..6d27803 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Sprite.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Sprite.cpp
@@ -952,6 +952,16 @@ uint16 RSDK::LoadSpriteSheet(const char *filename, uint8 scope)
 
         surface->pixels = NULL;
         AllocateStorage((void **)&surface->pixels, surface->width * surface->height, DATASET_STG, false);
+#if !RETRO_USE_ORIGINAL_CODE
+        // Bug details: On a failed allocation, image.pixels will end up being reallocated in image.Load().
+        // Pixel data would then be loaded in this temporary buffer, but surface->pixels would never point to the actual data.
+        // This issue would only happen on cases where the STG mempool is full, such as ports with lower storage limits
+        // or with mods that use a lot of spritesheets.
+        // As a last resort, let's try a new allocation in TMP for surface->pixels.
+        // NOTE: This is a workaround, and will still cause a crash if the TMP allocation fails as well.
+        if (!surface->pixels)
+            AllocateStorage((void **)&surface->pixels, surface->width * surface->height, DATASET_TMP, false);
+#endif
         image.pixels = surface->pixels;
         image.Load(NULL, false);
 
@@ -991,7 +1001,7 @@ bool32 RSDK::LoadImage(const char *filename, double displayLength, double fadeSp
         if (image.width == RETRO_VIDEO_TEXTURE_W && image.height == RETRO_VIDEO_TEXTURE_H) {
             RenderDevice::SetupImageTexture(image.width, image.height, image.pixels);
         }
-#if !RETRO_USING_ORIGINAL_CODE
+#if !RETRO_USE_ORIGINAL_CODE
         else {
             PrintLog(PRINT_NORMAL, "ERROR: Images must be 1024x512!");
         }
@@ -1007,10 +1017,7 @@ bool32 RSDK::LoadImage(const char *filename, double displayLength, double fadeSp
         sceneInfo.state           = ENGINESTATE_SHOWIMAGE;
         engine.imageFadeSpeed     = fadeSpeed / 60.0;
 
-#if RETRO_USE_ORIGINAL_CODE
-        image.palette = NULL;
-#endif
-        image.pixels  = NULL;
+        image.pixels = NULL;
         image.Close();
         return true;
     }
@@ -1019,7 +1026,7 @@ bool32 RSDK::LoadImage(const char *filename, double displayLength, double fadeSp
         if (image.width == RETRO_VIDEO_TEXTURE_W && image.height == RETRO_VIDEO_TEXTURE_H) {
             RenderDevice::SetupImageTexture(image.width, image.height, image.pixels);
         }
-#if !RETRO_USING_ORIGINAL_CODE
+#if !RETRO_USE_ORIGINAL_CODE
         else {
             PrintLog(PRINT_NORMAL, "ERROR: Images must be 1024x512!");
         }
@@ -1035,19 +1042,13 @@ bool32 RSDK::LoadImage(const char *filename, double displayLength, double fadeSp
         sceneInfo.state           = ENGINESTATE_SHOWIMAGE;
         engine.imageFadeSpeed     = fadeSpeed / 60.0;
 
-#if RETRO_USE_ORIGINAL_CODE
-        image.palette = NULL;
-#endif
-        image.pixels  = NULL;
+        image.pixels = NULL;
         image.Close();
         return true;
     }
 #endif
     else {
-#if RETRO_USE_ORIGINAL_CODE
-        image.palette = NULL;
-#endif
-        image.pixels  = NULL;
+        image.pixels = NULL;
         image.Close();
     }
     return false;
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/CollisionLegacyv3.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/CollisionLegacyv3.cpp
index 1ee706d..70b87ec 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/CollisionLegacyv3.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/CollisionLegacyv3.cpp
@@ -1939,13 +1939,14 @@ void RSDK::Legacy::v3::ObjectLWallGrip(int32 xOffset, int32 yOffset, int32 cPath
     int32 YPos            = (entity->YPos >> 16) + yOffset;
     int32 startX          = XPos;
     XPos                  = XPos - 16;
+    int32 chunk           = xOffset;
     for (int32 i = 3; i > 0; i--) {
         if (XPos > 0 && XPos < stageLayouts[0].xsize << 7 && YPos > 0 && YPos < stageLayouts[0].ysize << 7 && !scriptEng.checkResult) {
             int32 chunkX    = XPos >> 7;
             int32 tileX     = (XPos & 0x7F) >> 4;
             int32 chunkY    = YPos >> 7;
             int32 tileY     = (YPos & 0x7F) >> 4;
-            int32 chunk     = (stageLayouts[0].tiles[chunkX + (chunkY << 8)] << 6) + tileX + (tileY << 3);
+            chunk           = (stageLayouts[0].tiles[chunkX + (chunkY << 8)] << 6) + tileX + (tileY << 3);
             int32 tileIndex = tiles128x128.tileIndex[chunk];
             if (tiles128x128.collisionFlags[cPath][chunk] < SOLID_NONE) {
                 switch (tiles128x128.direction[chunk]) {
@@ -1996,7 +1997,7 @@ void RSDK::Legacy::v3::ObjectLWallGrip(int32 xOffset, int32 yOffset, int32 cPath
             return;
         }
         entity->XPos          = (startX - xOffset) << 16;
-        scriptEng.checkResult = false;
+        scriptEng.checkResult = tiles128x128.collisionFlags[cPath][chunk] == 1;
     }
 }
 void RSDK::Legacy::v3::ObjectRoofGrip(int32 xOffset, int32 yOffset, int32 cPath)
@@ -2077,13 +2078,14 @@ void RSDK::Legacy::v3::ObjectRWallGrip(int32 xOffset, int32 yOffset, int32 cPath
     int32 YPos            = (entity->YPos >> 16) + yOffset;
     int32 startX          = XPos;
     XPos                  = XPos + 16;
+    int32 chunk           = xOffset;
     for (int32 i = 3; i > 0; i--) {
         if (XPos > 0 && XPos < stageLayouts[0].xsize << 7 && YPos > 0 && YPos < stageLayouts[0].ysize << 7 && !scriptEng.checkResult) {
             int32 chunkX    = XPos >> 7;
             int32 tileX     = (XPos & 0x7F) >> 4;
             int32 chunkY    = YPos >> 7;
             int32 tileY     = (YPos & 0x7F) >> 4;
-            int32 chunk     = (stageLayouts[0].tiles[chunkX + (chunkY << 8)] << 6) + tileX + (tileY << 3);
+            chunk           = (stageLayouts[0].tiles[chunkX + (chunkY << 8)] << 6) + tileX + (tileY << 3);
             int32 tileIndex = tiles128x128.tileIndex[chunk];
             if (tiles128x128.collisionFlags[cPath][chunk] < SOLID_NONE) {
                 switch (tiles128x128.direction[chunk]) {
@@ -2134,7 +2136,7 @@ void RSDK::Legacy::v3::ObjectRWallGrip(int32 xOffset, int32 yOffset, int32 cPath
             return;
         }
         entity->XPos          = (startX - xOffset) << 16;
-        scriptEng.checkResult = false;
+        scriptEng.checkResult = tiles128x128.collisionFlags[cPath][chunk] == 1;
     }
 }
 
@@ -3025,6 +3027,11 @@ void RSDK::Legacy::v3::EnemyCollision(int32 left, int32 top, int32 right, int32
 {
     TouchCollision(left, top, right, bottom);
 
+#if RSDK_AUTOBUILD
+    // Skip the hammer hitboxes on autobuilds, just in case
+    return;
+#endif
+
     Player *player           = &playerList[activePlayer];
 
     int32 hammerHitboxLeft   = 0;
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/SceneLegacyv3.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/SceneLegacyv3.cpp
index a4d3e33..2f80cb7 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/SceneLegacyv3.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/SceneLegacyv3.cpp
@@ -66,6 +66,18 @@ void RSDK::Legacy::v3::ProcessStage()
             vertexCount = 0;
             faceCount   = 0;
 
+#if RSDK_AUTOBUILD
+            // Prevent playing as Knuckles or Amy if on autobuilds
+            if (GetGlobalVariableByName("PLAYER_KNUCKLES") && playerListPos == GetGlobalVariableByName("PLAYER_KNUCKLES"))
+                playerListPos = 0;
+            else if (GetGlobalVariableByName("PLAYER_KNUCKLES_TAILS") && playerListPos == GetGlobalVariableByName("PLAYER_KNUCKLES_TAILS"))
+                playerListPos = 0;
+            else if (GetGlobalVariableByName("PLAYER_AMY") && playerListPos == GetGlobalVariableByName("PLAYER_AMY"))
+                playerListPos = 0;
+            else if (GetGlobalVariableByName("PLAYER_AMY_TAILS") && playerListPos == GetGlobalVariableByName("PLAYER_AMY_TAILS"))
+                playerListPos = 0;
+#endif
+
             for (int32 p = 0; p < LEGACY_v3_PLAYER_COUNT; ++p) {
                 memset(&playerList[p], 0, sizeof(playerList[p]));
                 playerList[p].visible            = true;
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/ScriptLegacyv3.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/ScriptLegacyv3.cpp
index 100053e..7d092d4 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/ScriptLegacyv3.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/ScriptLegacyv3.cpp
@@ -3430,8 +3430,8 @@ void RSDK::Legacy::v3::ProcessScript(int32 scriptCodeStart, int32 jumpTableStart
                                      entity->XPos + (scriptEng.operands[3] << 16), entity->YPos + (scriptEng.operands[4] << 16));
                         break;
                     case C_BOX2:
-                        PlatformCollision(entity->XPos + (scriptEng.operands[1] << 16), entity->YPos + (scriptEng.operands[2] << 16),
-                                          entity->XPos + (scriptEng.operands[3] << 16), entity->YPos + (scriptEng.operands[4] << 16));
+                        BoxCollision2(entity->XPos + (scriptEng.operands[1] << 16), entity->YPos + (scriptEng.operands[2] << 16),
+                                      entity->XPos + (scriptEng.operands[3] << 16), entity->YPos + (scriptEng.operands[4] << 16));
                         break;
                     case C_PLATFORM:
                         PlatformCollision(entity->XPos + (scriptEng.operands[1] << 16), entity->YPos + (scriptEng.operands[2] << 16),
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/CollisionLegacyv4.hpp b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/CollisionLegacyv4.hpp
index 02880d9..8abcbfa 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/CollisionLegacyv4.hpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/CollisionLegacyv4.hpp
@@ -6,10 +6,12 @@ namespace v4
 {
 
 enum CollisionSides {
-    CSIDE_FLOOR = 0,
-    CSIDE_LWALL = 1,
-    CSIDE_RWALL = 2,
-    CSIDE_ROOF  = 3,
+    CSIDE_FLOOR   = 0,
+    CSIDE_LWALL   = 1,
+    CSIDE_RWALL   = 2,
+    CSIDE_ROOF    = 3,
+    CSIDE_LENTITY = 4, // Added in Origins Plus
+    CSIDE_RENTITY = 5, // Added in Origins Plus
 };
 
 enum CollisionModes {
@@ -94,8 +96,8 @@ void ObjectFloorGrip(int32 xOffset, int32 yOffset, int32 cPath);
 void ObjectLWallGrip(int32 xOffset, int32 yOffset, int32 cPath);
 void ObjectRoofGrip(int32 xOffset, int32 yOffset, int32 cPath);
 void ObjectRWallGrip(int32 xOffset, int32 yOffset, int32 cPath);
-void ObjectLEntityGrip(int32 xOffset, int32 yOffset, int32 cPath);
-void ObjectREntityGrip(int32 xOffset, int32 yOffset, int32 cPath);
+void ObjectLEntityGrip(int32 xOffset, int32 yOffset, int32 cPath); // Added in Origins Plus
+void ObjectREntityGrip(int32 xOffset, int32 yOffset, int32 cPath); // Added in Origins Plus
 
 } // namespace v4
 
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/SceneLegacyv4.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/SceneLegacyv4.cpp
index 43eca12..7db39c8 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/SceneLegacyv4.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/SceneLegacyv4.cpp
@@ -58,6 +58,14 @@ void RSDK::Legacy::v4::ProcessStage(void)
             stageMinutes      = 0;
             stageMode         = STAGEMODE_NORMAL;
 
+#if RSDK_AUTOBUILD
+            // Prevent playing as Amy if on autobuilds
+            if (GetGlobalVariableByName("PLAYER_AMY") && playerListPos == GetGlobalVariableByName("PLAYER_AMY"))
+                playerListPos = 0;
+            else if (GetGlobalVariableByName("PLAYER_AMY_TAILS") && playerListPos == GetGlobalVariableByName("PLAYER_AMY_TAILS"))
+                playerListPos = 0;
+#endif
+
 #if RETRO_USE_MOD_LOADER
             if (devMenu.modsChanged)
                 RefreshModFolders();
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/ScriptLegacyv4.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/ScriptLegacyv4.cpp
index 67d95e8..2736ff8 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/ScriptLegacyv4.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/ScriptLegacyv4.cpp
@@ -4826,10 +4826,10 @@ void RSDK::Legacy::v4::ProcessScript(int32 scriptCodeStart, int32 jumpTableStart
                     default: break;
                     case CSIDE_FLOOR: ObjectFloorCollision(scriptEng.operands[1], scriptEng.operands[2], scriptEng.operands[3]); break;
                     case CSIDE_LWALL: ObjectLWallCollision(scriptEng.operands[1], scriptEng.operands[2], scriptEng.operands[3]); break;
-                    case CSIDE_RWALL: ObjectRWallCollision(scriptEng.operands[1], scriptEng.operands[2], scriptEng.operands[3]); break;
-                    case CSIDE_ROOF: ObjectRoofCollision(scriptEng.operands[1], scriptEng.operands[2], scriptEng.operands[3]); break;
-                    case 4: ObjectLWallCollision(scriptEng.operands[2], 0, objectEntityList[scriptEng.operands[1]].collisionPlane); break;
-                    case 5: ObjectLWallCollision(scriptEng.operands[2], 0, objectEntityList[scriptEng.operands[1]].collisionPlane); break;
+                    case CSIDE_RWALL: ObjectRWallCollision(scriptEng.operands[1] - 1, scriptEng.operands[2], scriptEng.operands[3]); break;
+                    case CSIDE_ROOF: ObjectRoofCollision(scriptEng.operands[1], scriptEng.operands[2] - 1, scriptEng.operands[3]); break;
+                    case CSIDE_LENTITY: ObjectLWallCollision(scriptEng.operands[2], 0, objectEntityList[scriptEng.operands[1]].collisionPlane); break;
+                    case CSIDE_RENTITY: ObjectLWallCollision(scriptEng.operands[2] - 1, 0, objectEntityList[scriptEng.operands[1]].collisionPlane); break;
                 }
                 break;
             case FUNC_OBJECTTILEGRIP:
@@ -4838,10 +4838,10 @@ void RSDK::Legacy::v4::ProcessScript(int32 scriptCodeStart, int32 jumpTableStart
                     default: break;
                     case CSIDE_FLOOR: ObjectFloorGrip(scriptEng.operands[1], scriptEng.operands[2], scriptEng.operands[3]); break;
                     case CSIDE_LWALL: ObjectLWallGrip(scriptEng.operands[1], scriptEng.operands[2], scriptEng.operands[3]); break;
-                    case CSIDE_RWALL: ObjectRWallGrip(scriptEng.operands[1], scriptEng.operands[2], scriptEng.operands[3]); break;
-                    case CSIDE_ROOF: ObjectRoofGrip(scriptEng.operands[1], scriptEng.operands[2], scriptEng.operands[3]); break;
-                    case 4: ObjectLEntityGrip(scriptEng.operands[1], scriptEng.operands[2], scriptEng.operands[3]); break;
-                    case 5: ObjectREntityGrip(scriptEng.operands[1], scriptEng.operands[2], scriptEng.operands[3]); break;
+                    case CSIDE_RWALL: ObjectRWallGrip(scriptEng.operands[1] - 1, scriptEng.operands[2], scriptEng.operands[3]); break;
+                    case CSIDE_ROOF: ObjectRoofGrip(scriptEng.operands[1], scriptEng.operands[2] - 1, scriptEng.operands[3]); break;
+                    case CSIDE_LENTITY: ObjectLEntityGrip(scriptEng.operands[1], scriptEng.operands[2], scriptEng.operands[3]); break;
+                    case CSIDE_RENTITY: ObjectREntityGrip(scriptEng.operands[1], scriptEng.operands[2], scriptEng.operands[3]); break;
                 }
                 break;
             case FUNC_NOT: scriptEng.operands[0] = ~scriptEng.operands[0]; break;
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserAchievements.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserAchievements.cpp
index 057c935..2a246aa 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserAchievements.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserAchievements.cpp
@@ -123,9 +123,6 @@ void RSDK::SKU::ProcessAchievements()
                     InitString(&achievementStrings[0], achievementText.c_str(), 0);
                     String buffer;
                     CopyString(&achievementStrings[1], achievements->GetAchievementName(&buffer, achievementID));
-#if !RETRO_USE_ORIGINAL_CODE
-                    RemoveStorageEntry((void**)&buffer);
-#endif
 
                     if (curSKU.language == LANGUAGE_JP) {
                         achievementStringWidth[0] = 13 * achievementStrings[0].length;
@@ -161,9 +158,6 @@ void RSDK::SKU::DrawAchievements()
             InitString(&achievementStrings[0], achievementText.c_str(), 0);
             String buffer;
             CopyString(&achievementStrings[1], achievements->GetAchievementName(&buffer, achievementID));
-#if !RETRO_USE_ORIGINAL_CODE
-            RemoveStorageEntry((void**)&buffer);
-#endif
 
             int32 drawX = achievementStrX + currentScreen->size.x - achievementStrW;
             DrawRectangle(drawX, currentScreen->size.y - 40, achievementStrW - achievementStrX, 40, 0xFF107C, 0x10, INK_NONE, true);
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserCore.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserCore.cpp
index 5eaee0d..06c197f 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserCore.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserCore.cpp
@@ -321,6 +321,7 @@ void RSDK::LoadSettingsINI()
         customSettings.xyButtonFlip              = customSettings.confirmButtonFlip;
         customSettings.enableControllerDebugging = iniparser_getboolean(ini, "Game:enableControllerDebugging", false);
         customSettings.disableFocusPause         = iniparser_getboolean(ini, "Game:disableFocusPause", false);
+        engine.fastForwardSpeed                  = iniparser_getint(ini, "Game:fastForwardSpeed", 8);
 
 #if RETRO_REV0U
         customSettings.forceScripts = iniparser_getboolean(ini, "Game:txtScripts", false);
@@ -606,6 +607,9 @@ void RSDK::SaveSettingsINI(bool32 writeToFile)
             WriteText(file, "; Determines if the engine should pause when window focus is lost or not\n");
             WriteText(file, "disableFocusPause=%s\n", (customSettings.disableFocusPause ? "y" : "n"));
 
+            WriteText(file, "; The speed to run the game at while holding backspace. Defaults to x8 speed\n");
+            WriteText(file, "fastForwardSpeed=%d\n", engine.fastForwardSpeed);
+
             if (strcmp(iniparser_getstring(ini, "Game:username", ";unknown;"), ";unknown;") != 0)
                 WriteText(file, "username=%s\n", iniparser_getstring(ini, "Game:username", ""));
 
diff --git a/dependencies/RSDKv5/platforms/Windows.cmake b/dependencies/RSDKv5/platforms/Windows.cmake
index 085efa9..3ef5e9b 100644
--- a/dependencies/RSDKv5/platforms/Windows.cmake
+++ b/dependencies/RSDKv5/platforms/Windows.cmake
@@ -1,6 +1,6 @@
 project(RetroEngine)
 
-add_executable(RetroEngine ${RETRO_FILES})
+add_executable(RetroEngine WIN32 ${RETRO_FILES})
 
 set(RETRO_SUBSYSTEM "DX9" CACHE STRING "The subsystem to use")
 option(USE_MINIAUDIO "Whether or not to use MiniAudio or default to XAudio." OFF)
@@ -129,5 +129,4 @@ if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "GNU
     target_compile_options(RetroEngine PRIVATE -Wno-microsoft-cast -Wno-microsoft-exception-spec)
 endif()
     
-target_sources(RetroEngine PRIVATE ${RETRO_NAME}/${RETRO_NAME}.rc)
-target_link_options(RetroEngine PRIVATE /subsystem:windows)
\ No newline at end of file
+target_sources(RetroEngine PRIVATE ${RETRO_NAME}/${RETRO_NAME}.rc)
\ No newline at end of file

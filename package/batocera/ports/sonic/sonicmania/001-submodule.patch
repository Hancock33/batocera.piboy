Submodule dependencies/RSDKv5 da7d0186..ecf21719:
diff --git a/dependencies/RSDKv5/LICENSE.md b/dependencies/RSDKv5/LICENSE.md
new file mode 100644
index 0000000..fcf6d91
--- /dev/null
+++ b/dependencies/RSDKv5/LICENSE.md
@@ -0,0 +1,22 @@
+# RSDKv5(U) DECOMPILATION SOURCE CODE LICENSE v2
+
+The code in this repository is a decompilation of RSDK (Retro-Engine) version 5 and 5-Ultimate.
+There is original code in this repo, but most of the code is to be functionally the same as the version of RSDK this repo specifies.
+
+This code is provided as-is, that is to say, without liability or warranty. 
+Original authors of RSDK and authors of the decompilation are not held responsible for any damages or other claims said.
+
+You may copy, modify, contribute, and distribute, for public or private use, **as long as the following are followed:**
+- All pre-built executables provided TO ANYONE *PRIVATE OR OTHERWISE* **must be built with DLC disabled by __default.__**
+  - DLC is managed by the DummyCore Usercore. A define, `RSDK_AUTOBUILD`, is already provided for you to force DLC off. 
+  - Creating a configuration setting *is allowed,* so long as it is set to off by default.
+    - *No such configuration will be pushed to the master repository.*
+  - This is to ensure an extra layer of legal protection for Mania Plus.
+- You may not use the decompilation for commercial (any sort of profit) use.
+- You must clearly specify that the decompilation and original code are not yours: the developers of both must be credited.
+- You may not distribute assets used to run any game not directly provided by the repository (other than unique, modded assets).
+- This license must be in all modified copies of source code, and all forks must follow this license.
+
+Original RSDK authors: Evening Star
+
+Decompilation authors: Rubberduckycooly and chuliRMG
diff --git a/dependencies/RSDKv5/Makefile b/dependencies/RSDKv5/Makefile
index 379f26e..bf7e02c 100644
--- a/dependencies/RSDKv5/Makefile
+++ b/dependencies/RSDKv5/Makefile
@@ -240,7 +240,7 @@ ifeq ($(RSDK_ONLY),0)
 $(GAME_PATH): $(GAME_PRELINK) $(GAME_OBJECTS)
 	@echo linking game...
 	$(CXX) $(CXXFLAGS_ALL) $(LDFLAGS_ALL) $(GAME_LDFLAGS) $(GAME_OBJECTS) $(GAME_LIBS) -o $@ 
- 	$(STRIP) $@
+	$(STRIP) $@
 	@echo done linking game
 endif # RSDK_ONLY
 endif # STATICGAME
@@ -275,4 +275,4 @@ clean: clean-rsdk clean-game
 else
 clean: clean-rsdk clean-game
 	rm -rf $(PKG_PATH)
-endif
\ No newline at end of file
+endif
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Audio/Audio.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Audio/Audio.cpp
index 8d2e91d..17390ba 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Audio/Audio.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Audio/Audio.cpp
@@ -4,7 +4,9 @@
 #include "Legacy/AudioLegacy.cpp"
 #endif
 
+#define STB_VORBIS_NO_PUSHDATA_API
 #define STB_VORBIS_NO_STDIO
+#define STB_VORBIS_NO_INTEGER_CONVERSION
 #include "stb_vorbis/stb_vorbis.c"
 
 stb_vorbis *vorbisInfo = NULL;
@@ -169,8 +171,8 @@ int32 RSDK::PlayStream(const char *filename, uint32 slot, int32 startPos, uint32
     return slot;
 }
 
-#define WAV_SIG_HEADER 0x46464952 // RIFF
-#define WAV_SIG_DATA   0x61746164 // data
+#define WAV_SIG_HEADER (0x46464952) // RIFF
+#define WAV_SIG_DATA   (0x61746164) // data
 
 void RSDK::ReadSfx(char *filename, uint8 id, uint8 plays, uint8 scope, uint32 *size, uint32 *format, uint16 *channels, uint32 *freq)
 {
@@ -181,11 +183,11 @@ void RSDK::ReadSfx(char *filename, uint8 id, uint8 plays, uint8 scope, uint32 *s
         uint32 signature = ReadInt32(&info, false);
 
         if (signature == WAV_SIG_HEADER) {
-            ReadInt32(&info, false); // chunk size
-            ReadInt32(&info, false); // WAVE
-            ReadInt32(&info, false); // FMT
-            int32 sizeing = ReadInt32(&info, false); // chunk size
-            ReadInt16(&info);        // audio format
+            ReadInt32(&info, false);                   // chunk size
+            ReadInt32(&info, false);                   // WAVE
+            ReadInt32(&info, false);                   // FMT
+            int32 chunkSize = ReadInt32(&info, false); // chunk size
+            ReadInt16(&info);                          // audio format
             *channels = ReadInt16(&info);
             *freq     = ReadInt32(&info, false);
             ReadInt32(&info, false); // bytes per sec
@@ -196,7 +198,7 @@ void RSDK::ReadSfx(char *filename, uint8 id, uint8 plays, uint8 scope, uint32 *s
             uint16 sampleBits = ReadInt16(&info);
 
             // Original code added to help fix some issues
-            Seek_Set(&info, 20 + sizeing);
+            Seek_Set(&info, 20 + chunkSize);
 
             int32 loop        = 0;
             while (true) {
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Audio/SDL2/SDL2AudioDevice.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Audio/SDL2/SDL2AudioDevice.cpp
index 8ee0a54..8b29ea2 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Audio/SDL2/SDL2AudioDevice.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Audio/SDL2/SDL2AudioDevice.cpp
@@ -46,7 +46,7 @@ void AudioDevice::Release()
     UnlockAudioDevice();
 
     SDL_CloseAudioDevice(AudioDevice::device);
-    SDL_Quit();
+    SDL_QuitSubSystem(SDL_INIT_AUDIO);
 }
 
 void AudioDevice::ProcessAudioMixing(void *stream, int32 length)
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v3/RetroEnginev3.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v3/RetroEnginev3.cpp
index c068e3f..74f7329 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v3/RetroEnginev3.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v3/RetroEnginev3.cpp
@@ -464,8 +464,12 @@ void RSDK::Legacy::v3::RetroEngineCallback(int32 callbackID)
 void RSDK::Legacy::v3::LoadXMLVariables()
 {
     FileInfo info;
-    for (int32 m = 0; m < (int32)ActiveMods().size(); ++m) {
+
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
+
+        InitFileInfo(&info);
         if (LoadFile(&info, "Data/Game/Game.xml", FMODE_RB)) {
             tinyxml2::XMLDocument *doc = new tinyxml2::XMLDocument;
 
@@ -512,8 +516,12 @@ void RSDK::Legacy::v3::LoadXMLVariables()
 void RSDK::Legacy::v3::LoadXMLPalettes()
 {
     FileInfo info;
-    for (int32 m = 0; m < (int32)ActiveMods().size(); ++m) {
+
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
+
+        InitFileInfo(&info);
         if (LoadFile(&info, "Data/Game/Game.xml", FMODE_RB)) {
             tinyxml2::XMLDocument *doc = new tinyxml2::XMLDocument;
 
@@ -575,8 +583,11 @@ void RSDK::Legacy::v3::LoadXMLObjects()
     FileInfo info;
     modObjCount = 0;
 
-    for (int32 m = 0; m < (int32)ActiveMods().size(); ++m) {
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
+
+        InitFileInfo(&info);
         if (LoadFile(&info, "Data/Game/Game.xml", FMODE_RB)) {
             tinyxml2::XMLDocument *doc = new tinyxml2::XMLDocument;
 
@@ -639,8 +650,11 @@ void RSDK::Legacy::v3::LoadXMLSoundFX()
 {
     FileInfo info;
 
-    for (int32 m = 0; m < (int32)ActiveMods().size(); ++m) {
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
+
+        InitFileInfo(&info);
         if (LoadFile(&info, "Data/Game/Game.xml", FMODE_RB)) {
             tinyxml2::XMLDocument *doc = new tinyxml2::XMLDocument;
 
@@ -692,8 +706,11 @@ void RSDK::Legacy::v3::LoadXMLPlayers()
 {
     FileInfo info;
 
-    for (int32 m = 0; m < (int32)ActiveMods().size(); ++m) {
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
+
+        InitFileInfo(&info);
         if (LoadFile(&info, "Data/Game/Game.xml", FMODE_RB)) {
             tinyxml2::XMLDocument *doc = new tinyxml2::XMLDocument;
 
@@ -736,11 +753,13 @@ void RSDK::Legacy::v3::LoadXMLPlayers()
 int32 RSDK::Legacy::v3::LoadXMLStages(int32 mode, int32 gcStageCount)
 {
     FileInfo info;
-    int32 listCount  = 0;
     int32 stageCount = 0;
 
-    for (int32 m = 0; m < (int32)ActiveMods().size(); ++m) {
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
+
+        InitFileInfo(&info);
         if (LoadFile(&info, "Data/Game/Game.xml", FMODE_RB)) {
             tinyxml2::XMLDocument *doc = new tinyxml2::XMLDocument;
 
@@ -833,4 +852,4 @@ int32 RSDK::Legacy::v3::LoadXMLStages(int32 mode, int32 gcStageCount)
 
     return stageCount;
 }
-#endif
\ No newline at end of file
+#endif
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v4/RetroEnginev4.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v4/RetroEnginev4.cpp
index 5545fe8..716e710 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v4/RetroEnginev4.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Core/Legacy/v4/RetroEnginev4.cpp
@@ -291,8 +291,12 @@ void RSDK::Legacy::v4::ProcessEngine()
 void RSDK::Legacy::v4::LoadXMLVariables()
 {
     FileInfo info;
-    for (int32 m = 0; m < (int32)ActiveMods().size(); ++m) {
+
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
+
+        InitFileInfo(&info);
         if (LoadFile(&info, "Data/Game/Game.xml", FMODE_RB)) {
             tinyxml2::XMLDocument *doc = new tinyxml2::XMLDocument;
 
@@ -339,8 +343,12 @@ void RSDK::Legacy::v4::LoadXMLVariables()
 void RSDK::Legacy::v4::LoadXMLPalettes()
 {
     FileInfo info;
-    for (int32 m = 0; m < (int32)ActiveMods().size(); ++m) {
+
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
+
+        InitFileInfo(&info);
         if (LoadFile(&info, "Data/Game/Game.xml", FMODE_RB)) {
             tinyxml2::XMLDocument *doc = new tinyxml2::XMLDocument;
 
@@ -402,8 +410,11 @@ void RSDK::Legacy::v4::LoadXMLObjects()
     FileInfo info;
     modObjCount = 0;
 
-    for (int32 m = 0; m < (int32)ActiveMods().size(); ++m) {
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
+
+        InitFileInfo(&info);
         if (LoadFile(&info, "Data/Game/Game.xml", FMODE_RB)) {
             tinyxml2::XMLDocument *doc = new tinyxml2::XMLDocument;
 
@@ -465,9 +476,12 @@ void RSDK::Legacy::v4::LoadXMLObjects()
 void RSDK::Legacy::v4::LoadXMLSoundFX()
 {
     FileInfo info;
-    FileInfo infoStore;
-    for (int32 m = 0; m < (int32)ActiveMods().size(); ++m) {
+
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
+
+        InitFileInfo(&info);
         if (LoadFile(&info, "Data/Game/Game.xml", FMODE_RB)) {
             tinyxml2::XMLDocument *doc = new tinyxml2::XMLDocument;
 
@@ -519,8 +533,11 @@ void RSDK::Legacy::v4::LoadXMLPlayers()
 {
     FileInfo info;
 
-    for (int32 m = 0; m < (int32)ActiveMods().size(); ++m) {
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
+
+        InitFileInfo(&info);
         if (LoadFile(&info, "Data/Game/Game.xml", FMODE_RB)) {
             tinyxml2::XMLDocument *doc = new tinyxml2::XMLDocument;
 
@@ -563,11 +580,13 @@ void RSDK::Legacy::v4::LoadXMLPlayers()
 int32 RSDK::Legacy::v4::LoadXMLStages(int32 mode, int32 gcStageCount)
 {
     FileInfo info;
-    int32 listCount  = 0;
     int32 stageCount = 0;
 
-    for (int32 m = 0; m < (int32)ActiveMods().size(); ++m) {
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
+
+        InitFileInfo(&info);
         if (LoadFile(&info, "Data/Game/Game.xml", FMODE_RB)) {
             tinyxml2::XMLDocument *doc = new tinyxml2::XMLDocument;
 
@@ -660,4 +679,4 @@ int32 RSDK::Legacy::v4::LoadXMLStages(int32 mode, int32 gcStageCount)
 
     return stageCount;
 }
-#endif
\ No newline at end of file
+#endif
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Core/Link.hpp b/dependencies/RSDKv5/RSDKv5/RSDK/Core/Link.hpp
index c8f6228..248e910 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Core/Link.hpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Core/Link.hpp
@@ -425,31 +425,15 @@ public:
 #endif
 #endif
 
-    static inline Handle Open(std::string path)
-    {
-        // BE WARNED: this is ifdef hell
-        // still better than the mess we had before
 #if RETRO_PLATFORM == RETRO_SWITCH
-        return NULL;
+    // do nothing for switch
+    static inline Handle Open(std::string path) { return NULL; }
 #else
-        std::string prepath = path;
-        // if doesn't end with extention
-        if (path.length() <= strlen(extention) || path.compare(path.length() - strlen(extention), strlen(extention), std::string(extention))) {
-#if RETRO_ARCHITECTURE
-            path += "_" RETRO_ARCHITECTURE;
-#endif // ! RETRO_ARCHITECTURE
-            path += extention;
-        }
-#if RETRO_ARCHITECTURE
-        else {
-            path = path.substr(0, path.size() - strlen(extention));
-            path += extention;
-            path += "_" RETRO_ARCHITECTURE;
-        }
-#endif // ! RETRO_ARCHITECTURE
-
+    static inline Handle PlatformLoadLibrary(std::string path)
+    {
+        Handle ret;
 #if RETRO_PLATFORM == RETRO_WIN
-        Handle ret = (Handle)LoadLibraryA(path.c_str());
+        ret = (Handle)LoadLibraryA(path.c_str());
 #else
 #if RETRO_PLATFORM == RETRO_ANDROID
         // path should only load local libs
@@ -457,32 +441,43 @@ public:
             path = path.substr(path.find_last_of('/') + 1);
         path = "lib" + path;
 #endif // ! RETRO_PLATFORM == ANDROID
-        Handle ret = (Handle)dlopen(path.c_str(), RTLD_LOCAL | RTLD_LAZY);
-#endif // ! RETRO_PLATFORM == WIN
-
-#if RETRO_ARCHITECTURE
+        ret  = (Handle)dlopen(path.c_str(), RTLD_LOCAL | RTLD_LAZY);
+        // try loading the library globally on linux
         if (!ret) {
-            path = prepath;
-            if (path.length() <= strlen(extention) || path.compare(path.length() - strlen(extention), strlen(extention), std::string(extention))) {
-                path += extention;
-            }
-
-#if RETRO_PLATFORM == RETRO_WIN
-            ret = (Handle)LoadLibraryA(path.c_str());
-#else
-#if RETRO_PLATFORM == RETRO_ANDROID
-            // path should only load local libs
             if (path.find_last_of('/') != std::string::npos)
                 path = path.substr(path.find_last_of('/') + 1);
-            path = "lib" + path;
-#endif // ! RETRO_PLATFORM == ANDROID
             ret = (Handle)dlopen(path.c_str(), RTLD_LOCAL | RTLD_LAZY);
+        }
 #endif // ! RETRO_PLATFORM == WIN
+        return ret;
+    }
+
+    static inline Handle Open(std::string path)
+    {
+        std::string original_path = path;
+
+        // if it ends with extension
+        if (path.length() >= strlen(extention) && 0 == path.compare(path.length() - strlen(extention), strlen(extention), extention)) {
+            // remove it!
+            path = path.substr(0, path.size() - strlen(extention));
         }
+
+#if RETRO_ARCHITECTURE
+        path += "_" RETRO_ARCHITECTURE;
+#endif // ! RETRO_ARCHITECTURE
+
+        // put it again!
+        path += extention;
+
+        Handle ret = PlatformLoadLibrary(path);
+
+#if RETRO_ARCHITECTURE
+        if (!ret)
+            ret = PlatformLoadLibrary(original_path);
 #endif // ! RETRO_ARCHITECTURE
         return ret;
-#endif // ! RETRO_PLATFORM == SWITCH
     }
+#endif // ! RETRO_PLATFORM == SWITCH
 
     static inline void Close(Handle handle)
     {
@@ -519,7 +514,7 @@ public:
         return NULL;
 #else
 #if RETRO_PLATFORM == RETRO_WIN
-        return (char*)GetLastErrorAsString();
+        return (char *)GetLastErrorAsString();
 #else
         return dlerror();
 #endif
@@ -558,7 +553,7 @@ private:
         return textBuffer;
     }
 #else
-    static inline char *GetLastErrorAsString() { return (char*)""; }
+    static inline char *GetLastErrorAsString() { return (char *)""; }
 #endif
 #endif
 };
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.cpp
index 5655524..b5581f8 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.cpp
@@ -165,7 +165,8 @@ void RSDK::LoadModSettings()
     modSettings.forceScripts    = false;
 #endif
 
-    for (int32 i = (int32)ActiveMods().size() - 1; i >= 0; --i) {
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 i = activeModCount - 1; i >= 0; --i) {
         ModInfo *mod = &modList[i];
 
         if (mod->redirectSaveRAM) {
@@ -252,44 +253,17 @@ void RSDK::ScanModFolder(ModInfo *info)
 
     if (fs::exists(dataPath) && fs::is_directory(dataPath)) {
         try {
-            auto data_rdi = fs::recursive_directory_iterator(dataPath, fs::directory_options::follow_directory_symlink);
-            for (auto data_de : data_rdi) {
-                if (data_de.is_regular_file()) {
-                    char modBuf[0x100];
-                    strcpy(modBuf, data_de.path().string().c_str());
-                    char folderTest[12][0x10] = { "Data/",     "Data\\",     "data/",     "data\\",
-
-                                                  "Bytecode/", "Bytecode\\", "bytecode/", "bytecode\\",
-
-                                                  "Videos/",   "Videos\\",   "videos/",   "videos\\" };
-                    int32 tokenPos            = -1;
-                    for (int32 i = 0; i < 12; ++i) {
-                        tokenPos = (int32)std::string(modBuf).find(folderTest[i], 0);
-                        if (tokenPos >= 0)
-                            break;
-                    }
-
-                    if (tokenPos >= 0) {
-                        char buffer[0x80];
-                        for (int32 i = (int32)strlen(modBuf); i >= tokenPos; --i) {
-                            buffer[i - tokenPos] = modBuf[i] == '\\' ? '/' : modBuf[i];
-                        }
-
-                        // PrintLog(modBuf);
-                        std::string path(buffer);
-                        std::string modPath(modBuf);
-                        char pathLower[0x100];
-                        memset(pathLower, 0, sizeof(char) * 0x100);
-                        for (int32 c = 0; c < path.size(); ++c) {
-                            pathLower[c] = tolower(path.c_str()[c]);
-                        }
-
-                        info->fileMap.insert(std::pair<std::string, std::string>(pathLower, modBuf));
-                    }
+            auto dirIterator = fs::recursive_directory_iterator(dataPath, fs::directory_options::follow_directory_symlink);
+            for (auto dirFile : dirIterator) {
+                if (dirFile.is_regular_file()) {
+                    std::string folderPath = dirFile.path().string().substr(dataPath.string().length() + 1);
+                    std::transform(folderPath.begin(), folderPath.end(), folderPath.begin(),
+                                   [](unsigned char c) { return c == '\\' ? '/' : std::tolower(c); });
+                    info->fileMap.insert(std::pair<std::string, std::string>(folderPath, dirFile.path().string()));
                 }
             }
         } catch (fs::filesystem_error fe) {
-            PrintLog(PRINT_ERROR, "Data Folder Scanning Error: %s", fe.what());
+            PrintLog(PRINT_ERROR, "Mod File Scanning Error: %s", fe.what());
         }
     }
 }
@@ -501,7 +475,7 @@ bool32 RSDK::LoadMod(ModInfo *info, std::string modsPath, std::string folder, bo
 
         info->forceVersion = iniparser_getint(ini, ":ForceVersion", 0);
         if (!info->forceVersion) {
-            info->targetVersion = iniparser_getint(ini, ":TargetVersion", 0);
+            info->targetVersion = iniparser_getint(ini, ":TargetVersion", 5);
             if (info->targetVersion != -1 && ENGINE_VERSION) {
                 if (info->targetVersion < 3 || info->targetVersion > 5) {
                     PrintLog(PRINT_NORMAL, "[MOD] Invalid target version. Should be 3, 4, or 5");
@@ -862,9 +836,10 @@ void RSDK::AddPublicFunction(const char *functionName, void *functionPtr)
 void *RSDK::GetPublicFunction(const char *id, const char *functionName)
 {
     if (!id) {
-        for (auto &f : gamePublicFuncs)
+        for (auto &f : gamePublicFuncs) {
             if (f.name == functionName)
                 return f.ptr;
+        }
 
         return NULL;
     }
@@ -874,9 +849,10 @@ void *RSDK::GetPublicFunction(const char *id, const char *functionName)
 
     for (ModInfo &m : modList) {
         if (m.active && m.id == id) {
-            for (auto &f : m.functionList)
+            for (auto &f : m.functionList) {
                 if (f.name == functionName)
                     return f.ptr;
+            }
 
             return NULL;
         }
@@ -888,9 +864,10 @@ void *RSDK::GetPublicFunction(const char *id, const char *functionName)
 void RSDK::GetModPath(const char *id, String *result)
 {
     int32 m;
-    for (m = 0; m < modList.size(); ++m)
+    for (m = 0; m < modList.size(); ++m) {
         if (modList[m].active && modList[m].id == id)
             break;
+    }
 
     if (m == modList.size())
         return;
@@ -903,9 +880,10 @@ void RSDK::GetModPath(const char *id, String *result)
 std::string GetModPath_i(const char *id)
 {
     int32 m;
-    for (m = 0; m < modList.size(); ++m)
+    for (m = 0; m < modList.size(); ++m) {
         if (modList[m].active && modList[m].id == id)
             break;
+    }
 
     if (m == modList.size())
         return std::string();
@@ -1224,7 +1202,7 @@ void RSDK::SetSettingsString(const char *key, String *val)
 void RSDK::SaveSettings()
 {
     using namespace std;
-    if (!currentMod || !currentMod->settings.size())
+    if (!currentMod || !currentMod->settings.size() || !currentMod->active)
         return;
 
     FileIO *file = fOpen((GetModPath_i(currentMod->id.c_str()) + "/modSettings.ini").c_str(), "w");
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.hpp b/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.hpp
index 670db37..670d2b1 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.hpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Core/ModAPI.hpp
@@ -205,7 +205,8 @@ inline std::vector<ModInfo *> ActiveMods()
 void ScanModFolder(ModInfo *info);
 inline void RefreshModFolders()
 {
-    for (int32 m = 0; m < ActiveMods().size(); ++m) {
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         ScanModFolder(&modList[m]);
     }
 }
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Core/Reader.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Core/Reader.cpp
index 14a248f..872b827 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Core/Reader.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Core/Reader.cpp
@@ -37,8 +37,9 @@ void RSDK::DetectEngineVersion()
     }
 
     // check if we have any mods with gameconfigs
-    int32 m = 0;
-    for (; m < ActiveMods().size(); ++m) {
+    int32 m              = 0;
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
 
         FileInfo checkInfo;
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Core/RetroEngine.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Core/RetroEngine.cpp
index dea29b0..c727540 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Core/RetroEngine.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Core/RetroEngine.cpp
@@ -26,23 +26,8 @@ int32 RSDK::RunRetroEngine(int32 argc, char *argv[])
 {
     ParseArguments(argc, argv);
 
-    if (engine.consoleEnabled) {
-#if RETRO_PLATFORM == RETRO_WIN
-        AllocConsole();
-        AttachConsole(GetCurrentProcessId());
-
-        freopen("CON", "w", stdout);
-#endif
-#if RETRO_PLATFORM == RETRO_SWITCH
-        consoleInit(NULL);
-#endif
-    }
-
-#if RETRO_RENDERDEVICE_DIRECTX9 || RETRO_RENDERDEVICE_DIRECTX11
-    MSG Msg;
-    PeekMessage(&Msg, NULL, 0, 0, PM_REMOVE);
-    InitCommonControls();
-#endif
+    if (engine.consoleEnabled)
+        InitConsole();
 
     RenderDevice::isRunning = false;
     if (InitStorage()) {
@@ -52,10 +37,10 @@ int32 RSDK::RunRetroEngine(int32 argc, char *argv[])
 #if RETRO_USE_MOD_LOADER
 #if RETRO_REV0U
         engine.version = 0;
-#endif
         InitModAPI(); // setup mods & the mod API table
-#if RETRO_REV0U
         engine.version = 5;
+#else
+        InitModAPI(); // setup mods & the mod API table
 #endif
 #endif
 
@@ -87,16 +72,14 @@ int32 RSDK::RunRetroEngine(int32 argc, char *argv[])
         }
         else {
             // No render device, throw a "QUIT" msg onto the message loop and call it a day :)
-#if RETRO_RENDERDEVICE_DIRECTX9 || RETRO_RENDERDEVICE_DIRECTX11
-            PostQuitMessage(0);
-#endif
+            SendQuitMsg();
         }
     }
 
     RenderDevice::InitFPSCap();
 
     while (RenderDevice::isRunning) {
-        RenderDevice::isRunning = RenderDevice::ProcessEvents();
+        RenderDevice::ProcessEvents();
 
         if (!RenderDevice::isRunning)
             break;
@@ -116,17 +99,38 @@ int32 RSDK::RunRetroEngine(int32 argc, char *argv[])
 #if !RETRO_USE_ORIGINAL_CODE
             if (customSettings.disableFocusPause)
                 engine.focusState = 0;
-            else
+            else if (SKU::userCore->CheckFocusLost()) {
+#else
+            if (SKU::userCore->CheckFocusLost()) {
 #endif
-                if (SKU::userCore->CheckFocusLost()) {
                 if (!(engine.focusState & 1)) {
                     engine.focusState = 1;
+
+#if !RETRO_USE_ORIGINAL_CODE
+                    for (int32 c = 0; c < CHANNEL_COUNT; ++c) {
+                        engine.focusPausedChannel[c] = false;
+                        if (!(channels[c].state & CHANNEL_PAUSED)) {
+                            PauseChannel(c);
+                            engine.focusPausedChannel[c] = true;
+                        }
+                    }
+#else
                     PauseSound();
+#endif
                 }
             }
             else if (engine.focusState) {
                 engine.focusState = 0;
+
+#if !RETRO_USE_ORIGINAL_CODE
+                for (int32 c = 0; c < CHANNEL_COUNT; ++c) {
+                    if (engine.focusPausedChannel[c])
+                        ResumeChannel(c);
+                    engine.focusPausedChannel[c] = false;
+                }
+#else
                 ResumeSound();
+#endif
             }
 #endif
 
@@ -178,10 +182,10 @@ int32 RSDK::RunRetroEngine(int32 argc, char *argv[])
                         globalVarsPtr    = NULL;
                         globalVarsInitCB = NULL;
 
-                        dataStorage[DATASET_STG].entryCount     = 0;
-                        dataStorage[DATASET_STG].usedStorage    = 0;
-                        dataStorage[DATASET_SFX].entryCount     = 0;
-                        dataStorage[DATASET_SFX].usedStorage    = 0;
+                        dataStorage[DATASET_STG].entryCount  = 0;
+                        dataStorage[DATASET_STG].usedStorage = 0;
+                        dataStorage[DATASET_SFX].entryCount  = 0;
+                        dataStorage[DATASET_SFX].usedStorage = 0;
 
                         for (int32 o = 0; o < objectClassCount; ++o) {
                             if (objectClassList[o].staticVars && *objectClassList[o].staticVars)
@@ -209,13 +213,13 @@ int32 RSDK::RunRetroEngine(int32 argc, char *argv[])
                         }
 
 #else
-                    SceneInfo pre = sceneInfo;
-                    InitEngine();
-                    sceneInfo.classCount = pre.classCount;
-                    if (pre.state == ENGINESTATE_LOAD) {
-                        sceneInfo.activeCategory = pre.activeCategory;
-                        sceneInfo.listPos        = pre.listPos;
-                    }
+                        SceneInfo pre = sceneInfo;
+                        InitEngine();
+                        sceneInfo.classCount = pre.classCount;
+                        if (pre.state == ENGINESTATE_LOAD) {
+                            sceneInfo.activeCategory = pre.activeCategory;
+                            sceneInfo.listPos        = pre.listPos;
+                        }
 #endif
                         RenderDevice::SetWindowTitle();
                         sceneInfo.state = ENGINESTATE_LOAD;
@@ -236,7 +240,7 @@ int32 RSDK::RunRetroEngine(int32 argc, char *argv[])
                         case 3: Legacy::v3::ProcessEngine(); break;
                     }
 #else
-                ProcessEngine();
+                    ProcessEngine();
 #endif
                 }
 
@@ -286,6 +290,7 @@ int32 RSDK::RunRetroEngine(int32 argc, char *argv[])
 
     // Shutdown
 
+    ReleaseInputDevices();
     AudioDevice::Release();
     RenderDevice::Release(false);
     SaveSettingsINI(false);
@@ -298,11 +303,8 @@ int32 RSDK::RunRetroEngine(int32 argc, char *argv[])
     Link::Close(gameLogicHandle);
     gameLogicHandle = NULL;
 
-    if (engine.consoleEnabled) {
-#if RETRO_PLATFORM == RETRO_WIN
-        FreeConsole();
-#endif
-    }
+    if (engine.consoleEnabled)
+        ReleaseConsole();
 
     return 0;
 }
@@ -697,8 +699,10 @@ void RSDK::LoadXMLObjects()
 {
     FileInfo info;
 
-    for (int32 m = 0; m < (int32)ActiveMods().size(); ++m) {
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
+
         InitFileInfo(&info);
         if (LoadFile(&info, "Data/Game/Game.xml", FMODE_RB)) {
             tinyxml2::XMLDocument *doc = new tinyxml2::XMLDocument;
@@ -749,7 +753,9 @@ void RSDK::LoadXMLObjects()
 void RSDK::LoadXMLSoundFX()
 {
     FileInfo info;
-    for (int32 m = 0; m < (int32)ActiveMods().size(); ++m) {
+
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
         InitFileInfo(&info);
         if (LoadFile(&info, "Data/Game/Game.xml", FMODE_RB)) {
@@ -775,7 +781,7 @@ void RSDK::LoadXMLSoundFX()
                                 sfxPath = valAttr->Value();
 
                             const tinyxml2::XMLAttribute *playsAttr = sfxElement->FindAttribute("maxConcurrentPlays");
-                            int32 maxConcurrentPlays = 0;
+                            int32 maxConcurrentPlays                = 0;
                             if (playsAttr)
                                 maxConcurrentPlays = playsAttr->IntValue();
 
@@ -801,7 +807,8 @@ int32 RSDK::LoadXMLStages(int32 mode, int32 gcListCount, int32 gcStageCount)
     int32 listCount  = 0;
     int32 stageCount = 0;
 
-    for (int32 m = 0; m < (int32)ActiveMods().size(); ++m) {
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         SetActiveMod(m);
         InitFileInfo(&info);
         if (LoadFile(&info, "Data/Game/Game.xml", FMODE_RB)) {
@@ -1217,7 +1224,8 @@ void RSDK::InitGameLink()
 #if RETRO_USE_MOD_LOADER
     }
 
-    for (int32 m = 0; m < ActiveMods().size(); ++m) {
+    int32 activeModCount = (int32)ActiveMods().size();
+    for (int32 m = 0; m < activeModCount; ++m) {
         currentMod = &modList[m];
         for (modLinkSTD linkModLogic : modList[m].linkModLogic) {
             if (!linkModLogic(&info, modList[m].id.c_str())) {
@@ -1252,7 +1260,7 @@ void RSDK::ProcessDebugCommands()
 
 #if RETRO_REV0U
     int32 state          = engine.version == 5 ? sceneInfo.state : Legacy::stageMode;
-    const int32 stepOver = engine.version == 5 ? ENGINESTATE_STEPOVER : Legacy::STAGEMODE_STEPOVER;
+    const int32 stepOver = engine.version == 5 ? (int32)ENGINESTATE_STEPOVER : (int32)Legacy::STAGEMODE_STEPOVER;
 #else
     uint8 state = sceneInfo.state;
     const uint8 stepOver = ENGINESTATE_STEPOVER;
@@ -1324,3 +1332,82 @@ void RSDK::ProcessDebugCommands()
     }
 #endif
 }
+
+#ifdef __SWITCH__
+#include <switch.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <sys/socket.h>
+#include <sys/errno.h>
+#include <arpa/inet.h>
+#include <unistd.h>
+
+static int32 s_nxlinkSock = -1;
+
+static void initNxLink()
+{
+    if (R_FAILED(socketInitializeDefault()))
+        return;
+
+    s_nxlinkSock = nxlinkStdio();
+    if (s_nxlinkSock >= 0)
+        printf("printf output now goes to nxlink server\n");
+    else
+        socketExit();
+}
+#endif
+
+void RSDK::InitCoreAPI()
+{
+#if RETRO_RENDERDEVICE_DIRECTX9 || RETRO_RENDERDEVICE_DIRECTX11
+    MSG Msg;
+    PeekMessage(&Msg, NULL, 0, 0, PM_REMOVE);
+    InitCommonControls();
+#endif
+
+#ifdef __SWITCH__
+    // initNxLink();
+#endif
+
+#if RETRO_RENDERDEVICE_SDL2 || RETRO_AUDIODEVICE_SDL2 || RETRO_INPUTDEVICE_SDL2
+    SDL_Init(0);
+#endif
+}
+void RSDK::ReleaseCoreAPI()
+{
+#if RETRO_RENDERDEVICE_SDL2 || RETRO_AUDIODEVICE_SDL2 || RETRO_INPUTDEVICE_SDL2
+    SDL_Quit();
+#endif
+
+#ifdef __SWITCH__
+    // socketExit();
+#endif
+}
+
+void RSDK::InitConsole()
+{
+#if RETRO_PLATFORM == RETRO_WIN
+    AllocConsole();
+    AttachConsole(GetCurrentProcessId());
+
+    freopen("CON", "w", stdout);
+#endif
+
+#if RETRO_PLATFORM == RETRO_SWITCH
+    consoleInit(NULL);
+#endif
+}
+void RSDK::ReleaseConsole()
+{
+#if RETRO_PLATFORM == RETRO_WIN
+    FreeConsole();
+#endif
+}
+
+void RSDK::SendQuitMsg()
+{
+#if RETRO_RENDERDEVICE_DIRECTX9 || RETRO_RENDERDEVICE_DIRECTX11
+    PostQuitMessage(0);
+#endif
+}
\ No newline at end of file
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Core/RetroEngine.hpp b/dependencies/RSDKv5/RSDKv5/RSDK/Core/RetroEngine.hpp
index 68bcca9..3b68b26 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Core/RetroEngine.hpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Core/RetroEngine.hpp
@@ -415,29 +415,12 @@ enum GameRegions {
 #include <GLFW/glfw3.h>
 #endif
 
-#if RETRO_RENDERDEVICE_SDL2
-#ifdef USING_VCPKG
-#include <SDL2/SDL.h>
-#else
-#include <SDL.h>
-#endif // ! USING_VCPKG
-#endif // ! RETRO_RENDERDEVICE_SDL2
-
-#include <theora/theoradec.h>
-
 #endif // ! RETRO_WIN
 
 #if RETRO_PLATFORM == RETRO_OSX
 
-#if RETRO_RENDERDEVICE_SDL2 || RETRO_AUDIODEVICE_SDL2 || RETRO_INPUTDEVICE_SDL2
-#include <SDL2/SDL.h>
-#endif
-
-#include <theora/theoradec.h>
-
 #include "cocoaHelpers.hpp"
 #elif RETRO_PLATFORM == RETRO_iOS
-#include <SDL2/SDL.h>
 
 #include "cocoaHelpers.hpp"
 #elif RETRO_PLATFORM == RETRO_LINUX || RETRO_PLATFORM == RETRO_SWITCH
@@ -451,12 +434,6 @@ enum GameRegions {
 #include <EGL/eglext.h> // EGL extensions
 #endif
 
-#if RETRO_RENDERDEVICE_SDL2 || RETRO_INPUTDEVICE_SDL2 || RETRO_AUDIODEVICE_SDL2
-#include <SDL2/SDL.h>
-#endif // ! RETRO_RENDERDEVICE_SDL2
-
-#include <theora/theoradec.h>
-
 #if RETRO_PLATFORM == RETRO_SWITCH
 #define PrintConsole _PrintConsole
 #include <switch.h>
@@ -471,11 +448,18 @@ enum GameRegions {
 #endif
 
 #include <androidHelpers.hpp>
-#include <theora/theoradec.h>
 
 #undef RETRO_USING_MOUSE
 #endif
 
+#if RETRO_RENDERDEVICE_SDL2 || RETRO_INPUTDEVICE_SDL2 || RETRO_AUDIODEVICE_SDL2
+// This is the way of including SDL that is recommended by the devs themselves:
+// https://wiki.libsdl.org/FAQDevelopment#do_i_include_sdl.h_or_sdlsdl.h
+#include "SDL.h"
+#endif
+
+#include <theora/theoradec.h>
+
 // ============================
 // ENGINE INCLUDES
 // ============================
@@ -539,6 +523,9 @@ struct RetroEngine {
 
     uint8 focusState = 0;
     uint8 inFocus    = 0;
+#if !RETRO_USE_ORIGINAL_CODE
+    uint8 focusPausedChannel[CHANNEL_COUNT];
+#endif
 
     bool32 initialized = false;
     bool32 hardPause   = false;
@@ -639,6 +626,17 @@ inline void RegisterGlobalVariables(void **globals, int32 size)
 }
 #endif
 
+// Some misc API stuff that needs a home
+
+// Used to Init API stuff that should be done regardless of Render/Audio/Input device APIs
+void InitCoreAPI();
+void ReleaseCoreAPI();
+
+void InitConsole();
+void ReleaseConsole();
+
+void SendQuitMsg();
+
 #if RETRO_REV0U
 #include "Legacy/RetroEngineLegacy.hpp"
 #endif
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Dev/Debug.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Dev/Debug.cpp
index b3a0f32..821553a 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Dev/Debug.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Dev/Debug.cpp
@@ -336,9 +336,6 @@ void RSDK::DevMenu_MainMenu()
 #endif
     }
     y += 20;
-#if RETRO_USE_MOD_LOADER
-    y += 2 * selectionCount;
-#endif
 
     // Storage box
 
@@ -841,7 +838,7 @@ void RSDK::DevMenu_OptionsMenu()
         switch (devMenu.selection) {
             case 0: {
                 devMenu.windowed    = videoSettings.windowed;
-                devMenu.windowScale = (videoSettings.windowWidth / videoSettings.pixWidth) - 1;
+                devMenu.windowScale = (videoSettings.windowHeight / videoSettings.pixHeight) - 1;
 
                 int32 aspect = (int32)((videoSettings.windowWidth / (float)videoSettings.windowHeight) * (float)SCREEN_YSIZE) >> 3;
                 switch (aspect) {
@@ -1044,6 +1041,7 @@ void RSDK::DevMenu_VideoOptionsMenu()
                 shaderList[0].linear   = !devMenu.windowed;
                 if (!devMenu.windowScale)
                     videoSettings.shaderID = SHADER_NONE;
+                devMenu.windowScale++;
 
                 int32 width = 0;
                 switch (devMenu.windowAspect) {
@@ -1064,8 +1062,8 @@ void RSDK::DevMenu_VideoOptionsMenu()
                     width = DEFAULT_PIXWIDTH;
 #endif
 
-                videoSettings.windowWidth  = width * (devMenu.windowScale + 1);
-                videoSettings.windowHeight = videoSettings.pixHeight * (devMenu.windowScale + 1);
+                videoSettings.windowWidth  = width * devMenu.windowScale;
+                videoSettings.windowHeight = videoSettings.pixHeight * devMenu.windowScale;
                 UpdateGameWindow();
 
                 devMenu.state     = DevMenu_OptionsMenu;
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Animation.hpp b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Animation.hpp
index bce0b42..974f980 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Animation.hpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Animation.hpp
@@ -12,7 +12,7 @@ namespace RSDK
 
 #define RSDK_SIGNATURE_SPR (0x525053) // "SPR"
 
-enum RotationSyles { ROTSTYLE_NONE, ROTSTYLE_FULL, ROTSTYLE_45DEG, ROTSTYLE_90DEG, ROTSTYLE_180DEG, ROTSTYLE_STATICFRAMES };
+enum RotationStyles { ROTSTYLE_NONE, ROTSTYLE_FULL, ROTSTYLE_45DEG, ROTSTYLE_90DEG, ROTSTYLE_180DEG, ROTSTYLE_STATICFRAMES };
 
 struct Hitbox {
     int16 left;
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/DX11/DX11RenderDevice.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/DX11/DX11RenderDevice.cpp
index d77e2dc..a32e23d 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/DX11/DX11RenderDevice.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/DX11/DX11RenderDevice.cpp
@@ -6,6 +6,9 @@
 
 #include <atlbase.h>
 
+#include "Ks.h"      // used for KSCATEGORY_AUDIO
+#include "Ksmedia.h" // used for KSCATEGORY_AUDIO
+
 #define DX11_WINDOWFLAGS_BORDERED   (WS_POPUP | WS_CAPTION | WS_SYSMENU | WS_GROUP)
 #define DX11_WINDOWFLAGS_BORDERLESS (WS_POPUP)
 
@@ -708,6 +711,9 @@ bool RenderDevice::InitGraphicsAPI()
     }
 
     int32 maxPixHeight = 0;
+#if !RETRO_USE_ORIGINAL_CODE
+    int32 screenWidth = 0;
+#endif
     for (int32 s = 0; s < SCREEN_COUNT; ++s) {
         if (videoSettings.pixHeight > maxPixHeight)
             maxPixHeight = videoSettings.pixHeight;
@@ -715,7 +721,11 @@ bool RenderDevice::InitGraphicsAPI()
         screens[s].size.y = videoSettings.pixHeight;
 
         float viewAspect  = viewSize.x / viewSize.y;
+#if !RETRO_USE_ORIGINAL_CODE
+        screenWidth = (int32)((viewAspect * videoSettings.pixHeight) + 3) & 0xFFFFFFFC;
+#else
         int32 screenWidth = (int32)((viewAspect * videoSettings.pixHeight) + 3) & 0xFFFFFFFC;
+#endif
         if (screenWidth < videoSettings.pixWidth)
             screenWidth = videoSettings.pixWidth;
 
@@ -775,7 +785,11 @@ bool RenderDevice::InitGraphicsAPI()
         dx11Context->RSSetViewports(1, &dx11ViewPort);
     }
 
+#if !RETRO_USE_ORIGINAL_CODE
+    if (screenWidth <= 512 && maxPixHeight <= 256) {
+#else
     if (maxPixHeight <= 256) {
+#endif
         textureSize.x = 512.0;
         textureSize.y = 256.0;
     }
@@ -1478,29 +1492,51 @@ void RenderDevice::ProcessEvent(MSG Msg)
 
 #if !RETRO_USE_ORIGINAL_CODE
                 case VK_F1:
-                    sceneInfo.listPos--;
-                    if (sceneInfo.listPos < sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetStart) {
-                        sceneInfo.activeCategory--;
-                        if (sceneInfo.activeCategory >= sceneInfo.categoryCount) {
-                            sceneInfo.activeCategory = sceneInfo.categoryCount - 1;
+                    if (engine.devMenu) {
+                        sceneInfo.listPos--;
+                        if (sceneInfo.listPos < sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetStart) {
+                            sceneInfo.activeCategory--;
+                            if (sceneInfo.activeCategory >= sceneInfo.categoryCount) {
+                                sceneInfo.activeCategory = sceneInfo.categoryCount - 1;
+                            }
+                            sceneInfo.listPos = sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetEnd - 1;
                         }
-                        sceneInfo.listPos = sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetEnd - 1;
-                    }
 
-                    LoadScene();
+#if RETRO_REV0U
+                        switch (engine.version) {
+                            default: break;
+                            case 5: LoadScene(); break;
+                            case 4:
+                            case 3: RSDK::Legacy::stageMode = RSDK::Legacy::STAGEMODE_LOAD; break;
+                        }
+#else
+                        LoadScene();
+#endif
+                    }
                     break;
 
                 case VK_F2:
-                    sceneInfo.listPos++;
-                    if (sceneInfo.listPos >= sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetEnd) {
-                        sceneInfo.activeCategory++;
-                        if (sceneInfo.activeCategory >= sceneInfo.categoryCount) {
-                            sceneInfo.activeCategory = 0;
+                    if (engine.devMenu) {
+                        sceneInfo.listPos++;
+                        if (sceneInfo.listPos >= sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetEnd) {
+                            sceneInfo.activeCategory++;
+                            if (sceneInfo.activeCategory >= sceneInfo.categoryCount) {
+                                sceneInfo.activeCategory = 0;
+                            }
+                            sceneInfo.listPos = sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetStart;
                         }
-                        sceneInfo.listPos = sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetStart;
-                    }
 
-                    LoadScene();
+#if RETRO_REV0U
+                        switch (engine.version) {
+                            default: break;
+                            case 5: LoadScene(); break;
+                            case 4:
+                            case 3: RSDK::Legacy::stageMode = RSDK::Legacy::STAGEMODE_LOAD; break;
+                        }
+#else
+                        LoadScene();
+#endif
+                    }
                     break;
 #endif
 
@@ -1513,8 +1549,20 @@ void RenderDevice::ProcessEvent(MSG Msg)
 
 #if !RETRO_USE_ORIGINAL_CODE
                 case VK_F5:
-                    // Quick-Reload
-                    LoadScene();
+                    if (engine.devMenu) {
+                        // Quick-Reload
+
+#if RETRO_REV0U
+                        switch (engine.version) {
+                            default: break;
+                            case 5: LoadScene(); break;
+                            case 4:
+                            case 3: RSDK::Legacy::stageMode = RSDK::Legacy::STAGEMODE_LOAD; break;
+                        }
+#else
+                        LoadScene();
+#endif
+                    }
                     break;
 
                 case VK_F6:
@@ -1662,12 +1710,13 @@ bool RenderDevice::ProcessEvents()
             return false;
     }
 
-    return true;
+    return isRunning;
 }
 
 LRESULT CALLBACK RenderDevice::WindowEventCallback(HWND hRecipient, UINT message, WPARAM wParam, LPARAM lParam)
 {
-    GUID deviceGUID = { 1771351300, 37871, 4560, { 163, 204, 0, 160, 201, 34, 49, 150 } };
+    bool32 forceExit = false;
+    GUID deviceGUID  = KSCATEGORY_AUDIO;
 
     switch (message) {
         case WM_CREATE: {
@@ -1677,11 +1726,13 @@ LRESULT CALLBACK RenderDevice::WindowEventCallback(HWND hRecipient, UINT message
             DEV_BROADCAST_DEVICEINTERFACE filter;
             filter.dbcc_name[0]    = 0;
             filter.dbcc_reserved   = 0;
-            filter.dbcc_size       = 32;
+            filter.dbcc_size       = sizeof(DEV_BROADCAST_DEVICEINTERFACE);
             filter.dbcc_devicetype = DBT_DEVTYP_DEVICEINTERFACE;
             filter.dbcc_classguid  = deviceGUID;
 
             deviceNotif = RegisterDeviceNotification(hRecipient, &filter, DEVICE_NOTIFY_WINDOW_HANDLE);
+
+            forceExit = true;
             break;
         }
 
@@ -1692,10 +1743,11 @@ LRESULT CALLBACK RenderDevice::WindowEventCallback(HWND hRecipient, UINT message
             }
 
             isRunning = false;
+            forceExit = true;
             break;
 
         case WM_MOVE:
-        case WM_SIZE: break;
+        case WM_SIZE: forceExit = true; break;
 
         case WM_ACTIVATE:
             if (wParam) {
@@ -1729,11 +1781,15 @@ LRESULT CALLBACK RenderDevice::WindowEventCallback(HWND hRecipient, UINT message
 
                 videoSettings.windowState = WINDOWSTATE_INACTIVE;
             }
+
+            forceExit = true;
             break;
 
         case WM_PAINT:
             BeginPaint(hRecipient, &Paint);
             EndPaint(hRecipient, &Paint);
+
+            forceExit = true;
             break;
 
         case WM_DEVICECHANGE: {
@@ -1758,11 +1814,17 @@ LRESULT CALLBACK RenderDevice::WindowEventCallback(HWND hRecipient, UINT message
 #if RETRO_INPUTDEVICE_XINPUT
             SKU::InitXInputAPI();
 #endif
+
+            forceExit = true;
             break;
         }
 
 #if RETRO_INPUTDEVICE_RAWINPUT
-        case WM_INPUT: SKU::UpdateHIDButtonStates((HRAWINPUT)lParam); break;
+        case WM_INPUT:
+            SKU::UpdateHIDButtonStates((HRAWINPUT)lParam);
+
+            forceExit = true;
+            break;
 #endif
 
         case WM_SYSCOMMAND: {
@@ -1780,21 +1842,30 @@ LRESULT CALLBACK RenderDevice::WindowEventCallback(HWND hRecipient, UINT message
                 videoSettings.windowState = WINDOWSTATE_ACTIVE;
             }
 
-            return DefWindowProc(hRecipient, WM_SYSCOMMAND, wParam, lParam);
+            break;
         }
 
         case WM_MENUSELECT:
         case WM_ENTERSIZEMOVE:
             touchInfo.down[0] = 0;
             touchInfo.count   = 0;
+
+            forceExit = true;
             break;
 
-        case WM_EXITSIZEMOVE: GetDisplays(); break;
+        case WM_EXITSIZEMOVE:
+            GetDisplays();
 
-        default: return DefWindowProc(hRecipient, message, wParam, lParam);
+            forceExit = true;
+            break;
+
+        default: break;
     }
 
-    return 0;
+    if (forceExit)
+        return 0;
+    else
+        return DefWindowProc(hRecipient, message, wParam, lParam);
 }
 
 void RenderDevice::SetupImageTexture(int32 width, int32 height, uint8 *imagePixels)
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/DX9/DX9RenderDevice.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/DX9/DX9RenderDevice.cpp
index 53ff75c..47f15a8 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/DX9/DX9RenderDevice.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/DX9/DX9RenderDevice.cpp
@@ -3,6 +3,9 @@
 #include <D3Dcompiler.h>
 #endif
 
+#include "Ks.h"      // used for KSCATEGORY_AUDIO
+#include "Ksmedia.h" // used for KSCATEGORY_AUDIO
+
 // for some reason this seems to be applying "thick frame" instead of thin frame (intended)
 // it is for this reason that I'm unable to get the cool mini window toolbar that og mania has :(
 // tldr: microsoft sucks again
@@ -599,14 +602,21 @@ bool RenderDevice::InitGraphicsAPI()
     }
 
     int32 maxPixHeight = 0;
+#if !RETRO_USE_ORIGINAL_CODE
+    int32 screenWidth = 0;
+#endif
     for (int32 s = 0; s < SCREEN_COUNT; ++s) {
         if (videoSettings.pixHeight > maxPixHeight)
             maxPixHeight = videoSettings.pixHeight;
 
         screens[s].size.y = videoSettings.pixHeight;
 
-        float viewAspect  = viewSize.x / viewSize.y;
+        float viewAspect = viewSize.x / viewSize.y;
+#if !RETRO_USE_ORIGINAL_CODE
+        screenWidth = (int32)((viewAspect * videoSettings.pixHeight) + 3) & 0xFFFFFFFC;
+#else
         int32 screenWidth = (int32)((viewAspect * videoSettings.pixHeight) + 3) & 0xFFFFFFFC;
+#endif
         if (screenWidth < videoSettings.pixWidth)
             screenWidth = videoSettings.pixWidth;
 
@@ -646,7 +656,11 @@ bool RenderDevice::InitGraphicsAPI()
         dx9Device->SetViewport(&dx9ViewPort);
     }
 
+#if !RETRO_USE_ORIGINAL_CODE
+    if (screenWidth <= 512 && maxPixHeight <= 256) {
+#else
     if (maxPixHeight <= 256) {
+#endif
         textureSize.x = 512.0;
         textureSize.y = 256.0;
     }
@@ -1176,7 +1190,16 @@ void RenderDevice::ProcessEvent(MSG Msg)
                             sceneInfo.listPos = sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetEnd - 1;
                         }
 
+#if RETRO_REV0U
+                        switch (engine.version) {
+                            default: break;
+                            case 5: LoadScene(); break;
+                            case 4:
+                            case 3: RSDK::Legacy::stageMode = RSDK::Legacy::STAGEMODE_LOAD; break;
+                        }
+#else
                         LoadScene();
+#endif
 
                         handledMsg = true;
                     }
@@ -1193,7 +1216,16 @@ void RenderDevice::ProcessEvent(MSG Msg)
                             sceneInfo.listPos = sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetStart;
                         }
 
+#if RETRO_REV0U
+                        switch (engine.version) {
+                            default: break;
+                            case 5: LoadScene(); break;
+                            case 4:
+                            case 3: RSDK::Legacy::stageMode = RSDK::Legacy::STAGEMODE_LOAD; break;
+                        }
+#else
                         LoadScene();
+#endif
 
                         handledMsg = true;
                     }
@@ -1212,7 +1244,17 @@ void RenderDevice::ProcessEvent(MSG Msg)
                 case VK_F5:
                     if (engine.devMenu) {
                         // Quick-Reload
+
+#if RETRO_REV0U
+                        switch (engine.version) {
+                            default: break;
+                            case 5: LoadScene(); break;
+                            case 4:
+                            case 3: RSDK::Legacy::stageMode = RSDK::Legacy::STAGEMODE_LOAD; break;
+                        }
+#else
                         LoadScene();
+#endif
 
                         handledMsg = true;
                     }
@@ -1379,12 +1421,13 @@ bool RenderDevice::ProcessEvents()
             return false;
     }
 
-    return true;
+    return isRunning;
 }
 
 LRESULT CALLBACK RenderDevice::WindowEventCallback(HWND hRecipient, UINT message, WPARAM wParam, LPARAM lParam)
 {
-    GUID deviceGUID = { 1771351300, 37871, 4560, { 163, 204, 0, 160, 201, 34, 49, 150 } };
+    bool32 forceExit = false;
+    GUID deviceGUID  = KSCATEGORY_AUDIO;
 
     switch (message) {
         case WM_CREATE: {
@@ -1394,11 +1437,13 @@ LRESULT CALLBACK RenderDevice::WindowEventCallback(HWND hRecipient, UINT message
             DEV_BROADCAST_DEVICEINTERFACE filter;
             filter.dbcc_name[0]    = 0;
             filter.dbcc_reserved   = 0;
-            filter.dbcc_size       = 32;
+            filter.dbcc_size       = sizeof(DEV_BROADCAST_DEVICEINTERFACE);
             filter.dbcc_devicetype = DBT_DEVTYP_DEVICEINTERFACE;
             filter.dbcc_classguid  = deviceGUID;
 
             deviceNotif = RegisterDeviceNotification(hRecipient, &filter, DEVICE_NOTIFY_WINDOW_HANDLE);
+
+            forceExit = true;
             break;
         }
 
@@ -1409,10 +1454,11 @@ LRESULT CALLBACK RenderDevice::WindowEventCallback(HWND hRecipient, UINT message
             }
 
             isRunning = false;
+            forceExit = true;
             break;
 
         case WM_MOVE:
-        case WM_SIZE: break;
+        case WM_SIZE: forceExit = true; break;
 
         case WM_ACTIVATE:
             if (wParam) {
@@ -1446,11 +1492,15 @@ LRESULT CALLBACK RenderDevice::WindowEventCallback(HWND hRecipient, UINT message
 
                 videoSettings.windowState = WINDOWSTATE_INACTIVE;
             }
+
+            forceExit = true;
             break;
 
         case WM_PAINT:
             BeginPaint(hRecipient, &Paint);
             EndPaint(hRecipient, &Paint);
+
+            forceExit = true;
             break;
 
         case WM_DEVICECHANGE: {
@@ -1475,11 +1525,17 @@ LRESULT CALLBACK RenderDevice::WindowEventCallback(HWND hRecipient, UINT message
 #if RETRO_INPUTDEVICE_XINPUT
             SKU::InitXInputAPI();
 #endif
+
+            forceExit = true;
             break;
         }
 
 #if RETRO_INPUTDEVICE_RAWINPUT
-        case WM_INPUT: SKU::UpdateHIDButtonStates((HRAWINPUT)lParam); break;
+        case WM_INPUT:
+            SKU::UpdateHIDButtonStates((HRAWINPUT)lParam);
+
+            forceExit = true;
+            break;
 #endif
 
         case WM_SYSCOMMAND: {
@@ -1497,21 +1553,30 @@ LRESULT CALLBACK RenderDevice::WindowEventCallback(HWND hRecipient, UINT message
                 videoSettings.windowState = WINDOWSTATE_ACTIVE;
             }
 
-            return DefWindowProc(hRecipient, WM_SYSCOMMAND, wParam, lParam);
+            break;
         }
 
         case WM_MENUSELECT:
         case WM_ENTERSIZEMOVE:
             touchInfo.down[0] = 0;
             touchInfo.count   = 0;
+
+            forceExit = true;
             break;
 
-        case WM_EXITSIZEMOVE: GetDisplays(); break;
+        case WM_EXITSIZEMOVE:
+            GetDisplays();
 
-        default: return DefWindowProc(hRecipient, message, wParam, lParam);
+            forceExit = true;
+            break;
+
+        default: break;
     }
 
-    return 0;
+    if (forceExit)
+        return 0;
+    else
+        return DefWindowProc(hRecipient, message, wParam, lParam);
 }
 
 void RenderDevice::SetupImageTexture(int32 width, int32 height, uint8 *imagePixels)
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Drawing.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Drawing.cpp
index ba797e1..b85532e 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Drawing.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Drawing.cpp
@@ -169,7 +169,7 @@ VideoSettings RSDK::videoSettingsBackup;
 int32 RSDK::userShaderCount = 0;
 #endif
 
-bool32 RenderDeviceBase::isRunning         = true;
+bool32 RenderDeviceBase::isRunning         = false;
 int32 RenderDeviceBase::windowRefreshDelay = 0;
 
 #if RETRO_REV02
@@ -4176,14 +4176,14 @@ void RSDK::DrawTile(uint16 *tiles, int32 countX, int32 countY, Vector2 *position
                             switch ((tile >> 10) & 3) {
                                 case FLIP_NONE:
                                     DrawSpriteRotozoom(x + (tx * TILE_SIZE), y + (ty * TILE_SIZE), pivotX, pivotY, TILE_SIZE, TILE_SIZE, 0,
-                                                       TILE_SIZE * (tile & 0x3FF), sceneInfo.entity->scale.x, sceneInfo.entity->scale.y, FLIP_X, 0,
-                                                       sceneInfo.entity->inkEffect, sceneInfo.entity->alpha, 0);
+                                                       TILE_SIZE * (tile & 0x3FF), sceneInfo.entity->scale.x, sceneInfo.entity->scale.y, FLIP_NONE,
+                                                       0x000, sceneInfo.entity->inkEffect, sceneInfo.entity->alpha, 0);
                                     break;
 
                                 case FLIP_X:
                                     DrawSpriteRotozoom(x + (tx * TILE_SIZE), y + (ty * TILE_SIZE), pivotX, pivotY, TILE_SIZE, TILE_SIZE, 0,
-                                                       TILE_SIZE * (tile & 0x3FF), sceneInfo.entity->scale.x, sceneInfo.entity->scale.y, FLIP_X, 0,
-                                                       sceneInfo.entity->inkEffect, sceneInfo.entity->alpha, 0);
+                                                       TILE_SIZE * (tile & 0x3FF), sceneInfo.entity->scale.x, sceneInfo.entity->scale.y, FLIP_X,
+                                                       0x000, sceneInfo.entity->inkEffect, sceneInfo.entity->alpha, 0);
                                     break;
 
                                 case FLIP_Y:
@@ -4221,7 +4221,7 @@ void RSDK::DrawTile(uint16 *tiles, int32 countX, int32 countY, Vector2 *position
                             switch ((tile >> 10) & 3) {
                                 case FLIP_NONE:
                                     DrawSpriteRotozoom(x + (tx * TILE_SIZE), y + (ty * TILE_SIZE), pivotX, pivotY, TILE_SIZE, TILE_SIZE, 0,
-                                                       TILE_SIZE * (tile & 0x3FF), sceneInfo.entity->scale.x, sceneInfo.entity->scale.y, FLIP_X,
+                                                       TILE_SIZE * (tile & 0x3FF), sceneInfo.entity->scale.x, sceneInfo.entity->scale.y, FLIP_NONE,
                                                        sceneInfo.entity->rotation, sceneInfo.entity->inkEffect, sceneInfo.entity->alpha, 0);
                                     break;
 
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/EGL/EGLRenderDevice.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/EGL/EGLRenderDevice.cpp
index ef8d8d9..6be85ce 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/EGL/EGLRenderDevice.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/EGL/EGLRenderDevice.cpp
@@ -283,7 +283,7 @@ bool RenderDevice::InitGraphicsAPI()
     videoSettings.fsWidth  = 1920;
     videoSettings.fsHeight = 1080;
 #elif RETRO_PLATFORM == RETRO_ANDROID
-    customSettings.maxPixWidth = 510;
+    customSettings.maxPixWidth = 0;
     videoSettings.fsWidth      = 0;
     videoSettings.fsHeight     = 0;
 #endif
@@ -314,6 +314,9 @@ bool RenderDevice::InitGraphicsAPI()
     }
 
     int32 maxPixHeight = 0;
+#if !RETRO_USE_ORIGINAL_CODE
+    int32 screenWidth = 0;
+#endif
     for (int32 s = 0; s < SCREEN_COUNT; ++s) {
         if (videoSettings.pixHeight > maxPixHeight)
             maxPixHeight = videoSettings.pixHeight;
@@ -321,7 +324,11 @@ bool RenderDevice::InitGraphicsAPI()
         screens[s].size.y = videoSettings.pixHeight;
 
         float viewAspect  = viewSize.x / viewSize.y;
+#if !RETRO_USE_ORIGINAL_CODE
+        screenWidth = (int32)((viewAspect * videoSettings.pixHeight) + 3) & 0xFFFFFFFC;
+#else
         int32 screenWidth = (int32)((viewAspect * videoSettings.pixHeight) + 3) & 0xFFFFFFFC;
+#endif
         if (screenWidth < videoSettings.pixWidth)
             screenWidth = videoSettings.pixWidth;
 
@@ -357,7 +364,11 @@ bool RenderDevice::InitGraphicsAPI()
         viewportSize.x = (pixAspect * viewSize.y);
     }
 
+#if !RETRO_USE_ORIGINAL_CODE
+    if (screenWidth <= 512 && maxPixHeight <= 256) {
+#else
     if (maxPixHeight <= 256) {
+#endif
         textureSize.x = 512.0;
         textureSize.y = 256.0;
     }
@@ -485,8 +496,10 @@ bool RenderDevice::ProcessEvents()
         if (source)
             source->process(app, source);
 
-        if (app->destroyRequested)
+        if (app->destroyRequested) {
+            isRunning = false;
             return false;
+        }
     }
 
     if (videoSettings.windowState == WINDOWSTATE_INACTIVE) {
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/GLFW/GLFWRenderDevice.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/GLFW/GLFWRenderDevice.cpp
index a826a93..0da5711 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/GLFW/GLFWRenderDevice.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/GLFW/GLFWRenderDevice.cpp
@@ -217,6 +217,9 @@ bool RenderDevice::InitGraphicsAPI()
     }
 
     int32 maxPixHeight = 0;
+#if !RETRO_USE_ORIGINAL_CODE
+    int32 screenWidth = 0;
+#endif
     for (int32 s = 0; s < SCREEN_COUNT; ++s) {
         if (videoSettings.pixHeight > maxPixHeight)
             maxPixHeight = videoSettings.pixHeight;
@@ -224,7 +227,11 @@ bool RenderDevice::InitGraphicsAPI()
         screens[s].size.y = videoSettings.pixHeight;
 
         float viewAspect  = viewSize.x / viewSize.y;
+#if !RETRO_USE_ORIGINAL_CODE
+        screenWidth = (int32)((viewAspect * videoSettings.pixHeight) + 3) & 0xFFFFFFFC;
+#else
         int32 screenWidth = (int32)((viewAspect * videoSettings.pixHeight) + 3) & 0xFFFFFFFC;
+#endif
         if (screenWidth < videoSettings.pixWidth)
             screenWidth = videoSettings.pixWidth;
 
@@ -263,7 +270,11 @@ bool RenderDevice::InitGraphicsAPI()
         viewportSize.x = (pixAspect * viewSize.y);
     }
 
+#if !RETRO_USE_ORIGINAL_CODE
+    if (screenWidth <= 512 && maxPixHeight <= 256) {
+#else
     if (maxPixHeight <= 256) {
+#endif
         textureSize.x = 512.0;
         textureSize.y = 256.0;
     }
@@ -379,7 +390,9 @@ void RenderDevice::CopyFrameBuffer()
 bool RenderDevice::ProcessEvents()
 {
     glfwPollEvents();
-    return !glfwWindowShouldClose(window);
+    if (glfwWindowShouldClose(window))
+        isRunning = false;
+    return false;
 }
 
 void RenderDevice::FlipScreen()
@@ -687,9 +700,26 @@ void RenderDevice::RefreshWindow()
 
     if (!InitGraphicsAPI() || !InitShaders())
         return;
+
+    videoSettings.windowState = WINDOWSTATE_ACTIVE;
 }
 
-void RenderDevice::GetWindowSize(int32 *width, int32 *height) { glfwGetWindowSize(window, width, height); }
+void RenderDevice::GetWindowSize(int32 *width, int32 *height)
+{
+    int32 widest = 0, highest = 0, count = 0;
+    GLFWmonitor **monitors = glfwGetMonitors(&count);
+    for (int32 i = 0; i < count; i++) {
+        const GLFWvidmode *mode = glfwGetVideoMode(monitors[i]);
+        if (mode->height > highest) {
+            highest = mode->height;
+            widest  = mode->width;
+        }
+    }
+    if (width)
+        *width = widest;
+    if (height)
+        *height = highest;
+}
 
 void RenderDevice::SetupImageTexture(int32 width, int32 height, uint8 *imagePixels)
 {
@@ -879,29 +909,51 @@ void RenderDevice::ProcessKeyEvent(GLFWwindow *, int32 key, int32 scancode, int3
 
 #if !RETRO_USE_ORIGINAL_CODE
                 case GLFW_KEY_F1:
-                    sceneInfo.listPos--;
-                    if (sceneInfo.listPos < sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetStart) {
-                        sceneInfo.activeCategory--;
-                        if (sceneInfo.activeCategory >= sceneInfo.categoryCount) {
-                            sceneInfo.activeCategory = sceneInfo.categoryCount - 1;
+                    if (engine.devMenu) {
+                        sceneInfo.listPos--;
+                        if (sceneInfo.listPos < sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetStart) {
+                            sceneInfo.activeCategory--;
+                            if (sceneInfo.activeCategory >= sceneInfo.categoryCount) {
+                                sceneInfo.activeCategory = sceneInfo.categoryCount - 1;
+                            }
+                            sceneInfo.listPos = sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetEnd - 1;
                         }
-                        sceneInfo.listPos = sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetEnd - 1;
-                    }
 
-                    LoadScene();
+#if RETRO_REV0U
+                        switch (engine.version) {
+                            default: break;
+                            case 5: LoadScene(); break;
+                            case 4:
+                            case 3: RSDK::Legacy::stageMode = RSDK::Legacy::STAGEMODE_LOAD; break;
+                        }
+#else
+                        LoadScene();
+#endif
+                    }
                     break;
 
                 case GLFW_KEY_F2:
-                    sceneInfo.listPos++;
-                    if (sceneInfo.listPos >= sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetEnd) {
-                        sceneInfo.activeCategory++;
-                        if (sceneInfo.activeCategory >= sceneInfo.categoryCount) {
-                            sceneInfo.activeCategory = 0;
+                    if (engine.devMenu) {
+                        sceneInfo.listPos++;
+                        if (sceneInfo.listPos >= sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetEnd) {
+                            sceneInfo.activeCategory++;
+                            if (sceneInfo.activeCategory >= sceneInfo.categoryCount) {
+                                sceneInfo.activeCategory = 0;
+                            }
+                            sceneInfo.listPos = sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetStart;
                         }
-                        sceneInfo.listPos = sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetStart;
-                    }
 
-                    LoadScene();
+#if RETRO_REV0U
+                        switch (engine.version) {
+                            default: break;
+                            case 5: LoadScene(); break;
+                            case 4:
+                            case 3: RSDK::Legacy::stageMode = RSDK::Legacy::STAGEMODE_LOAD; break;
+                        }
+#else
+                        LoadScene();
+#endif
+                    }
                     break;
 #endif
 
@@ -912,8 +964,19 @@ void RenderDevice::ProcessKeyEvent(GLFWwindow *, int32 key, int32 scancode, int3
 
 #if !RETRO_USE_ORIGINAL_CODE
                 case GLFW_KEY_F5:
-                    // Quick-Reload
-                    LoadScene();
+                    if (engine.devMenu) {
+                        // Quick-Reload
+#if RETRO_REV0U
+                        switch (engine.version) {
+                            default: break;
+                            case 5: LoadScene(); break;
+                            case 4:
+                            case 3: RSDK::Legacy::stageMode = RSDK::Legacy::STAGEMODE_LOAD; break;
+                        }
+#else
+                        LoadScene();
+#endif
+                    }
                     break;
 
                 case GLFW_KEY_F6:
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/SDL2/SDL2RenderDevice.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/SDL2/SDL2RenderDevice.cpp
index eb6ca5d..a830813 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/SDL2/SDL2RenderDevice.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/SDL2/SDL2RenderDevice.cpp
@@ -326,7 +326,7 @@ void RenderDevice::Release(bool32 isRefresh)
         SDL_DestroyWindow(window);
 
     if (!isRefresh)
-        SDL_Quit();
+        SDL_QuitSubSystem(SDL_INIT_VIDEO | SDL_INIT_EVENTS);
 
     if (!isRefresh) {
         if (scanlines)
@@ -475,6 +475,9 @@ bool RenderDevice::InitGraphicsAPI()
     SDL_SetWindowPosition(window, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED);
 
     int32 maxPixHeight = 0;
+#if !RETRO_USE_ORIGINAL_CODE
+    int32 screenWidth = 0;
+#endif
     for (int32 s = 0; s < 4; ++s) {
         if (videoSettings.pixHeight > maxPixHeight)
             maxPixHeight = videoSettings.pixHeight;
@@ -482,7 +485,11 @@ bool RenderDevice::InitGraphicsAPI()
         screens[s].size.y = videoSettings.pixHeight;
 
         float viewAspect  = viewSize.x / viewSize.y;
+#if !RETRO_USE_ORIGINAL_CODE
+        screenWidth = (int32)((viewAspect * videoSettings.pixHeight) + 3) & 0xFFFFFFFC;
+#else
         int32 screenWidth = (int32)((viewAspect * videoSettings.pixHeight) + 3) & 0xFFFFFFFC;
+#endif
         if (screenWidth < videoSettings.pixWidth)
             screenWidth = videoSettings.pixWidth;
 
@@ -504,7 +511,11 @@ bool RenderDevice::InitGraphicsAPI()
     SDL_RenderSetLogicalSize(renderer, videoSettings.pixWidth, SCREEN_YSIZE);
     SDL_SetRenderDrawBlendMode(renderer, SDL_BLENDMODE_BLEND);
 
+#if !RETRO_USE_ORIGINAL_CODE
+    if (screenWidth <= 512 && maxPixHeight <= 256) {
+#else
     if (maxPixHeight <= 256) {
+#endif
         textureSize.x = 512.0;
         textureSize.y = 256.0;
     }
@@ -634,7 +645,7 @@ void RenderDevice::GetDisplays()
 
         int32 refreshRate = displayInfo.displays[newDisplayCount].refresh_rate;
         if (refreshRate >= 59 && (refreshRate <= 60 || refreshRate >= 120) && displayInfo.displays[newDisplayCount].height >= (SCREEN_YSIZE * 2)) {
-            if (d && refreshRate == 60 && displayInfo.displays[newDisplayCount - 1].refresh_rate == 59) {
+            if (newDisplayCount != 0 && refreshRate == 60 && displayInfo.displays[newDisplayCount - 1].refresh_rate == 59) {
                 memcpy(&displayInfo.displays[newDisplayCount - 1], &displayInfo.displays[newDisplayCount], sizeof(displayInfo.displays[0]));
                 --newDisplayCount;
             }
@@ -836,29 +847,51 @@ void RenderDevice::ProcessEvent(SDL_Event event)
 
 #if !RETRO_USE_ORIGINAL_CODE
                 case SDL_SCANCODE_F1:
-                    sceneInfo.listPos--;
-                    if (sceneInfo.listPos < sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetStart) {
-                        sceneInfo.activeCategory--;
-                        if (sceneInfo.activeCategory >= sceneInfo.categoryCount) {
-                            sceneInfo.activeCategory = sceneInfo.categoryCount - 1;
+                    if (engine.devMenu) {
+                        sceneInfo.listPos--;
+                        if (sceneInfo.listPos < sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetStart) {
+                            sceneInfo.activeCategory--;
+                            if (sceneInfo.activeCategory >= sceneInfo.categoryCount) {
+                                sceneInfo.activeCategory = sceneInfo.categoryCount - 1;
+                            }
+                            sceneInfo.listPos = sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetEnd - 1;
                         }
-                        sceneInfo.listPos = sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetEnd - 1;
-                    }
 
-                    LoadScene();
+#if RETRO_REV0U
+                        switch (engine.version) {
+                            default: break;
+                            case 5: LoadScene(); break;
+                            case 4:
+                            case 3: RSDK::Legacy::stageMode = RSDK::Legacy::STAGEMODE_LOAD; break;
+                        }
+#else
+                        LoadScene();
+#endif
+                    }
                     break;
 
                 case SDL_SCANCODE_F2:
-                    sceneInfo.listPos++;
-                    if (sceneInfo.listPos >= sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetEnd) {
-                        sceneInfo.activeCategory++;
-                        if (sceneInfo.activeCategory >= sceneInfo.categoryCount) {
-                            sceneInfo.activeCategory = 0;
+                    if (engine.devMenu) {
+                        sceneInfo.listPos++;
+                        if (sceneInfo.listPos >= sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetEnd) {
+                            sceneInfo.activeCategory++;
+                            if (sceneInfo.activeCategory >= sceneInfo.categoryCount) {
+                                sceneInfo.activeCategory = 0;
+                            }
+                            sceneInfo.listPos = sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetStart;
                         }
-                        sceneInfo.listPos = sceneInfo.listCategory[sceneInfo.activeCategory].sceneOffsetStart;
-                    }
 
-                    LoadScene();
+#if RETRO_REV0U
+                        switch (engine.version) {
+                            default: break;
+                            case 5: LoadScene(); break;
+                            case 4:
+                            case 3: RSDK::Legacy::stageMode = RSDK::Legacy::STAGEMODE_LOAD; break;
+                        }
+#else
+                        LoadScene();
+#endif
+                    }
                     break;
 #endif
 
@@ -869,8 +902,19 @@ void RenderDevice::ProcessEvent(SDL_Event event)
 
 #if !RETRO_USE_ORIGINAL_CODE
                 case SDL_SCANCODE_F5:
-                    // Quick-Reload
-                    LoadScene();
+                    if (engine.devMenu) {
+                        // Quick-Reload
+#if RETRO_REV0U
+                        switch (engine.version) {
+                            default: break;
+                            case 5: LoadScene(); break;
+                            case 4:
+                            case 3: RSDK::Legacy::stageMode = RSDK::Legacy::STAGEMODE_LOAD; break;
+                        }
+#else
+                        LoadScene();
+#endif
+                    }
                     break;
 
                 case SDL_SCANCODE_F6:
@@ -969,7 +1013,8 @@ bool RenderDevice::ProcessEvents()
         if (!isRunning)
             return false;
     }
-    return true;
+
+    return isRunning;
 }
 
 void RenderDevice::SetupImageTexture(int32 width, int32 height, uint8 *imagePixels)
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Scene3D.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Scene3D.cpp
index 65c1589..dd51e47 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Scene3D.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Scene3D.cpp
@@ -816,6 +816,33 @@ void RSDK::AddMeshFrameToScene(uint16 modelFrames, uint16 sceneIndex, Animator *
         }
     }
 }
+
+void RSDK::Sort3DDrawList(Scene3D *scn, int32 first, int32 last)
+{
+    if (first < last) {
+        int32 i = first;
+        int32 j = last;
+
+        int32 index = scn->faceBuffer[i].index;
+        int32 depth = scn->faceBuffer[i].depth;
+
+        while (i < j) {
+            while (scn->faceBuffer[j].depth <= depth && i < j) j--;
+            scn->faceBuffer[i].index = scn->faceBuffer[j].index;
+            scn->faceBuffer[i].depth = scn->faceBuffer[j].depth;
+
+            while (scn->faceBuffer[i].depth >= depth && i < j) i++;
+            scn->faceBuffer[j].index = scn->faceBuffer[i].index;
+            scn->faceBuffer[j].depth = scn->faceBuffer[i].depth;
+        }
+        scn->faceBuffer[i].index = index;
+        scn->faceBuffer[i].depth = depth;
+
+        Sort3DDrawList(scn, first, i - 1);
+        Sort3DDrawList(scn, j + 1, last);
+    }
+}
+
 void RSDK::Draw3DScene(uint16 sceneID)
 {
     if (sceneID < SCENE3D_COUNT) {
@@ -824,56 +851,39 @@ void RSDK::Draw3DScene(uint16 sceneID)
 
         Scene3DVertex *vertices = scn->vertices;
 
-        // setup face depth
+        // setup face buffer
         int32 vertIndex = 0;
         for (int32 i = 0; i < scn->faceCount; ++i) {
             scn->faceBuffer[i].depth = 0;
-            switch (scn->faceVertCounts[i]) {
-                default: break;
-                case 1:
-                    scn->faceBuffer[i].depth = vertices->z;
-                    vertices++;
-                    break;
-
-                case 2:
-                    scn->faceBuffer[i].depth = vertices[0].z >> 1;
-                    scn->faceBuffer[i].depth += vertices[1].z >> 1;
-                    vertices += 2;
-                    break;
-
-                case 3:
-                    scn->faceBuffer[i].depth = vertices[0].z >> 1;
-                    scn->faceBuffer[i].depth += vertices[1].z >> 1;
-                    scn->faceBuffer[i].depth += vertices[2].z >> 1;
-                    vertices += 3;
-                    break;
-
-                case 4:
-                    scn->faceBuffer[i].depth = vertices[0].z >> 2;
-                    scn->faceBuffer[i].depth += vertices[1].z >> 2;
-                    scn->faceBuffer[i].depth += vertices[2].z >> 2;
-                    scn->faceBuffer[i].depth += vertices[3].z >> 2;
-                    vertices += 4;
-                    break;
+
+            if (scn->faceVertCounts[i] == 4) {
+                scn->faceBuffer[i].depth = vertices[0].z >> 2;
+                scn->faceBuffer[i].depth += vertices[1].z >> 2;
+                scn->faceBuffer[i].depth += vertices[2].z >> 2;
+                scn->faceBuffer[i].depth += vertices[3].z >> 2;
+                vertices += 4;
+            }
+            else if (scn->faceVertCounts[i] == 3) {
+                scn->faceBuffer[i].depth = vertices[0].z >> 1;
+                scn->faceBuffer[i].depth += vertices[1].z >> 1;
+                scn->faceBuffer[i].depth += vertices[2].z >> 1;
+                vertices += 3;
+            }
+            else if (scn->faceVertCounts[i] == 2) {
+                scn->faceBuffer[i].depth = vertices[0].z >> 1;
+                scn->faceBuffer[i].depth += vertices[1].z >> 1;
+                vertices += 2;
+            }
+            else {
+                scn->faceBuffer[i].depth = vertices->z;
+                vertices++;
             }
 
             scn->faceBuffer[i].index = vertIndex;
             vertIndex += scn->faceVertCounts[i];
         }
 
-        // sort vertices by depth
-        for (int32 i = 0; i < scn->faceCount; ++i) {
-            for (int32 j = scn->faceCount - 1; j > i; --j) {
-                if (scn->faceBuffer[j].depth > scn->faceBuffer[j - 1].depth) {
-                    int32 index                  = scn->faceBuffer[j].index;
-                    int32 depth                  = scn->faceBuffer[j].depth;
-                    scn->faceBuffer[j].index     = scn->faceBuffer[j - 1].index;
-                    scn->faceBuffer[j].depth     = scn->faceBuffer[j - 1].depth;
-                    scn->faceBuffer[j - 1].index = index;
-                    scn->faceBuffer[j - 1].depth = depth;
-                }
-            }
-        }
+        Sort3DDrawList(scn, 0, scn->faceCount - 1);
 
         uint8 *vertCnt = scn->faceVertCounts;
         Vector2 vertPos[4];
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Scene3D.hpp b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Scene3D.hpp
index fae0146..7d7a0c5 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Scene3D.hpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Graphics/Scene3D.hpp
@@ -215,6 +215,7 @@ inline void SetSpecularIntensity(uint16 sceneID, uint8 x, uint8 y, uint8 z)
 }
 void AddModelToScene(uint16 modelFrames, uint16 sceneIndex, uint8 drawMode, Matrix *matWorld, Matrix *matView, color color);
 void AddMeshFrameToScene(uint16 modelFrames, uint16 sceneIndex, Animator *animator, uint8 drawMode, Matrix *matWorld, Matrix *matView, color color);
+void Sort3DDrawList(Scene3D *scn, int32 first, int32 last);
 void Draw3DScene(uint16 sceneID);
 
 inline void Clear3DScenes()
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Input/Input.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Input/Input.cpp
index f8588cc..c619d40 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Input/Input.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Input/Input.cpp
@@ -133,6 +133,13 @@ void RSDK::InitInputDevices()
 #endif
 }
 
+void RSDK::ReleaseInputDevices()
+{
+#if RETRO_INPUTDEVICE_SDL2
+    SKU::ReleaseSDL2InputAPI();
+#endif
+}
+
 void RSDK::ClearInput()
 {
     for (int32 i = 0; i <= PLAYER_COUNT; ++i) {
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Input/Input.hpp b/dependencies/RSDKv5/RSDKv5/RSDK/Input/Input.hpp
index 4f4fa09..13adfa3 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Input/Input.hpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Input/Input.hpp
@@ -103,7 +103,7 @@ enum WinMappings {
     KEYMAP_AUTO_MAPPING = -1,
     KEYMAP_NO_MAPPING   = 0,
 
-#if !VK_LBUTTON
+#ifndef VK_LBUTTON
     VK_LBUTTON    = 0x01,
     VK_RBUTTON    = 0x02,
     VK_CANCEL     = 0x03,
@@ -184,7 +184,7 @@ enum WinMappings {
     VK_X = 0x58,
     VK_Y = 0x59,
     VK_Z = 0x5A,
-#if !VK_LBUTTON
+#ifndef VK_LBUTTON
     VK_LWIN                            = 0x5B,
     VK_RWIN                            = 0x5C,
     VK_APPS                            = 0x5D,
@@ -229,6 +229,8 @@ enum WinMappings {
     VK_F22                             = 0x85,
     VK_F23                             = 0x86,
     VK_F24                             = 0x87,
+#endif
+#ifndef VK_NAVIGATION_VIEW
     VK_NAVIGATION_VIEW                 = 0x88,
     VK_NAVIGATION_MENU                 = 0x89,
     VK_NAVIGATION_UP                   = 0x8A,
@@ -237,6 +239,8 @@ enum WinMappings {
     VK_NAVIGATION_RIGHT                = 0x8D,
     VK_NAVIGATION_ACCEPT               = 0x8E,
     VK_NAVIGATION_CANCEL               = 0x8F,
+#endif
+#ifndef VK_LBUTTON
     VK_NUMLOCK                         = 0x90,
     VK_SCROLL                          = 0x91,
     VK_OEM_NEC_EQUAL                   = 0x92,
@@ -276,6 +280,8 @@ enum WinMappings {
     VK_OEM_PERIOD                      = 0xBE,
     VK_OEM_2                           = 0xBF,
     VK_OEM_3                           = 0xC0,
+#endif
+#ifndef VK_GAMEPAD_A
     VK_GAMEPAD_A                       = 0xC3,
     VK_GAMEPAD_B                       = 0xC4,
     VK_GAMEPAD_X                       = 0xC5,
@@ -300,6 +306,8 @@ enum WinMappings {
     VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN   = 0xD8,
     VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT  = 0xD9,
     VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT   = 0xDA,
+#endif
+#ifndef VK_LBUTTON
     VK_OEM_4                           = 0xDB,
     VK_OEM_5                           = 0xDC,
     VK_OEM_6                           = 0xDD,
@@ -502,6 +510,8 @@ void ClearInput();
 void ProcessInput();
 // used to process various events on input devices, switch uses it to controller connects/disconnects/changes
 void ProcessInputDevices();
+// Releases the input devices & closes the backend APIs powering em
+void ReleaseInputDevices();
 
 void RemoveInputDevice(InputDevice *targetDevice);
 
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Input/RawInput/RawInputDevice.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Input/RawInput/RawInputDevice.cpp
index 23957bd..7bb926e 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Input/RawInput/RawInputDevice.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Input/RawInput/RawInputDevice.cpp
@@ -184,6 +184,10 @@ void RSDK::SKU::InitHIDDevices()
         int32 rawInputListSize = GetRawInputDeviceList(pRawInputDeviceList, &puiNumDevices, sizeof(tagRAWINPUTDEVICELIST));
         if (rawInputListSize == -1) {
             PrintLog(PRINT_NORMAL, "Wrong Device Count.");
+#if RETRO_PLATFORM == RETRO_WIN && !RETRO_USE_ORIGINAL_CODE
+            // cheating here since Link::GetError returns windows GetError as a string :]
+            PrintLog(PRINT_NORMAL, "Device Error: %s", Link::GetError());
+#endif
         }
         else {
             RID_DEVICE_INFO deviceInfo;
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Input/SDL2/SDL2InputDevice.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Input/SDL2/SDL2InputDevice.cpp
index b358de3..3643e95 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Input/SDL2/SDL2InputDevice.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Input/SDL2/SDL2InputDevice.cpp
@@ -208,7 +208,7 @@ RSDK::SKU::InputDeviceSDL *RSDK::SKU::InitSDL2InputDevice(uint32 id, uint8 contr
         controllerType = DEVICE_XBOX;
     else if (strstr(name, "PS4") || strstr(name, "PS5"))
         controllerType = DEVICE_PS4;
-    else if (strstr(name, "Nintendo") || strstr(name, "Switch")) {
+    else if (strstr(name, "Nintendo") || strstr(name, "Switch") || strstr(name, "Wii U")) {
         controllerType   = DEVICE_SWITCH_PRO;
         device->swapABXY = true;
     }
@@ -264,3 +264,8 @@ void RSDK::SKU::InitSDL2InputAPI()
         }
     }
 }
+
+void RSDK::SKU::ReleaseSDL2InputAPI()
+{
+	SDL_QuitSubSystem(SDL_INIT_JOYSTICK | SDL_INIT_GAMECONTROLLER | SDL_INIT_HAPTIC);
+}
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Input/SDL2/SDL2InputDevice.hpp b/dependencies/RSDKv5/RSDKv5/RSDK/Input/SDL2/SDL2InputDevice.hpp
index 7da9c03..22d3c47 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Input/SDL2/SDL2InputDevice.hpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Input/SDL2/SDL2InputDevice.hpp
@@ -41,5 +41,6 @@ struct InputDeviceSDL : InputDevice {
 InputDeviceSDL *InitSDL2InputDevice(uint32 id, uint8 controllerID);
 
 void InitSDL2InputAPI();
+void ReleaseSDL2InputAPI();
 
 } // namespace SKU
\ No newline at end of file
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Collision.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Collision.cpp
index b7302df..3c26071 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Collision.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Collision.cpp
@@ -2429,9 +2429,8 @@ void RSDK::FloorCollision(CollisionSensor *sensor)
                             int32 ty = cy + mask;
 #endif
                             if (mask < 0xFF) {
-                                step = -TILE_SIZE;
-
 #if RETRO_REV0U
+                                step = -TILE_SIZE;
                                 if (colY < collidePos) {
                                     collideAngle = tileInfo[collisionEntity->collisionPlane][tile & 0xFFF].floorAngle;
                                     collidePos   = ty;
@@ -2559,9 +2558,8 @@ void RSDK::RoofCollision(CollisionSensor *sensor)
                             int32 ty = cy + mask;
 #endif
                             if (mask < 0xFF) {
-                                step = TILE_SIZE;
-
 #if RETRO_REV0U
+                                step = TILE_SIZE;
                                 if (colY > collidePos) {
                                     collideAngle = tileInfo[collisionEntity->collisionPlane][tile & 0xFFF].roofAngle;
                                     collidePos   = ty;
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/CollisionLegacyv3.hpp b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/CollisionLegacyv3.hpp
index a0652b1..99b67d6 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/CollisionLegacyv3.hpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/CollisionLegacyv3.hpp
@@ -5,7 +5,7 @@ namespace Legacy
 namespace v3
 {
 
-enum CollisionSidess {
+enum CollisionSides {
     CSIDE_FLOOR = 0,
     CSIDE_LWALL = 1,
     CSIDE_RWALL = 2,
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/ScriptLegacyv3.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/ScriptLegacyv3.cpp
index 2c1dec0..4642143 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/ScriptLegacyv3.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v3/ScriptLegacyv3.cpp
@@ -1813,7 +1813,6 @@ void RSDK::Legacy::v3::LoadBytecode(int32 scriptID, bool32 globalCode)
     FileInfo info;
     InitFileInfo(&info);
     if (LoadFile(&info, scriptPath, FMODE_RB)) {
-        uint8 fileBuffer     = 0;
         int32 *scriptCodePtr = &scriptCode[scriptCodePos];
         int32 *jumpTablePtr  = &jumpTable[jumpTablePos];
 
@@ -3683,11 +3682,11 @@ void RSDK::Legacy::v3::ProcessScript(int32 scriptCodeStart, int32 jumpTableStart
                 break;
             case FUNC_PAUSEMUSIC:
                 opcodeSize = 0;
-                PauseSound();
+                PauseChannel(musicChannel);
                 break;
             case FUNC_RESUMEMUSIC:
                 opcodeSize = 0;
-                ResumeSound();
+                ResumeChannel(musicChannel);
                 break;
             case FUNC_CLEARDRAWLIST:
                 opcodeSize                                      = 0;
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/CollisionLegacyv4.hpp b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/CollisionLegacyv4.hpp
index 1b8d0a0..4604e0c 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/CollisionLegacyv4.hpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/CollisionLegacyv4.hpp
@@ -5,7 +5,7 @@ namespace Legacy
 namespace v4
 {
 
-enum CollisionSidess {
+enum CollisionSides {
     CSIDE_FLOOR = 0,
     CSIDE_LWALL = 1,
     CSIDE_RWALL = 2,
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/SceneLegacyv4.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/SceneLegacyv4.cpp
index a427285..a13ebb1 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/SceneLegacyv4.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/SceneLegacyv4.cpp
@@ -500,7 +500,7 @@ void RSDK::Legacy::v4::LoadStageFiles()
 
         InitFileInfo(&info);
         if (LoadStageFile("StageConfig.bin", &info)) {
-            uint8 fileBuffer = ReadInt8(&info); // Load Globals
+            ReadInt8(&info); // Load Globals
 
             uint8 clr[3];
             for (int32 i = 0x60; i < 0x80; ++i) {
@@ -838,7 +838,6 @@ void RSDK::Legacy::v4::LoadStageBackground()
 
             // Read Line Scroll
             uint8 buf[3];
-            int32 pos = 0;
             while (true) {
                 buf[0] = ReadInt8(&info);
 
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/ScriptLegacyv4.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/ScriptLegacyv4.cpp
index a8231c2..6707a8b 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/ScriptLegacyv4.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Legacy/v4/ScriptLegacyv4.cpp
@@ -4770,11 +4770,11 @@ void RSDK::Legacy::v4::ProcessScript(int32 scriptCodeStart, int32 jumpTableStart
                 break;
             case FUNC_PAUSEMUSIC:
                 opcodeSize = 0;
-                // PauseSound();
+                PauseChannel(musicChannel);
                 break;
             case FUNC_RESUMEMUSIC:
                 opcodeSize = 0;
-                // ResumeSound();
+                ResumeChannel(musicChannel);
                 break;
             case FUNC_SWAPMUSICTRACK:
                 opcodeSize = 0;
@@ -5107,8 +5107,8 @@ void RSDK::Legacy::v4::ProcessScript(int32 scriptCodeStart, int32 jumpTableStart
 
                 // Mission Mode stuff
                 if (!scriptEng.checkResult) {
-                    int32 targetLength  = strlen(sceneInfo.listData[sceneInfo.listPos].folder);
-                    int32 currentLength = strlen(scriptText);
+                    int32 targetLength  = (int32)strlen(sceneInfo.listData[sceneInfo.listPos].folder);
+                    int32 currentLength = (int32)strlen(scriptText);
                     if (targetLength > currentLength) {
                         scriptEng.checkResult = StrComp(&sceneInfo.listData[sceneInfo.listPos].folder[targetLength - currentLength], scriptText);
                     }
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Object.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Object.cpp
index 51a1543..9412935 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Object.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Object.cpp
@@ -517,28 +517,6 @@ void RSDK::ProcessPausedObjects()
         sceneInfo.entitySlot++;
     }
 
-#if RETRO_USE_MOD_LOADER
-    RunModCallbacks(MODCB_ONSTATICUPDATE, INT_TO_VOID(ENGINESTATE_PAUSED));
-#endif
-
-    for (int32 i = 0; i < TYPEGROUP_COUNT; ++i) typeGroups[i].entryCount = 0;
-
-    sceneInfo.entitySlot = 0;
-    for (int32 e = 0; e < ENTITY_COUNT; ++e) {
-        sceneInfo.entity = &objectEntityList[e];
-
-        if (sceneInfo.entity->inRange && sceneInfo.entity->interaction) {
-            typeGroups[GROUP_ALL].entries[typeGroups[GROUP_ALL].entryCount++] = e; // All active entities
-
-            typeGroups[sceneInfo.entity->classID].entries[typeGroups[sceneInfo.entity->classID].entryCount++] = e; // type-based groups
-
-            if (sceneInfo.entity->group >= TYPE_COUNT)
-                typeGroups[sceneInfo.entity->group].entries[typeGroups[sceneInfo.entity->group].entryCount++] = e; // extra groups
-        }
-
-        sceneInfo.entitySlot++;
-    }
-
 #if RETRO_USE_MOD_LOADER
     RunModCallbacks(MODCB_ONUPDATE, INT_TO_VOID(ENGINESTATE_PAUSED));
 #endif
@@ -689,20 +667,6 @@ void RSDK::ProcessFrozenObjects()
 
     for (int32 i = 0; i < TYPEGROUP_COUNT; ++i) typeGroups[i].entryCount = 0;
 
-    sceneInfo.entitySlot = 0;
-    for (int32 e = 0; e < ENTITY_COUNT; ++e) {
-        sceneInfo.entity = &objectEntityList[e];
-        if (sceneInfo.entity->inRange && sceneInfo.entity->interaction) {
-            typeGroups[GROUP_ALL].entries[typeGroups[GROUP_ALL].entryCount++] = e; // All active entities
-
-            typeGroups[sceneInfo.entity->classID].entries[typeGroups[sceneInfo.entity->classID].entryCount++] = e; // type-based groups
-
-            if (sceneInfo.entity->group >= TYPE_COUNT)
-                typeGroups[sceneInfo.entity->group].entries[typeGroups[sceneInfo.entity->group].entryCount++] = e; // extra groups
-        }
-        sceneInfo.entitySlot++;
-    }
-
     sceneInfo.entitySlot = 0;
     for (int32 e = 0; e < ENTITY_COUNT; ++e) {
         sceneInfo.entity = &objectEntityList[e];
@@ -712,6 +676,15 @@ void RSDK::ProcessFrozenObjects()
                 if (objectClassList[stageObjectIDs[sceneInfo.entity->classID]].lateUpdate)
                     objectClassList[stageObjectIDs[sceneInfo.entity->classID]].lateUpdate();
             }
+
+            if (sceneInfo.entity->interaction) {
+                typeGroups[GROUP_ALL].entries[typeGroups[GROUP_ALL].entryCount++] = e; // All active entities
+
+                typeGroups[sceneInfo.entity->classID].entries[typeGroups[sceneInfo.entity->classID].entryCount++] = e; // type-based groups
+
+                if (sceneInfo.entity->group >= TYPE_COUNT)
+                    typeGroups[sceneInfo.entity->group].entries[typeGroups[sceneInfo.entity->group].entryCount++] = e; // extra groups
+            }
         }
 
         sceneInfo.entity->onScreen = 0;
@@ -724,7 +697,7 @@ void RSDK::ProcessFrozenObjects()
 }
 void RSDK::ProcessObjectDrawLists()
 {
-    if (sceneInfo.state && sceneInfo.state != (ENGINESTATE_LOAD | ENGINESTATE_STEPOVER)) {
+    if (sceneInfo.state != ENGINESTATE_LOAD && sceneInfo.state != (ENGINESTATE_LOAD | ENGINESTATE_STEPOVER)) {
         for (int32 s = 0; s < videoSettings.screenCount; ++s) {
             currentScreen             = &screens[s];
             sceneInfo.currentScreenID = s;
@@ -1107,8 +1080,8 @@ bool32 RSDK::GetAllEntities(uint16 classID, Entity **entity)
         foreachStackPtr->id = 0;
     }
 
-    for (Entity *nextEntity = &objectEntityList[foreachStackPtr->id]; foreachStackPtr->id < ENTITY_COUNT;
-         ++foreachStackPtr->id, nextEntity = &objectEntityList[foreachStackPtr->id]) {
+    for (; foreachStackPtr->id < ENTITY_COUNT; ++foreachStackPtr->id) {
+        Entity *nextEntity = &objectEntityList[foreachStackPtr->id];
         if (nextEntity->classID == classID) {
             *entity = nextEntity;
             return true;
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Object.hpp b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Object.hpp
index d0928d3..f802256 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Object.hpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Object.hpp
@@ -193,8 +193,8 @@ struct ForeachStackInfo {
 };
 
 struct TypeGroupList {
-    int32 entryCount;
     uint16 entries[ENTITY_COUNT];
+    int32 entryCount;
 };
 
 extern ObjectClass objectClassList[OBJECT_COUNT];
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Scene.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Scene.cpp
index 11c778f..f650c66 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Scene.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Scene/Scene.cpp
@@ -66,6 +66,20 @@ void RSDK::LoadSceneFolder()
         sceneInfo.filter = sceneInfo.listData[sceneInfo.listPos].filter;
         PrintLog(PRINT_NORMAL, "Reloading Scene \"%s - %s\" with filter %d", list->name, sceneInfo.listData[sceneInfo.listPos].name,
                  sceneInfo.listData[sceneInfo.listPos].filter);
+
+#if RETRO_USE_MOD_LOADER
+        // reload object hooks
+        for (int32 h = 0; h < (int32)objectHookList.size(); ++h) {
+            for (int32 i = 0; i < objectClassCount; ++i) {
+                if (HASH_MATCH_MD5(objectClassList[i].hash, objectHookList[h].hash)) {
+                    if (objectHookList[h].staticVars && objectClassList[i].staticVars)
+                        *objectHookList[h].staticVars = *objectClassList[i].staticVars;
+                    break;
+                }
+            }
+        }
+#endif
+
         return;
     }
 #endif
@@ -75,6 +89,19 @@ void RSDK::LoadSceneFolder()
         // Reload
         ClearUnusedStorage(DATASET_STG);
         PrintLog(PRINT_NORMAL, "Reloading Scene \"%s - %s\"", list->name, sceneInfo.listData[sceneInfo.listPos].name);
+
+#if RETRO_USE_MOD_LOADER
+        // reload object hooks
+        for (int32 h = 0; h < (int32)objectHookList.size(); ++h) {
+            for (int32 i = 0; i < objectClassCount; ++i) {
+                if (HASH_MATCH_MD5(objectClassList[i].hash, objectHookList[h].hash)) {
+                    if (objectHookList[h].staticVars && objectClassList[i].staticVars)
+                        *objectHookList[h].staticVars = *objectClassList[i].staticVars;
+                    break;
+                }
+            }
+        }
+#endif
         return;
     }
 #endif
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/Storage/Storage.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/Storage/Storage.cpp
index 4e454a6..b603de6 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/Storage/Storage.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/Storage/Storage.cpp
@@ -13,7 +13,7 @@ bool32 RSDK::InitStorage()
     // storage limit (in ints)
     dataStorage[DATASET_STG].storageLimit = 24 * 0x100000; // 24MB
     dataStorage[DATASET_MUS].storageLimit = 8 * 0x100000;  // 8MB
-    dataStorage[DATASET_SFX].storageLimit = 64 * 0x100000; // 64MB // 32 * 0x100000; // 32 MB
+    dataStorage[DATASET_SFX].storageLimit = 32 * 0x100000; // 32 MB
     dataStorage[DATASET_STR].storageLimit = 1 * 0x100000;  // 1MB
     dataStorage[DATASET_TMP].storageLimit = 8 * 0x100000;  // 8MB
 
@@ -56,8 +56,9 @@ void RSDK::AllocateStorage(void **dataPtr, uint32 size, StorageDataSets dataSet,
     if ((uint32)dataSet < DATASET_MAX && size > 0) {
         DataStorage *storage = &dataStorage[dataSet];
 
-        if ((size & -4) < size)
-            size = (size & -4) + sizeof(int32);
+        int32 aligned = size & -(int32)sizeof(void *);
+        if (aligned < size)
+            size = aligned + sizeof(void *);
 
         if (storage->entryCount < STORAGE_ENTRY_COUNT) {
             if (size + sizeof(int32) * storage->usedStorage >= storage->storageLimit) {
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserCore.cpp b/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserCore.cpp
index e05040d..5e370a5 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserCore.cpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserCore.cpp
@@ -117,7 +117,7 @@ void RSDK::SKU::InitUserCore()
     RegisterAchievement("ACH_FBZ", "Window Shopping", "Let the wind take you through");
     RegisterAchievement("ACH_PGZ", "Crate Expectations", "Wreak havoc at the propaganda factory");
     RegisterAchievement("ACH_SSZ", "King of Speed", "Get through Stardust Speedway Zone as quickly as possible");
-    RegisterAchievement("ACH_HCZ", "Boat Enthusiast", "Try pushing a barrel to see how far it goes");
+    RegisterAchievement("ACH_HCZ", "Boat Enthusiast", "We really like boats");
     RegisterAchievement("ACH_MSZ", "The Password is \"Special Stage\"", "Try pushing a barrel to see how far it goes");
     RegisterAchievement("ACH_OOZ", "Secret Sub", "You might have to submerge to find it");
     RegisterAchievement("ACH_LRZ", "Without a Trace", "Barrel through the lava, don't let anything stop you");
@@ -292,7 +292,7 @@ void RSDK::LoadSettingsINI()
           KEYMAP_NO_MAPPING, KEYMAP_NO_MAPPING, KEYMAP_NO_MAPPING, KEYMAP_NO_MAPPING, KEYMAP_NO_MAPPING },
 
         { VK_UP, VK_DOWN, VK_LEFT, VK_RIGHT, VK_A, VK_S, VK_D, VK_Q, VK_W, VK_E, VK_RETURN, VK_TAB },
-        { VK_NUMPAD8, VK_NUMPAD5, VK_NUMPAD4, VK_NUMPAD6, VK_J, VK_J, KEYMAP_NO_MAPPING, VK_U, VK_I, KEYMAP_NO_MAPPING, VK_OEM_4, VK_OEM_6 },
+        { VK_NUMPAD8, VK_NUMPAD5, VK_NUMPAD4, VK_NUMPAD6, VK_J, VK_K, KEYMAP_NO_MAPPING, VK_U, VK_I, KEYMAP_NO_MAPPING, VK_OEM_4, VK_OEM_6 },
 
         { KEYMAP_NO_MAPPING, KEYMAP_NO_MAPPING, KEYMAP_NO_MAPPING, KEYMAP_NO_MAPPING, KEYMAP_NO_MAPPING, KEYMAP_NO_MAPPING, KEYMAP_NO_MAPPING,
           KEYMAP_NO_MAPPING, KEYMAP_NO_MAPPING, KEYMAP_NO_MAPPING, KEYMAP_NO_MAPPING, KEYMAP_NO_MAPPING },
@@ -550,13 +550,6 @@ void RSDK::LoadSettingsINI()
 
 void RSDK::SaveSettingsINI(bool32 writeToFile)
 {
-#if !RETRO_USE_ORIGINAL_CODE
-    if (gamePadCount && gamePadMappings)
-        free(gamePadMappings);
-    gamePadMappings = NULL;
-    gamePadCount    = 0;
-#endif
-
     // only done on windows and "dev", consoles use "options.bin"
 #if RETRO_REV02
     if (SKU::curSKU.platform != PLATFORM_PC && SKU::curSKU.platform != PLATFORM_DEV)
@@ -726,4 +719,11 @@ void RSDK::SaveSettingsINI(bool32 writeToFile)
         iniparser_freedict(ini);
         fClose(file);
     }
+
+#if !RETRO_USE_ORIGINAL_CODE
+    if (gamePadCount && gamePadMappings)
+        delete[] gamePadMappings;
+    gamePadMappings = NULL;
+    gamePadCount    = 0;
+#endif
 }
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserLeaderboards.hpp b/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserLeaderboards.hpp
index 7e890ec..a08adc7 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserLeaderboards.hpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserLeaderboards.hpp
@@ -93,6 +93,8 @@ struct UserLeaderboards {
         entryInfo.parent   = this;
     }
 
+    virtual ~UserLeaderboards() = default;
+
     virtual void StageLoad()
     {
         this->currentLeaderboard = NULL;
diff --git a/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserStorage.hpp b/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserStorage.hpp
index 889eb44..c35c185 100644
--- a/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserStorage.hpp
+++ b/dependencies/RSDKv5/RSDKv5/RSDK/User/Core/UserStorage.hpp
@@ -20,6 +20,8 @@ namespace SKU
 // This is the base struct, it serves as the base for any API-specific stats
 // This struct should never be removed
 struct UserStorage {
+    virtual ~UserStorage() = default;
+
     virtual void FrameInit()
     {
         if (!saveStatus) {
diff --git a/dependencies/RSDKv5/RSDKv5/main.cpp b/dependencies/RSDKv5/RSDKv5/main.cpp
index d97df3a..633950e 100644
--- a/dependencies/RSDKv5/RSDKv5/main.cpp
+++ b/dependencies/RSDKv5/RSDKv5/main.cpp
@@ -1,31 +1,6 @@
 #include "RSDK/Core/RetroEngine.hpp"
 #include "main.hpp"
 
-#ifdef __SWITCH__
-#include <switch.h>
-#include <stdlib.h>
-#include <stdio.h>
-#include <string.h>
-#include <sys/socket.h>
-#include <sys/errno.h>
-#include <arpa/inet.h>
-#include <unistd.h>
-
-static int32 s_nxlinkSock = -1;
-
-static void initNxLink()
-{
-    if (R_FAILED(socketInitializeDefault()))
-        return;
-
-    s_nxlinkSock = nxlinkStdio();
-    if (s_nxlinkSock >= 0)
-        printf("printf output now goes to nxlink server\n");
-    else
-        socketExit();
-}
-#endif
-
 #if RETRO_STANDALONE
 
 #if RETRO_PLATFORM == RETRO_WIN && !RETRO_RENDERDEVICE_SDL2
@@ -84,17 +59,13 @@ int32 main(int32 argc, char *argv[]) { return RSDK_main(argc, argv, (void *)RSDK
 
 int32 RSDK_main(int32 argc, char **argv, void *linkLogicPtr)
 {
-#ifdef __SWITCH__
-    // initNxLink();
-#endif
-
     RSDK::linkGameLogic = (RSDK::LogicLinkHandle)linkLogicPtr;
 
+    RSDK::InitCoreAPI();
+
     int32 exitCode = RSDK::RunRetroEngine(argc, argv);
 
-#ifdef __SWITCH__
-    // socketExit();
-#endif
+    RSDK::ReleaseCoreAPI();
 
     return exitCode;
 }
\ No newline at end of file

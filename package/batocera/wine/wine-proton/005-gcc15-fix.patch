diff --git a/dlls/jscript/bool.c b/dlls/jscript/bool.c
index 57c5cf5b4c6..71d6705daaa 100644
--- a/dlls/jscript/bool.c
+++ b/dlls/jscript/bool.c
@@ -149,16 +149,16 @@ static HRESULT BoolConstr_value(script_ctx_t *ctx, jsval_t vthis, WORD flags, un
 
     switch(flags) {
     case DISPATCH_CONSTRUCT: {
-        jsdisp_t *bool;
+        jsdisp_t *b;
 
         if(!r)
             return S_OK;
 
-        hres = create_bool(ctx, value, &bool);
+        hres = create_bool(ctx, value, &b);
         if(FAILED(hres))
             return hres;
 
-        *r = jsval_obj(bool);
+        *r = jsval_obj(b);
         return S_OK;
     }
 
@@ -177,54 +177,54 @@ static HRESULT BoolConstr_value(script_ctx_t *ctx, jsval_t vthis, WORD flags, un
 
 static HRESULT alloc_bool(script_ctx_t *ctx, jsdisp_t *object_prototype, BoolInstance **ret)
 {
-    BoolInstance *bool;
+    BoolInstance *b;
     HRESULT hres;
 
-    bool = calloc(1, sizeof(BoolInstance));
-    if(!bool)
+    b = calloc(1, sizeof(BoolInstance));
+    if(!b)
         return E_OUTOFMEMORY;
 
     if(object_prototype)
-        hres = init_dispex(&bool->dispex, ctx, &Bool_info, object_prototype);
+        hres = init_dispex(&b->dispex, ctx, &Bool_info, object_prototype);
     else
-        hres = init_dispex_from_constr(&bool->dispex, ctx, &BoolInst_info, ctx->bool_constr);
+        hres = init_dispex_from_constr(&b->dispex, ctx, &BoolInst_info, ctx->bool_constr);
 
     if(FAILED(hres)) {
-        free(bool);
+        free(b);
         return hres;
     }
 
-    *ret = bool;
+    *ret = b;
     return S_OK;
 }
 
 HRESULT create_bool_constr(script_ctx_t *ctx, jsdisp_t *object_prototype, jsdisp_t **ret)
 {
-    BoolInstance *bool;
+    BoolInstance *b;
     HRESULT hres;
 
-    hres = alloc_bool(ctx, object_prototype, &bool);
+    hres = alloc_bool(ctx, object_prototype, &b);
     if(FAILED(hres))
         return hres;
 
     hres = create_builtin_constructor(ctx, BoolConstr_value, L"Boolean", NULL,
-            PROPF_CONSTR|1, &bool->dispex, ret);
+            PROPF_CONSTR|1, &b->dispex, ret);
 
-    jsdisp_release(&bool->dispex);
+    jsdisp_release(&b->dispex);
     return hres;
 }
 
-HRESULT create_bool(script_ctx_t *ctx, BOOL b, jsdisp_t **ret)
+HRESULT create_bool(script_ctx_t *ctx, BOOL bval, jsdisp_t **ret)
 {
-    BoolInstance *bool;
+    BoolInstance *b;
     HRESULT hres;
 
-    hres = alloc_bool(ctx, NULL, &bool);
+    hres = alloc_bool(ctx, NULL, &b);
     if(FAILED(hres))
         return hres;
 
-    bool->val = b;
+    b->val = bval;
 
-    *ret = &bool->dispex;
+    *ret = &b->dispex;
     return S_OK;
 }
diff --git a/dlls/msi/cond.y b/dlls/msi/cond.y
index b08c67447dd..49ad91ce049 100644
--- a/dlls/msi/cond.y
+++ b/dlls/msi/cond.y
@@ -123,7 +123,7 @@ static void value_free( struct value val )
     struct value value;
     LPWSTR identifier;
     INT operator;
-    BOOL bool;
+    BOOL boolean;
 }
 
 %token COND_SPACE
@@ -137,7 +137,7 @@ static void value_free( struct value val )
 
 %nonassoc COND_ERROR
 
-%type <bool> expression boolean_term boolean_factor
+%type <boolean> expression boolean_term boolean_factor
 %type <value> value
 %type <identifier> identifier
 %type <operator> operator
diff --git a/dlls/msi/tests/automation.c b/dlls/msi/tests/automation.c
index 45354cc2bb2..2c80465a603 100644
--- a/dlls/msi/tests/automation.c
+++ b/dlls/msi/tests/automation.c
@@ -1829,7 +1829,7 @@ static void test_Session(IDispatch *pSession)
     WCHAR stringw[MAX_PATH];
     CHAR string[MAX_PATH];
     UINT len;
-    VARIANT_BOOL bool;
+    VARIANT_BOOL mybool;
     int myint;
     IDispatch *pDatabase = NULL, *pInst = NULL, *record = NULL;
     ULONG refs_before, refs_after;
@@ -1888,20 +1888,20 @@ static void test_Session(IDispatch *pSession)
     /* Not sure how to check the language is correct */
 
     /* Session::Mode, get */
-    hr = Session_ModeGet(pSession, MSIRUNMODE_REBOOTATEND, &bool);
+    hr = Session_ModeGet(pSession, MSIRUNMODE_REBOOTATEND, &mybool);
     ok(hr == S_OK, "Session_ModeGet failed, hresult %#lx\n", hr);
-    ok(!bool, "Reboot at end session mode is %d\n", bool);
+    ok(!mybool, "Reboot at end session mode is %d\n", mybool);
 
-    hr = Session_ModeGet(pSession, MSIRUNMODE_MAINTENANCE, &bool);
+    hr = Session_ModeGet(pSession, MSIRUNMODE_MAINTENANCE, &mybool);
     ok(hr == S_OK, "Session_ModeGet failed, hresult %#lx\n", hr);
-    ok(!bool, "Maintenance mode is %d\n", bool);
+    ok(!mybool, "Maintenance mode is %d\n", mybool);
 
     /* Session::Mode, put */
     hr = Session_ModePut(pSession, MSIRUNMODE_REBOOTATEND, VARIANT_TRUE);
     ok(hr == S_OK, "Session_ModePut failed, hresult %#lx\n", hr);
-    hr = Session_ModeGet(pSession, MSIRUNMODE_REBOOTATEND, &bool);
+    hr = Session_ModeGet(pSession, MSIRUNMODE_REBOOTATEND, &mybool);
     ok(hr == S_OK, "Session_ModeGet failed, hresult %#lx\n", hr);
-    ok(bool, "Reboot at end session mode is %d, expected 1\n", bool);
+    ok(mybool, "Reboot at end session mode is %d, expected 1\n", mybool);
     hr = Session_ModePut(pSession, MSIRUNMODE_REBOOTATEND, VARIANT_FALSE);  /* set it again so we don't reboot */
     ok(hr == S_OK, "Session_ModePut failed, hresult %#lx\n", hr);
 
@@ -1909,9 +1909,9 @@ static void test_Session(IDispatch *pSession)
     ok(hr == S_OK, "Session_ModePut failed, hresult %#lx\n", hr);
     ok_exception(hr, L"Mode,Flag");
 
-    hr = Session_ModeGet(pSession, MSIRUNMODE_REBOOTNOW, &bool);
+    hr = Session_ModeGet(pSession, MSIRUNMODE_REBOOTNOW, &mybool);
     ok(hr == S_OK, "Session_ModeGet failed, hresult %#lx\n", hr);
-    ok(bool, "Reboot now mode is %d, expected 1\n", bool);
+    ok(mybool, "Reboot now mode is %d, expected 1\n", mybool);
 
     hr = Session_ModePut(pSession, MSIRUNMODE_REBOOTNOW, VARIANT_FALSE);  /* set it again so we don't reboot */
     ok(hr == S_OK, "Session_ModePut failed, hresult %#lx\n", hr);
diff --git a/dlls/win32u/sysparams.c b/dlls/win32u/sysparams.c
index 10ebf0c0c76..347d8cd2df5 100644
--- a/dlls/win32u/sysparams.c
+++ b/dlls/win32u/sysparams.c
@@ -402,7 +402,7 @@ union sysparam_all_entry
 {
     struct sysparam_entry        hdr;
     struct sysparam_uint_entry   uint;
-    struct sysparam_bool_entry   bool;
+    struct sysparam_bool_entry   boolean;
     struct sysparam_dword_entry  dword;
     struct sysparam_rgb_entry    rgb;
     struct sysparam_binary_entry bin;
@@ -3983,9 +3983,9 @@ static BOOL get_bool_entry( union sysparam_all_entry *entry, UINT int_param, voi
     if (!entry->hdr.loaded)
     {
         WCHAR buf[32];
-        if (load_entry( &entry->hdr, buf, sizeof(buf) )) entry->bool.val = wcstol( buf, NULL, 10 ) != 0;
+        if (load_entry( &entry->hdr, buf, sizeof(buf) )) entry->boolean.val = wcstol( buf, NULL, 10 ) != 0;
     }
-    *(UINT *)ptr_param = entry->bool.val;
+    *(UINT *)ptr_param = entry->boolean.val;
     return TRUE;
 }
 
@@ -3995,7 +3995,7 @@ static BOOL set_bool_entry( union sysparam_all_entry *entry, UINT int_param, voi
     WCHAR buf[] = { int_param ? '1' : '0', 0 };
 
     if (!save_entry_string( &entry->hdr, buf, flags )) return FALSE;
-    entry->bool.val = int_param != 0;
+    entry->boolean.val = int_param != 0;
     entry->hdr.loaded = TRUE;
     return TRUE;
 }
@@ -4003,7 +4003,7 @@ static BOOL set_bool_entry( union sysparam_all_entry *entry, UINT int_param, voi
 /* initialize a bool parameter */
 static BOOL init_bool_entry( union sysparam_all_entry *entry )
 {
-    WCHAR buf[] = { entry->bool.val ? '1' : '0', 0 };
+    WCHAR buf[] = { entry->boolean.val ? '1' : '0', 0 };
 
     return init_entry_string( &entry->hdr, buf );
 }
@@ -4016,9 +4016,9 @@ static BOOL get_yesno_entry( union sysparam_all_entry *entry, UINT int_param, vo
     if (!entry->hdr.loaded)
     {
         WCHAR buf[32];
-        if (load_entry( &entry->hdr, buf, sizeof(buf) )) entry->bool.val = !wcsicmp( yesW, buf );
+        if (load_entry( &entry->hdr, buf, sizeof(buf) )) entry->boolean.val = !wcsicmp( yesW, buf );
     }
-    *(UINT *)ptr_param = entry->bool.val;
+    *(UINT *)ptr_param = entry->boolean.val;
     return TRUE;
 }
 
@@ -4028,7 +4028,7 @@ static BOOL set_yesno_entry( union sysparam_all_entry *entry, UINT int_param, vo
     const WCHAR *str = int_param ? yesW : noW;
 
     if (!save_entry_string( &entry->hdr, str, flags )) return FALSE;
-    entry->bool.val = int_param != 0;
+    entry->boolean.val = int_param != 0;
     entry->hdr.loaded = TRUE;
     return TRUE;
 }
@@ -4036,7 +4036,7 @@ static BOOL set_yesno_entry( union sysparam_all_entry *entry, UINT int_param, vo
 /* initialize a bool parameter using Yes/No strings */
 static BOOL init_yesno_entry( union sysparam_all_entry *entry )
 {
-    return init_entry_string( &entry->hdr, entry->bool.val ? yesW : noW );
+    return init_entry_string( &entry->hdr, entry->boolean.val ? yesW : noW );
 }
 
 /* load a dword (binary) parameter from the registry */
@@ -4471,16 +4471,16 @@ static BOOL set_entry( void *ptr, UINT int_param, void *ptr_param, UINT flags )
     { .uint = { { get_uint_entry, set_int_entry, init_int_entry, base, reg }, (val) } }
 
 #define BOOL_ENTRY(name,val,base,reg) union sysparam_all_entry entry_##name = \
-    { .bool = { { get_bool_entry, set_bool_entry, init_bool_entry, base, reg }, (val) } }
+    { .boolean = { { get_bool_entry, set_bool_entry, init_bool_entry, base, reg }, (val) } }
 
 #define BOOL_ENTRY_MIRROR(name,val,base,reg,mirror_base) union sysparam_all_entry entry_##name = \
-    { .bool = { { get_bool_entry, set_bool_entry, init_bool_entry, base, reg, mirror_base, reg }, (val) } }
+    { .boolean = { { get_bool_entry, set_bool_entry, init_bool_entry, base, reg, mirror_base, reg }, (val) } }
 
 #define TWIPS_ENTRY(name,val,base,reg) union sysparam_all_entry entry_##name = \
     { .uint = { { get_twips_entry, set_twips_entry, init_int_entry, base, reg }, (val) } }
 
 #define YESNO_ENTRY(name,val,base,reg) union sysparam_all_entry entry_##name = \
-    { .bool = { { get_yesno_entry, set_yesno_entry, init_yesno_entry, base, reg }, (val) } }
+    { .boolean = { { get_yesno_entry, set_yesno_entry, init_yesno_entry, base, reg }, (val) } }
 
 #define DWORD_ENTRY(name,val,base,reg) union sysparam_all_entry entry_##name = \
     { .dword = { { get_dword_entry, set_dword_entry, init_dword_entry, base, reg }, (val) } }
diff --git a/programs/winhlp32/macro.h b/programs/winhlp32/macro.h
index 910782db60c..a009a7d68c2 100644
--- a/programs/winhlp32/macro.h
+++ b/programs/winhlp32/macro.h
@@ -26,7 +26,6 @@
 
 struct lexret {
   LPCSTR        proto;
-  BOOL          bool;
   LONG          integer;
   LPCSTR        string;
   FARPROC       function;

diff --git a/configure.ac b/configure.ac
index 012ad991159..f35f6e9c7b2 100644
--- a/configure.ac
+++ b/configure.ac
@@ -163,6 +163,14 @@ if test "x$enable_win64" = "xyes"
 then
     test -z "$with_wine64" || AC_MSG_ERROR([--enable-win64 and --with-wine64 are mutually exclusive.
 --enable-win64 should be used in the 64-bit build tree, --with-wine64 in the 32-bit Wow64 build tree.])
+elif test -n "$with_wine64"
+then
+    test -f "$with_wine64/Makefile" || AC_MSG_ERROR([the 64-bit tree in $with_wine64 has not been configured yet.])
+    libdir64=$(grep "^libdir *=" "$with_wine64/Makefile" | sed 's/^libdir *= *//')
+    if test "$libdir64" != "$libdir"; then
+        AS_ECHO(["$as_me:${as_lineno-$LINENO}: libdir64: $libdir64"]) >&AS_MESSAGE_LOG_FD
+        AC_MSG_ERROR([when using --with-wine64 you must use the same --libdir in both build trees.])
+    fi
 fi
 
 case $build_os in
@@ -180,25 +188,26 @@ esac
 m4_set_add_all([_AC_SUBST_VARS],[HOST_ARCH]m4_foreach([cpu],[aarch64,arm,arm64ec,i386,x86_64],
                                 [m4_foreach([var],[CC,CFLAGS,EXTRACFLAGS,CXXFLAGS,LDFLAGS,DEBUG,TARGET,STRIP,DELAYLOADFLAG,DISABLED_SUBDIRS],[,cpu[_]var])]))
 
-AC_CACHE_CHECK([for the directory containing the Wine tools], wine_cv_toolsdir,
-  [wine_cv_toolsdir="$with_wine_tools"
-   if test -z "$with_wine_tools"; then
-     if test "$cross_compiling" = "yes"; then
-       AC_MSG_ERROR([you must use the --with-wine-tools option when cross-compiling.])
-     elif test -n "$with_wine64"; then
-       wine_cv_toolsdir="$with_wine64"
-     fi
-   fi])
-if test -z "$wine_cv_toolsdir"; then
+AC_SUBST(toolsdir,[$with_wine_tools])
+AC_MSG_CHECKING([for the directory containing the Wine tools])
+if test -z "$toolsdir"; then
+    if test "$cross_compiling" = "yes"; then
+        AC_MSG_ERROR([you must use the --with-wine-tools option when cross-compiling.])
+    elif test -n "$with_wine64" -a "x$enable_tools" != xyes; then
+        toolsdir="$with_wine64"
+    fi
+fi
+if test -z "$toolsdir"; then
     wine_makedep=tools/makedep$toolsext
-elif test -d "$wine_cv_toolsdir/tools/winebuild"; then
-    wine_makedep=$wine_cv_toolsdir/tools/makedep$toolsext
+elif test -d "$toolsdir/tools/winebuild"; then
+    wine_makedep=$toolsdir/tools/makedep$toolsext
     enable_tools=${enable_tools:-no}
-    test -f "$wine_makedep" || AC_MSG_ERROR([the Wine tools have not yet been built in $wine_cv_toolsdir])
+    test -f "$wine_makedep" || AC_MSG_ERROR([the Wine tools have not yet been built in $toolsdir])
 else
-    AC_MSG_ERROR([could not find Wine tools in $wine_cv_toolsdir])
+    AC_MSG_ERROR([could not find Wine tools in $toolsdir])
 fi
-AC_SUBST(toolsdir,[$wine_cv_toolsdir])
+AC_MSG_RESULT([${toolsdir:-none needed}])
+AC_SUBST(wine64dir,[$with_wine64])
 AC_SUBST(RUNTESTFLAGS,["-q -P wine"])
 AC_SUBST(SED_CMD,["LC_ALL=C sed -e 's,@bindir@,\${bindir},g' -e 's,@PACKAGE_STRING@,$PACKAGE_STRING,g' -e 's,@PACKAGE_VERSION@,$PACKAGE_VERSION,g'"])
 
@@ -615,6 +624,7 @@ case $host_os in
     dnl Disable modules that can't be used on Windows
     enable_loader=${enable_loader:-no}
     enable_server=${enable_server:-no}
+    enable_wine=${enable_wine:-no}
     dnl Disable dependencies that are not useful on Windows
     with_x=${with_x:-no}
     with_pthread=${with_pthread:-no}
@@ -2091,12 +2101,7 @@ fi
 
 dnl **** Platform-specific checks ****
 
-case "$HOST_ARCH,$PE_ARCHS" in
-  x86_64,*i386*) wine_binary="wine" ;;
-  x86_64,*) wine_binary="wine64" ;;
-  *) wine_binary="wine" ;;
-esac
-AC_SUBST(WINELOADER_PROGRAMS,"$wine_binary")
+AC_SUBST(WINELOADER_PROGRAMS,"wine")
 
 case $host_os in
   linux*)
@@ -2109,8 +2114,7 @@ esac
 
 if test "$wine_use_preloader" = "yes"
 then
-  test "$wine_binary" = wine || WINE_IGNORE_FILE(loader/wine-preloader)
-  WINELOADER_PROGRAMS="$WINELOADER_PROGRAMS $wine_binary-preloader"
+  WINELOADER_PROGRAMS="$WINELOADER_PROGRAMS wine-preloader"
   AC_DEFINE(HAVE_WINE_PRELOADER, 1, [Define to 1 if the Wine preloader is being used.])
 fi
 
@@ -2449,7 +2453,6 @@ wine_srcdir=
 test "$srcdir" = . || wine_srcdir="$srcdir/"
 
 WINE_CONFIG_SYMLINK(wine,tools/winewrapper)
-WINE_CONFIG_SYMLINK(wine64,tools/winewrapper,["$wine_binary" = wine64 -o -n "$with_wine64"])
 
 WINE_CONFIG_MAKEFILE(dlls/acledit)
 WINE_CONFIG_MAKEFILE(dlls/aclui)
@@ -3648,6 +3651,7 @@ WINE_CONFIG_MAKEFILE(server)
 WINE_CONFIG_MAKEFILE(tools,,[test "x$enable_tools" = xno])
 WINE_CONFIG_MAKEFILE(tools/sfnt2fon,,[test "x$enable_tools" = xno])
 WINE_CONFIG_MAKEFILE(tools/widl,,[test "x$enable_tools" = xno])
+WINE_CONFIG_MAKEFILE(tools/wine,,[test "x$enable_tools" = xno])
 WINE_CONFIG_MAKEFILE(tools/winebuild,,[test "x$enable_tools" = xno])
 WINE_CONFIG_MAKEFILE(tools/winedump,,[test "x$enable_tools" = xno])
 WINE_CONFIG_MAKEFILE(tools/winegcc,,[test "x$enable_tools" = xno])
@@ -3666,7 +3670,7 @@ WINE_IGNORE_FILE(config.log)
 WINE_IGNORE_FILE(config.status)
 WINE_IGNORE_FILE(include/config.h)
 WINE_IGNORE_FILE(include/stamp-h)
-test "$wine_binary" = wine || WINE_IGNORE_FILE(loader/wine)
+WINE_IGNORE_FILE(loader-wow64)
 
 if test "x$enable_tools" != xno
 then
@@ -3734,25 +3738,8 @@ fi
 
 dnl Rules for wineloader
 
-if test -n "$with_wine64"
+if test -z "$with_wine64"
 then
-    case "$with_wine64" in
-      /*) reldir="" ;;
-      *)  reldir="../" ;;
-    esac
-    dnl Get rid of old symlinks
-    rm -f fonts server 2>/dev/null
-    WINE_APPEND_RULE(
-[all: loader/wine64 loader/wine64-preloader $with_wine64/loader/wine $with_wine64/loader/wine-preloader
-loader/wine64 loader/wine64-preloader:
-	rm -f \$[@] && \$(LN_S) $reldir$with_wine64/\$[@] \$[@]
-$with_wine64/loader/wine:
-	rm -f \$[@] && \$(LN_S) $ac_pwd/loader/wine \$[@]
-$with_wine64/loader/wine-preloader:
-	rm -f \$[@] && \$(LN_S) $ac_pwd/loader/wine-preloader \$[@]
-clean::
-	rm -f loader/wine64 loader/wine64-preloader $with_wine64/loader/wine $with_wine64/loader/wine-preloader])
-else
     TOP_INSTALL_DEV="$TOP_INSTALL_DEV include"
     TOP_INSTALL_LIB="$TOP_INSTALL_LIB \
 fonts \
diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
index 2b0037e39eb..58298bf00c8 100644
--- a/dlls/ntdll/unix/loader.c
+++ b/dlls/ntdll/unix/loader.c
@@ -98,18 +98,6 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(module);
 
-#ifdef __i386__
-static const char so_dir[] = "/i386-unix";
-#elif defined(__x86_64__)
-static const char so_dir[] = "/x86_64-unix";
-#elif defined(__arm__)
-static const char so_dir[] = "/arm-unix";
-#elif defined(__aarch64__)
-static const char so_dir[] = "/aarch64-unix";
-#else
-static const char so_dir[] = "";
-#endif
-
 void *pDbgUiRemoteBreakin = NULL;
 void *pKiRaiseUserExceptionDispatcher = NULL;
 void *pKiUserExceptionDispatcher = NULL;
@@ -156,6 +144,7 @@ static const char *bin_dir;
 static const char *dll_dir;
 static const char *ntdll_dir;
 static const char *wineloader;
+static const char *alt_build_dir;
 static SIZE_T dll_path_maxlen;
 
 const char *home_dir = NULL;
@@ -356,10 +345,20 @@ static int build_path_and_exec( pid_t *pid, const char *dir, const char *name, c
 }
 
 
-static const char *get_pe_dir( WORD machine )
+static const char *get_so_dir( WORD machine )
 {
-    if (!machine) machine = current_machine;
+    switch (machine)
+    {
+    case IMAGE_FILE_MACHINE_I386:  return "/i386-unix";
+    case IMAGE_FILE_MACHINE_AMD64: return "/x86_64-unix";
+    case IMAGE_FILE_MACHINE_ARMNT: return "/arm-unix";
+    case IMAGE_FILE_MACHINE_ARM64: return "/aarch64-unix";
+    default: return "";
+    }
+}
 
+static const char *get_pe_dir( WORD machine )
+{
     switch(machine)
     {
     case IMAGE_FILE_MACHINE_I386:  return "/i386-windows";
@@ -370,6 +369,17 @@ static const char *get_pe_dir( WORD machine )
     }
 }
 
+static WORD get_alt_machine( WORD machine )
+{
+    switch (machine)
+    {
+    case IMAGE_FILE_MACHINE_I386:  return IMAGE_FILE_MACHINE_AMD64;
+    case IMAGE_FILE_MACHINE_AMD64: return IMAGE_FILE_MACHINE_I386;
+    case IMAGE_FILE_MACHINE_ARMNT: return IMAGE_FILE_MACHINE_ARM64;
+    case IMAGE_FILE_MACHINE_ARM64: return IMAGE_FILE_MACHINE_ARMNT;
+    default: return machine;
+    }
+}
 
 static void set_dll_path(void)
 {
@@ -501,46 +511,26 @@ static void set_config_dir(void)
     }
 }
 
-static void init_paths( char *argv[] )
+static void init_paths(void)
 {
     Dl_info info;
-    char *basename, *env;
-
-    if ((basename = strrchr( argv[0], '/' ))) basename++;
-    else basename = argv[0];
 
     if (!dladdr( init_paths, &info ) || !(ntdll_dir = realpath_dirname( info.dli_fname )))
         fatal_error( "cannot get path to ntdll.so\n" );
 
-    if (!(build_dir = remove_tail( ntdll_dir, "/dlls/ntdll" )))
+    if ((build_dir = remove_tail( ntdll_dir, "/dlls/ntdll" )))
     {
-        if (!(dll_dir = remove_tail( ntdll_dir, so_dir ))) dll_dir = ntdll_dir;
-#if (defined(__linux__) && !defined(__ANDROID__)) || defined(__FreeBSD_kernel__) || defined(__NetBSD__)
-        bin_dir = realpath_dirname( "/proc/self/exe" );
-#elif defined (__FreeBSD__) || defined(__DragonFly__)
-        {
-            static int pathname[] = { CTL_KERN, KERN_PROC, KERN_PROC_PATHNAME, -1 };
-            size_t path_size = PATH_MAX;
-            char *path = malloc( path_size );
-            if (path && !sysctl( pathname, ARRAY_SIZE(pathname), path, &path_size, NULL, 0 ))
-                bin_dir = realpath_dirname( path );
-            free( path );
-        }
-#endif
-        if (!bin_dir) bin_dir = build_relative_path( dll_dir, LIBDIR "/wine", BINDIR );
-        data_dir = build_relative_path( bin_dir, BINDIR, DATADIR "/wine" );
-        wineloader = build_path( bin_dir, basename );
+        wineloader = build_path( build_dir, "loader/wine" );
+        alt_build_dir = realpath_dirname( build_path( build_dir, "loader-wow64" ));
     }
     else
     {
-        char *dirname = build_path( build_dir, "loader" );
-        wineloader = build_path( dirname, basename );
-        free(dirname);
+        if (!(dll_dir = remove_tail( ntdll_dir, get_so_dir(current_machine) ))) dll_dir = ntdll_dir;
+        bin_dir = build_relative_path( dll_dir, LIBDIR "/wine", BINDIR );
+        data_dir = build_relative_path( dll_dir, LIBDIR "/wine", DATADIR "/wine" );
+        wineloader = build_path( ntdll_dir, "wine" );
     }
 
-    asprintf( &env, "WINELOADER=%s", wineloader );
-    putenv( env );
-
     set_dll_path();
     set_system_dll_path();
     set_home_dir();
@@ -553,42 +543,33 @@ static void init_paths( char *argv[] )
  */
 char *get_alternate_wineloader( WORD machine )
 {
+    const char *arch;
+    BOOL force_wow64 = (arch = getenv( "WINEARCH" )) && !strcmp( arch, "wow64" );
     char *ret = NULL;
 
-    if (machine == current_machine) return NULL;
-
-    /* try the 64-bit loader */
-    if (current_machine == IMAGE_FILE_MACHINE_I386 && machine == IMAGE_FILE_MACHINE_AMD64)
+    if (is_win64)
     {
-        size_t len = strlen(wineloader);
-
-        if (len <= 2 || strcmp( wineloader + len - 2, "64" ))
-        {
-            ret = malloc( len + 3 );
-            strcpy( ret, wineloader );
-            strcat( ret, "64" );
-        }
-        return ret;
+        if (force_wow64) return NULL;
+        if (machine != get_alt_machine( current_machine )) return NULL;
+    }
+    else
+    {
+        if (!force_wow64 && machine == current_machine) return NULL;
+        machine = get_alt_machine( current_machine );
     }
 
-    return remove_tail( wineloader, "64" );
-}
+    if (!build_dir)
+        asprintf( &ret, "%s%s/wine", dll_dir, get_so_dir( machine ));
+    else if (alt_build_dir)
+        asprintf( &ret, "%s/loader/wine", alt_build_dir );
 
+    return ret;
+}
 
 static void preloader_exec( char **argv )
 {
 #ifdef HAVE_WINE_PRELOADER
-    static const char *preloader = "wine-preloader";
-    char *p;
-
-    if (!(p = strrchr( argv[1], '/' ))) p = argv[1];
-    else p++;
-
-    if (strlen(p) > 2 && !strcmp( p + strlen(p) - 2, "64" )) preloader = "wine64-preloader";
-    argv[0] = malloc( p - argv[1] + strlen(preloader) + 1 );
-    memcpy( argv[0], argv[1], p - argv[1] );
-    strcpy( argv[0] + (p - argv[1]), preloader );
-
+    asprintf( &argv[0], "%s-preloader", argv[1] );
 #ifdef __APPLE__
     {
         posix_spawnattr_t attr;
@@ -688,15 +669,11 @@ static int exec_wineserver( pid_t *pid, char **argv )
 {
     char *path;
 
+    if (!is_win64 && alt_build_dir)  /* look for 64-bit server */
+        return build_path_and_exec( pid, alt_build_dir, "server/wineserver", argv );
+
     if (build_dir)
-    {
-        if (!is_win64)  /* look for 64-bit server */
-        {
-            char *loader = realpath_dirname( build_path( build_dir, "loader/wine64" ));
-            if (loader && !build_path_and_exec( pid, loader, "../server/wineserver", argv )) return 0;
-        }
         return build_path_and_exec( pid, build_dir, "server/wineserver", argv );
-    }
 
     if (!build_path_and_exec( pid, bin_dir, "wineserver", argv )) return 0;
     if ((path = getenv( "WINESERVER" )) && !build_path_and_exec( pid, "", path, argv )) return 0;
@@ -1475,6 +1452,7 @@ static NTSTATUS find_builtin_dll( UNICODE_STRING *nt_name, void **module, SIZE_T
     unsigned int len = nt_name->Length / sizeof(WCHAR);
     char *ptr = NULL, *file, *ext = NULL;
     const char *pe_dir = get_pe_dir( search_machine );
+    const char *so_dir = get_so_dir( current_machine );
     OBJECT_ATTRIBUTES attr;
     NTSTATUS status = STATUS_DLL_NOT_FOUND;
     BOOL found_image = FALSE;
@@ -2394,7 +2372,7 @@ static jstring wine_init_jni( JNIEnv *env, jobject obj, jobjectArray cmdline, jo
     main_argc = argc;
     main_argv = argv;
 
-    init_paths( argv );
+    init_paths();
     virtual_init();
     init_environment();
 
@@ -2593,19 +2571,24 @@ DECLSPEC_EXPORT void __wine_main( int argc, char *argv[] )
     main_argc = argc;
     main_argv = argv;
 
-    init_paths( argv );
+    init_paths();
 
     if (!getenv( "WINELOADERNOEXEC" ))  /* first time around */
     {
         check_command_line( argc, argv );
-        if (pre_exec())
+        if (pre_exec() || !dlsym( RTLD_DEFAULT, "wine_main_preload_info" ))
         {
             static char noexec[] = "WINELOADERNOEXEC=1";
             char **new_argv = malloc( (argc + 2) * sizeof(*argv) );
+            WORD machine = current_machine;
 
             memcpy( new_argv + 1, argv, (argc + 1) * sizeof(*argv) );
             putenv( noexec );
-            loader_exec( new_argv, current_machine );
+
+            /* default to 32-bit loader to support 32-bit prefixes */
+            if (machine == IMAGE_FILE_MACHINE_AMD64) machine = IMAGE_FILE_MACHINE_I386;
+
+            loader_exec( new_argv, machine );
             fatal_error( "could not exec the wine loader\n" );
         }
     }
diff --git a/loader/Makefile.in b/loader/Makefile.in
index 191ab81e1d2..a9ca82f3321 100644
--- a/loader/Makefile.in
+++ b/loader/Makefile.in
@@ -2,12 +2,8 @@ SOURCES = \
 	main.c \
 	preloader.c \
 	preloader_mac.c \
-	wine.de.UTF-8.man.in \
 	wine.desktop \
-	wine.fr.UTF-8.man.in \
 	wine.inf.in \
-	wine.man.in \
-	wine.pl.UTF-8.man.in \
 	wine_info.plist.in
 
 PROGRAMS = $(WINELOADER_PROGRAMS)
@@ -16,20 +12,10 @@ UNIX_CFLAGS = -fPIE
 
 preloader_EXTRADEFS = -fno-builtin
 
-main_EXTRADEFS = -DBINDIR=\"${bindir}\" -DLIBDIR=\"${libdir}\"
-
 wine_OBJS = main.o
 wine_DEPS = $(WINELOADER_DEPENDS)
 wine_LDFLAGS = $(WINELOADER_LDFLAGS) $(LDEXECFLAGS) $(PTHREAD_LIBS)
 
-wine64_OBJS = main.o
-wine64_DEPS = $(WINELOADER_DEPENDS)
-wine64_LDFLAGS = $(WINELOADER_LDFLAGS) $(LDEXECFLAGS) $(PTHREAD_LIBS)
-
 wine_preloader_OBJS = preloader.o preloader_mac.o
 wine_preloader_DEPS = $(WINELOADER_DEPENDS)
 wine_preloader_LDFLAGS = $(WINEPRELOADER_LDFLAGS)
-
-wine64_preloader_OBJS = preloader.o preloader_mac.o
-wine64_preloader_DEPS = $(WINELOADER_DEPENDS)
-wine64_preloader_LDFLAGS = $(WINEPRELOADER_LDFLAGS)
diff --git a/loader/main.c b/loader/main.c
index 2ba32ea5176..0bd675bcc75 100644
--- a/loader/main.c
+++ b/loader/main.c
@@ -124,44 +124,7 @@ static char *build_path( const char *dir, const char *name )
     return ret;
 }
 
-/* build a path with the relative dir from 'from' to 'dest' appended to base */
-static char *build_relative_path( const char *base, const char *from, const char *dest )
-{
-    const char *start;
-    char *ret;
-    unsigned int dotdots = 0;
-
-    for (;;)
-    {
-        while (*from == '/') from++;
-        while (*dest == '/') dest++;
-        start = dest;  /* save start of next path element */
-        if (!*from) break;
-
-        while (*from && *from != '/' && *from == *dest) { from++; dest++; }
-        if ((!*from || *from == '/') && (!*dest || *dest == '/')) continue;
-
-        do  /* count remaining elements in 'from' */
-        {
-            dotdots++;
-            while (*from && *from != '/') from++;
-            while (*from == '/') from++;
-        }
-        while (*from);
-        break;
-    }
-
-    ret = malloc( strlen(base) + 3 * dotdots + strlen(start) + 2 );
-    strcpy( ret, base );
-    while (dotdots--) strcat( ret, "/.." );
-
-    if (!start[0]) return ret;
-    strcat( ret, "/" );
-    strcat( ret, start );
-    return ret;
-}
-
-static const char *get_self_exe( char *argv0 )
+static const char *get_self_exe(void)
 {
 #if defined(__linux__) || defined(__FreeBSD_kernel__) || defined(__NetBSD__)
     return "/proc/self/exe";
@@ -173,77 +136,26 @@ static const char *get_self_exe( char *argv0 )
         return path;
     free( path );
 #endif
-
-    if (!strchr( argv0, '/' )) /* search in PATH */
-    {
-        char *p, *path = getenv( "PATH" );
-
-        if (!path || !(path = strdup(path))) return NULL;
-        for (p = strtok( path, ":" ); p; p = strtok( NULL, ":" ))
-        {
-            char *name = build_path( p, argv0 );
-            if (!access( name, X_OK ))
-            {
-                free( path );
-                return name;
-            }
-            free( name );
-        }
-        free( path );
-        return NULL;
-    }
-    return argv0;
-}
-
-static void *try_dlopen( const char *dir, const char *name )
-{
-    char *path = build_path( dir, name );
-    void *handle = dlopen( path, RTLD_NOW );
-    free( path );
-    return handle;
+    return NULL;
 }
 
-static void *load_ntdll( char *argv0 )
+static void *try_dlopen( const char *argv0 )
 {
-#ifdef __i386__
-#define SO_DIR "i386-unix/"
-#elif defined(__x86_64__)
-#define SO_DIR "x86_64-unix/"
-#elif defined(__arm__)
-#define SO_DIR "arm-unix/"
-#elif defined(__aarch64__)
-#define SO_DIR "aarch64-unix/"
-#else
-#define SO_DIR ""
-#endif
-    const char *self = get_self_exe( argv0 );
-    char *path, *p;
-    void *handle = NULL;
+    char *dir, *path, *p;
+    void *handle;
 
-    if (self && ((path = realpath_dirname( self ))))
-    {
-        if ((p = remove_tail( path, "/loader" )))
-            handle = try_dlopen( p, "dlls/ntdll/ntdll.so" );
-        else if ((p = build_relative_path( path, BINDIR, LIBDIR )))
-            handle = try_dlopen( p, "wine/" SO_DIR "ntdll.so" );
-        free( p );
-        free( path );
-    }
+    if (!argv0) return NULL;
+    if (!(dir = realpath_dirname( argv0 ))) return NULL;
 
-    if (!handle && (path = getenv( "WINEDLLPATH" )))
-    {
-        path = strdup( path );
-        for (p = strtok( path, ":" ); p; p = strtok( NULL, ":" ))
-        {
-            handle = try_dlopen( p, SO_DIR "ntdll.so" );
-            if (!handle) handle = try_dlopen( p, "ntdll.so" );
-            if (handle) break;
-        }
-        free( path );
-    }
-
-    if (!handle && !self) handle = try_dlopen( LIBDIR, "wine/" SO_DIR "ntdll.so" );
+    if ((p = remove_tail( dir, "/loader" )))
+        path = build_path( p, "dlls/ntdll/ntdll.so" );
+    else
+        path = build_path( dir, "ntdll.so" );
 
+    handle = dlopen( path, RTLD_NOW );
+    free( p );
+    free( dir );
+    free( path );
     return handle;
 }
 
@@ -257,7 +169,8 @@ int main( int argc, char *argv[] )
 
     init_reserved_areas();
 
-    if ((handle = load_ntdll( argv[0] )))
+    if ((handle = try_dlopen( get_self_exe() )) ||
+        (handle = try_dlopen( argv[0] )))
     {
         void (*init_func)(int, char **) = dlsym( handle, "__wine_main" );
         if (init_func) init_func( argc, argv );
diff --git a/tools/makedep.c b/tools/makedep.c
index 5847ba56869..63bdf1cfc47 100644
--- a/tools/makedep.c
+++ b/tools/makedep.c
@@ -147,6 +147,7 @@ static const char *root_src_dir;
 static const char *root_obj_dir;
 static const char *tools_dir;
 static const char *tools_ext;
+static const char *wine64_dir;
 static const char *exe_ext;
 static const char *fontforge;
 static const char *convert;
@@ -244,6 +245,7 @@ static const char *output_makefile_name = "Makefile";
 static const char *input_file_name;
 static const char *output_file_name;
 static const char *temp_file_name;
+static char cwd[PATH_MAX];
 static int compile_commands_mode;
 static int silent_rules;
 static int input_line;
@@ -3764,7 +3766,7 @@ static void output_programs( struct makefile *make )
 
     for (i = 0; i < make->programs.count; i++)
     {
-        char *program_installed = NULL;
+        const char *install_dir;
         char *program = strmake( "%s%s", make->programs.str[i], exe_ext );
         struct strarray deps = get_local_dependencies( make, make->programs.str[i], make->in_files );
         struct strarray all_libs = get_expanded_file_local_var( make, make->programs.str[i], "LDFLAGS" );
@@ -3800,8 +3802,8 @@ static void output_programs( struct makefile *make )
         }
         strarray_addall( &make->all_targets[arch], symlinks );
 
-        add_install_rule( make, program, arch, program_installed ? program_installed : program,
-                          strmake( "p$(bindir)/%s", program ));
+        install_dir = !strcmp( make->obj_dir, "loader" ) ? arch_install_dirs[arch] : "$(bindir)/";
+        add_install_rule( make, program, arch, program, strmake( "p%s%s", install_dir, program ));
         for (j = 0; j < symlinks.count; j++)
             add_install_rule( make, symlinks.str[j], arch, program,
                               strmake( "y$(bindir)/%s%s", symlinks.str[j], exe_ext ));
@@ -4209,12 +4211,9 @@ static void output_compile_commands( const char *dest )
     struct compile_command *cmd;
     unsigned int i;
     const char *dir;
-    char buffer[PATH_MAX];
 
     output_file = create_temp_file( dest );
-
-    getcwd( buffer, sizeof(buffer) );
-    dir = escape_cstring( buffer );
+    dir = escape_cstring( cwd );
 
     output( "[\n" );
     LIST_FOR_EACH_ENTRY( cmd, &compile_commands, struct compile_command, entry )
@@ -4415,6 +4414,16 @@ static void output_top_makefile( struct makefile *make )
             silent_rules ? " -S" : "" );
     strarray_add( &make->phony_targets, "depend" );
 
+    if (wine64_dir)
+    {
+        output( "loader-wow64:\n" );
+	output( "\t%srm -f $@ && %s %s/loader $@\n", cmd_prefix( "LN" ), ln_s, wine64_dir );
+        output( "%s/loader-wow64:\n", wine64_dir );
+	output( "\t%srm -f $@ && %s %s/loader $@\n", cmd_prefix( "LN" ), ln_s, cwd );
+        strarray_add( &make->all_targets[0], "loader-wow64" );
+        strarray_add( &make->all_targets[0], strmake( "%s/loader-wow64", wine64_dir ));
+    }
+
     for (i = 0; i < subdirs.count; i++) output_sources( submakes[i] );
     output_sources( make );
 
@@ -4658,6 +4667,7 @@ int main( int argc, char *argv[] )
 
     atexit( cleanup_files );
     init_signals( exit_on_signal );
+    getcwd( cwd, sizeof(cwd) );
 
     for (i = 0; i < HASH_SIZE; i++) list_init( &files[i] );
     for (i = 0; i < HASH_SIZE; i++) list_init( &global_includes[i] );
@@ -4679,6 +4689,7 @@ int main( int argc, char *argv[] )
     root_obj_dir       = get_expanded_make_variable( top_makefile, "objdir" );
     tools_dir          = get_expanded_make_variable( top_makefile, "toolsdir" );
     tools_ext          = get_expanded_make_variable( top_makefile, "toolsext" );
+    wine64_dir         = get_expanded_make_variable( top_makefile, "wine64dir" );
     exe_ext            = get_expanded_make_variable( top_makefile, "EXEEXT" );
     dll_ext[0]         = get_expanded_make_variable( top_makefile, "DLLEXT" );
     fontforge          = get_expanded_make_variable( top_makefile, "FONTFORGE" );
diff --git a/tools/wine/Makefile.in b/tools/wine/Makefile.in
new file mode 100644
index 00000000000..55489a3444a
--- /dev/null
+++ b/tools/wine/Makefile.in
@@ -0,0 +1,12 @@
+PROGRAMS = wine
+
+SOURCES = \
+	wine.c \
+	wine.de.UTF-8.man.in \
+	wine.fr.UTF-8.man.in \
+	wine.man.in \
+	wine.pl.UTF-8.man.in
+
+wine_EXTRADEFS = -DBINDIR="\"${bindir}\"" -DLIBDIR="\"${libdir}\""
+
+INSTALL_LIB = $(PROGRAMS)
diff --git a/tools/wine/wine.c b/tools/wine/wine.c
new file mode 100644
index 00000000000..32157dfd4bc
--- /dev/null
+++ b/tools/wine/wine.c
@@ -0,0 +1,67 @@
+/*
+ * Loader for Wine installed in the bin directory
+ *
+ * Copyright 2025 Alexandre Julliard
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include "config.h"
+
+#include "../tools.h"
+
+#include <dlfcn.h>
+
+static const char *bindir;
+static const char *libdir;
+
+static void *load_ntdll(void)
+{
+    const char *arch_dir = get_arch_dir( get_default_target() );
+    struct strarray dllpath;
+    void *handle;
+    unsigned int i;
+
+    if (bindir && strendswith( bindir, "/tools/wine" ) &&
+        ((handle = dlopen( strmake( "%s/../../dlls/ntdll/ntdll.so", bindir ), RTLD_NOW ))))
+        return handle;
+
+    if ((handle = dlopen( strmake( "%s/wine%s/ntdll.so", libdir, arch_dir ), RTLD_NOW )))
+        return handle;
+
+    dllpath = strarray_frompath( getenv( "WINEDLLPATH" ));
+    for (i = 0; i < dllpath.count; i++)
+    {
+        if ((handle = dlopen( strmake( "%s%s/ntdll.so", dllpath.str[i], arch_dir ), RTLD_NOW )))
+            return handle;
+        if ((handle = dlopen( strmake( "%s/ntdll.so", dllpath.str[i] ), RTLD_NOW )))
+            return handle;
+    }
+    fprintf( stderr, "wine: could not load ntdll.so: %s\n", dlerror() );
+    exit(1);
+}
+
+int main( int argc, char *argv[] )
+{
+    void (*init_func)(int, char **);
+
+    bindir = get_bindir( argv[0] );
+    libdir = get_libdir( bindir );
+    init_func = dlsym( load_ntdll(), "__wine_main" );
+    if (init_func) init_func( argc, argv );
+
+    fprintf( stderr, "wine: __wine_main function not found in ntdll.so\n" );
+    exit(1);
+}
diff --git a/loader/wine.de.UTF-8.man.in b/tools/wine/wine.de.UTF-8.man.in
similarity index 97%
rename from loader/wine.de.UTF-8.man.in
rename to tools/wine/wine.de.UTF-8.man.in
index ea3786c69e0..b1d8d42cf92 100644
--- a/loader/wine.de.UTF-8.man.in
+++ b/tools/wine/wine.de.UTF-8.man.in
@@ -89,13 +89,6 @@ Gibt den Ort der
 .B wine
 in $PATH und anderen Orten nach wineserver.
 .TP
-.B WINELOADER
-Gibt den Ort der
-.B wine
--Anwendung an, die genutzt wird, um Windows-Programme zu laden. Wenn
-diese Variable nicht gesetzt ist, wird in $PATH und anderen Orten
-nach wine gesucht.
-.TP
 .B WINEDEBUG
 Wählt die Stufe der Debug-Meldungen aus. Die Variable hat das Format
 .RI [ Klasse ][+/-] Kanal [,[ Klasse2 ][+/-] Kanal2 ].
diff --git a/loader/wine.fr.UTF-8.man.in b/tools/wine/wine.fr.UTF-8.man.in
similarity index 97%
rename from loader/wine.fr.UTF-8.man.in
rename to tools/wine/wine.fr.UTF-8.man.in
index ef2e6a3008e..34722caa58e 100644
--- a/loader/wine.fr.UTF-8.man.in
+++ b/tools/wine/wine.fr.UTF-8.man.in
@@ -88,13 +88,6 @@ Si cette variable n'est pas définie, Wine essaiera de charger un
 fichier nommé « wineserver » dans le chemin système ou quelques autres
 emplacements potentiels.
 .TP
-.B WINELOADER
-Spécifie le chemin et le nom de l'exécutable
-.B wine
-à utiliser pour exécuter de nouveaux processus Windows. A défaut, Wine
-essaiera de charger un fichier nommé « wine » dans le chemin système
-ou quelques autres emplacements potentiels.
-.TP
 .B WINEDEBUG
 Active ou désactive les messages de débogage. La syntaxe est :
 .RI [ classe ][\fB+\fR|\fB-\fR] canal [,[ classe2 ][\fB+\fR|\fB-\fR] canal2 ]
diff --git a/loader/wine.man.in b/tools/wine/wine.man.in
similarity index 97%
rename from loader/wine.man.in
rename to tools/wine/wine.man.in
index f3de4217a93..557dacb07f5 100644
--- a/loader/wine.man.in
+++ b/tools/wine/wine.man.in
@@ -88,13 +88,6 @@ Specifies the path and name of the
 binary. If not set, Wine will look for a file named "wineserver" in
 the path and in a few other likely locations.
 .TP
-.B WINELOADER
-Specifies the path and name of the
-.B wine
-binary to use to launch new Windows processes. If not set, Wine will
-look for a file named "wine" in the path and in a few other likely
-locations.
-.TP
 .B WINEDEBUG
 Turns debugging messages on or off. The syntax of the variable is
 of the form
diff --git a/loader/wine.pl.UTF-8.man.in b/tools/wine/wine.pl.UTF-8.man.in
similarity index 97%
rename from loader/wine.pl.UTF-8.man.in
rename to tools/wine/wine.pl.UTF-8.man.in
index a66ae999190..712dd487d5c 100644
--- a/loader/wine.pl.UTF-8.man.in
+++ b/tools/wine/wine.pl.UTF-8.man.in
@@ -86,13 +86,6 @@ Określa ścieżkę i nazwę programu binarnego
 Jeżeli nie ustawione, Wine będzie szukał pliku o nazwie "wineserver" w
 podanej ścieżce i kilku innych miejscach prawdopodobnego występowania.
 .TP
-.B WINELOADER
-Określa ścieżkę i nazwę programu binarnego
-.B wine
-używanej do uruchamiania nowych procesów Windowsowych. Jeżeli
-nieustawione, Wine będzie szukał pliku o nazwie "wine" w podanej
-ścieżce i kilku innych miejscach prawdopodobnego występowania.
-.TP
 .B WINEDEBUG
 Włącza lub wyłącza wiadomości debuggera. Składnia zmiennej
 wygląda następująco

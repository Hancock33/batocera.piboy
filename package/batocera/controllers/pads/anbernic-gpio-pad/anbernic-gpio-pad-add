#!/bin/bash

test "${ACTION}" = "add" || exit 0
echo "${DEVNAME}" | grep -E "^/dev/input/event[0-9]+$" || exit 0

BASEFILE="/var/run/anbernic-pad-devices"
PIDFILE="${BASEFILE}.pid"
LOCKFILE="${BASEFILE}.lock"
LOGFILE="${BASEFILE}.log"
DEVSFILE="${BASEFILE}.devs"

unlockAndExit() {
    rmdir "${LOCKFILE}"
    exit "${1}"
}

checkRunningPIDAndExit1() {
    test ! -e "${PIDFILE}" && return 0
    LPID=$(cat "${PIDFILE}")
    if ! test -d "/proc/${LPID}"; then
        rm -f "${PIDFILE}"
        return 0
    fi
    unlockAndExit 1
}

trylock() {
    # lock
    N=0
    while ! mkdir "${LOCKFILE}"
    do
	sleep 1
	let N++
	test "${N}" -gt 30 && exit 1 # give up
    done
}

EXPECTED_DEVS=3
if [ "$(batocera-model)" = "Powkiddy_x55" ]; then
    # If the model is Powkiddy_x55, we only expect 2 devices.
    # there is no adc-keys we want to merge in (TBD)
    EXPECTED_DEVS=2
fi

trylock
checkRunningPIDAndExit1

# Check the new device on the list is not already there
grep -qF "${DEVNAME}" "${DEVSFILE}" || echo "${DEVNAME}" >> "${DEVSFILE}"

NDEVS=$(cat "${DEVSFILE}" | wc -l)

if [ "${NDEVS}" -eq "${EXPECTED_DEVS}" ]; then
    EVS_ARGS=$(cat "${DEVSFILE}" | xargs -I {} echo --input "{}")
    nohup evsieve ${EVS_ARGS} persist=exit --output name="Anbernic pad" >/dev/null 2>"${LOGFILE}" &

    echo $! > "${PIDFILE}"
    unlockAndExit 0
else
    # This is a safety measure. Clean up and exit with an error.
    if [ "${NDEVS}" -gt "${EXPECTED_DEVS}" ]; then
        rm -f "${DEVSFILE}"
        unlockAndExit 1
    fi

    unlockAndExit 0
fi

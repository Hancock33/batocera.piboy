diff --git a/CMakeLists.txt b/CMakeLists.txt
index b55cc041..45ddccca 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -9,12 +9,15 @@ option(BCM "BCM host" OFF)
 
 option(BATOCERA "Set to ON to enable BATOCERA specific code" OFF)
 option(RETROBAT "Set to ON to enable RETROBAT specific code" OFF)
+option(PIBOY "Set to ON to enable DMG Piboy compatibility" OFF)
+option(NOUPDATE "Set to ON to disable system updates" OFF)
 
 option(ENABLE_FILEMANAGER "Set to ON to enable f1 shortcut for filesystem" OFF)
 option(DISABLE_KODI "Set to ON to disable kodi in menu" OFF)
 option(ENABLE_PULSE "Set to ON to enable pulse audio (versus alsa)" OFF)
 option(ENABLE_TTS "Set to ON to enable text to speech" OFF)
 
+
 project(emulationstation-all)
 
 #-------------------------------------------------------------------------------
@@ -34,6 +37,16 @@ if(RETROBAT)
   add_definitions(-DRETROBAT)
 endif()
 
+if(PIBOY)
+  MESSAGE("Piboy build")
+  add_definitions(-DPIBOY)
+endif()
+
+if(NOUPDATE)
+  MESSAGE("Update disabled")
+  add_definitions(-DNOUPDATE)
+endif()
+
 # disable kodi menu
 if(DISABLE_KODI)
   MESSAGE("kodi disabled")
diff --git a/es-app/src/guis/GuiMenu.cpp b/es-app/src/guis/GuiMenu.cpp
index a8e5791c..1054c52d 100644
--- a/es-app/src/guis/GuiMenu.cpp
+++ b/es-app/src/guis/GuiMenu.cpp
@@ -71,8 +71,15 @@
 #define fake_gettext_architecture _("Architecture")
 #define fake_gettext_diskformat   _("Disk format")
 #define fake_gettext_temperature  _("Temperature")
+#if PIBOY
+#define fake_gettext_fan          _("Fan speed")
+#endif
 #define fake_gettext_avail_memory _("Available memory")
 #define fake_gettext_battery      _("Battery")
+#if PIBOY
+#define fake_gettext_battery_volts   _("Battery voltage")
+#define fake_gettext_battery_amps    _("Battery current")
+#endif
 #define fake_gettext_model        _("Model")
 #define fake_gettext_cpu_model    _("Cpu model")
 #define fake_gettext_cpu_number   _("Cpu number")
@@ -191,7 +198,11 @@ GuiMenu::GuiMenu(Window *window, bool animate) : GuiComponent(window), mMenu(win
 			ApiSystem::getInstance()->isScriptingSupported(ApiSystem::UPGRADE))
 			addEntry(_("UPDATES & DOWNLOADS"), true, [this] { openUpdatesSettings(); }, "iconUpdates");
 
-		addEntry(_("SYSTEM SETTINGS").c_str(), true, [this] { openSystemSettings(); }, "iconSystem");
+			#if !NOUPDATE
+				addEntry(_("UPDATES & DOWNLOADS"), true, [this] { openUpdatesSettings(); }, "iconUpdates");
+			#else
+				addEntry(_("DOWNLOADS"), true, [this] { openUpdatesSettings(); }, "iconUpdates");
+			#endif
 	}
 	else
 	{
@@ -798,7 +809,11 @@ void GuiMenu::openDeveloperSettings()
 
 void GuiMenu::openUpdatesSettings()
 {
-	GuiSettings *updateGui = new GuiSettings(mWindow, _("UPDATES & DOWNLOADS").c_str());
+	#if !NOUPDATE
+		GuiSettings *updateGui = new GuiSettings(mWindow, _("UPDATES & DOWNLOADS").c_str());
+	#else
+		GuiSettings *updateGui = new GuiSettings(mWindow, _("DOWNLOADS").c_str());
+	#endif
 
 	updateGui->addGroup(_("DOWNLOADS"));
 
@@ -839,6 +854,7 @@ void GuiMenu::openUpdatesSettings()
 
 	if (ApiSystem::getInstance()->isScriptingSupported(ApiSystem::UPGRADE))
 	{
+#if !NOUPDATE
 		updateGui->addGroup(_("SOFTWARE UPDATES"));
 
 		// Enable updates
@@ -848,11 +864,11 @@ void GuiMenu::openUpdatesSettings()
 
 		std::string updatesType = SystemConf::getInstance()->get("updates.type");
 
-#if WIN32
+	#if WIN32
 		if (updatesType == "unstable")
 			updatesTypeList->add("unstable", "unstable", updatesType == "unstable");
 		else
-#endif
+	#endif
 			if (updatesType.empty() || updatesType != "beta")
 				updatesType = "stable";
 
@@ -881,6 +897,7 @@ void GuiMenu::openUpdatesSettings()
 				mWindow->pushGui(new GuiUpdate(mWindow));
 			}
 		});
+#endif
 	}
 
 	mWindow->pushGui(updateGui);
diff --git a/es-core/src/platform.cpp b/es-core/src/platform.cpp
index d2d1bc94..d6db4182 100644
--- a/es-core/src/platform.cpp
+++ b/es-core/src/platform.cpp
@@ -28,6 +28,8 @@ int runShutdownCommand()
 {
 #ifdef WIN32 // windows
 	return system("shutdown -s -t 0");
+#elseif PIBOY
+	return system("/sbin/rmmod xpi_gamecon ; /sbin/rmmod xpi_gamecon_xrs shutdown -t1 now -h");
 #else // osx / linux	
 	return system("shutdown -h now");
 #endif
@@ -37,6 +39,8 @@ int runRestartCommand()
 {
 #ifdef WIN32 // windows	
 	return system("shutdown -r -t 0");
+#elseif PIBOY
+	return system("reboot");
 #else // osx / linux	
 	return system("shutdown -r now");
 #endif
@@ -349,9 +353,20 @@ BatteryInformation queryBatteryInformation()
                 std::string fuelgaugeRootPath;
                 std::string chargerRootPath;
 
+	#if PIBOY
+		auto files = Utils::FileSystem::getDirContent("/sys/kernel");
+	#else
 		auto files = Utils::FileSystem::getDirContent("/sys/class/power_supply");
+	#endif
 		for (auto file : files)
 		{
+		#if PIBOY
+			if (Utils::String::toLower(file).find("/xpi_gamecon") != std::string::npos)
+			{
+				batteryRootPath = file;
+				break;
+			}
+		#else
 			if ( (Utils::String::toLower(file).find("/bat") != std::string::npos) && (batteryRootPath.empty()) )
 				batteryRootPath = file;
 
@@ -360,7 +375,9 @@ BatteryInformation queryBatteryInformation()
 
                         if ( (Utils::String::toLower(file).find("charger") != std::string::npos) && (chargerRootPath.empty()) )
                                 chargerRootPath = file;
-                }
+		#endif
+		}
+
 
 		// If there's no battery device, look for discrete charger and fuel gauge
 		if (batteryRootPath.empty())
@@ -384,8 +401,13 @@ BatteryInformation queryBatteryInformation()
 		}
 		else
 		{
+		#if PIBOY
+			batteryStatusPath = batteryRootPath + "/amps";
+			batteryCapacityPath = batteryRootPath + "/percent";
+		#else
 			batteryStatusPath = batteryRootPath + "/status";
 			batteryCapacityPath = batteryRootPath + "/capacity";
+		#endif
 		}
 	}
 
@@ -398,9 +420,13 @@ BatteryInformation queryBatteryInformation()
 	else
 	{
 		ret.hasBattery = true;
+		#if PIBOY
+	 	ret.isCharging = (stoi(Utils::String::replace(Utils::FileSystem::readAllText(batteryStatusPath), "-", "")) < 950);
+		#else
 		std::string chargerStatus;
 		chargerStatus = Utils::String::replace(Utils::FileSystem::readAllText(batteryStatusPath), "\n", "");
 		ret.isCharging = ((chargerStatus != "Not charging") && (chargerStatus != "Discharging"));
+		#endif
 		// If reading from fuel gauge, we have to calculate remaining charge
 		if (batteryCapacityPath.length() <= 1)
 		{

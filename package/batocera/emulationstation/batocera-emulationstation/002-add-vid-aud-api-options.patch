diff -Naur batocera-emulationstation.orig/es-app/src/CustomFeatures.cpp batocera-emulationstation/es-app/src/CustomFeatures.cpp
--- batocera-emulationstation.orig/es-app/src/CustomFeatures.cpp	2022-01-29 20:33:24.695704001 +0000
+++ batocera-emulationstation/es-app/src/CustomFeatures.cpp	2022-01-29 20:33:51.111933102 +0000
@@ -54,6 +54,8 @@
 		if (trim == "videomode") ret = ret | EmulatorFeatures::Features::videomode;
 		if (trim == "colorization") ret = ret | EmulatorFeatures::Features::colorization;
 		if (trim == "autocontrollers") ret = ret | EmulatorFeatures::Features::autocontrollers;
+		if (trim == "gfxbackend") ret = ret | EmulatorFeatures::Features::gfxbackend;
+		if (trim == "audio_driver") ret = ret | EmulatorFeatures::Features::audio_driver;
 	}
 
 	return ret;
diff -Naur batocera-emulationstation.orig/es-app/src/CustomFeatures.h batocera-emulationstation/es-app/src/CustomFeatures.h
--- batocera-emulationstation.orig/es-app/src/CustomFeatures.h	2022-01-29 20:33:24.695704001 +0000
+++ batocera-emulationstation/es-app/src/CustomFeatures.h	2022-01-29 20:33:51.127933242 +0000
@@ -88,6 +88,8 @@
 		autocontrollers = 262144,
 		framecount_show = 524288,
 		fps_show = 1048576,
+		gfxbackend = 2097152,
+		audio_driver = 4194304,
 
 		all = 0x0FFFFFFF
 	};
diff -Naur batocera-emulationstation.orig/es-app/src/CustomFeatures.h.orig batocera-emulationstation/es-app/src/CustomFeatures.h.orig
--- batocera-emulationstation.orig/es-app/src/CustomFeatures.h.orig	1970-01-01 01:00:00.000000000 +0100
+++ batocera-emulationstation/es-app/src/CustomFeatures.h.orig	2022-01-29 20:33:24.695704001 +0000
@@ -0,0 +1,154 @@
+#pragma once
+
+#ifndef ES_CUSTOMFEATURES_H
+#define ES_CUSTOMFEATURES_H
+
+#include <algorithm>
+#include <memory>
+#include <string>
+#include <vector>
+#include <map>
+#include <pugixml/src/pugixml.hpp>
+
+#include "utils/VectorEx.h"
+
+struct CustomFeatureChoice
+{
+	std::string name;
+	std::string value;
+};
+
+struct CustomFeature
+{
+	CustomFeature()
+	{
+		order = 0;
+	}
+
+	std::string name;
+	std::string value;
+	std::string description;
+	std::string submenu;
+	std::string preset;
+
+	std::string group;
+	int order;
+
+	std::vector<CustomFeatureChoice> choices;
+};
+
+class EmulatorData;
+
+class CustomFeatures : public VectorEx<CustomFeature>
+{
+public:
+	static bool loadEsFeaturesFile();
+
+	static bool FeaturesLoaded;
+
+	static CustomFeatures SharedFeatures;
+	static CustomFeatures GlobalFeatures;
+
+	static std::map<std::string, EmulatorData> EmulatorFeatures;
+
+public:
+	void sort();
+
+	bool hasFeature(const std::string& name) const;
+	bool hasGlobalFeature(const std::string& name) const;
+	
+private:
+	static CustomFeatures loadCustomFeatures(pugi::xml_node node);
+};
+
+class EmulatorFeatures
+{
+public:
+	enum Features
+	{
+		none = 0,
+		ratio = 1,
+		rewind = 2,
+		smooth = 4,
+		shaders = 8,
+		pixel_perfect = 16,
+		decoration = 32,
+		latency_reduction = 64,
+		game_translation = 128,
+		autosave = 256,
+		netplay = 512,
+		fullboot = 1024,
+		emulated_wiimotes = 2048,
+		screen_layout = 4096,
+		internal_resolution = 8192,
+		videomode = 16384,
+		colorization = 32768,
+		padTokeyboard = 65536,
+		cheevos = 131072,
+		autocontrollers = 262144,
+		framecount_show = 524288,
+		fps_show = 1048576,
+
+		all = 0x0FFFFFFF
+	};
+
+	static Features parseFeatures(const std::string features);
+};
+
+EmulatorFeatures::Features operator|(EmulatorFeatures::Features a, EmulatorFeatures::Features b);
+EmulatorFeatures::Features operator&(EmulatorFeatures::Features a, EmulatorFeatures::Features b);
+
+struct SystemFeature
+{
+	SystemFeature()
+	{
+		features = EmulatorFeatures::Features::none;
+	}
+
+	std::string name;
+	EmulatorFeatures::Features features;
+	CustomFeatures customFeatures;
+};
+
+struct CoreData
+{
+	CoreData() 
+	{ 
+		netplay = false; 
+		isDefault = false;
+		features = EmulatorFeatures::Features::none;
+	}
+
+	std::string name;
+	bool netplay;
+	bool isDefault;
+	
+	std::string customCommandLine;
+	CustomFeatures customFeatures;
+	std::vector<std::string> incompatibleExtensions;
+
+	EmulatorFeatures::Features features;
+
+	std::vector<SystemFeature> systemFeatures;
+};
+
+struct EmulatorData
+{
+	EmulatorData()
+	{
+		features = EmulatorFeatures::Features::none;
+	}
+
+	std::string name;	
+	std::vector<CoreData> cores;
+
+	std::string customCommandLine;
+	CustomFeatures customFeatures;
+	std::vector<std::string> incompatibleExtensions;
+
+	EmulatorFeatures::Features features;
+
+	std::vector<SystemFeature> systemFeatures;
+};
+
+#endif // ES_CUSTOMFEATURES_H
diff -Naur batocera-emulationstation.orig/es-app/src/guis/GuiMenu.cpp batocera-emulationstation/es-app/src/guis/GuiMenu.cpp
--- batocera-emulationstation.orig/es-app/src/guis/GuiMenu.cpp	2022-01-29 20:33:24.695704001 +0000
+++ batocera-emulationstation/es-app/src/guis/GuiMenu.cpp	2022-01-29 20:39:09.798779754 +0000
@@ -1817,6 +1817,24 @@
 		s->addSaveFunc([this, videoModeOptionList] { SystemConf::getInstance()->set("global.videomode", videoModeOptionList->getSelected()); });
 	}
 
+	// GFX Driver
+	if (!hasGlobalFeature("gfxbackend"))
+	{
+		auto gfx_backend = std::make_shared<OptionListComponent<std::string>>(mWindow, _("GRAPHICS API"));
+		gfx_backend->addRange({ { _("AUTO"), "auto" },{ _("OpenGL") , "gl" },{ _("GLCore") , "glcore" },{ _("SDL2") , "sdl2" },{ _("Vulkan") , "vulkan" } }, SystemConf::getInstance()->get("global.gfxbackend"));
+		s->addWithLabel(_("GRAPHICS API"), gfx_backend);
+		s->addSaveFunc([gfx_backend] { SystemConf::getInstance()->set("global.gfxbackend", gfx_backend->getSelected()); });
+	}
+
+	// Audio Driver
+	if (!hasGlobalFeature("audio_driver"))
+	{
+		auto audiodriver = std::make_shared<OptionListComponent<std::string>>(mWindow, _("AUDIO API"));
+		audiodriver->addRange({ { _("AUTO"), "auto" },{ _("ALSA") , "alsa" },{ _("ALSAThread") , "alsathread" },{ _("TinyALSA") , "tinyalsa" },{ _("openAL") , "openal" },{ _("PulseAudio") , "pulse" },{ _("SDL2") , "sdl2" },{ _("NULL") , "null" } }, SystemConf::getInstance()->get("global.audio_driver"));
+		s->addWithLabel(_("AUDIO API"), audiodriver);
+		s->addSaveFunc([audiodriver] { SystemConf::getInstance()->set("global.audio_driver", audiodriver->getSelected()); });
+	}
+
  	// FPS
 	if (!hasGlobalFeature("fps_show"))
  	{

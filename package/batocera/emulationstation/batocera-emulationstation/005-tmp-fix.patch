diff --git a/es-core/CMakeLists.txt b/es-core/CMakeLists.txt
index 7f59e05d..031c6b08 100644
--- a/es-core/CMakeLists.txt
+++ b/es-core/CMakeLists.txt
@@ -45,7 +45,6 @@ set(CORE_HEADERS
 	${CMAKE_CURRENT_SOURCE_DIR}/src/components/AnimatedImageComponent.h
     ${CMAKE_CURRENT_SOURCE_DIR}/src/components/AsyncNotificationComponent.h
 	${CMAKE_CURRENT_SOURCE_DIR}/src/components/BatteryIndicatorComponent.h	
-	${CMAKE_CURRENT_SOURCE_DIR}/src/components/PostProcessShaderComponent.h
 	${CMAKE_CURRENT_SOURCE_DIR}/src/components/BusyComponent.h
 	${CMAKE_CURRENT_SOURCE_DIR}/src/components/ButtonComponent.h
 	${CMAKE_CURRENT_SOURCE_DIR}/src/components/ControllerActivityComponent.h
@@ -163,9 +162,8 @@ set(CORE_SOURCES
 	${CMAKE_CURRENT_SOURCE_DIR}/src/components/AnimatedImageComponent.cpp
 	${CMAKE_CURRENT_SOURCE_DIR}/src/components/AsyncNotificationComponent.cpp
 	${CMAKE_CURRENT_SOURCE_DIR}/src/components/BatteryIndicatorComponent.cpp
-	${CMAKE_CURRENT_SOURCE_DIR}/src/components/PostProcessShaderComponent.cpp
 	${CMAKE_CURRENT_SOURCE_DIR}/src/components/BusyComponent.cpp
-	${CMAKE_CURRENT_SOURCE_DIR}/src/components/ButtonComponent.cpp	
+	${CMAKE_CURRENT_SOURCE_DIR}/src/components/ButtonComponent.cpp
 	${CMAKE_CURRENT_SOURCE_DIR}/src/components/ControllerActivityComponent.cpp
 	${CMAKE_CURRENT_SOURCE_DIR}/src/components/IExternalActivity.cpp
 	${CMAKE_CURRENT_SOURCE_DIR}/src/components/ComponentGrid.cpp
diff --git a/es-core/src/ThemeData.cpp b/es-core/src/ThemeData.cpp
index 4c010d26..5c505bc5 100644
--- a/es-core/src/ThemeData.cpp
+++ b/es-core/src/ThemeData.cpp
@@ -4,7 +4,6 @@
 #include "components/TextComponent.h"
 #include "components/NinePatchComponent.h"
 #include "components/VideoVlcComponent.h"
-#include "components/PostProcessShaderComponent.h"
 #include "utils/FileSystemUtil.h"
 #include "utils/StringUtil.h"
 #include "utils/Platform.h"
@@ -48,12 +47,6 @@ std::map<std::string, std::map<std::string, ThemeData::ElementPropertyType>> The
 		{ "offsetY", FLOAT },
 		{ "clipRect", NORMALIZED_RECT } } },
 
-	{ "shader", {
-		{ "path", PATH },
-		{ "pos", NORMALIZED_PAIR },
-		{ "size", NORMALIZED_PAIR },				
-		{ "zIndex", FLOAT } } },
-
 	{ "image", {
 		{ "pos", NORMALIZED_PAIR },
 		{ "size", NORMALIZED_PAIR },
@@ -91,7 +84,7 @@ std::map<std::string, std::map<std::string, ThemeData::ElementPropertyType>> The
 		{ "roundCorners", FLOAT },
 		{ "opacity", FLOAT },
 		{ "saturation", FLOAT },
-		// { "shader", PATH },
+		{ "shader", PATH },
 		{ "flipX", BOOLEAN },
 		{ "flipY", BOOLEAN },
 		{ "onclick", STRING },
@@ -442,7 +435,7 @@ std::map<std::string, std::map<std::string, ThemeData::ElementPropertyType>> The
 		{ "audio", BOOLEAN },
 		{ "linearSmooth", BOOLEAN },
 		{ "saturation", FLOAT },
-		// { "shader", PATH },
+		{ "shader", PATH },
 		{ "onclick", STRING },
 		{ "showSnapshotNoVideo", BOOLEAN },
 		{ "showSnapshotDelay", BOOLEAN } } },
@@ -1713,29 +1706,6 @@ void ThemeData::parseElement(const pugi::xml_node& root, const std::map<std::str
 				type = PATH;
 			else if (name == "animate" && std::string(root.name()) == "imagegrid")
 				node.set_name("animateSelection");
-			else if (element.type == "shader")
-				type = STRING;
-			else if (name == "shader")
-			{
-				element.children.push_back(std::pair<std::string, ThemeElement>(name, ThemeElement()));
-				std::pair<std::string, ThemeElement>& item = element.children.back();
-				item.second.extra = 1;
-
-				std::string text = node.text().as_string();
-				if (!text.empty())
-				{
-					item.second.type = "shader";
-					processElement(root, item.second, "path", text, PATH);					
-				}
-				else
-				{
-					auto elemTypeIt = sElementMap.find(name);
-					if (elemTypeIt != sElementMap.cend())
-						parseElement(node, elemTypeIt->second, item.second, view, overwrite);
-				}
-
-				continue;
-			}
 			else
 			{
 				LOG(LogWarning) << "Unknown property type \"" << name << "\" (for element of type " << root.name() << ").";
@@ -1863,8 +1833,6 @@ GuiComponent* ThemeData::createExtraComponent(Window* window, const ThemeElement
 		comp = new NinePatchComponent(window);
 	else if (elem.type == "video")
 		comp = new VideoVlcComponent(window);
-	else if (elem.type == "shader")
-		comp = new PostProcessShaderComponent(window);
 
 	return comp;
 }
@@ -2255,7 +2223,6 @@ ThemeData::ThemeElement::ThemeElement(const ThemeElement& src)
 	extra = src.extra;
 	type = src.type;
 	properties = src.properties;
-	children = src.children;
 
 	for (auto sb : src.mStoryBoards)
 		mStoryBoards[sb.first] = new ThemeStoryboard(*sb.second);
@@ -2331,31 +2298,3 @@ bool ThemeData::appendFile(const std::string& path, bool perGameOverride)
 
 	return true;
 }
-
-void ThemeData::parseCustomShader(const ThemeData::ThemeElement* elem, Renderer::ShaderInfo* pShader)
-{
-	if (pShader == nullptr)
-		return;
-
-	pShader->path = "";
-	pShader->parameters.clear();
-
-	for (auto child : elem->children)
-	{
-		if (child.second.type == "shader" && child.second.has("path"))
-		{
-			pShader->path = child.second.get<std::string>("path");
-
-			for (auto prop : child.second.properties)
-			{
-				if (prop.first == "pos" || prop.first == "path" || prop.first == "size" || prop.first == "zIndex")
-					continue;
-
-				if (prop.second.type != ThemeData::ThemeElement::Property::PropertyType::String)
-					continue;
-
-				pShader->parameters[prop.first] = prop.second.s;
-			}
-		}
-	}
-}
\ No newline at end of file
diff --git a/es-core/src/ThemeData.h b/es-core/src/ThemeData.h
index 1695f677..32249993 100644
--- a/es-core/src/ThemeData.h
+++ b/es-core/src/ThemeData.h
@@ -28,8 +28,6 @@ class Window;
 class Font;
 class ThemeStoryboard;
 
-namespace Renderer { class ShaderInfo; }
-
 namespace ThemeFlags
 {
 	enum PropertyFlags : unsigned int
@@ -208,8 +206,6 @@ public:
 		std::string type;
 		std::map<std::string, ThemeStoryboard*> mStoryBoards;
 
-		std::vector<std::pair<std::string, ThemeElement>> children;
-
 		struct Property
 		{
 		public:
@@ -365,8 +361,6 @@ public:
 	std::shared_ptr<ThemeData> clone(const std::string& viewName);
 	bool appendFile(const std::string& path, bool perGameOverride = false);
 
-	static void parseCustomShader(const ThemeData::ThemeElement* elem, Renderer::ShaderInfo* pShader);
-
 private:
 	static std::map< std::string, std::map<std::string, ElementPropertyType> > sElementMap;
 	static std::vector<std::string> sSupportedFeatures;
diff --git a/es-core/src/Window.cpp b/es-core/src/Window.cpp
index 54c550cc..fe687b27 100644
--- a/es-core/src/Window.cpp
+++ b/es-core/src/Window.cpp
@@ -609,8 +609,7 @@ void Window::render()
 		if (bottom != top)
 		{
 			if ((top->getTag() == "GuiLoading") && mGuiStack.size() > 2)
-			{				
-				Renderer::blurBehind(0, 0, Renderer::getScreenWidth(), Renderer::getScreenHeight());
+			{
 				mBackgroundOverlay->render(transform);
 
 				auto& middle = mGuiStack.at(mGuiStack.size() - 2);
@@ -628,7 +627,6 @@ void Window::render()
 						middle->render(transform);
 				}
 
-				Renderer::blurBehind(0, 0, Renderer::getScreenWidth(), Renderer::getScreenHeight());
 				mBackgroundOverlay->render(transform);
 				top->render(transform);
 			}
diff --git a/es-core/src/components/ImageComponent.cpp b/es-core/src/components/ImageComponent.cpp
index c2381787..0d0c9d52 100644
--- a/es-core/src/components/ImageComponent.cpp
+++ b/es-core/src/components/ImageComponent.cpp
@@ -578,7 +578,7 @@ void ImageComponent::render(const Transform4x4f& parentTrans)
 		fadeIn(true);
 
 		mVertices->saturation = mSaturation;
-		mVertices->customShader = mCustomShader.path.empty() ? nullptr : &mCustomShader;
+		mVertices->customShader = mCustomShader.empty() ? nullptr : (char*)mCustomShader.c_str();
 
 		if (mRoundCorners > 0 && mRoundCornerStencil.size() > 0)
 		{
@@ -781,7 +781,8 @@ void ImageComponent::applyTheme(const std::shared_ptr<ThemeData>& theme, const s
 		if (elem->has("saturation"))
 			mSaturation = Math::clamp(elem->get<float>("saturation"), 0.0f, 1.0f);
 
-		ThemeData::parseCustomShader(elem, &mCustomShader);
+		if (elem->has("shader"))
+			mCustomShader = elem->get<std::string>("shader");		
 	}	
 
 	if(properties & ThemeFlags::ROTATION) 
diff --git a/es-core/src/components/ImageComponent.h b/es-core/src/components/ImageComponent.h
index c7bf0a35..29e0cea6 100644
--- a/es-core/src/components/ImageComponent.h
+++ b/es-core/src/components/ImageComponent.h
@@ -130,7 +130,7 @@ public:
 	void setTargetIsMax() { mTargetIsMax = true; }
 
 	void setSaturation(float saturation);
-	void setCustomShader(const Renderer::ShaderInfo& customShader) { mCustomShader = customShader; }
+	void setCustomShader(const std::string& customShader) { mCustomShader = customShader; }
 
 	std::string getOriginalThemePath() { return mSourceThemePath; }
 
@@ -186,8 +186,8 @@ private:
 	float mRoundCorners;
 	float mSaturation;
 
-	Renderer::ShaderInfo mCustomShader;
-	
+	std::string mCustomShader;
+
 	std::shared_ptr<IPlaylist> mPlaylist;
 	std::map<std::string, std::shared_ptr<TextureResource>> mPlaylistCache;
 
diff --git a/es-core/src/components/PostProcessShaderComponent.cpp b/es-core/src/components/PostProcessShaderComponent.cpp
deleted file mode 100644
index 2e26c1a3..00000000
--- a/es-core/src/components/PostProcessShaderComponent.cpp
+++ /dev/null
@@ -1,51 +0,0 @@
-#include "components/PostProcessShaderComponent.h"
-#include "Window.h"
-#include "renderers/Renderer.h"
-
-PostProcessShaderComponent::PostProcessShaderComponent(Window* window) : GuiComponent(window)
-{
-
-}
-
-void PostProcessShaderComponent::render(const Transform4x4f& parentTrans)
-{
-	if (!mVisible || mShaderPath.empty())
-		return;
-
-	Transform4x4f trans = parentTrans * getTransform();
-
-	auto rect = Renderer::getScreenRect(trans, mSize);
-	if (!Renderer::isVisibleOnScreen(rect))
-		return;
-
-	if (Settings::DebugImage())
-	{
-		Renderer::setMatrix(trans);
-		Renderer::drawRect(0.0f, 0.0f, mSize.x(), mSize.y(), 0xFF00FF50, 0xFF00FF50);
-	}
-
-	Renderer::postProcessShader(mShaderPath, rect.x, rect.y, rect.w, rect.h, mParameters);
-}
-
-void PostProcessShaderComponent::applyTheme(const std::shared_ptr<ThemeData>& theme, const std::string& view, const std::string& element, unsigned int properties)
-{
-	GuiComponent::applyTheme(theme, view, element, properties);
-
-	const ThemeData::ThemeElement* elem = theme->getElement(view, element, "shader");
-	if (elem == nullptr)
-		return;
-
-	if (elem->has("path"))
-		mShaderPath = elem->get<std::string>("path");
-
-	for (auto prop : elem->properties)
-	{
-		if (prop.first == "pos" || prop.first == "path" || prop.first == "size" || prop.first == "zIndex")
-			continue;
-
-		if (prop.second.type != ThemeData::ThemeElement::Property::PropertyType::String)
-			continue;
-
-		mParameters[prop.first] = prop.second.s;
-	}
-}
\ No newline at end of file
diff --git a/es-core/src/components/PostProcessShaderComponent.h b/es-core/src/components/PostProcessShaderComponent.h
deleted file mode 100644
index 3a492d94..00000000
--- a/es-core/src/components/PostProcessShaderComponent.h
+++ /dev/null
@@ -1,22 +0,0 @@
-#pragma once
-#ifndef ES_CORE_COMPONENTS_PPSH_COMPONENT_H
-#define ES_CORE_COMPONENTS_PPSH_COMPONENT_H
-
-#include "GuiComponent.h"
-
-#include <map>
-
-class PostProcessShaderComponent : public GuiComponent
-{
-public:
-	PostProcessShaderComponent(Window* window);
-
-	void render(const Transform4x4f& parentTrans) override;
-	virtual void applyTheme(const std::shared_ptr<ThemeData>& theme, const std::string& view, const std::string& element, unsigned int properties) override;
-
-private:
-	std::string mShaderPath;
-	std::map<std::string, std::string> mParameters;	
-};
-
-#endif // ES_CORE_COMPONENTS_PPSH_COMPONENT_H
diff --git a/es-core/src/components/VideoVlcComponent.cpp b/es-core/src/components/VideoVlcComponent.cpp
index 94250b1f..fd269705 100644
--- a/es-core/src/components/VideoVlcComponent.cpp
+++ b/es-core/src/components/VideoVlcComponent.cpp
@@ -381,7 +381,7 @@ void VideoVlcComponent::render(const Transform4x4f& parentTrans)
 
 		// Render it
 		vertices->saturation = mSaturation;
-		vertices->customShader = mCustomShader.path.empty() ? nullptr : &mCustomShader;
+		vertices->customShader = mCustomShader.empty() ? nullptr : (char*)mCustomShader.c_str();
 
 		Renderer::drawTriangleStrips(&vertices[0], 4);
 
@@ -737,8 +737,6 @@ void VideoVlcComponent::applyTheme(const std::shared_ptr<ThemeData>& theme, cons
 	using namespace ThemeFlags;
 
 	const ThemeData::ThemeElement* elem = theme->getElement(view, element, "video");
-	if (!elem)
-		return;
 
 	if (elem && elem->has("effect"))
 	{
@@ -766,8 +764,11 @@ void VideoVlcComponent::applyTheme(const std::shared_ptr<ThemeData>& theme, cons
 		if (elem->has("saturation"))
 			setSaturation(Math::clamp(elem->get<float>("saturation"), 0.0f, 1.0f));
 
-		ThemeData::parseCustomShader(elem, &mCustomShader);
-		mStaticImage.setCustomShader(mCustomShader);
+		if (elem->has("shader"))
+		{
+			mCustomShader = elem->get<std::string>("shader");
+			mStaticImage.setCustomShader(mCustomShader);
+		}
 	}
 
 	if (elem && elem->has("loops"))
diff --git a/es-core/src/components/VideoVlcComponent.h b/es-core/src/components/VideoVlcComponent.h
index d4dc02c5..494bb08c 100644
--- a/es-core/src/components/VideoVlcComponent.h
+++ b/es-core/src/components/VideoVlcComponent.h
@@ -122,7 +122,7 @@ private:
 
 	std::string					    mSubtitlePath;
 	std::string					    mSubtitleTmpFile;
-	Renderer::ShaderInfo			mCustomShader;
+	std::string						mCustomShader;
 
 	VideoVlcFlags::VideoVlcEffect	mEffect;
 
diff --git a/es-core/src/renderers/GlExtensions.cpp b/es-core/src/renderers/GlExtensions.cpp
index c060d33a..135557c3 100644
--- a/es-core/src/renderers/GlExtensions.cpp
+++ b/es-core/src/renderers/GlExtensions.cpp
@@ -30,19 +30,9 @@ namespace glext
 	PFNGLACTIVETEXTUREPROC glActiveTexture_ = nullptr;
 	PFNGLUNIFORM1FPROC glUniform1f = nullptr;
 	PFNGLUNIFORM2FPROC glUniform2f = nullptr;
-	PFNGLUNIFORM4FPROC glUniform4f = nullptr;
 	PFNGLDELETEPROGRAMPROC glDeleteProgram = nullptr;
 	PFNGLDELETESHADERPROC glDeleteShader = nullptr;
-
-	PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D = nullptr;
-	PFNGLBINDFRAMEBUFFEREXTPROC glBindFramebuffer = nullptr;
-	PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer = nullptr;
-	PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers = nullptr;
-	PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers = nullptr;
-	PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData = nullptr;
-
-	PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform = nullptr;
-
+	
 	void* _glProcAddress(const char *proc)
 	{
 		void* ret = SDL_GL_GetProcAddress(proc);
@@ -103,18 +93,10 @@ namespace glext
 		glActiveTexture_ = (PFNGLACTIVETEXTUREPROC)_glProcAddress("glActiveTexture");
 		glUniform1f = (PFNGLUNIFORM1FPROC)_glProcAddress("glUniform1f");
 		glUniform2f = (PFNGLUNIFORM2FPROC)_glProcAddress("glUniform2f");		
-		glUniform4f = (PFNGLUNIFORM4FPROC)_glProcAddress("glUniform4f");		
 		glDeleteProgram = (PFNGLDELETEPROGRAMPROC)_glProcAddress("glDeleteProgram");
 		glDeleteShader = (PFNGLDELETESHADERPROC)_glProcAddress("glDeleteShader");
 
-		glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)_glProcAddress("glFramebufferTexture2D");
-		glBindFramebuffer = (PFNGLBINDFRAMEBUFFEREXTPROC)_glProcAddress("glBindFramebuffer");
-		glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)_glProcAddress("glBlitFramebuffer");
-		glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)_glProcAddress("glGenFramebuffers");
-		glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)_glProcAddress("glDeleteFramebuffers");		
-		glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC)_glProcAddress("glCopyImageSubData");
-
-		glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)_glProcAddress("glGetActiveUniform");
+		typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);
 
 		return 
 			glCreateShader != nullptr && glCompileShader != nullptr && glCreateProgram != nullptr && glGenBuffers != nullptr && 
diff --git a/es-core/src/renderers/GlExtensions.h b/es-core/src/renderers/GlExtensions.h
index d1c81a01..704529f7 100644
--- a/es-core/src/renderers/GlExtensions.h
+++ b/es-core/src/renderers/GlExtensions.h
@@ -37,18 +37,8 @@ namespace glext
 	extern PFNGLACTIVETEXTUREPROC glActiveTexture_;
 	extern PFNGLUNIFORM1FPROC glUniform1f;
 	extern PFNGLUNIFORM2FPROC glUniform2f;
-	extern PFNGLUNIFORM4FPROC glUniform4f;
 	extern PFNGLDELETEPROGRAMPROC glDeleteProgram;
 	extern PFNGLDELETESHADERPROC glDeleteShader;
-
-	extern PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D;
-	extern PFNGLBINDFRAMEBUFFEREXTPROC glBindFramebuffer;
-	extern PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer;
-	extern PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers;
-	extern PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers;	
-	extern PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData;
-
-	extern PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform;
 };
 
 using namespace glext;
diff --git a/es-core/src/renderers/Renderer.cpp b/es-core/src/renderers/Renderer.cpp
index 8fdc9de3..859be71a 100644
--- a/es-core/src/renderers/Renderer.cpp
+++ b/es-core/src/renderers/Renderer.cpp
@@ -847,18 +847,6 @@ namespace Renderer
 		Instance()->setMatrix(_matrix);
 	}
 
-	void blurBehind(const float _x, const float _y, const float _w, const float _h, const float blurSize)
-	{
-		std::map<std::string, std::string> map;
-		map["blur"] = std::to_string(blurSize);
-		Instance()->postProcessShader(":/shaders/blur.glsl", _x, _y, _w, _h, map);		
-	}
-
-	void postProcessShader(const std::string& path, const float _x, const float _y, const float _w, const float _h, const std::map<std::string, std::string>& parameters)
-	{
-		Instance()->postProcessShader(path, _x, _y, _w, _h, parameters);
-	}
-
 	Rect& getViewport()
 	{
 		return viewPort;
diff --git a/es-core/src/renderers/Renderer.h b/es-core/src/renderers/Renderer.h
index 8b2588eb..cbd7fc62 100644
--- a/es-core/src/renderers/Renderer.h
+++ b/es-core/src/renderers/Renderer.h
@@ -3,8 +3,6 @@
 #define ES_CORE_RENDERER_RENDERER_H
 
 #include <vector>
-#include <map>
-#include <cstring>
 #include "math/Vector2f.h"
 #include "math/Vector3f.h"
 
@@ -58,12 +56,6 @@ namespace Renderer
 
 	}; // Rect
 
-	struct ShaderInfo
-	{
-		std::string path;
-		std::map<std::string, std::string> parameters;
-	};
-
 	struct Vertex
 	{
 		Vertex() 
@@ -87,7 +79,7 @@ namespace Renderer
 		unsigned int col;
 
 		float saturation;
-		ShaderInfo* customShader;
+		char* customShader;
 
 	}; // Vertex
 
@@ -125,8 +117,6 @@ namespace Renderer
 
 		virtual void         setSwapInterval() = 0;
 		virtual void         swapBuffers() = 0;
-		
-		virtual void		 postProcessShader(const std::string& path, const float _x, const float _y, const float _w, const float _h, const std::map<std::string, std::string>& parameters) { };
 
 		virtual size_t		 getTotalMemUsage() { return (size_t) -1; };
 	};
@@ -179,9 +169,6 @@ namespace Renderer
 	void         setSwapInterval   ();
 	void         swapBuffers       ();
 
-	void		 blurBehind		   (const float _x, const float _y, const float _w, const float _h, const float blurSize = 4.0f);
-	void		 postProcessShader (const std::string& path, const float _x, const float _y, const float _w, const float _h, const std::map<std::string, std::string>& parameters);
-
 	size_t		 getTotalMemUsage  ();
 
 	std::string  getDriverName();
diff --git a/es-core/src/renderers/Renderer_GLES20.cpp b/es-core/src/renderers/Renderer_GLES20.cpp
index 08ed0e26..45a2ac09 100644
--- a/es-core/src/renderers/Renderer_GLES20.cpp
+++ b/es-core/src/renderers/Renderer_GLES20.cpp
@@ -5,7 +5,6 @@
 #include "Renderer_GLES20.h"
 #include "renderers/Renderer.h"
 #include "math/Transform4x4f.h"
-#include "utils/StringUtil.h"
 #include "Log.h"
 #include "Settings.h"
 
@@ -15,8 +14,6 @@
 #include "GlExtensions.h"
 #include "Shader.h"
 
-#include "resources/ResourceManager.h"
-
 namespace Renderer
 {
 
@@ -74,7 +71,7 @@ namespace Renderer
 
 	static std::map<std::string, ShaderProgram*> customShaders;
 
-	static ShaderProgram* getShaderProgram(const char* shaderFile)
+	static ShaderProgram* getShaderProgram(char* shaderFile)
 	{
 		if (shaderFile == nullptr)
 			return nullptr;
@@ -330,10 +327,6 @@ namespace Renderer
 	}
 
 //////////////////////////////////////////////////////////////////////////
-	GLES20Renderer::GLES20Renderer() : mFrameBuffer(-1)
-	{
-
-	}
 
 	unsigned int GLES20Renderer::getWindowFlags()
 	{
@@ -461,12 +454,6 @@ namespace Renderer
 				customShader.second->deleteProgram();
 
 		customShaders.clear();
-
-		if (mFrameBuffer != -1)
-		{
-			glDeleteFramebuffers(1, &mFrameBuffer);
-			mFrameBuffer = -1;
-		}
 	}
 
 	void GLES20Renderer::destroyContext()
@@ -690,9 +677,9 @@ namespace Renderer
 			{
 				ShaderProgram* shader = &shaderProgramColorTexture;
 
-				if (_vertices->customShader != nullptr && !_vertices->customShader->path.empty())
+				if (_vertices->customShader != nullptr)
 				{
-					ShaderProgram* customShader = getShaderProgram(_vertices->customShader->path.c_str());
+					ShaderProgram* customShader = getShaderProgram(_vertices->customShader);
 					if (customShader != nullptr)
 						shader = customShader;
 				}
@@ -702,37 +689,12 @@ namespace Renderer
 				// Update Shader Uniforms
 
 				shader->setSaturation(_vertices->saturation);
-				shader->setResolution();
-
+				
 				if (shader->supportsTextureSize() && it != _textures.cend() && it->second != nullptr)
-				{
-					shader->setInputSize(it->second->size);
 					shader->setTextureSize(it->second->size);
-				}
 				
 				if (_numVertices > 0)
-				{
-					Vector2f vec = _vertices[_numVertices - 1].pos;
-					if (_numVertices == 4)
-					{
-						vec.x() -= _vertices[0].pos.x();
-						vec.y() -= _vertices[0].pos.y();
-					}
-
-					// Inverted rendering
-					if (_vertices[_numVertices - 1].tex.y() == 1 && _vertices[0].tex.y() == 0)
-						vec.y() = -vec.y();
-
-					shader->setOutputSize(vec);
-				}
-
-				if (_vertices->customShader != nullptr && !_vertices->customShader->path.empty())
-				{
-					for (auto param : _vertices->customShader->parameters)
-						shader->setUniformEx(param.first, param.second);
-				}
-
-				shader->setResolution();
+					shader->setOutputSize(_vertices[_numVertices-1].pos);
 			}
 		}
 		else
@@ -911,118 +873,6 @@ namespace Renderer
 
 		return total;
 	}
-	
-	void GLES20Renderer::postProcessShader(const std::string& path, const float _x, const float _y, const float _w, const float _h, const std::map<std::string, std::string>& parameters)
-	{
-		std::string fullPath = ResourceManager::getInstance()->getResourcePath(path);
-
-		ShaderProgram* customShader = getShaderProgram(fullPath.c_str());
-		if (customShader == nullptr)
-			return;
-
-		if (mFrameBuffer == -1)
-			glGenFramebuffers(1, &mFrameBuffer);
-
-		if (mFrameBuffer == -1)
-			return;
-
-		float textureScale = 1.0f;
-		
-		// Special hack for blur shader -> Texture downscaling		
-		if (path == ":/shaders/blur.glsl")
-		{
-			auto it = parameters.find("blur");
-			if (it != parameters.cend())
-			{
-				float blurSize = Utils::String::toFloat(it->second);
-
-				textureScale = blurSize / 5.0f;
-				if (textureScale < 1.0f)
-					textureScale = 1.0f;
-			}
-		}
-
-
-		int x = _x; int y = _y; int w = _w; int h = _h;
-
-		if (y < 0) 
-		{
-			h += y; y = 0;
-			if (h <= 0)
-				return;
-		}
-
-		if (x < 0)
-		{
-			w += x; x = 0;
-			if (w <= 0) 
-				return;
-		}
-
-		int tw = w / textureScale;
-		int th = h / textureScale;
-
-		auto nTextureID = createTexture(Renderer::Texture::RGBA, true, false, tw, th, nullptr);
-		if (nTextureID > 0)
-		{
-			auto oldProgram = currentProgram;
-			auto oldMatrix = worldViewMatrix;
-
-			GLboolean oldCissors;
-			glGetBooleanv(GL_SCISSOR_TEST, &oldCissors);
-			glDisable(GL_SCISSOR_TEST);
-
-			setMatrix(Transform4x4f::Identity());
-
-			bindTexture(nTextureID);
-
-			int width = getScreenWidth();
-			int height = getScreenHeight();
-
-			glBindFramebuffer(GL_DRAW_FRAMEBUFFER, mFrameBuffer);
-			glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, nTextureID, 0);
-			glBlitFramebuffer(x, height - y - h, x + w, height - y, 0, 0, tw, th, GL_COLOR_BUFFER_BIT, GL_LINEAR);
-			glBindFramebuffer(GL_FRAMEBUFFER, 0);
-
-			Vertex vertices[4];
-			vertices[0] = { { (float) x     , (float) y       }, { 0.0f, 1.0f }, 0xFFFFFFFF };
-			vertices[1] = { { (float) x     , (float) y + h }, { 0.0f, 0.0f }, 0xFFFFFFFF };
-			vertices[2] = { { (float) x + w, (float) y       }, { 1.0f, 1.0f }, 0xFFFFFFFF };
-			vertices[3] = { { (float) x + w, (float) y + h  }, { 1.0f, 0.0f }, 0xFFFFFFFF };
-
-			// round vertices
-			for (int i = 0; i < 4; ++i)
-				vertices[i].pos.round();
-
-			useProgram(customShader);
-
-			customShader->setSaturation(1.0f);
-			customShader->setTextureSize(Vector2f(tw, th));
-			customShader->setInputSize(Vector2f(tw, th));			
-			customShader->setOutputSize(vertices[3].pos);
-			customShader->setResolution();
-
-			for(auto param : parameters)
-				customShader->setUniformEx(param.first, param.second);
-
-			glBufferData(GL_ARRAY_BUFFER, sizeof(Vertex) * 4, &vertices, GL_DYNAMIC_DRAW);
-
-			glEnable(GL_BLEND);
-			glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
-			glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
-			glDisable(GL_BLEND);
-
-			bindTexture(0);
-			useProgram(oldProgram);
-			setMatrix(oldMatrix);
-
-			if (oldCissors)
-				glEnable(GL_SCISSOR_TEST);
-
-			destroyTexture(nTextureID);
-		}		
-	}
-	
 } // Renderer::
 
 #endif // USE_OPENGLES_20
diff --git a/es-core/src/renderers/Renderer_GLES20.h b/es-core/src/renderers/Renderer_GLES20.h
index 9c61fe3e..8ed6421c 100644
--- a/es-core/src/renderers/Renderer_GLES20.h
+++ b/es-core/src/renderers/Renderer_GLES20.h
@@ -6,9 +6,6 @@
 
 #define RENDERER_GLES_20
 
-#include <map>
-#include <cstring>
-
 #include "Renderer.h"
 
 namespace Renderer
@@ -16,8 +13,6 @@ namespace Renderer
 	class GLES20Renderer : public IRenderer
 	{
 	public:
-		GLES20Renderer();
-
 		std::string getDriverName() override;
 		std::vector<std::pair<std::string, std::string>> getDriverInformation() override;
 
@@ -48,13 +43,8 @@ namespace Renderer
 
 		void         setSwapInterval() override;
 		void         swapBuffers() override;
-		
-		void		 postProcessShader(const std::string& path, const float _x, const float _y, const float _w, const float _h, const std::map<std::string, std::string>& parameters);
-
-		size_t		 getTotalMemUsage() override;
 
-	private:
-		unsigned int mFrameBuffer;
+		size_t		getTotalMemUsage() override;
 	};
 }
 
diff --git a/es-core/src/renderers/Shader.cpp b/es-core/src/renderers/Shader.cpp
index 79c117d7..ed17afd4 100644
--- a/es-core/src/renderers/Shader.cpp
+++ b/es-core/src/renderers/Shader.cpp
@@ -2,8 +2,6 @@
 #include "Log.h"
 #include "renderers/Renderer.h"
 #include "resources/ResourceManager.h"
-#include "utils/StringUtil.h"
-#include "utils/HtmlColor.h"
 
 namespace Renderer
 {
@@ -86,9 +84,7 @@ namespace Renderer
 		linkStatus(false),
 		mId(-1),
 		mOutputSize(-1),
-		mInputSize(-1),
-		mTextureSize(-1),
-		mResolution(-1)
+		mTextureSize(-1)	
 	{
 	}
 
@@ -209,21 +205,11 @@ namespace Renderer
 		if (mOutputSize == -1)
 			mOutputSize = glGetUniformLocation(mId, "outputSize");
 
-		mInputSize = glGetUniformLocation(mId, "InputSize");
-		if (mInputSize == -1)
-			mInputSize = glGetUniformLocation(mId, "inputSize");
-
-		mResolution = glGetUniformLocation(mId, "Resolution");
-		if (mResolution == -1)
-			mResolution = glGetUniformLocation(mId, "resolution");
-		
 		mSaturation = glGetUniformLocation(mId, "saturation");
 
 		GLint texUniform = glGetUniformLocation(mId, "u_tex");		
 		if (texUniform == -1)
 			texUniform = glGetUniformLocation(mId, "textureSampler");
-		if (texUniform == -1)
-			texUniform = glGetUniformLocation(mId, "Texture");
 		
 		if (texUniform != -1)
 		{
@@ -250,86 +236,6 @@ namespace Renderer
 			GL_CHECK_ERROR(glUniform2f(mOutputSize, size.x(), size.y()));
 	}
 
-	void ShaderProgram::setInputSize(const Vector2f& size)
-	{
-		if (mInputSize != -1)
-			GL_CHECK_ERROR(glUniform2f(mInputSize, size.x(), size.y()));
-	}
-
-	void ShaderProgram::setResolution()
-	{
-		if (mResolution != -1)
-			GL_CHECK_ERROR(glUniform2f(mResolution, getScreenWidth(), getScreenHeight()));
-	}
-
-
-	void ShaderProgram::setUniformFloat(const std::string& name, const GLfloat& value)
-	{
-		GLint location = glGetUniformLocation(mId, name.c_str());
-		if (location != -1)
-			GL_CHECK_ERROR(glUniform1f(location, value));
-	}
-
-	void ShaderProgram::setUniformVector2f(const std::string& name, const Vector2f& value)
-	{
-		GLint location = glGetUniformLocation(mId, name.c_str());
-		if (location != -1)
-			GL_CHECK_ERROR(glUniform2f(location, value.x(), value.y()));
-	}
-
-	void ShaderProgram::setUniformEx(const std::string& name, const std::string value)
-	{
-		GLint location = glGetUniformLocation(mId, name.c_str());
-		if (location == -1)
-			return;
-
-		GLsizei length;
-		GLint size;
-		GLenum type;
-
-		char buffer[64];
-		glGetActiveUniform(mId, location, (GLsizei)sizeof(buffer), &length, &size, &type, buffer);
-
-		switch (type)
-		{
-		case GL_INT:
-			glUniform1i(location, Utils::String::toInteger(value));
-			break;
-		case GL_FLOAT:
-			glUniform1f(location, Utils::String::toFloat(value));
-			break;
-		case GL_FLOAT_VEC2:
-			{
-				auto size = Vector2f::parseString(value);
-				glUniform2f(location, size.x(), size.y());
-			}
-			break;
-		case GL_FLOAT_VEC4:
-		{
-			if (value != "0" && value != "1" && value.find(" ") == std::string::npos && value.find(".") == std::string::npos)
-			{
-				// It's a color
-				auto clr = Utils::HtmlColor::parse(value);
-
-				unsigned char red = (clr >> 24) & 0xFF;
-				unsigned char green = (clr >> 16) & 0xFF;
-				unsigned char blue = (clr >> 8) & 0xFF;
-				unsigned char alpha = clr & 0xFF;
-
-				glUniform4f(location, red / 255.0f, green / 255.0f, blue / 255.0f, alpha / 255.0f);
-			}
-			else 
-			{
-				// Coordinates
-				auto size = Vector4f::parseString(value);
-				glUniform4f(location, size.x(), size.y(), size.z(), size.w());
-			}
-
-		}
-		break;
-		}
-	}
-
 	void ShaderProgram::setMatrix(Transform4x4f& mvpMatrix)
 	{
 		if (mvpUniform != -1 && mvpUniform != GL_INVALID_VALUE && mvpUniform != GL_INVALID_OPERATION)
diff --git a/es-core/src/renderers/Shader.h b/es-core/src/renderers/Shader.h
index b49beb49..7dbaf8ac 100644
--- a/es-core/src/renderers/Shader.h
+++ b/es-core/src/renderers/Shader.h
@@ -47,13 +47,7 @@ namespace Renderer
 		void setMatrix(Transform4x4f& mvpMatrix);
 		void setSaturation(GLfloat saturation);
 		void setTextureSize(const Vector2f& size);
-		void setInputSize(const Vector2f& size);
 		void setOutputSize(const Vector2f& size);
-		void setResolution();
-
-		void setUniformFloat(const std::string& name, const GLfloat& value);
-		void setUniformVector2f(const std::string& name, const Vector2f& value);
-		void setUniformEx(const std::string& name, const std::string value);
 
 		bool supportsTextureSize() { return mTextureSize != -1; }
 
@@ -70,8 +64,6 @@ namespace Renderer
 		GLint mSaturation;		
 		GLint mTextureSize;
 		GLint mOutputSize;
-		GLint mInputSize;
-		GLint mResolution;
 
 		std::vector<Shader> mAttachedShaders;
 
diff --git a/es-core/src/utils/HtmlColor.cpp b/es-core/src/utils/HtmlColor.cpp
index be792ff7..7c03c19f 100644
--- a/es-core/src/utils/HtmlColor.cpp
+++ b/es-core/src/utils/HtmlColor.cpp
@@ -161,7 +161,7 @@ namespace Utils
 
 		unsigned int parse(const std::string& str)
 		{
-			if (str.empty() || str == "transparent")
+			if (str.empty())
 				return 0;
 
 			if (str[0] >= 'a' && str[0] <= 'z')
diff --git a/resources/shaders/blur.glsl b/resources/shaders/blur.glsl
deleted file mode 100644
index f5005dd4..00000000
--- a/resources/shaders/blur.glsl
+++ /dev/null
@@ -1,75 +0,0 @@
-#if defined(VERTEX)
-
-#if __VERSION__ >= 130
-#define COMPAT_VARYING out
-#define COMPAT_ATTRIBUTE in
-#define COMPAT_TEXTURE texture
-#else
-#define COMPAT_VARYING varying 
-#define COMPAT_ATTRIBUTE attribute 
-#define COMPAT_TEXTURE texture2D
-#endif
-
-#ifdef GL_ES
-#define COMPAT_PRECISION mediump
-#else
-#define COMPAT_PRECISION
-#endif
-
-uniform   mat4 MVPMatrix;
-COMPAT_ATTRIBUTE vec2 VertexCoord;
-COMPAT_ATTRIBUTE vec2 TexCoord;
-COMPAT_ATTRIBUTE vec4 COLOR;
-COMPAT_VARYING   vec2 v_tex;
-COMPAT_VARYING   vec4 v_col;
-
-void main(void)                                    
-{                                                  
-	gl_Position = MVPMatrix * vec4(VertexCoord.xy, 0.0, 1.0);
-	v_tex       = TexCoord;                           
-	v_col       = COLOR;                           
-}
-
-#elif defined(FRAGMENT)
-			
-varying   vec4      v_col;
-varying   vec2      v_tex;
-
-uniform   sampler2D u_tex;
-uniform   vec2      resolution;
-uniform   vec2      textureSize;
-
-uniform   float      blur;
-
-void main(void)                                    
-{         
-	float blurSize = blur;
-	if (blurSize == 0.0) {
-		blurSize = 3.0;
-	}
-	
-	int numSamples = int(blurSize * 1.4);
-	
-	// Initialize a color accumulator
-	vec4 blurColor = texture2D(u_tex, v_tex) * numSamples;
-
-	// Calculate the step size for sampling the scene texture
-	vec2 step = 1.0 / textureSize;
-
-	int total = numSamples;
-	
-	for (int i = 0; i < numSamples; i++) {
-		vec2 offset = vec2(cos(float(i) * 3.14159 * 2.0 / float(numSamples)), sin(float(i) * 3.14159 * 2.0 / float(numSamples)));		
-	    for (int b = 1; b < blurSize; b++) {	    
-			blurColor += texture2D(u_tex, v_tex + offset * b * step);	
-			total++;
-		}
-	}
-
-	// Normalize the accumulated color
-	blurColor /= float(total);
-
-	// Output the final blurred color
-	gl_FragColor = blurColor;
-}
-#endif
diff --git a/resources/shaders/border.glsl b/resources/shaders/border.glsl
deleted file mode 100644
index 5603e922..00000000
--- a/resources/shaders/border.glsl
+++ /dev/null
@@ -1,83 +0,0 @@
-#if defined(VERTEX)
-
-#if __VERSION__ >= 130
-#define COMPAT_VARYING out
-#define COMPAT_ATTRIBUTE in
-#define COMPAT_TEXTURE texture
-#else
-#define COMPAT_VARYING varying 
-#define COMPAT_ATTRIBUTE attribute 
-#define COMPAT_TEXTURE texture2D
-#endif
-
-#ifdef GL_ES
-#define COMPAT_PRECISION mediump
-#else
-#define COMPAT_PRECISION
-#endif
-
-uniform   mat4 MVPMatrix;
-COMPAT_ATTRIBUTE vec2 VertexCoord;
-COMPAT_ATTRIBUTE vec2 TexCoord;
-COMPAT_ATTRIBUTE vec4 COLOR;
-COMPAT_VARYING   vec2 v_tex;
-COMPAT_VARYING   vec4 v_col;
-
-void main(void)                                    
-{                                                  
-	gl_Position = MVPMatrix * vec4(VertexCoord.xy, 0.0, 1.0);
-	v_tex       = TexCoord;                           
-	v_col       = COLOR;                           
-}
-
-#elif defined(FRAGMENT)
-			
-varying   vec4      v_col;
-varying   vec2      v_tex;
-
-uniform   sampler2D u_tex;
-uniform   vec2      resolution;
-uniform   vec2      textureSize;
-uniform   vec2      outputSize;
-
-uniform   float      borderSize;
-uniform   vec4       borderColor;
-
-vec4 sampleTexture(sampler2D tex, vec2 texCoord) 
-{
-    // Check if the texture coordinate is within the [0, 1] range
-    if (texCoord.x >= 0 && texCoord.x <= 1 && texCoord.y >= 0 && texCoord.y <= 1)
-        return texture2D(tex, texCoord);
-    
-    return vec4(0.0); // Return transparent black for coordinates outside [0, 1]    
-}
-
-void main(void)                                    
-{
-	float offset = borderSize;
-	if (offset == 0.0) {
-		offset = 2.0;
-	}
-	
-	vec2 step = 1.0 / textureSize;
-	
-	vec2 decal = vec2(-offset / outputSize.x, offset / outputSize.y);	
-
-	vec2 v_padtex = vec2(v_tex.x / (1.0 + 2 * decal.x) + decal.x, v_tex.y * (1.0 + 2 * decal.y) - decal.y);
-	if (decal.y < 0) // If outputSize is negative
-		v_padtex.y = v_tex.y * (1.0 - 2 * decal.y) + decal.y;
-	
-	vec4 blurColor = sampleTexture(u_tex, v_tex);
-
-	// Normalize the accumulated color	
-	blurColor.rgb = borderColor.rgb;
-	blurColor.a = blurColor.a * borderColor.a;
-	
-	// Output the final blurred color
-	vec4 clr = sampleTexture(u_tex, v_padtex);
-	if (clr.a != 0)
-		gl_FragColor = clr;
-	else
-		gl_FragColor = blurColor;
-}
-#endif
diff --git a/resources/shaders/crt.glsl b/resources/shaders/crt.glsl
deleted file mode 100644
index e44b5dae..00000000
--- a/resources/shaders/crt.glsl
+++ /dev/null
@@ -1,181 +0,0 @@
-// Parameter lines go here:
-#pragma parameter SCANTHICK "SCANLINE THICKNESS" 2.0 2.0 4.0 1.0
-#pragma parameter INTENSITY "SCANLINE INTENSITY" 0.6 0.0 1.0 0.02
-#pragma parameter BRIGHTBOOST "LUMINANCE BOOST" 0.25 0.0 1.0 0.01
-#pragma parameter shadowmask "MASK TYPE 0:CGWG, 1:LOTTES" 0.0 -1.0 1.0 1.0
-#pragma parameter msk_size "MASK SIZE" 1.0 1.0 2.0 1.0
-#pragma parameter CGWG "MASK STRENGTH" 0.3 0.0 1.0 0.1
-#pragma parameter BLUR "BLUR STRENGTH" 0.6 0.0 1.0 0.1
-#pragma parameter GAMMA "GAMMA" 0.45 0.0 0.80 0.01
-#pragma parameter SATURATION "SATURATION" 1.0 0.0 2.0 0.05 
-
-#if defined(VERTEX)
-
-#if __VERSION__ >= 130
-#define COMPAT_VARYING out
-#define COMPAT_ATTRIBUTE in
-#define COMPAT_TEXTURE texture
-#else
-#define COMPAT_VARYING varying 
-#define COMPAT_ATTRIBUTE attribute 
-#define COMPAT_TEXTURE texture2D
-#endif
-
-#ifdef GL_ES
-#define COMPAT_PRECISION mediump
-#else
-#define COMPAT_PRECISION
-#endif
-
-COMPAT_ATTRIBUTE vec4 VertexCoord;
-COMPAT_ATTRIBUTE vec4 COLOR;
-COMPAT_ATTRIBUTE vec4 TexCoord;
-COMPAT_VARYING vec4 COL0;
-COMPAT_VARYING vec4 TEX0;
-COMPAT_VARYING vec2 invDims;
-
-vec4 _oPosition1; 
-uniform mat4 MVPMatrix;
-uniform COMPAT_PRECISION int FrameDirection;
-uniform COMPAT_PRECISION int FrameCount;
-uniform COMPAT_PRECISION vec2 OutputSize;
-uniform COMPAT_PRECISION vec2 TextureSize;
-uniform COMPAT_PRECISION vec2 InputSize;
-
-void main()
-{
-    gl_Position = MVPMatrix * VertexCoord;
-    COL0 = COLOR;
-    TEX0.xy = TexCoord.xy * 1.00001;
-    invDims=1.0/TextureSize.xy;
-}
-
-#elif defined(FRAGMENT)
-
-#if __VERSION__ >= 130
-#define COMPAT_VARYING in
-#define COMPAT_TEXTURE texture
-out vec4 FragColor;
-#else
-#define COMPAT_VARYING varying
-#define FragColor gl_FragColor
-#define COMPAT_TEXTURE texture2D
-#endif
-
-#ifdef GL_ES
-#ifdef GL_FRAGMENT_PRECISION_HIGH
-precision highp float;
-#else
-precision mediump float;
-#endif
-#define COMPAT_PRECISION mediump
-#else
-#define COMPAT_PRECISION
-#endif
-
-uniform COMPAT_PRECISION int FrameDirection;
-uniform COMPAT_PRECISION int FrameCount;
-uniform COMPAT_PRECISION vec2 OutputSize;
-uniform COMPAT_PRECISION vec2 TextureSize;
-uniform COMPAT_PRECISION vec2 InputSize;
-uniform sampler2D Texture;
-COMPAT_VARYING vec4 TEX0;
-COMPAT_VARYING vec2 invDims;
-
-// compatibility #defines
-#define Source Texture
-#define vTexCoord TEX0.xy
-
-#define SourceSize vec4(TextureSize, 1.0 / TextureSize) //either TextureSize or InputSize
-#define OutputSize vec4(OutputSize, 1.0 / OutputSize)
-
-#ifdef PARAMETER_UNIFORM
-// All parameter floats need to have COMPAT_PRECISION in front of them
-uniform COMPAT_PRECISION float SCANTHICK;
-uniform COMPAT_PRECISION float INTENSITY;
-uniform COMPAT_PRECISION float BRIGHTBOOST;
-uniform COMPAT_PRECISION float CGWG;
-uniform COMPAT_PRECISION float BLUR;
-uniform COMPAT_PRECISION float GAMMA;
-uniform COMPAT_PRECISION float SATURATION;
-uniform COMPAT_PRECISION float shadowmask;
-uniform COMPAT_PRECISION float msk_size;
-
-#else
-#define SCANTHICK 2.0
-#define INTENSITY 0.15
-#define BRIGHTBOOST 0.15
-#define CGWG 0.3
-#define BLUR 0.6
-#define GAMMA 0.45
-#define SATURATION 1.0
-#define shadowmask 0.0
-#define msk_size 1.0
-
-#endif
-
-vec3 mask(float p)
-{
-    p = floor(p/msk_size);
-
-    vec3 Mask = vec3(1.0);
-    float m=1.0-CGWG;
-
-    if (shadowmask == 0.0)
-    {
-    float pos = fract (p*0.5);
-
-    if (pos < 0.5) {Mask.r=1.0, Mask.g=m, Mask.b=1.0;}
-    else {Mask.r=m, Mask.g=1.0, Mask.b=m;}
-    }
-
-    if (shadowmask == 1.0)
-    {
-    float pos = fract (p*0.3333);
-
-    if (pos<0.333) {Mask.r=1.0, Mask.g=m, Mask.b=m;}
-    else if (pos<0.666) {Mask.r=m, Mask.g=1.0, Mask.b=m;}
-    else {Mask.r=m, Mask.g=m, Mask.b=1.0;}
-    }
-    
-    return Mask;
-}
-
-
-//SIMPLE AND FAST SATURATION
-vec3 saturation (vec3 textureColor)
-
-{
-    vec3 luminanceWeighting = vec3(0.3, 0.6, 0.1);
-    float luminance = dot(textureColor.rgb, luminanceWeighting);
-    vec3 greyScaleColor = vec3(luminance);
-
-    vec3 res = vec3(mix(greyScaleColor, textureColor.rgb, SATURATION));
-    return res;
-}
-
-
-void main()
-{
-    vec2 pos = TEX0.xy;
-    vec2 p = pos * TextureSize; 
-    vec2 i = floor(p)*1.0001 + 0.5;
-    vec2 f = p - i;
-    p = (i + 4.0*f*f*f)*invDims;
-    p.x = mix(p.x, pos.x, BLUR);
-    
-    vec3 texel = COMPAT_TEXTURE(Texture, p).rgb;
-    vec3 pixelHigh = ((1.0 + BRIGHTBOOST) - (0.2 * texel)) * texel;
-    vec3 pixelLow  = ((1.0 - INTENSITY) + (0.1 * texel)) * texel;
-    float selectY = mod(TEX0.y * SCANTHICK * TextureSize.y, 2.0);
-    float selectHigh = step(1.0, selectY);
-    float selectLow = 1.0 - selectHigh;
-    vec3 pixelColor = (selectLow * pixelLow) + (selectHigh * pixelHigh);
-    pixelColor*=pixelColor;
-    pixelColor*= mask(gl_FragCoord.x);
-
-    pixelColor = pow(pixelColor,vec3(GAMMA));
-    pixelColor= saturation(pixelColor);
-    FragColor = vec4(pixelColor, 1.0);
-} 
-#endif
diff --git a/resources/shaders/pixelate.glsl b/resources/shaders/pixelate.glsl
deleted file mode 100644
index 6e662abe..00000000
--- a/resources/shaders/pixelate.glsl
+++ /dev/null
@@ -1,58 +0,0 @@
-#if defined(VERTEX)
-
-#if __VERSION__ >= 130
-#define COMPAT_VARYING out
-#define COMPAT_ATTRIBUTE in
-#define COMPAT_TEXTURE texture
-#else
-#define COMPAT_VARYING varying 
-#define COMPAT_ATTRIBUTE attribute 
-#define COMPAT_TEXTURE texture2D
-#endif
-
-#ifdef GL_ES
-#define COMPAT_PRECISION mediump
-#else
-#define COMPAT_PRECISION
-#endif
-
-uniform   mat4 MVPMatrix;
-COMPAT_ATTRIBUTE vec2 VertexCoord;
-COMPAT_ATTRIBUTE vec2 TexCoord;
-COMPAT_ATTRIBUTE vec4 COLOR;
-COMPAT_VARYING   vec2 v_tex;
-COMPAT_VARYING   vec4 v_col;
-
-void main(void)                                    
-{                                                  
-	gl_Position = MVPMatrix * vec4(VertexCoord.xy, 0.0, 1.0);
-	v_tex       = TexCoord;                           
-	v_col       = COLOR;                           
-}
-
-#elif defined(FRAGMENT)
-			
-varying   vec4      v_col;
-varying   vec2      v_tex;
-
-uniform   sampler2D u_tex;
-uniform   vec2      resolution;
-uniform   vec2      textureSize;
-
-uniform   float      pixelSize;
-
-void main(void)                                    
-{         
-	vec2 p = v_tex.st;
-	
-	float pixels = pixelSize;
-	if (pixels == 0.0) {
-		pixels = 3.0;
-	}
-
-	p.x -= mod(p.x, (pixels / textureSize.x));
-	p.y -= mod(p.y, (pixels / textureSize.y));
-    
-	gl_FragColor = texture2D(u_tex, p);
-}
-#endif
diff --git a/resources/shaders/shadow.glsl b/resources/shaders/shadow.glsl
deleted file mode 100644
index 4252d8d1..00000000
--- a/resources/shaders/shadow.glsl
+++ /dev/null
@@ -1,103 +0,0 @@
-#if defined(VERTEX)
-
-#if __VERSION__ >= 130
-#define COMPAT_VARYING out
-#define COMPAT_ATTRIBUTE in
-#define COMPAT_TEXTURE texture
-#else
-#define COMPAT_VARYING varying 
-#define COMPAT_ATTRIBUTE attribute 
-#define COMPAT_TEXTURE texture2D
-#endif
-
-#ifdef GL_ES
-#define COMPAT_PRECISION mediump
-#else
-#define COMPAT_PRECISION
-#endif
-
-uniform   mat4 MVPMatrix;
-COMPAT_ATTRIBUTE vec2 VertexCoord;
-COMPAT_ATTRIBUTE vec2 TexCoord;
-COMPAT_ATTRIBUTE vec4 COLOR;
-COMPAT_VARYING   vec2 v_tex;
-COMPAT_VARYING   vec4 v_col;
-
-void main(void)                                    
-{                                                  
-	gl_Position = MVPMatrix * vec4(VertexCoord.xy, 0.0, 1.0);
-	v_tex       = TexCoord;                           
-	v_col       = COLOR;                           
-}
-
-#elif defined(FRAGMENT)
-			
-varying   vec4      v_col;
-varying   vec2      v_tex;
-
-uniform   sampler2D u_tex;
-uniform   vec2      resolution;
-uniform   vec2      textureSize;
-uniform   vec2      outputSize;
-
-uniform   float      blur;
-uniform   float      shadowOffset;
-
-vec4 sampleTexture(sampler2D tex, vec2 texCoord) 
-{
-    // Check if the texture coordinate is within the [0, 1] range
-    if (texCoord.x >= 0 && texCoord.x <= 1 && texCoord.y >= 0 && texCoord.y <= 1)
-        return texture2D(tex, texCoord);
-    
-    return vec4(0.0); // Return transparent black for coordinates outside [0, 1]    
-}
-
-void main(void)                                    
-{         
-	float blurSize = blur;
-	if (blurSize == 0.0) {
-		blurSize = 3.0;
-	}
-	
-	float offset = shadowOffset;
-	if (offset == 0.0) {
-		offset = 6.0;
-	}
-	
-	vec2 step = 1.0 / textureSize;
-	
-	vec2 decal = vec2(-offset / outputSize.x, offset / outputSize.y);	
-
-	vec2 v_padtex = vec2(v_tex.x / (1.0 + decal.x), v_tex.y * (1.0 + decal.y) - decal.y);
-	if (decal.y < 0) // If outputSize is negative
-		v_padtex.y = v_tex.y * (1.0 - decal.y);
-	
-	vec4 sourceColor = sampleTexture(u_tex, v_padtex + decal);
-
-	int numSamples =  3;
-
-	// Initialize a color accumulator
-	vec4 blurColor = sourceColor * numSamples;
-
-	int total = numSamples;
-	
-	for (int i = 0; i < numSamples; i++) {
-		vec2 offset = vec2(cos(float(i) * 3.14159 * 2.0 / float(numSamples)), sin(float(i) * 3.14159 * 2.0 / float(numSamples)));		
-		for (int b = 1; b < numSamples; b++) {	    
-			blurColor += sampleTexture(u_tex, v_padtex + (offset * b * step) + decal);	
-			total++;
-		}
-	}
-
-	// Normalize the accumulated color
-	blurColor /= float(total);
-	blurColor.r = 0;
-	blurColor.g = 0;
-	blurColor.b = 0;
-	blurColor.a *= 0.5;
-	
-	// Output the final blurred color
-	gl_FragColor = (sampleTexture(u_tex, v_padtex) + blurColor);
-
-}
-#endif

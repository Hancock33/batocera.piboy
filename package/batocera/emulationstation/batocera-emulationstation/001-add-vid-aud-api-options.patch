diff --git a/es-app/src/CustomFeatures.cpp b/es-app/src/CustomFeatures.cpp
index c53310e0..a1e7e463 100644
--- a/es-app/src/CustomFeatures.cpp
+++ b/es-app/src/CustomFeatures.cpp
@@ -39,6 +39,8 @@ EmulatorFeatures::Features EmulatorFeatures::parseFeatures(const std::string fea
 
 		if (trim == "ratio") ret = ret | EmulatorFeatures::Features::ratio;
 		if (trim == "rewind") ret = ret | EmulatorFeatures::Features::rewind;
+		if (trim == "fps_show") ret = ret | EmulatorFeatures::Features::fps_show;
+		if (trim == "framecount_show") ret = ret | EmulatorFeatures::Features::framecount_show;
 		if (trim == "smooth") ret = ret | EmulatorFeatures::Features::smooth;
 		if (trim == "shaders") ret = ret | EmulatorFeatures::Features::shaders;
 		if (trim == "pixel_perfect") ret = ret | EmulatorFeatures::Features::pixel_perfect;
@@ -52,6 +54,10 @@ EmulatorFeatures::Features EmulatorFeatures::parseFeatures(const std::string fea
 		if (trim == "videomode") ret = ret | EmulatorFeatures::Features::videomode;
 		if (trim == "colorization") ret = ret | EmulatorFeatures::Features::colorization;
 		if (trim == "autocontrollers") ret = ret | EmulatorFeatures::Features::autocontrollers;
+		if (trim == "gfxbackend") ret = ret | EmulatorFeatures::Features::gfxbackend;
+		if (trim == "audio_driver") ret = ret | EmulatorFeatures::Features::audio_driver;
+		if (trim == "input_driver") ret = ret | EmulatorFeatures::Features::input_driver;
+		if (trim == "input_joypad_driver") ret = ret | EmulatorFeatures::Features::input_joypad_driver;
 	}
 
 	return ret;
diff --git a/es-app/src/CustomFeatures.h b/es-app/src/CustomFeatures.h
index 26e4f3ed..42cc07dd 100644
--- a/es-app/src/CustomFeatures.h
+++ b/es-app/src/CustomFeatures.h
@@ -89,7 +89,12 @@ public:
 		padTokeyboard = 65536,
 		cheevos = 131072,
 		autocontrollers = 262144,
-
+		framecount_show = 524288,
+		fps_show = 1048576,
+		gfxbackend = 2097152,
+		audio_driver = 4194304,
+		input_driver = 8388608,
+		input_joypad_driver = 16777216,
 		all = 0x0FFFFFFF
 	};
 
diff --git a/es-app/src/guis/GuiMenu.cpp b/es-app/src/guis/GuiMenu.cpp
index a8e5791c..174987f1 100644
--- a/es-app/src/guis/GuiMenu.cpp
+++ b/es-app/src/guis/GuiMenu.cpp
@@ -1873,7 +1873,7 @@ void GuiMenu::openGamesSettings()
 	}
 	
 
-	s->addGroup(_("DEFAULT GLOBAL SETTINGS"));
+	s->addGroup(_("DEFAULT DRIVER SETTINGS"));
 
 	// Screen ratio choice
 	if (!hasGlobalFeature("ratio"))
@@ -1891,6 +1891,61 @@ void GuiMenu::openGamesSettings()
 		s->addSaveFunc([this, videoModeOptionList] { SystemConf::getInstance()->set("global.videomode", videoModeOptionList->getSelected()); });
 	}
 
+	// GFX Driver
+	if (!hasGlobalFeature("gfxbackend"))
+	{
+		auto gfx_backend = std::make_shared<OptionListComponent<std::string>>(mWindow, _("GRAPHICS API"));
+		gfx_backend->addRange({ { _("AUTO"), "auto" },{ _("OpenGL") , "gl" },{ _("GLCore") , "glcore" },{ _("SDL2") , "sdl2" },{ _("Vulkan") , "vulkan" } }, SystemConf::getInstance()->get("global.gfxbackend"));
+		s->addWithLabel(_("GRAPHICS API"), gfx_backend);
+		s->addSaveFunc([gfx_backend] { SystemConf::getInstance()->set("global.gfxbackend", gfx_backend->getSelected()); });
+	}
+
+	// Audio Driver
+	if (!hasGlobalFeature("audio_driver"))
+	{
+		auto audiodriver = std::make_shared<OptionListComponent<std::string>>(mWindow, _("AUDIO API"));
+		audiodriver->addRange({ { _("AUTO"), "auto" },{ _("ALSA") , "alsa" },{ _("ALSAThread") , "alsathread" },{ _("TinyALSA") , "tinyalsa" },{ _("openAL") , "openal" },{ _("PulseAudio") , "pulse" },{ _("SDL2") , "sdl2" },{ _("NULL") , "null" } }, SystemConf::getInstance()->get("global.audio_driver"));
+		s->addWithLabel(_("AUDIO API"), audiodriver);
+		s->addSaveFunc([audiodriver] { SystemConf::getInstance()->set("global.audio_driver", audiodriver->getSelected()); });
+	}
+	
+	// Input Driver
+	if (!hasGlobalFeature("input_driver"))
+	{
+		auto inputdriver = std::make_shared<OptionListComponent<std::string>>(mWindow, _("INPUT API"));
+		inputdriver->addRange({ { _("AUTO"), "auto" },{ _("SDL2") , "sdl2" },{ _("UDEV") , "udev" },{ _("LINUXRAW") , "linuxraw" },{ _("X") , "x" } }, SystemConf::getInstance()->get("global.input_driver"));
+		s->addWithLabel(_("INPUT API"), inputdriver);
+		s->addSaveFunc([inputdriver] { SystemConf::getInstance()->set("global.input_driver", inputdriver->getSelected()); });
+	}
+	
+	// Input Joypad Driver
+	if (!hasGlobalFeature("input_joypad_driver"))
+	{
+		auto inputjoypaddriver = std::make_shared<OptionListComponent<std::string>>(mWindow, _("JOYPAD API"));
+		inputjoypaddriver->addRange({ { _("AUTO"), "auto" },{ _("SDL2") , "sdl2" },{ _("UDEV") , "udev" },{ _("LINUXRAW") , "linuxraw" },{ _("Parport") , "parport" },{ _("HID") , "hid" } }, SystemConf::getInstance()->get("global.input_joypad_driver"));
+		s->addWithLabel(_("JOYPAD API"), inputjoypaddriver);
+		s->addSaveFunc([inputjoypaddriver] { SystemConf::getInstance()->set("global.input_joypad_driver", inputjoypaddriver->getSelected()); });
+	}
+
+	s->addGroup(_("DEFAULT FRAME MONITORING SETTINGS"));
+ 	// FPS
+	if (!hasGlobalFeature("fps_show"))
+ 	{
+ 		auto fps_show_enabled = std::make_shared<OptionListComponent<std::string>>(mWindow, _("FRAMERATE"));
+ 		fps_show_enabled->addRange({ { _("AUTO"), "auto" },{ _("ON") , "1" },{ _("OFF") , "0" } }, SystemConf::getInstance()->get("global.fps_show"));
+		s->addWithLabel(_("FRAMERATE"), fps_show_enabled);
+		s->addSaveFunc([fps_show_enabled] { SystemConf::getInstance()->set("global.fps_show", fps_show_enabled->getSelected()); });
+ 	}
+ 
+ 	// Frame Count
+	if (!hasGlobalFeature("framecount_show"))
+ 	{
+ 		auto framecount_show_enabled = std::make_shared<OptionListComponent<std::string>>(mWindow, _("FRAMECOUNT"));
+		framecount_show_enabled->addRange({ { _("AUTO"), "auto" },{ _("ON") , "1" },{ _("OFF") , "0" } }, SystemConf::getInstance()->get("global.framecount_show"));
+		s->addWithLabel(_("FRAMECOUNT"), framecount_show_enabled);
+		s->addSaveFunc([framecount_show_enabled] { SystemConf::getInstance()->set("global.framecount_show", framecount_show_enabled->getSelected()); });
+ 	}
+
 	// smoothing	
 	if (!hasGlobalFeature("smooth"))
 	{

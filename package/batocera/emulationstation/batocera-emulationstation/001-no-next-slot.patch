diff --git a/es-app/src/SaveState.cpp b/es-app/src/SaveState.cpp
index aef374d..ac2f337 100644
--- a/es-app/src/SaveState.cpp
+++ b/es-app/src/SaveState.cpp
@@ -80,20 +80,6 @@ std::string SaveState::setupSaveState(FileData* game, const std::string& command
 
 	bool supportsIncremental = config != nullptr ? config->incremental : game->getSourceFileData()->getSystem()->getSaveStateRepository()->supportsIncrementalSaveStates();
 
-	// We start games with new slots : If the users saves the game, we don't loose the previous save
-	int nextSlot = SaveStateRepository::getNextFreeSlot(game, this->config);
-
-	if (!isSlotValid())
-	{
-		if (nextSlot > 0 && !SystemConf::getIncrementalSaveStatesUseCurrentSlot() && supportsIncremental)
-		{
-			// We start a game normally but there are saved games : Start game on next free slot to avoid loosing a saved game
-			return cmd + " -state_slot " + std::to_string(nextSlot);
-		}
-
-		return cmd;
-	}
-
 	bool incrementalSaveStates = SystemConf::getIncrementalSaveStates() && /*hasAutosave && */supportsIncremental;
 
 	std::string path = Utils::FileSystem::getParent(fileName);
@@ -101,28 +87,29 @@ std::string SaveState::setupSaveState(FileData* game, const std::string& command
 	if (slot == -1) // Run current AutoSave
 	{
 		if (racommands || fileName.empty())
-			cmd = cmd + " -autosave 1 -state_slot " + std::to_string(nextSlot);
+			cmd = cmd + " -autosave 1 -state_slot " + std::to_string(slot);
 		else
-			cmd = cmd + " -state_slot " + std::to_string(nextSlot) + " -state_file \"" + fileName + "\"";
+			cmd = cmd + " -autosave 1 -state_file \"" + fileName + "\"";
 	}
 	else
 	{
 		if (slot == -2) // Run new game without AutoSave
 		{
-			cmd = cmd + " -autosave 0 -state_slot " + std::to_string(nextSlot);
+			cmd = cmd + " -autosave 0";
 		}
 		else if (incrementalSaveStates)
 		{
 			if (racommands)
 			{
-				cmd = cmd + " -state_slot " + std::to_string(nextSlot); // slot
+				cmd = cmd + " -state_slot " + std::to_string(slot); // slot
 
 				// Run game, and activate AutoSave to load it
 				if (!fileName.empty())
 					cmd = cmd + " -autosave 1";
 			}
 			else
-				cmd = cmd + " -state_slot " + std::to_string(nextSlot) + " -state_file \"" + fileName + "\"";
+			  if (!fileName.empty())
+			    cmd = cmd + " -state_slot " + std::to_string(slot) + " -state_file \"" + fileName + "\"";
 		}
 		else
 		{
@@ -135,7 +122,8 @@ std::string SaveState::setupSaveState(FileData* game, const std::string& command
 					cmd = cmd + " -autosave 1";
 			}
 			else
-				cmd = cmd + " -state_slot " + std::to_string(slot) + " -state_file \"" + fileName + "\"";
+			  if (!fileName.empty())
+			    cmd = cmd + " -state_slot " + std::to_string(slot) + " -state_file \"" + fileName + "\"";
 		}
 
 		if (racommands) 
@@ -163,10 +151,10 @@ std::string SaveState::setupSaveState(FileData* game, const std::string& command
 			{
 				Utils::FileSystem::copyFile(fileName, autoFilename);
 
-				if (incrementalSaveStates && nextSlot >= 0 && slot + 1 != nextSlot)
+				if (incrementalSaveStates)
 				{
 					// Copy file to new slot, if the users want to reload the saved game in the slot directly from retroach
-					mNewSlotFile = makeStateFilename(nextSlot);
+					mNewSlotFile = makeStateFilename(slot);
 					Utils::FileSystem::removeFile(mNewSlotFile);
 					if (Utils::FileSystem::copyFile(fileName, mNewSlotFile))
 						mNewSlotCheckSum = ApiSystem::getInstance()->getMD5(fileName, false);

diff --git a/CMakeLists.txt b/CMakeLists.txt
index b55cc041..81b0501c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -10,6 +10,9 @@ option(BCM "BCM host" OFF)
 option(BATOCERA "Set to ON to enable BATOCERA specific code" OFF)
 option(RETROBAT "Set to ON to enable RETROBAT specific code" OFF)
 
+option(PIBOY "Set to ON to enable DMG Piboy compatibility" OFF)
+option(NOUPDATE "Set to ON to disable system updates" OFF)
+
 option(ENABLE_FILEMANAGER "Set to ON to enable f1 shortcut for filesystem" OFF)
 option(DISABLE_KODI "Set to ON to disable kodi in menu" OFF)
 option(ENABLE_PULSE "Set to ON to enable pulse audio (versus alsa)" OFF)
@@ -34,6 +37,16 @@ if(RETROBAT)
   add_definitions(-DRETROBAT)
 endif()
 
+if(PIBOY)
+  MESSAGE("Piboy build")
+  add_definitions(-DPIBOY)
+endif()
+
+if(NOUPDATE)
+  MESSAGE("Update disabled")
+  add_definitions(-DNOUPDATE)
+endif()
+
 # disable kodi menu
 if(DISABLE_KODI)
   MESSAGE("kodi disabled")
diff --git a/es-app/src/guis/GuiMenu.cpp b/es-app/src/guis/GuiMenu.cpp
index cd7911b0..80cc50d1 100644
--- a/es-app/src/guis/GuiMenu.cpp
+++ b/es-app/src/guis/GuiMenu.cpp
@@ -70,8 +70,15 @@
 #define fake_gettext_architecture _("Architecture")
 #define fake_gettext_diskformat   _("Disk format")
 #define fake_gettext_temperature  _("Temperature")
+#if PIBOY
+#define fake_gettext_fan          _("Fan speed")
+#endif
 #define fake_gettext_avail_memory _("Available memory")
 #define fake_gettext_battery      _("Battery")
+#if PIBOY
+#define fake_gettext_battery_volts   _("Battery voltage")
+#define fake_gettext_battery_amps    _("Battery current")
+#endif
 #define fake_gettext_model        _("Model")
 #define fake_gettext_cpu_model    _("Cpu model")
 #define fake_gettext_cpu_number   _("Cpu number")
@@ -188,7 +195,11 @@ GuiMenu::GuiMenu(Window *window, bool animate) : GuiComponent(window), mMenu(win
 		if (ApiSystem::getInstance()->isScriptingSupported(ApiSystem::BATOCERASTORE) || ApiSystem::getInstance()->isScriptingSupported(ApiSystem::THEMESDOWNLOADER) ||
 			(ApiSystem::getInstance()->isScriptingSupported(ApiSystem::THEBEZELPROJECT) && ApiSystem::getInstance()->isScriptingSupported(ApiSystem::DECORATIONS)) ||
 			ApiSystem::getInstance()->isScriptingSupported(ApiSystem::UPGRADE))
-			addEntry(_("UPDATES & DOWNLOADS"), true, [this] { openUpdatesSettings(); }, "iconUpdates");
+			#if !NOUPDATE
+				addEntry(_("UPDATES & DOWNLOADS"), true, [this] { openUpdatesSettings(); }, "iconUpdates");
+			#else
+				addEntry(_("DOWNLOADS"), true, [this] { openUpdatesSettings(); }, "iconUpdates");
+			#endif
 
 		addEntry(_("SYSTEM SETTINGS").c_str(), true, [this] { openSystemSettings(); }, "iconSystem");
 	}
@@ -814,7 +825,11 @@ void GuiMenu::openDeveloperSettings()
 
 void GuiMenu::openUpdatesSettings()
 {
-	GuiSettings *updateGui = new GuiSettings(mWindow, _("UPDATES & DOWNLOADS").c_str());
+	#if !NOUPDATE
+		GuiSettings *updateGui = new GuiSettings(mWindow, _("UPDATES & DOWNLOADS").c_str());
+	#else
+		GuiSettings *updateGui = new GuiSettings(mWindow, _("DOWNLOADS").c_str());
+	#endif
 
 	updateGui->addGroup(_("DOWNLOADS"));
 
@@ -855,6 +870,7 @@ void GuiMenu::openUpdatesSettings()
 
 	if (ApiSystem::getInstance()->isScriptingSupported(ApiSystem::UPGRADE))
 	{
+	#if !NOUPDATE
 		updateGui->addGroup(_("SOFTWARE UPDATES"));
 
 		// Enable updates
@@ -864,11 +880,11 @@ void GuiMenu::openUpdatesSettings()
 
 		std::string updatesType = SystemConf::getInstance()->get("updates.type");
 
-#if WIN32
-		if (updatesType == "unstable")
-			updatesTypeList->add("unstable", "unstable", updatesType == "unstable");
-		else
-#endif
+		#if WIN32
+			if (updatesType == "unstable")
+				updatesTypeList->add("unstable", "unstable", updatesType == "unstable");
+			else
+		#endif
 			if (updatesType.empty() || updatesType != "beta")
 				updatesType = "stable";
 
@@ -897,6 +913,7 @@ void GuiMenu::openUpdatesSettings()
 				mWindow->pushGui(new GuiUpdate(mWindow));
 			}
 		});
+#endif
 	}
 
 	mWindow->pushGui(updateGui);
diff --git a/es-core/src/platform.cpp b/es-core/src/platform.cpp
index 57221153..9ca042c8 100644
--- a/es-core/src/platform.cpp
+++ b/es-core/src/platform.cpp
@@ -28,6 +28,8 @@ int runShutdownCommand()
 {
 #ifdef WIN32 // windows
 	return system("shutdown -s -t 0");
+#elseif  PIBOY
+	return system("echo 0 > /sys/kernel/xpi_gamecon/flags && /sbin/rmmod xpi_gamecon && shutdown -h now");
 #else // osx / linux	
 	return system("shutdown -h now");
 #endif
@@ -37,6 +39,8 @@ int runRestartCommand()
 {
 #ifdef WIN32 // windows	
 	return system("shutdown -r -t 0");
+#elseif  PIBOY
+	return system("echo 129 > /sys/kernel/xpi_gamecon/flags && shutdown -r now");
 #else // osx / linux	
 	return system("shutdown -r now");
 #endif
@@ -344,23 +348,39 @@ BatteryInformation queryBatteryInformation()
 	if (batteryStatusPath.empty())
 	{
 		std::string batteryRootPath;
-
+	#if PIBOY
+		auto files = Utils::FileSystem::getDirContent("/sys/kernel");
+	#else
 		auto files = Utils::FileSystem::getDirContent("/sys/class/power_supply");
+	#endif
 		for (auto file : files)
 		{
+		#if PIBOY
+			if (Utils::String::toLower(file).find("/xpi_gamecon") != std::string::npos)
+			{
+				batteryRootPath = file;
+				break;
+			}
+		#else
 			if (Utils::String::toLower(file).find("/bat") != std::string::npos)
 			{
 				batteryRootPath = file;
 				break;
 			}
+		#endif
 		}
 
 		if (batteryRootPath.empty())
 			batteryStatusPath = ".";
 		else
 		{
+		#if PIBOY
+			batteryStatusPath = batteryRootPath + "/amps";
+			batteryCapacityPath = batteryRootPath + "/percent";
+		#else
 			batteryStatusPath = batteryRootPath + "/status";
 			batteryCapacityPath = batteryRootPath + "/capacity";
+		#endif
 		}
 	}
 
@@ -373,7 +393,11 @@ BatteryInformation queryBatteryInformation()
 	else
 	{
 		ret.hasBattery = true;
+		#if PIBOY
+	 	ret.isCharging = (stoi(Utils::String::replace(Utils::FileSystem::readAllText(batteryStatusPath), "-", "")) < 650);
+		#else
 		ret.isCharging = (Utils::String::replace(Utils::FileSystem::readAllText(batteryStatusPath), "\n", "") != "Discharging");
+		#endif
 		ret.level = atoi(Utils::FileSystem::readAllText(batteryCapacityPath).c_str());
 	}
 

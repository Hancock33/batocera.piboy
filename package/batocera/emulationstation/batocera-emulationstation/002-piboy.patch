diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1247627c..47b19f1f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -9,6 +9,8 @@ option(BCM "BCM host" OFF)
 
 option(BATOCERA "Set to ON to enable BATOCERA specific code" OFF)
 option(RETROBAT "Set to ON to enable RETROBAT specific code" OFF)
+option(PIBOY "Set to ON to enable DMG Piboy compatibility" OFF)
+option(NOUPDATE "Set to ON to disable system updates" OFF)
 
 option(ENABLE_FILEMANAGER "Set to ON to enable f1 shortcut for filesystem" OFF)
 option(DISABLE_KODI "Set to ON to disable kodi in menu" OFF)
@@ -96,6 +98,16 @@ if(RETROBAT)
   add_definitions(-DRETROBAT)
 endif()
 
+if(PIBOY)
+  MESSAGE("Piboy build")
+  add_definitions(-DPIBOY)
+endif()
+
+if(NOUPDATE)
+  MESSAGE("Update disabled")
+  add_definitions(-DNOUPDATE)
+endif()
+
 # disable kodi menu
 if(DISABLE_KODI)
   MESSAGE("Kodi disabled")
diff --git a/es-app/src/guis/GuiMenu.cpp b/es-app/src/guis/GuiMenu.cpp
index 000a46aa..8b08b6b3 100644
--- a/es-app/src/guis/GuiMenu.cpp
+++ b/es-app/src/guis/GuiMenu.cpp
@@ -73,8 +73,15 @@
 #define fake_gettext_architecture _("Architecture")
 #define fake_gettext_diskformat   _("Disk format")
 #define fake_gettext_temperature  _("Temperature")
+#if PIBOY
+#define fake_gettext_fan          _("Fan speed")
+#endif
 #define fake_gettext_avail_memory _("Available memory")
 #define fake_gettext_battery      _("Battery")
+#if PIBOY
+#define fake_gettext_battery_volts   _("Battery voltage")
+#define fake_gettext_battery_amps    _("Battery current")
+#endif
 #define fake_gettext_model        _("Model")
 #define fake_gettext_cpu_model    _("Cpu model")
 #define fake_gettext_cpu_number   _("Cpu number")
@@ -181,9 +188,12 @@ GuiMenu::GuiMenu(Window *window, bool animate) : GuiComponent(window), mMenu(win
 		if (ApiSystem::getInstance()->isScriptingSupported(ApiSystem::BATOCERASTORE) || ApiSystem::getInstance()->isScriptingSupported(ApiSystem::THEMESDOWNLOADER) ||
 			(ApiSystem::getInstance()->isScriptingSupported(ApiSystem::THEBEZELPROJECT) && ApiSystem::getInstance()->isScriptingSupported(ApiSystem::DECORATIONS)) ||
 			ApiSystem::getInstance()->isScriptingSupported(ApiSystem::UPGRADE))
-			addEntry(_("UPDATES & DOWNLOADS"), true, [this] { openUpdatesSettings(); }, "iconUpdates");
-
-		addEntry(_("SYSTEM SETTINGS").c_str(), true, [this] { openSystemSettings(); }, "iconSystem");
+			#if !NOUPDATE
+				addEntry(_("UPDATES & DOWNLOADS"), true, [this] { openUpdatesSettings(); }, "iconUpdates");
+			#else
+				addEntry(_("DOWNLOADS"), true, [this] { openUpdatesSettings(); }, "iconUpdates");
+			#endif	
+			addEntry(_("SYSTEM SETTINGS").c_str(), true, [this] { openSystemSettings(); }, "iconSystem");
 	}
 	else
 	{
@@ -815,7 +825,11 @@ void GuiMenu::openDeveloperSettings()
 
 void GuiMenu::openUpdatesSettings()
 {
-	GuiSettings *updateGui = new GuiSettings(mWindow, _("UPDATES & DOWNLOADS").c_str());
+	#if !NOUPDATE
+		GuiSettings *updateGui = new GuiSettings(mWindow, _("UPDATES & DOWNLOADS").c_str());
+	#else
+		GuiSettings *updateGui = new GuiSettings(mWindow, _("DOWNLOADS").c_str());
+	#endif
 
 	updateGui->addGroup(_("DOWNLOADS"));
 
@@ -856,6 +870,7 @@ void GuiMenu::openUpdatesSettings()
 
 	if (ApiSystem::getInstance()->isScriptingSupported(ApiSystem::UPGRADE))
 	{
+#if !NOUPDATE
 		updateGui->addGroup(_("SOFTWARE UPDATES"));
 
 		// Enable updates
@@ -871,11 +886,11 @@ void GuiMenu::openUpdatesSettings()
 
 		std::string updatesType = SystemConf::getInstance()->get("updates.type");
 
-#if WIN32
+    #if WIN32
 		if (updatesType == "unstable")
 			updatesTypeList->add("unstable", "unstable", updatesType == "unstable");
 		else
-#endif
+    #endif
 			if (updatesType.empty() || updatesType != BETA_NAME)
 				updatesType = "stable";
 
@@ -904,6 +919,7 @@ void GuiMenu::openUpdatesSettings()
 				mWindow->pushGui(new GuiUpdate(mWindow));
 			}
 		});
+#endif
 	}
 
 	mWindow->pushGui(updateGui);
diff --git a/es-core/src/utils/Platform.cpp b/es-core/src/utils/Platform.cpp
index 02024860..a42f571b 100644
--- a/es-core/src/utils/Platform.cpp
+++ b/es-core/src/utils/Platform.cpp
@@ -168,6 +168,8 @@ namespace Utils
 		{
 #ifdef WIN32 // windows
 			return system("shutdown -s -t 0");
+#elseif PIBOY
+	return system("/sbin/rmmod xpi_gamecon ; /sbin/rmmod xpi_gamecon_xrs shutdown -t1 now -h");
 #else // osx / linux	
 			return system("shutdown -h now");
 #endif
@@ -177,6 +179,8 @@ namespace Utils
 		{
 #ifdef WIN32 // windows	
 			return system("shutdown -r -t 0");
+#elseif PIBOY
+	return system("reboot");
 #else // osx / linux	
 			return system("shutdown -r now");
 #endif
@@ -398,9 +402,20 @@ namespace Utils
 				std::string fuelgaugeRootPath;
 				std::string chargerRootPath;
 
-				auto files = Utils::FileSystem::getDirContent("/sys/class/power_supply");
+	        #if PIBOY
+		        auto files = Utils::FileSystem::getDirContent("/sys/kernel");
+	        #else
+         		auto files = Utils::FileSystem::getDirContent("/sys/class/power_supply");
+	        #endif
 				for (auto file : files)
 				{
+    		#if PIBOY
+    			if (Utils::String::toLower(file).find("/xpi_gamecon") != std::string::npos)
+    			{
+    				batteryRootPath = file;
+    				break;
+    			}
+    		#else
 					if ((Utils::String::toLower(file).find("/bat") != std::string::npos) && (batteryRootPath.empty()))
 						batteryRootPath = file;
 
@@ -409,7 +424,8 @@ namespace Utils
 
 					if ((Utils::String::toLower(file).find("charger") != std::string::npos) && (chargerRootPath.empty()))
 						chargerRootPath = file;
-				}
+		    #endif
+		    }
 
 				// If there's no battery device, look for discrete charger and fuel gauge
 				if (batteryRootPath.empty())
@@ -433,8 +449,13 @@ namespace Utils
 				}
 				else
 				{
-					batteryStatusPath = batteryRootPath + "/status";
-					batteryCapacityPath = batteryRootPath + "/capacity";
+    		    #if PIBOY
+    			    batteryStatusPath = batteryRootPath + "/amps";
+    			    batteryCapacityPath = batteryRootPath + "/percent";
+    		    #else
+     			    batteryStatusPath = batteryRootPath + "/status";
+     			    batteryCapacityPath = batteryRootPath + "/capacity";
+    		    #endif
 				}
 			}
 
@@ -447,9 +468,13 @@ namespace Utils
 			else
 			{
 				ret.hasBattery = true;
+    		#if PIBOY
+        	 	ret.isCharging = (stoi(Utils::String::replace(Utils::FileSystem::readAllText(batteryStatusPath), "-", "")) < 950);
+    		#else
 				std::string chargerStatus;
 				chargerStatus = Utils::String::replace(Utils::FileSystem::readAllText(batteryStatusPath), "\n", "");
 				ret.isCharging = ((chargerStatus != "Not charging") && (chargerStatus != "Discharging"));
+    		#endif
 				// If reading from fuel gauge, we have to calculate remaining charge
 				if (batteryCapacityPath.length() <= 1)
 				{

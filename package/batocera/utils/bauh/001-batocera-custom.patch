diff '--color=auto' -uri bauh-lbrpdx/.applied_patches_list bauh-0.10.7/.applied_patches_list
--- bauh-lbrpdx/.applied_patches_list	2024-10-16 16:09:16.533415678 -0700
+++ bauh-0.10.7/.applied_patches_list	2024-10-16 17:13:40.586136183 -0700
@@ -0,0 +1,2 @@
+/build/package/batocera/utils/bauh/001-batocera-changes.patch
+/build/package/batocera/utils/bauh/001-batocera-changes.patch
diff '--color=auto' -uri bauh-lbrpdx/bauh/app.py bauh-0.10.7/bauh/app.py
--- bauh-lbrpdx/bauh/app.py	2024-01-10 12:13:03.000000000 -0800
+++ bauh-0.10.7/bauh/app.py	2024-10-16 17:13:40.586136183 -0700
@@ -13,6 +13,10 @@
 
 
 def main(tray: bool = False):
+    # __NV_PRIME_RENDER_OFFLOAD is causing a black screen on nvidia for bauh ;-(
+    if '__NV_PRIME_RENDER_OFFLOAD' in os.environ:
+        del os.environ['__NV_PRIME_RENDER_OFFLOAD']
+
     if not os.getenv('PYTHONUNBUFFERED'):
         os.environ['PYTHONUNBUFFERED'] = '1'
 
diff '--color=auto' -uri bauh-lbrpdx/bauh/gems/flatpak/controller.py bauh-0.10.7/bauh/gems/flatpak/controller.py
--- bauh-lbrpdx/bauh/gems/flatpak/controller.py	2024-01-10 12:13:03.000000000 -0800
+++ bauh-0.10.7/bauh/gems/flatpak/controller.py	2024-10-16 17:13:40.586136183 -0700
@@ -446,7 +446,8 @@
     def install(self, pkg: FlatpakApplication, root_password: Optional[str], disk_loader: DiskCacheLoader, watcher: ProcessWatcher) -> TransactionResult:
         if not self.context.root_user:
             flatpak_config = self.configman.get_config()
-            install_level = flatpak_config['installation_level']
+            # install_level = flatpak_config['installation_level']
+            install_level = 'system' #force
         else:
             install_level = 'system'
 
@@ -856,7 +857,7 @@
             file_url = self.context.get_suggestion_url(self.__module__)
 
             if not file_url:
-                file_url = 'https://raw.githubusercontent.com/vinifmor/bauh-files/master/flatpak/suggestions.txt'
+                file_url = 'https://updates.batocera.org/flatpak.suggestions'
 
             self._suggestions_file_url = file_url
 
diff '--color=auto' -uri bauh-lbrpdx/bauh/view/core/config.py bauh-0.10.7/bauh/view/core/config.py
--- bauh-lbrpdx/bauh/view/core/config.py	2024-01-10 12:13:03.000000000 -0800
+++ bauh-0.10.7/bauh/view/core/config.py	2024-10-16 17:13:40.586136183 -0700
@@ -30,7 +30,7 @@
             },
             'suggestions': {
                 'enabled': True,
-                'by_type': 15
+                'by_type': 100
             },
             'ui': {
                 'table': {
diff '--color=auto' -uri bauh-lbrpdx/bauh/view/qt/apps_table.py bauh-0.10.7/bauh/view/qt/apps_table.py
--- bauh-lbrpdx/bauh/view/qt/apps_table.py	2024-01-10 12:13:03.000000000 -0800
+++ bauh-0.10.7/bauh/view/qt/apps_table.py	2024-10-16 17:18:46.056231582 -0700
@@ -553,18 +553,18 @@
         toolbar.setObjectName('app_actions')
         toolbar.add_space()
 
-        if pkg.model.installed:
-            def run():
-                self.window.begin_launch_package(pkg)
-
-            bt = IconButton(i18n=self.i18n, action=run, tooltip=self.i18n['action.run.tooltip'])
-            bt.setObjectName('app_run')
-
-            if not pkg.model.can_be_run():
-                bt.setEnabled(False)
-                bt.setProperty('_enabled', 'false')
-
-            toolbar.layout().addWidget(bt)
+        # if pkg.model.installed:
+        #     def run():
+        #         self.window.begin_launch_package(pkg)
+        #
+        #     bt = IconButton(i18n=self.i18n, action=run, tooltip=self.i18n['action.run.tooltip'])
+        #     bt.setObjectName('app_run')
+        #
+        #     if not pkg.model.can_be_run():
+        #         bt.setEnabled(False)
+        #         bt.setProperty('_enabled', 'false')
+        #
+        #     toolbar.layout().addWidget(bt)
 
         settings = self.has_any_settings(pkg)
 
@@ -572,32 +572,32 @@
             def handle_custom_actions():
                 self.show_pkg_actions(pkg)
 
-            bt = IconButton(i18n=self.i18n, action=handle_custom_actions, tooltip=self.i18n['action.settings.tooltip'])
-            bt.setObjectName('app_actions')
-            bt.setEnabled(bool(settings))
-            toolbar.layout().addWidget(bt)
-
-        if not pkg.model.installed:
-            def show_screenshots():
-                self.window.begin_show_screenshots(pkg)
-
-            bt = IconButton(i18n=self.i18n, action=show_screenshots,
-                            tooltip=self.i18n['action.screenshots.tooltip'])
-            bt.setObjectName('app_screenshots')
-
-            if not pkg.model.has_screenshots():
-                bt.setEnabled(False)
-                bt.setProperty('_enabled', 'false')
-
-            toolbar.layout().addWidget(bt)
-
-        def show_info():
-            self.window.begin_show_info(pkg)
-
-        bt = IconButton(i18n=self.i18n, action=show_info, tooltip=self.i18n['action.info.tooltip'])
-        bt.setObjectName('app_info')
-        bt.setEnabled(bool(pkg.model.has_info()))
-        toolbar.layout().addWidget(bt)
+            # bt = IconButton(i18n=self.i18n, action=handle_custom_actions, tooltip=self.i18n['action.settings.tooltip'])
+            # bt.setObjectName('app_actions')
+            # bt.setEnabled(bool(settings))
+            # toolbar.layout().addWidget(bt)
+
+        # if not pkg.model.installed:
+        #     def show_screenshots():
+        #         self.window.begin_show_screenshots(pkg)
+        #
+        #     bt = IconButton(i18n=self.i18n, action=show_screenshots,
+        #                     tooltip=self.i18n['action.screenshots.tooltip'])
+        #     bt.setObjectName('app_screenshots')
+        #
+        #     if not pkg.model.has_screenshots():
+        #         bt.setEnabled(False)
+        #         bt.setProperty('_enabled', 'false')
+        #
+        #     toolbar.layout().addWidget(bt)
+
+        # def show_info():
+        #     self.window.begin_show_info(pkg)
+        #
+        # bt = IconButton(i18n=self.i18n, action=show_info, tooltip=self.i18n['action.info.tooltip'])
+        # bt.setObjectName('app_info')
+        # bt.setEnabled(bool(pkg.model.has_info()))
+        # toolbar.layout().addWidget(bt)
 
         self.setCellWidget(pkg.table_index, col, toolbar)
 
diff '--color=auto' -uri bauh-lbrpdx/bauh/view/qt/window.py bauh-0.10.7/bauh/view/qt/window.py
--- bauh-lbrpdx/bauh/view/qt/window.py	2024-01-10 12:13:03.000000000 -0800
+++ bauh-0.10.7/bauh/view/qt/window.py	2024-10-16 17:13:40.587136190 -0700
@@ -203,8 +203,8 @@
         self.combo_filter_type.activated.connect(self._handle_type_filter)
         self.combo_filter_type.addItem('--- {} ---'.format(self.i18n['type'].capitalize()), self.any_type_filter)
         self.combo_filter_type.sizePolicy().setRetainSizeWhenHidden(True)
-        self.toolbar_filters.layout().addWidget(self.combo_filter_type)
-        self.comp_manager.register_component(COMBO_TYPES, self.combo_filter_type)
+        # self.toolbar_filters.layout().addWidget(self.combo_filter_type)
+        # self.comp_manager.register_component(COMBO_TYPES, self.combo_filter_type)
 
         self.any_category_filter = 'any'
         self.combo_categories = QComboBox()
@@ -218,8 +218,8 @@
         self.combo_categories.activated.connect(self._handle_category_filter)
         self.combo_categories.sizePolicy().setRetainSizeWhenHidden(True)
         self.combo_categories.addItem('--- {} ---'.format(self.i18n['category'].capitalize()), self.any_category_filter)
-        self.toolbar_filters.layout().addWidget(self.combo_categories)
-        self.comp_manager.register_component(COMBO_CATEGORIES, self.combo_categories)
+        # self.toolbar_filters.layout().addWidget(self.combo_categories)
+        # self.comp_manager.register_component(COMBO_CATEGORIES, self.combo_categories)
 
         self.input_name = QSearchBar(search_callback=self.begin_apply_filters)
         self.input_name.palette().swap(self.combo_categories.palette())
@@ -228,8 +228,8 @@
         self.input_name.set_tooltip(self.i18n['manage_window.name_filter.tooltip'])
         self.input_name.set_button_tooltip(self.i18n['manage_window.name_filter.button_tooltip'])
         self.input_name.sizePolicy().setRetainSizeWhenHidden(True)
-        self.toolbar_filters.layout().addWidget(self.input_name)
-        self.comp_manager.register_component(INP_NAME, self.input_name)
+        # self.toolbar_filters.layout().addWidget(self.input_name)
+        # self.comp_manager.register_component(INP_NAME, self.input_name)
 
         self.toolbar_filters.layout().addWidget(new_spacer())
 
@@ -390,47 +390,65 @@
 
         self.container_bottom.layout().addWidget(new_spacer())
 
-        self.load_suggestions = force_suggestions or bool(config['suggestions']['enabled'])
+        # self.load_suggestions = force_suggestions or bool(config['suggestions']['enabled'])
+        self.load_suggestions = True
         self.suggestions_requested = False
 
         if self.load_suggestions:
-            bt_sugs = IconButton(action=lambda: self.begin_load_suggestions(filter_installed=True),
-                                 i18n=i18n,
-                                 tooltip=self.i18n['manage_window.bt.suggestions.tooltip'])
-            bt_sugs.setObjectName('suggestions')
-            self.container_bottom.layout().addWidget(bt_sugs)
-            self.comp_manager.register_component(BT_SUGGESTIONS, bt_sugs)
-
-        bt_themes = IconButton(self.show_themes,
-                               i18n=self.i18n,
-                               tooltip=self.i18n['manage_window.bt_themes.tip'])
-        bt_themes.setObjectName('themes')
-        self.container_bottom.layout().addWidget(bt_themes)
-        self.comp_manager.register_component(BT_THEMES, bt_themes)
-
-        self.custom_actions = [a for a in manager.gen_custom_actions()]
-        bt_custom_actions = IconButton(action=self.show_custom_actions,
-                                       i18n=self.i18n,
-                                       tooltip=self.i18n['manage_window.bt_custom_actions.tip'])
-        bt_custom_actions.setObjectName('custom_actions')
-
-        bt_custom_actions.setVisible(bool(self.custom_actions))
-        self.container_bottom.layout().addWidget(bt_custom_actions)
-        self.comp_manager.register_component(BT_CUSTOM_ACTIONS, bt_custom_actions)
-
-        bt_settings = IconButton(action=self.show_settings,
-                                 i18n=self.i18n,
-                                 tooltip=self.i18n['manage_window.bt_settings.tooltip'])
-        bt_settings.setObjectName('settings')
-        self.container_bottom.layout().addWidget(bt_settings)
-        self.comp_manager.register_component(BT_SETTINGS, bt_settings)
-
-        bt_about = IconButton(action=self._show_about,
-                              i18n=self.i18n,
-                              tooltip=self.i18n['manage_window.settings.about'])
-        bt_about.setObjectName('about')
-        self.container_bottom.layout().addWidget(bt_about)
-        self.comp_manager.register_component(BT_ABOUT, bt_about)
+        #     bt_sugs = IconButton(action=lambda: self.begin_load_suggestions(filter_installed=True),
+        #                          i18n=i18n,
+        #                          tooltip=self.i18n['manage_window.bt.suggestions.tooltip'])
+        #     bt_sugs.setObjectName('suggestions')
+        #     self.container_bottom.layout().addWidget(bt_sugs)
+        #     self.comp_manager.register_component(BT_SUGGESTIONS, bt_sugs)
+            bt_sugs = QPushButton()
+            bt_sugs.setObjectName('bt_suggest')
+            bt_sugs.setProperty('root', 'true')
+            bt_sugs.setCursor(QCursor(Qt.PointingHandCursor))
+            bt_sugs.setToolTip(i18n['manage_window.bt.suggestions.tooltip'])
+            bt_sugs.setText("Suggestions")
+            bt_sugs.clicked.connect(self.begin_load_suggestions)
+            bt_sugs.sizePolicy().setRetainSizeWhenHidden(True)
+
+        # bt_themes = IconButton(self.show_themes,
+        #                        i18n=self.i18n,
+        #                        tooltip=self.i18n['manage_window.bt_themes.tip'])
+        # bt_themes.setObjectName('themes')
+        # self.container_bottom.layout().addWidget(bt_themes)
+        # self.comp_manager.register_component(BT_THEMES, bt_themes)
+
+        self.custom_actions = [a for a in manager.gen_custom_actions()]
+        # bt_custom_actions = IconButton(action=self.show_custom_actions,
+        #                                i18n=self.i18n,
+        #                                tooltip=self.i18n['manage_window.bt_custom_actions.tip'])
+        # bt_custom_actions.setObjectName('custom_actions')
+        #
+        # bt_custom_actions.setVisible(bool(self.custom_actions))
+        # self.container_bottom.layout().addWidget(bt_custom_actions)
+        # self.comp_manager.register_component(BT_CUSTOM_ACTIONS, bt_custom_actions)
+        #
+        # bt_settings = IconButton(action=self.show_settings,
+        #                          i18n=self.i18n,
+        #                          tooltip=self.i18n['manage_window.bt_settings.tooltip'])
+        # bt_settings.setObjectName('settings')
+        # self.container_bottom.layout().addWidget(bt_settings)
+        # self.comp_manager.register_component(BT_SETTINGS, bt_settings)
+        # 
+        # bt_about = IconButton(action=self._show_about,
+        #                       i18n=self.i18n,
+        #                       tooltip=self.i18n['manage_window.settings.about'])
+        # bt_about.setObjectName('about')
+        # self.container_bottom.layout().addWidget(bt_about)
+        # self.comp_manager.register_component(BT_ABOUT, bt_about)
+        bt_close = QPushButton()
+        bt_close.setObjectName('bt_close')
+        bt_close.setProperty('root', 'true')
+        bt_close.setCursor(QCursor(Qt.PointingHandCursor))
+        bt_close.setText("Close")
+        bt_close.clicked.connect(self.close)
+        bt_close.sizePolicy().setRetainSizeWhenHidden(True)
+        self.container_bottom.layout().addWidget(bt_close)
+        self.comp_manager.register_component(BT_SUGGESTIONS, bt_close)
 
         self.layout.addWidget(self.container_bottom)
 
@@ -717,8 +735,8 @@
             self._update_categories(categories, keep_selected=True)
 
     def _update_size_limits(self):
-        self.setMinimumHeight(int(self._screen_geometry.height() * 0.5))
-        self.setMinimumWidth(int(self._screen_geometry.width() * 0.5))
+        self.setMinimumHeight(int(self._screen_geometry.height() * 0.9))
+        self.setMinimumWidth(int(self._screen_geometry.width() * 0.9))
         self.setMaximumWidth(int(self._screen_geometry.width()))
 
     def changeEvent(self, e: QEvent):

diff --git a/bauh/gems/flatpak/__init__.py b/bauh/gems/flatpak/__init__.py
index 0f6ec4c..31d32b0 100644
--- a/bauh/gems/flatpak/__init__.py
+++ b/bauh/gems/flatpak/__init__.py
@@ -9,7 +9,7 @@ from bauh.api.paths import CONFIG_DIR
 from bauh.commons import resource
 
 ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
-SUGGESTIONS_FILE = f'https://raw.githubusercontent.com/vinifmor/{__app_name__}-files/master/flatpak/suggestions.txt'
+SUGGESTIONS_FILE = f'https://updates.batocera.org/flatpak.suggestions'
 CONFIG_FILE = f'{CONFIG_DIR}/flatpak.yml'
 FLATPAK_CONFIG_DIR = f'{CONFIG_DIR}/flatpak'
 UPDATES_IGNORED_FILE = f'{FLATPAK_CONFIG_DIR}/updates_ignored.txt'
diff --git a/bauh/gems/flatpak/controller.py b/bauh/gems/flatpak/controller.py
index d0bff64..9b221c1 100644
--- a/bauh/gems/flatpak/controller.py
+++ b/bauh/gems/flatpak/controller.py
@@ -378,6 +378,7 @@ class FlatpakManager(SoftwareManager):
         if not self.context.root_user:
             flatpak_config = self.configman.get_config()
             install_level = flatpak_config['installation_level']
+            install_level = "system" # force
         else:
             install_level = 'system'
 
diff --git a/bauh/view/qt/apps_table.py b/bauh/view/qt/apps_table.py
index 92afff8..824fdbf 100644
--- a/bauh/view/qt/apps_table.py
+++ b/bauh/view/qt/apps_table.py
@@ -9,6 +9,7 @@ from PyQt5.QtGui import QPixmap, QIcon, QCursor
 from PyQt5.QtNetwork import QNetworkAccessManager, QNetworkRequest, QNetworkReply
 from PyQt5.QtWidgets import QTableWidget, QTableView, QMenu, QToolButton, QWidget, \
     QHeaderView, QLabel, QHBoxLayout, QToolBar, QSizePolicy
+from PyQt5.QtWidgets import QPushButton
 
 from bauh.api.abstract.cache import MemoryCache
 from bauh.api.abstract.model import PackageStatus, CustomSoftwareAction
@@ -521,18 +522,18 @@ class PackagesTable(QTableWidget):
         toolbar.setObjectName('app_actions')
         toolbar.add_space()
 
-        if pkg.model.installed:
-            def run():
-                self.window.begin_launch_package(pkg)
-
-            bt = IconButton(i18n=self.i18n, action=run, tooltip=self.i18n['action.run.tooltip'])
-            bt.setObjectName('app_run')
-
-            if not pkg.model.can_be_run():
-                bt.setEnabled(False)
-                bt.setProperty('_enabled', 'false')
-
-            toolbar.layout().addWidget(bt)
+        #if pkg.model.installed:
+        #    def run():
+        #        self.window.begin_launch_package(pkg)
+        #
+        #    bt = IconButton(i18n=self.i18n, action=run, tooltip=self.i18n['action.run.tooltip'])
+        #    bt.setObjectName('app_run')
+        #
+        #    if not pkg.model.can_be_run():
+        #        bt.setEnabled(False)
+        #        bt.setProperty('_enabled', 'false')
+        #
+        #    toolbar.layout().addWidget(bt)
 
         settings = self.has_any_settings(pkg)
 
@@ -540,32 +541,41 @@ class PackagesTable(QTableWidget):
             def handle_custom_actions():
                 self.show_pkg_actions(pkg)
 
-            bt = IconButton(i18n=self.i18n, action=handle_custom_actions, tooltip=self.i18n['action.settings.tooltip'])
-            bt.setObjectName('app_actions')
-            bt.setEnabled(bool(settings))
-            toolbar.layout().addWidget(bt)
+            #bt = IconButton(i18n=self.i18n, action=handle_custom_actions, tooltip=self.i18n['action.settings.tooltip'])
+            #bt.setObjectName('app_actions')
+            #bt.setEnabled(bool(settings))
+            #toolbar.layout().addWidget(bt)
 
         if not pkg.model.installed:
             def show_screenshots():
                 self.window.begin_show_screenshots(pkg)
 
-            bt = IconButton(i18n=self.i18n, action=show_screenshots,
-                            tooltip=self.i18n['action.screenshots.tooltip'])
-            bt.setObjectName('app_screenshots')
+            #bt = IconButton(i18n=self.i18n, action=show_screenshots,
+            #                tooltip=self.i18n['action.screenshots.tooltip'])
+            #bt.setObjectName('app_screenshots')
 
+            bt = QPushButton()
+            bt.setObjectName('app_screenshots')
+            bt.setProperty('root', 'true')
+            bt.setCursor(QCursor(Qt.PointingHandCursor))
+            bt.setToolTip(self.i18n['action.screenshots.tooltip'])
+            bt.setText("Screenshots")
+            bt.clicked.connect(show_screenshots)
+            bt.sizePolicy().setRetainSizeWhenHidden(True)
+            
             if not pkg.model.has_screenshots():
                 bt.setEnabled(False)
                 bt.setProperty('_enabled', 'false')
 
             toolbar.layout().addWidget(bt)
 
-        def show_info():
-            self.window.begin_show_info(pkg)
-
-        bt = IconButton(i18n=self.i18n, action=show_info, tooltip=self.i18n['action.info.tooltip'])
-        bt.setObjectName('app_info')
-        bt.setEnabled(bool(pkg.model.has_info()))
-        toolbar.layout().addWidget(bt)
+        #def show_info():
+        #    self.window.begin_show_info(pkg)
+        #
+        #bt = IconButton(i18n=self.i18n, action=show_info, tooltip=self.i18n['action.info.tooltip'])
+        #bt.setObjectName('app_info')
+        #bt.setEnabled(bool(pkg.model.has_info()))
+        #toolbar.layout().addWidget(bt)
 
         self.setCellWidget(pkg.table_index, col, toolbar)
 
diff --git a/bauh/view/qt/screenshots.py b/bauh/view/qt/screenshots.py
index 1f25570..85f1f82 100644
--- a/bauh/view/qt/screenshots.py
+++ b/bauh/view/qt/screenshots.py
@@ -77,6 +77,13 @@ class ScreenshotsDialog(QDialog):
         self.bt_next.clicked.connect(self.next)
         self.container_buttons.layout().addWidget(self.bt_next)
 
+        self.bt_close = QPushButton("Close")
+        self.bt_close.setObjectName('close')
+        self.bt_close.setProperty('control', 'true')
+        self.bt_close.setCursor(QCursor(Qt.PointingHandCursor))
+        self.bt_close.clicked.connect(self.close)
+        self.container_buttons.layout().addWidget(self.bt_close)
+
         self.layout().addWidget(self.container_buttons)
 
         self.img_idx = 0
diff --git a/bauh/view/qt/window.py b/bauh/view/qt/window.py
index f7064c2..6444fc7 100755
--- a/bauh/view/qt/window.py
+++ b/bauh/view/qt/window.py
@@ -177,8 +177,8 @@ class ManageWindow(QWidget):
         self.combo_filter_type.activated.connect(self._handle_type_filter)
         self.combo_filter_type.addItem('--- {} ---'.format(self.i18n['type'].capitalize()), self.any_type_filter)
         self.combo_filter_type.sizePolicy().setRetainSizeWhenHidden(True)
-        self.toolbar_filters.layout().addWidget(self.combo_filter_type)
-        self.comp_manager.register_component(COMBO_TYPES, self.combo_filter_type)
+        #self.toolbar_filters.layout().addWidget(self.combo_filter_type)
+        #self.comp_manager.register_component(COMBO_TYPES, self.combo_filter_type)
 
         self.any_category_filter = 'any'
         self.combo_categories = QComboBox()
@@ -192,8 +192,8 @@ class ManageWindow(QWidget):
         self.combo_categories.activated.connect(self._handle_category_filter)
         self.combo_categories.sizePolicy().setRetainSizeWhenHidden(True)
         self.combo_categories.addItem('--- {} ---'.format(self.i18n['category'].capitalize()), self.any_category_filter)
-        self.toolbar_filters.layout().addWidget(self.combo_categories)
-        self.comp_manager.register_component(COMBO_CATEGORIES, self.combo_categories)
+        #self.toolbar_filters.layout().addWidget(self.combo_categories)
+        #self.comp_manager.register_component(COMBO_CATEGORIES, self.combo_categories)
 
         self.input_name = QSearchBar(search_callback=self.begin_apply_filters)
         self.input_name.palette().swap(self.combo_categories.palette())
@@ -202,8 +202,8 @@ class ManageWindow(QWidget):
         self.input_name.set_tooltip(self.i18n['manage_window.name_filter.tooltip'])
         self.input_name.set_button_tooltip(self.i18n['manage_window.name_filter.button_tooltip'])
         self.input_name.sizePolicy().setRetainSizeWhenHidden(True)
-        self.toolbar_filters.layout().addWidget(self.input_name)
-        self.comp_manager.register_component(INP_NAME, self.input_name)
+        #self.toolbar_filters.layout().addWidget(self.input_name)
+        #self.comp_manager.register_component(INP_NAME, self.input_name)
 
         self.toolbar_filters.layout().addWidget(new_spacer())
 
@@ -232,7 +232,7 @@ class ManageWindow(QWidget):
         toolbar_bts.append(bt_ref)
         self.toolbar_filters.layout().addWidget(bt_ref)
         self.comp_manager.register_component(BT_REFRESH, bt_ref)
-
+        
         self.bt_upgrade = QPushButton()
         self.bt_upgrade.setProperty('root', 'true')
         self.bt_upgrade.setObjectName('bt_upgrade')
@@ -359,43 +359,66 @@ class ManageWindow(QWidget):
         self.container_bottom.layout().addWidget(new_spacer())
 
         if config['suggestions']['enabled']:
-            bt_sugs = IconButton(action=lambda: self._begin_load_suggestions(filter_installed=True),
-                                 i18n=i18n,
-                                 tooltip=self.i18n['manage_window.bt.suggestions.tooltip'])
-            bt_sugs.setObjectName('suggestions')
+            #bt_sugs = IconButton(action=lambda: self._begin_load_suggestions(filter_installed=True),
+            #                     i18n=i18n,
+            #                     tooltip=self.i18n['manage_window.bt.suggestions.tooltip'])
+            #bt_sugs.setObjectName('suggestions')
+
+            bt_sugs = QPushButton()
+            bt_sugs.setObjectName('bt_suggest')
+            bt_sugs.setProperty('root', 'true')
+            bt_sugs.setCursor(QCursor(Qt.PointingHandCursor))
+            bt_sugs.setToolTip(i18n['manage_window.bt.suggestions.tooltip'])
+            #bt_sugs.setText(self.i18n['manage_window.bt.suggestions.text'])
+            bt_sugs.setText("Suggestions")
+            bt_sugs.clicked.connect(self._begin_load_suggestions)
+            bt_sugs.sizePolicy().setRetainSizeWhenHidden(True)
+            
             self.container_bottom.layout().addWidget(bt_sugs)
             self.comp_manager.register_component(BT_SUGGESTIONS, bt_sugs)
 
-        bt_themes = IconButton(self.show_themes,
-                               i18n=self.i18n,
-                               tooltip=self.i18n['manage_window.bt_themes.tip'])
-        bt_themes.setObjectName('themes')
-        self.container_bottom.layout().addWidget(bt_themes)
-        self.comp_manager.register_component(BT_THEMES, bt_themes)
+        #bt_themes = IconButton(self.show_themes,
+        #                       i18n=self.i18n,
+        #                       tooltip=self.i18n['manage_window.bt_themes.tip'])
+        #bt_themes.setObjectName('themes')
+        #self.container_bottom.layout().addWidget(bt_themes)
+        #self.comp_manager.register_component(BT_THEMES, bt_themes)
 
         self.custom_actions = [a for a in manager.gen_custom_actions()]
-        bt_custom_actions = IconButton(action=self.show_custom_actions,
-                                       i18n=self.i18n,
-                                       tooltip=self.i18n['manage_window.bt_custom_actions.tip'])
-        bt_custom_actions.setObjectName('custom_actions')
-
-        bt_custom_actions.setVisible(bool(self.custom_actions))
-        self.container_bottom.layout().addWidget(bt_custom_actions)
-        self.comp_manager.register_component(BT_CUSTOM_ACTIONS, bt_custom_actions)
-
-        bt_settings = IconButton(action=self.show_settings,
-                                 i18n=self.i18n,
-                                 tooltip=self.i18n['manage_window.bt_settings.tooltip'])
-        bt_settings.setObjectName('settings')
-        self.container_bottom.layout().addWidget(bt_settings)
-        self.comp_manager.register_component(BT_SETTINGS, bt_settings)
-
-        bt_about = IconButton(action=self._show_about,
-                              i18n=self.i18n,
-                              tooltip=self.i18n['manage_window.settings.about'])
-        bt_about.setObjectName('about')
-        self.container_bottom.layout().addWidget(bt_about)
-        self.comp_manager.register_component(BT_ABOUT, bt_about)
+        #bt_custom_actions = IconButton(action=self.show_custom_actions,
+        #                               i18n=self.i18n,
+        #                               tooltip=self.i18n['manage_window.bt_custom_actions.tip'])
+        #bt_custom_actions.setObjectName('custom_actions')
+        #
+        #bt_custom_actions.setVisible(bool(self.custom_actions))
+        #self.container_bottom.layout().addWidget(bt_custom_actions)
+        #self.comp_manager.register_component(BT_CUSTOM_ACTIONS, bt_custom_actions)
+        #
+        #bt_settings = IconButton(action=self.show_settings,
+        #                         i18n=self.i18n,
+        #                         tooltip=self.i18n['manage_window.bt_settings.tooltip'])
+        #bt_settings.setObjectName('settings')
+        #self.container_bottom.layout().addWidget(bt_settings)
+        #self.comp_manager.register_component(BT_SETTINGS, bt_settings)
+        #
+        #bt_about = IconButton(action=self._show_about,
+        #                      i18n=self.i18n,
+        #                      tooltip=self.i18n['manage_window.settings.about'])
+        #bt_about.setObjectName('about')
+        #self.container_bottom.layout().addWidget(bt_about)
+        #self.comp_manager.register_component(BT_ABOUT, bt_about)
+
+        bt_close = QPushButton()
+        bt_close.setObjectName('bt_close')
+        bt_close.setProperty('root', 'true')
+        bt_close.setCursor(QCursor(Qt.PointingHandCursor))
+        #bt_close.setToolTip(i18n['manage_window.bt.close.tooltip'])
+        #bt_close.setText(self.i18n['manage_window.bt.suggestions.text'])
+        bt_close.setText("Close")
+        bt_close.clicked.connect(self.close)
+        bt_close.sizePolicy().setRetainSizeWhenHidden(True)
+        self.container_bottom.layout().addWidget(bt_close)
+        self.comp_manager.register_component(BT_SUGGESTIONS, bt_close)
 
         self.layout.addWidget(self.container_bottom)
 
@@ -437,8 +460,8 @@ class ManageWindow(QWidget):
 
         self.thread_load_installed = NotifyInstalledLoaded()
         self.thread_load_installed.signal_loaded.connect(self._finish_loading_installed)
-        self.setMinimumHeight(int(screen_size.height() * 0.5))
-        self.setMinimumWidth(int(screen_size.width() * 0.6))
+        self.setMinimumHeight(int(screen_size.height() * 0.9))
+        self.setMinimumWidth(int(screen_size.width() * 0.9))
         self._register_groups()
 
     def _register_groups(self):
@@ -844,7 +867,8 @@ class ManageWindow(QWidget):
             if len(self.pkgs) == 0 and len(self.pkgs_available) == 0:
                 self.label_displayed.setText('')
             else:
-                self.label_displayed.setText('{} / {}'.format(len(self.pkgs), len(self.pkgs_available)))
+                #self.label_displayed.setText('{} / {}'.format(len(self.pkgs), len(self.pkgs_available)))
+                self.label_displayed.setText('')
         else:
             self.label_displayed.hide()
 

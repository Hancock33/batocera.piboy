diff --git a/src/hud_elements.cpp b/src/hud_elements.cpp
index 6ba6f97..c6db8db 100644
--- a/src/hud_elements.cpp
+++ b/src/hud_elements.cpp
@@ -17,6 +17,8 @@
 #define CHAR_CELSIUS    "\xe2\x84\x83"
 #define CHAR_FAHRENHEIT "\xe2\x84\x89"
 
+#include "loadTextures.cpp"
+
 // Cut from https://github.com/ocornut/imgui/pull/2943
 // Probably move to ImGui
 float SRGBToLinear(float in)
@@ -611,6 +613,57 @@ void HudElements::custom_text_center(){
     ImGui::PopFont();
 }
 
+void HudElements::image(){
+    const std::string& value = HUDElements.ordered_functions[HUDElements.place].second;
+
+    // load the image if needed
+    if(HUDElements.image_infos.loaded == false) {
+      HUDElements.image_infos.loaded = true;
+      if (!HUDElements.is_vulkan) {
+	unsigned maxwidth = HUDElements.params->width;
+	if(HUDElements.params->image_max_width != 0 && HUDElements.params->image_max_width < maxwidth) {
+	  maxwidth = HUDElements.params->image_max_width;
+	}
+        HUDElements.image_infos.valid = GL_LoadTextureFromFile(value.c_str(),
+							       &(HUDElements.image_infos.texture),
+							       &(HUDElements.image_infos.width),
+							       &(HUDElements.image_infos.height),
+							       maxwidth);
+	spdlog::info("Image {} loaded ({}x{})", value, HUDElements.image_infos.width, HUDElements.image_infos.height);
+      }
+    }
+
+    // render the image
+    if(HUDElements.image_infos.valid) {
+      ImGui::TableNextRow(); ImGui::TableNextColumn();
+      ImGui::PushFont(HUDElements.sw_stats->font1);
+      ImGui::Image((void*)(intptr_t)(HUDElements.image_infos.texture), ImVec2(HUDElements.image_infos.width, HUDElements.image_infos.height));
+      ImGui::PopFont();
+    }
+}
+
+void HudElements::background_image(){
+    const std::string& value = HUDElements.ordered_functions[HUDElements.place].second;
+
+    // load the image if needed
+    if(HUDElements.background_image_infos.loaded == false) {
+      HUDElements.background_image_infos.loaded = true;
+      if (!HUDElements.is_vulkan) {
+        HUDElements.background_image_infos.valid = GL_LoadTextureFromFile(value.c_str(),
+							       &(HUDElements.background_image_infos.texture),
+							       &(HUDElements.background_image_infos.width),
+							       &(HUDElements.background_image_infos.height),
+							       0);
+	spdlog::info("Image {} loaded ({}x{})", value, HUDElements.background_image_infos.width, HUDElements.background_image_infos.height);
+      }
+    }
+
+    // render the image
+    if(HUDElements.background_image_infos.valid) {
+      ImGui::GetBackgroundDrawList()->AddImage((void*)(intptr_t)(HUDElements.background_image_infos.texture), ImVec2(0, 0), ImVec2(HUDElements.background_image_infos.width, HUDElements.background_image_infos.height));
+    }
+}
+
 void HudElements::custom_text(){
     ImGui::TableNextRow(); ImGui::TableNextColumn();
     ImGui::PushFont(HUDElements.sw_stats->font1);
@@ -841,6 +894,8 @@ void HudElements::sort_elements(const std::pair<std::string, std::string>& optio
     if (param == "resolution")      { ordered_functions.push_back({resolution, value});             }
     if (param == "show_fps_limit")  { ordered_functions.push_back({show_fps_limit, value});         }
     if (param == "custom_text")     { ordered_functions.push_back({custom_text, value});            }
+    if (param == "background_image") { ordered_functions.push_back({background_image, value});      }
+    if (param == "image")           { ordered_functions.push_back({image, value});                  }
     if (param == "custom_text_center")  { ordered_functions.push_back({custom_text_center, value}); }
     if (param == "gamemode")        { ordered_functions.push_back({gamemode, value});               }
     if (param == "vkbasalt")        { ordered_functions.push_back({vkbasalt, value});               }
diff --git a/src/hud_elements.h b/src/hud_elements.h
index 6b001a6..73f839d 100644
--- a/src/hud_elements.h
+++ b/src/hud_elements.h
@@ -5,9 +5,31 @@
 #include <imgui.h>
 #include "timing.hpp"
 
+#include <glad/glad.h>
+
+struct image_infos {
+  std::string path;
+  int width;
+  int height;
+  bool loaded;
+  bool valid;
+  GLuint texture;
+
+  image_infos() {
+    loaded = false;
+    valid  = false;
+  }
+
+  ~image_infos() {
+  }
+};
+
+
 struct overlay_params;
 class HudElements{
     public:
+        struct image_infos image_infos;
+	struct image_infos background_image_infos;
         struct swapchain_stats *sw_stats;
         struct overlay_params *params;
         struct exec_entry {
@@ -53,6 +75,8 @@ class HudElements{
         static void show_fps_limit();
         static void custom_text_center();
         static void custom_text();
+        static void image();
+	static void background_image();
         static void vkbasalt();
         static void gamemode();
         static void graphs();
diff --git a/src/overlay_params.cpp b/src/overlay_params.cpp
index bac9403..47b41a5 100644
--- a/src/overlay_params.cpp
+++ b/src/overlay_params.cpp
@@ -419,6 +419,9 @@ parse_gl_size_query(const char *str)
 #define parse_blacklist(s) parse_str_tokenize(s)
 #define parse_custom_text_center(s) parse_str(s)
 #define parse_custom_text(s) parse_str(s)
+#define parse_background_image(s) parse_str(s)
+#define parse_image(s) parse_str(s)
+#define parse_image_max_width(s) parse_unsigned(s)
 #define parse_fps_value(s) parse_load_value(s)
 #define parse_fps_color(s) parse_load_color(s)
 #define parse_battery_color(s) parse_color(s)
@@ -610,8 +613,7 @@ parse_overlay_config(struct overlay_params *params,
    params->fps_value = { 30, 60 };
    params->round_corners = 0;
    params->battery_color =0xff9078;
-
-
+   params->image_max_width = 0;
 
 #ifdef HAVE_X11
    params->toggle_hud = { XK_Shift_R, XK_F12 };
diff --git a/src/overlay_params.h b/src/overlay_params.h
index 36aef58..2a3673f 100644
--- a/src/overlay_params.h
+++ b/src/overlay_params.h
@@ -68,6 +68,9 @@ typedef unsigned long KeySym;
    OVERLAY_PARAM_BOOL(fps_color_change)              \
    OVERLAY_PARAM_BOOL(custom_text_center)            \
    OVERLAY_PARAM_BOOL(custom_text)                   \
+   OVERLAY_PARAM_CUSTOM(background_image)            \
+   OVERLAY_PARAM_CUSTOM(image)                       \
+   OVERLAY_PARAM_CUSTOM(image_max_width)             \
    OVERLAY_PARAM_BOOL(exec)                          \
    OVERLAY_PARAM_BOOL(vkbasalt)                      \
    OVERLAY_PARAM_BOOL(gamemode)                      \
@@ -239,6 +242,9 @@ struct overlay_params {
    uint32_t font_glyph_ranges;
    std::string custom_text_center;
    std::string custom_text;
+   std::string background_image;
+   std::string image;
+   unsigned image_max_width;
    std::string config_file_path;
    std::unordered_map<std::string,std::string> options;
    int permit_upload;

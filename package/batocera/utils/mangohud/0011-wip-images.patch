From 9da9931f85db41f758ed901a933849cde52e2171 Mon Sep 17 00:00:00 2001
From: jackun <jack.un@gmail.com>
Date: Sat, 18 Jun 2022 14:07:43 +0300
Subject: [PATCH 11/14] wip images

---
 src/config.cpp         |  10 +-
 src/gl/gl_hud.cpp      |  71 ++++++++++-
 src/hud_elements.cpp   |  72 ++---------
 src/hud_elements.h     |  16 +--
 src/keybinds.cpp       |   8 +-
 src/notify.cpp         |  14 +--
 src/overlay_params.cpp | 112 ++++++++++-------
 src/overlay_params.h   |  34 +++---
 src/vulkan.cpp         | 265 ++++++++++++++++++++++++++---------------
 9 files changed, 355 insertions(+), 247 deletions(-)

diff --git a/src/config.cpp b/src/config.cpp
index 66b5b52..84b3899 100644
--- a/src/config.cpp
+++ b/src/config.cpp
@@ -11,7 +11,7 @@
 #include "string_utils.h"
 #include "hud_elements.h"
 
-static void parseConfigLine(std::string line, std::unordered_map<std::string, std::string>& options) {
+static void parseConfigLine(std::string line, std::vector<std::pair<std::string, std::string>>& options) {
     std::string param, value;
 
     if (line.find("#") != std::string::npos)
@@ -27,8 +27,7 @@ static void parseConfigLine(std::string line, std::unordered_map<std::string, st
     trim(param);
     trim(value);
     if (!param.empty()){
-        HUDElements.options.push_back({param, value});
-        options[param] = value;
+        options.push_back({param, value});
     }
 }
 
@@ -92,8 +91,7 @@ static void enumerate_config_files(std::vector<std::string>& paths) {
 }
 
 void parseConfigFile(overlay_params& params) {
-    HUDElements.options.clear();
-    params.options.clear();
+    params.option_pairs.clear();
     std::vector<std::string> paths;
     const char *cfg_file = getenv("MANGOHUD_CONFIGFILE");
 
@@ -117,7 +115,7 @@ void parseConfigFile(overlay_params& params) {
         SPDLOG_INFO("parsing config: '{}'", *p);
         while (std::getline(stream, line))
         {
-            parseConfigLine(line, params.options);
+            parseConfigLine(line, params.option_pairs);
         }
         params.config_file_path = *p;
         return;
diff --git a/src/gl/gl_hud.cpp b/src/gl/gl_hud.cpp
index 8885a22..eb00f09 100644
--- a/src/gl/gl_hud.cpp
+++ b/src/gl/gl_hud.cpp
@@ -13,6 +13,7 @@
 #include "file_utils.h"
 #include "notify.h"
 #include "blacklist.h"
+#include "load_textures.h"
 
 #ifdef HAVE_DBUS
 #include "dbus_info.h"
@@ -54,7 +55,8 @@ struct state {
 static GLVec last_vp {}, last_sb {};
 swapchain_stats sw_stats {};
 static size_t font_params_hash = 0;
-// static size_t image_params_hash = 0;
+static size_t image_params_hash = 0;
+static std::vector<GLuint> images;
 static state state;
 static uint32_t vendorID;
 static std::string deviceName;
@@ -65,21 +67,75 @@ static ImVec2 window_size;
 static bool inited = false;
 // overlay_params params {};
 
+
 // seems to quit by itself though
 static std::unique_ptr<notify_thread, std::function<void(notify_thread *)>>
     stop_it(&notifier, [](notify_thread *n){ stop_notifier(*n); });
 
+static void check_images(overlay_params& params)
+{
+    if (params.image_params_hash == image_params_hash)
+        return;
+    image_params_hash = params.image_params_hash;
+
+    for (auto& tex : images)
+    {
+        SPDLOG_DEBUG("Delete image: {}", tex);
+        glDeleteTextures(1, (GLuint*)&tex);
+    }
+    images.clear();
+
+    unsigned maxwidth = params.width;
+    if (params.image_max_width != 0 && params.image_max_width < maxwidth) {
+        maxwidth = params.image_max_width;
+    }
+
+    GLuint tex = 0;
+    for (auto& o : params.option_pairs)
+    {
+        if (o.first == "image" && !o.second.empty())
+        {
+            auto& ti = HUDElements.images[o.second];
+//             ti.path = o.second;
+            ti.valid = GL_LoadTextureFromFile(o.second.c_str(),
+                                            &tex,
+                                            &(ti.width),
+                                            &(ti.height),
+                                            maxwidth);
+            ti.loaded = true;
+            ti.texture = (ImTextureID)(intptr_t)tex;
+            images.push_back(tex);
+        }
+    }
+
+    if (!params.background_image.empty())
+    {
+        auto& ti = HUDElements.images[params.background_image];
+//         ti.path = params.background_image;
+        ti.valid = GL_LoadTextureFromFile(params.background_image.c_str(),
+                                        &tex,
+                                        &(ti.width),
+                                        &(ti.height),
+                                        0);
+        ti.loaded = true;
+        ti.texture = (ImTextureID)(intptr_t)tex;
+        images.push_back(tex);
+    }
+
+}
+
 void imgui_init()
 {
     if (cfg_inited)
         return;
 
     init_spdlog();
-    auto w = g_overlay_params.get();
-    parse_overlay_config(&w.params, getenv("MANGOHUD_CONFIG"));
+
+    overlay_params params;
+    parse_overlay_config(&params, getenv("MANGOHUD_CONFIG"));
 
     //check for blacklist item in the config file
-   for (auto& item : w.params.blacklist) {
+   for (auto& item : params.blacklist) {
       add_blacklist(item);
    }
 
@@ -100,13 +156,15 @@ void imgui_init()
         }
     }
 
+    g_overlay_params = params;
     is_blacklisted(true);
     notifier.params = &g_overlay_params;
     start_notifier(notifier);
-    window_size = ImVec2(w.params.width, w.params.height);
+    window_size = ImVec2(params.width, params.height);
     init_system_info();
     cfg_inited = true;
-    init_cpu_stats(w.params);
+    init_cpu_stats(params);
+    images.reserve(10);
 }
 
 //static
@@ -217,6 +275,7 @@ void imgui_render(unsigned int width, unsigned int height)
         create_fonts(nullptr, w.params, sw_stats.font1, sw_stats.font_text);
         ImGui_ImplOpenGL3_CreateFontsTexture();
     }
+    check_images(w.params);
 
     ImGui_ImplOpenGL3_NewFrame();
     ImGui::NewFrame();
diff --git a/src/hud_elements.cpp b/src/hud_elements.cpp
index b36c761..c78d9fd 100644
--- a/src/hud_elements.cpp
+++ b/src/hud_elements.cpp
@@ -678,71 +678,25 @@ void HudElements::custom_text_center(){
 void HudElements::image(){
     const std::string& value = HUDElements.ordered_functions[HUDElements.place].second;
 
-    // load the image if needed
-    if (HUDElements.image_infos.loaded == false) {
-        unsigned maxwidth = HUDElements.params->width;
-        if (HUDElements.params->image_max_width != 0 && HUDElements.params->image_max_width < maxwidth) {
-            maxwidth = HUDElements.params->image_max_width;
-        }
-
-        HUDElements.image_infos.loaded = true;
-        if (HUDElements.is_vulkan) {
-#ifdef HAVE_VULKAN
-            if ((HUDElements.image_infos.texture = add_texture(HUDElements.sw_stats, value, &(HUDElements.image_infos.width), &(HUDElements.image_infos.height), maxwidth)))
-                HUDElements.image_infos.valid = true;
-#endif
-        } else {
-            HUDElements.image_infos.valid = GL_LoadTextureFromFile(value.c_str(),
-                                                                reinterpret_cast<unsigned int*>(&(HUDElements.image_infos.texture)),
-                                                                &(HUDElements.image_infos.width),
-                                                                &(HUDElements.image_infos.height),
-                                                                maxwidth);
-        }
-
-        if (HUDElements.image_infos.valid)
-            SPDLOG_INFO("Image {} loaded ({}x{})", value, HUDElements.image_infos.width, HUDElements.image_infos.height);
-        else
-            SPDLOG_WARN("Failed to load image: {}", value);
-    }
+    auto& image_info = HUDElements.images[value];
+    if (!image_info.loaded)
+        return;
 
-    // render the image
-    if (HUDElements.image_infos.valid) {
-        ImGui::TableNextRow(); ImGui::TableNextColumn();
-        ImGui::Image(HUDElements.image_infos.texture, ImVec2(HUDElements.image_infos.width, HUDElements.image_infos.height));
-    }
+    ImGui::TableNextRow(); ImGui::TableNextColumn();
+    ImGui::Image(image_info.texture, ImVec2(image_info.width, image_info.height));
 }
 
 void HudElements::background_image(){
-    const std::string& value = HUDElements.params->background_image;
-
-    // load the image if needed
-    if (HUDElements.background_image_infos.loaded == false) {
-        HUDElements.background_image_infos.loaded = true;
-        if (HUDElements.is_vulkan) {
-#ifdef HAVE_VULKAN
-            if ((HUDElements.background_image_infos.texture = add_texture(HUDElements.sw_stats, value, &(HUDElements.background_image_infos.width), &(HUDElements.background_image_infos.height), 0)))
-                HUDElements.background_image_infos.valid = true;
-#endif
-        } else {
-            HUDElements.background_image_infos.valid = GL_LoadTextureFromFile(value.c_str(),
-                                                                            reinterpret_cast<unsigned int*>(&(HUDElements.background_image_infos.texture)),
-                                                                            &(HUDElements.background_image_infos.width),
-                                                                            &(HUDElements.background_image_infos.height),
-                                                                            0);
-        }
+    const std::string& value = HUDElements.ordered_functions[HUDElements.place].second;
 
-        if (HUDElements.background_image_infos.valid)
-            SPDLOG_INFO("Image {} loaded ({}x{})", value, HUDElements.background_image_infos.width, HUDElements.background_image_infos.height);
-        else
-            SPDLOG_WARN("Failed to load image: {}", value);
-    }
+    auto& image_info = HUDElements.images[value];
+    if (!image_info.loaded)
+        return;
 
-    // render the image
-    if (HUDElements.background_image_infos.valid) {
-        ImGui::GetBackgroundDrawList()->AddImage(HUDElements.background_image_infos.texture,
-                                                 ImVec2(0, 0),
-                                                 ImVec2(HUDElements.background_image_infos.width, HUDElements.background_image_infos.height));
-    }
+    ImGui::GetBackgroundDrawList()->AddImage(image_info.texture,
+                                                ImVec2(0, 0),
+//                                              ImVec2(image_info.width, image_info.height));
+                                            ImGui::GetIO().DisplaySize);
 }
 
 void HudElements::custom_text(){
diff --git a/src/hud_elements.h b/src/hud_elements.h
index 4e11557..e52764c 100644
--- a/src/hud_elements.h
+++ b/src/hud_elements.h
@@ -1,33 +1,24 @@
 #pragma once
 #include <vector>
+#include <map>
 #include <string>
 #include <utility>
 #include <imgui.h>
 #include "timing.hpp"
 
 struct image_infos {
-  std::string path;
+//   std::string path;
   int width;
   int height;
   bool loaded;
   bool valid;
   ImTextureID texture;
-
-  image_infos() {
-    loaded = false;
-    valid  = false;
-  }
-
-  ~image_infos() {
-  }
 };
 
-
 struct overlay_params;
 class HudElements{
     public:
-        struct image_infos image_infos;
-        struct image_infos background_image_infos;
+        std::unordered_map<std::string, image_infos> images;
         struct swapchain_stats *sw_stats;
         struct overlay_params *params;
         struct exec_entry {
@@ -42,7 +33,6 @@ class HudElements{
         int place;
         int text_column = 1;
         Clock::time_point last_exec;
-        std::vector<std::pair<std::string, std::string>> options;
         std::vector<std::pair<void(*)(), std::string >> ordered_functions;
         int min, max, gpu_core_max, gpu_mem_max, cpu_temp_max, gpu_temp_max;
         const std::vector<std::string> permitted_params = {
diff --git a/src/keybinds.cpp b/src/keybinds.cpp
index a6a8af0..94fe438 100644
--- a/src/keybinds.cpp
+++ b/src/keybinds.cpp
@@ -57,9 +57,11 @@ void check_keybinds(struct overlay_params& params, uint32_t vendorID){
 
    if (elapsedReloadCfg >= keyPressDelay &&
        keys_are_pressed(params.reload_cfg)) {
-      overlay_params temp;
-      parse_overlay_config(&temp, getenv("MANGOHUD_CONFIG"));
-      g_overlay_params = temp;
+      std::thread([](){
+         overlay_params temp;
+         parse_overlay_config(&temp, getenv("MANGOHUD_CONFIG"));
+         g_overlay_params = temp;
+      }).detach();
       reload_cfg_press = now;
    }
 
diff --git a/src/notify.cpp b/src/notify.cpp
index 61c9c8a..3504fdc 100644
--- a/src/notify.cpp
+++ b/src/notify.cpp
@@ -27,15 +27,15 @@ static void fileChanged(notify_thread *nt) {
                 std::this_thread::sleep_for(std::chrono::milliseconds(100));
                 overlay_params local_params;
                 parse_overlay_config(&local_params, getenv("MANGOHUD_CONFIG"));
-                auto w = nt->params->get();
-                if ((event->mask & IN_DELETE_SELF) || (w.params.config_file_path != local_params.config_file_path)) {
-                    SPDLOG_DEBUG("Watching config file: {}", local_params.config_file_path.c_str());
-                    inotify_rm_watch(nt->fd, nt->wd);
-                    nt->wd = inotify_add_watch(nt->fd, local_params.config_file_path.c_str(), IN_MODIFY | IN_DELETE_SELF);
+                {
+                    auto w = nt->params->get();
+                    if ((event->mask & IN_DELETE_SELF) || (w.params.config_file_path != local_params.config_file_path)) {
+                        SPDLOG_DEBUG("Watching config file: {}", local_params.config_file_path.c_str());
+                        inotify_rm_watch(nt->fd, nt->wd);
+                        nt->wd = inotify_add_watch(nt->fd, local_params.config_file_path.c_str(), IN_MODIFY | IN_DELETE_SELF);
+                    }
                 }
                 nt->params->assign(local_params);
-//                 std::lock_guard<std::mutex> lk(nt->mutex);
-//                 *nt->params = local_params;
             }
         }
         i = 0;
diff --git a/src/overlay_params.cpp b/src/overlay_params.cpp
index c65fb58..e8fe785 100644
--- a/src/overlay_params.cpp
+++ b/src/overlay_params.cpp
@@ -40,8 +40,22 @@
 #include "app/mangoapp.h"
 #endif
 
+static void apply_params(overlay_params& params, const overlay_params& old_params);
+
 // Global params
 overlay_params_mutexed g_overlay_params;
+void overlay_params_mutexed::assign(overlay_params& r)
+{
+   std::unique_lock<std::mutex> lk(m);
+   ++waiting_writers;
+   writer_cv.wait(lk, [&](){ return active_readers == 0 && active_writers == 0; });
+   ++active_writers;
+   apply_params(r, instance);
+   instance = r;
+   --waiting_writers;
+   --active_writers;
+   reader_cv.notify_all();
+}
 
 #if __cplusplus >= 201703L
 
@@ -564,9 +578,7 @@ void
 parse_overlay_config(struct overlay_params *params,
                   const char *env)
 {
-   if (params->control >= 0)
-      os_socket_close(params->control);
-
+   *params = {};
    /* Visible by default */
    params->enabled[OVERLAY_PARAM_ENABLED_fps] = true;
    params->enabled[OVERLAY_PARAM_ENABLED_frame_timing] = true;
@@ -664,8 +676,6 @@ parse_overlay_config(struct overlay_params *params,
    #define parse_reload_cfg(x)         params->reload_cfg
 #endif
 
-   HUDElements.ordered_functions.clear();
-   HUDElements.exec_list.clear();
    // first pass with env var
    if (env)
       parse_overlay_env(params, env);
@@ -675,6 +685,9 @@ parse_overlay_config(struct overlay_params *params,
 
       // Get config options
       parseConfigFile(*params);
+      for (auto& p : params->option_pairs)
+         params->options[p.first] = p.second;
+
       if (params->options.find("full") != params->options.end() && params->options.find("full")->second != "0") {
 #define OVERLAY_PARAM_BOOL(name) \
             params->enabled[OVERLAY_PARAM_ENABLED_##name] = 1;
@@ -714,7 +727,6 @@ parse_overlay_config(struct overlay_params *params,
    // second pass, override config file settings with MANGOHUD_CONFIG
    if (params->enabled[OVERLAY_PARAM_ENABLED_legacy_layout] && env && read_cfg) {
       // If passing legacy_layout=0 to MANGOHUD_CONFIG anyway then clear first pass' results
-      HUDElements.ordered_functions.clear();
       parse_overlay_env(params, env);
    }
 
@@ -786,70 +798,86 @@ parse_overlay_config(struct overlay_params *params,
                                  params->font_file_text,
                                  params->font_glyph_ranges
                                 );
-   params->image_params_hash = get_hash(params->image, params->background_image);
 
-   // set frametime limit
-   using namespace std::chrono;
-   if (params->fps_limit.size() > 0 && params->fps_limit[0] > 0)
-      fps_limit_stats.targetFrameTime = duration_cast<Clock::duration>(duration<double>(1) / params->fps_limit[0]);
-   else
-      fps_limit_stats.targetFrameTime = {};
-
-#ifdef HAVE_DBUS
-   if (params->enabled[OVERLAY_PARAM_ENABLED_media_player]) {
-      if (dbusmgr::dbus_mgr.init(dbusmgr::SRV_MPRIS))
-         dbusmgr::dbus_mgr.init_mpris(params->media_player_name);
-   } else {
-      dbusmgr::dbus_mgr.deinit(dbusmgr::SRV_MPRIS);
-      main_metadata.meta.valid = false;
+   for (auto& p : params->option_pairs) {
+      if (p.first == "image")
+         params->image_params_hash ^= get_hash(p.second) << 1;
    }
-
-   // if (params->enabled[OVERLAY_PARAM_ENABLED_gamemode])
-   // {
-   //    if (dbusmgr::dbus_mgr.init(dbusmgr::SRV_GAMEMODE))
-   //       HUDElements.gamemode_bol = dbusmgr::dbus_mgr.gamemode_enabled(getpid());
-   // }
-   // else
-   //    dbusmgr::dbus_mgr.deinit(dbusmgr::SRV_GAMEMODE);
-
-#endif
+   params->image_params_hash ^= get_hash(/*params->image, */params->background_image) << 1;
 
    if(!params->output_file.empty()) {
       SPDLOG_INFO("output_file is deprecated, use output_folder instead");
    }
 
-   auto real_size = params->font_size * params->font_scale;
-   real_font_size = ImVec2(real_size, real_size / 2);
 #ifdef MANGOAPP
    params->log_interval = 0;
 #endif
-   HUDElements.params = params;
-   if (params->enabled[OVERLAY_PARAM_ENABLED_legacy_layout]){
-        HUDElements.legacy_elements();
+
+}
+
+static void apply_params(overlay_params& params, const overlay_params& old_params)
+{
+   if (old_params.control >= 0)
+      os_socket_close(old_params.control);
+
+   HUDElements.ordered_functions.clear();
+   HUDElements.exec_list.clear();
+   HUDElements.params = &params;
+   if (params.enabled[OVERLAY_PARAM_ENABLED_legacy_layout]){
+      HUDElements.legacy_elements();
    } else {
-      for (auto& option : HUDElements.options)
+      for (auto& option : params.option_pairs)
          HUDElements.sort_elements(option);
    }
 
+   auto real_size = params.font_size * params.font_scale;
+   real_font_size = ImVec2(real_size, real_size / 2);
+
    // Needs ImGui context but it is null here for OpenGL so just note it and update somewhere else
    HUDElements.colors.update = true;
-   if (params->no_small_font)
+   if (params.no_small_font)
       HUDElements.text_column = 2;
    else
       HUDElements.text_column = 1;
 
    if(logger && logger->m_params == nullptr) logger.reset();
    if(!logger) logger = std::make_unique<Logger>(HUDElements.params);
-   if(params->autostart_log && !logger->is_active())
-      std::thread(autostart_log, params->autostart_log).detach();
+   if(params.autostart_log && !logger->is_active())
+      std::thread(autostart_log, params.autostart_log).detach();
+
+      // set frametime limit
+   using namespace std::chrono;
+   if (params.fps_limit.size() > 0 && params.fps_limit[0] > 0)
+      fps_limit_stats.targetFrameTime = duration_cast<Clock::duration>(duration<double>(1) / params.fps_limit[0]);
+   else
+      fps_limit_stats.targetFrameTime = {};
+
+#ifdef HAVE_DBUS
+   if (params.enabled[OVERLAY_PARAM_ENABLED_media_player]) {
+      if (dbusmgr::dbus_mgr.init(dbusmgr::SRV_MPRIS))
+         dbusmgr::dbus_mgr.init_mpris(params.media_player_name);
+   } else {
+      dbusmgr::dbus_mgr.deinit(dbusmgr::SRV_MPRIS);
+      main_metadata.meta.valid = false;
+   }
+
+   // if (params->enabled[OVERLAY_PARAM_ENABLED_gamemode])
+   // {
+   //    if (dbusmgr::dbus_mgr.init(dbusmgr::SRV_GAMEMODE))
+   //       HUDElements.gamemode_bol = dbusmgr::dbus_mgr.gamemode_enabled(getpid());
+   // }
+   // else
+   //    dbusmgr::dbus_mgr.deinit(dbusmgr::SRV_GAMEMODE);
+
+#endif
+
 #ifdef MANGOAPP
    {
       extern bool new_frame;
       std::lock_guard<std::mutex> lk(mangoapp_m);
-      params->no_display = params->no_display;
       new_frame = true; // we probably changed how we look.
    }
    mangoapp_cv.notify_one();
-   g_fsrSharpness = params->fsr_steam_sharpness;
+   g_fsrSharpness = params.fsr_steam_sharpness;
 #endif
 }
diff --git a/src/overlay_params.h b/src/overlay_params.h
index 4f4f91a..97b91a7 100644
--- a/src/overlay_params.h
+++ b/src/overlay_params.h
@@ -263,6 +263,7 @@ struct overlay_params {
    std::string image;
    unsigned image_max_width;
    std::string config_file_path;
+   std::vector<std::pair<std::string, std::string>> option_pairs;
    std::unordered_map<std::string,std::string> options;
    int permit_upload;
    int fsr_steam_sharpness;
@@ -275,6 +276,8 @@ struct overlay_params {
 
 class overlay_params_wrapper {
 public:
+//    overlay_params_wrapper(const overlay_params_wrapper&) = delete;
+//    overlay_params_wrapper(const overlay_params_wrapper&&) = delete;
    overlay_params_wrapper(overlay_params& p, std::function<void(void)> f)
    : params(p), unlocker(f)
    {
@@ -298,32 +301,24 @@ class overlay_params_mutexed {
    std::atomic_size_t waiting_writers, active_readers, active_writers;
 public:
    overlay_params_mutexed() = default;
+   overlay_params_mutexed(const overlay_params_mutexed&) = delete;
+   overlay_params_mutexed(const overlay_params_mutexed&&) = delete;
 
-   overlay_params_mutexed(const overlay_params& r) {
+   overlay_params_mutexed(overlay_params& r) {
       assign(r);
    }
 
-   overlay_params_mutexed(const overlay_params&& r) {
+   overlay_params_mutexed(overlay_params&& r) {
       assign(r);
    }
 
-   overlay_params_mutexed& operator=(const overlay_params& r)
+   overlay_params_mutexed& operator=(overlay_params& r)
    {
       assign(r);
       return *this;
    }
 
-   void assign(const overlay_params& r)
-   {
-      std::unique_lock<std::mutex> lk(m);
-      ++waiting_writers;
-      writer_cv.wait(lk, [&](){ return active_readers == 0 && active_writers == 0; });
-      ++active_writers;
-      instance = r;
-      --waiting_writers;
-      --active_writers;
-      reader_cv.notify_all();
-   }
+    void assign(overlay_params& r);
 
    const overlay_params* operator->() {
 //       std::unique_lock<std::mutex> l(m);
@@ -336,10 +331,13 @@ public:
       // If get() is called again from a sub function, it may block on waiting writers so just continue if active_readers > 0
       reader_cv.wait(lk, [&](){ return waiting_writers == 0 || active_readers > 0; });
       ++active_readers;
-      return {instance, [&]() -> void {
-         --active_readers;
-         writer_cv.notify_all();
-      }};
+      return {
+         instance,
+         [&]() -> void {
+            --active_readers;
+            writer_cv.notify_all();
+         }
+      };
    }
 };
 
diff --git a/src/vulkan.cpp b/src/vulkan.cpp
index 4b967c0..1af5c1b 100644
--- a/src/vulkan.cpp
+++ b/src/vulkan.cpp
@@ -69,23 +69,19 @@ struct vk_image {
    VkImage image;
    VkImageView image_view;
    VkDeviceMemory mem;
-   uint32_t width, height;
+   VkDescriptorSet descset;
    size_t size;
    bool uploaded;
-};
-
-struct texture_info {
-   vk_image image;
-   VkDescriptorSet descset;
-   std::string filename;
-   int maxwidth;
+//    std::string path;
+   int width;
+   int height;
 };
 
 /* Mapped from VkInstace/VkPhysicalDevice */
 struct instance_data {
    struct vk_instance_dispatch_table vtable;
    VkInstance instance;
-//    struct overlay_params params;
+   HudElements *hud_elements;
    uint32_t api_version;
    string engineName, engineVersion;
    enum EngineTypes engine;
@@ -125,7 +121,8 @@ struct device_data {
    size_t font_params_hash = 0;
    size_t image_params_hash = 0;
 
-   std::vector<struct texture_info> textures;
+   std::thread loader_thr;
+   std::unordered_map<uint64_t, vk_image> images;
 };
 
 /* Mapped from VkCommandBuffer */
@@ -354,10 +351,10 @@ static void setup_device_pipeline(struct device_data *device_data)
    /* Descriptor pool */
    VkDescriptorPoolSize sampler_pool_size = {};
    sampler_pool_size.type = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
-   sampler_pool_size.descriptorCount = 3;
+   sampler_pool_size.descriptorCount = 1000;
    VkDescriptorPoolCreateInfo desc_pool_info = {};
    desc_pool_info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
-   desc_pool_info.maxSets = 3;
+   desc_pool_info.maxSets = 1000;
    desc_pool_info.poolSizeCount = 1;
    desc_pool_info.pPoolSizes = &sampler_pool_size;
    desc_pool_info.flags = VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT;
@@ -453,10 +450,40 @@ static void device_unmap_queues(struct device_data *data)
 
 static void destroy_device_data(struct device_data *data)
 {
+   if (data->loader_thr.joinable())
+      data->loader_thr.join();
+
    unmap_object(HKEY(data->device));
    delete data;
 }
 
+static void destroy_vk_image(struct device_data *device_data, vk_image& image)
+{
+   device_data->vtable.DestroyImageView(device_data->device, image.image_view, NULL);
+   device_data->vtable.DestroyImage(device_data->device, image.image, NULL);
+   device_data->vtable.FreeMemory(device_data->device, image.mem, NULL);
+   image = {};
+}
+
+static void shutdown_device_font(struct device_data *device_data)
+{
+   destroy_vk_image(device_data, device_data->font_img);
+}
+
+static void shutdown_images(struct device_data *data)
+{
+   if (data->loader_thr.joinable())
+      data->loader_thr.join();
+
+   for (auto& tex : data->images)
+   {
+      data->vtable.FreeDescriptorSets(data->device, data->descriptor_pool, 1, &tex.second.descset);
+      destroy_vk_image(data, tex.second);
+   }
+
+   data->images.clear();
+}
+
 /**/
 static struct command_buffer_data *new_command_buffer_data(VkCommandBuffer cmd_buffer,
                                                            VkCommandBufferLevel level,
@@ -874,10 +901,39 @@ static void check_fonts(struct swapchain_data* data)
    }
 }
 
-ImTextureID add_texture(swapchain_stats *stats, const std::string& filename, int* width, int* height, int maxwidth) {
-   // FIXME hacks
-   struct swapchain_data *data = reinterpret_cast<swapchain_data *>((char*)stats - ((char*)&((swapchain_data*)0)->sw_stats));
-   struct texture_info ti {};
+static void load_image_file(struct device_data* device_data, std::string path, vk_image *tex)
+{
+   SPDLOG_DEBUG("load_image_file '{}'", path);
+
+//    std::this_thread::sleep_for(2s);
+
+   // load
+   int width, height, channels;
+   unsigned char* pixels = stbi_load(path.c_str(), &width, &height, &channels, STBI_rgb_alpha);
+   if (!pixels)
+   {
+      SPDLOG_ERROR("Failed to load image: {}", path);
+      return;
+   }
+
+   // reduce the image
+   if (width > tex->width) {
+      unsigned char* pixels_resized = (unsigned char*)malloc(width * height * STBI_rgb_alpha);
+      stbir_resize_uint8(pixels, width, height, 0, pixels_resized, tex->width, tex->height, 0, STBI_rgb_alpha);
+      stbi_image_free(pixels);
+      pixels = pixels_resized;
+   }
+
+   SPDLOG_DEBUG("Uploading '{}' ({}x{})", path, tex->width, tex->height);
+   size_t upload_size = tex->width * tex->height * STBI_rgb_alpha;
+
+   submit_image_upload_cmd(device_data, tex, pixels, upload_size);
+   stbi_image_free(pixels);
+}
+
+ImTextureID add_texture(device_data *data, const std::string& filename, int* width, int* height, int maxwidth) {
+   auto desc_set = alloc_descriptor_set(data);
+   auto& ti = data->images[HKEY(desc_set)];
    int original_width, original_height, channels;
 
    // load
@@ -893,27 +949,70 @@ ImTextureID add_texture(swapchain_stats *stats, const std::string& filename, int
    *width  = original_width  * ratio;
    *height = original_height * ratio;
 
-   ti.descset = alloc_descriptor_set(data->device);
-   create_image(data->device, *width, *height, VK_FORMAT_R8G8B8A8_UNORM, ti.image);
-   update_image_descriptor(data->device, ti.image.image_view, ti.descset);
-   ti.filename = filename;
-   ti.maxwidth = maxwidth;
-
-   data->device->textures.push_back(ti);
-
+   create_image(data, *width, *height, VK_FORMAT_R8G8B8A8_UNORM, ti);
+   update_image_descriptor(data, ti.image_view, desc_set);
+   ti.descset = desc_set;
    return (ImTextureID) ti.descset;
 }
 
-static void check_images(struct device_data* device_data)
+static void check_images(struct device_data* data)
 {
    const overlay_params_wrapper w = g_overlay_params.get();
-   const auto& params = w.params;
-   if (params.image_params_hash == device_data->image_params_hash)
+   if (w.params.image_params_hash == data->image_params_hash)
       return;
 
-   std::unique_lock<std::mutex> lk(device_data->font_mutex);
-   if (params.image_params_hash == device_data->image_params_hash)
+   std::unique_lock<std::mutex> lk(data->font_mutex);
+   if (w.params.image_params_hash == data->image_params_hash)
       return;
+
+   data->image_params_hash = w.params.image_params_hash;
+
+   shutdown_images(data);
+
+   data->loader_thr = std::thread([data](){
+      const overlay_params_wrapper w = g_overlay_params.get();
+      SPDLOG_DEBUG("STARTING LOADING");
+//       std::this_thread::sleep_for(2s);
+
+      unsigned maxwidth = w.params.width;
+      if (w.params.image_max_width != 0 && w.params.image_max_width < maxwidth) {
+         maxwidth = w.params.image_max_width;
+      }
+
+      for (auto& o : w.params.option_pairs)
+      {
+         if (o.first == "image" && !o.second.empty())
+         {
+            auto& ti = HUDElements.images[o.second];
+            if ((ti.texture = add_texture(data, o.second, &ti.width, &ti.height, maxwidth)))
+            {
+               ti.valid = true;
+               auto& image = data->images[HKEY(ti.texture)];
+               SPDLOG_DEBUG("Adding '{}'", o.second);
+               load_image_file(data, o.second, &image);
+               ti.loaded = true;
+            }
+            else
+               SPDLOG_WARN("Failed to load image: {}", o.second);
+         }
+      }
+
+      if (!w.params.background_image.empty())
+      {
+         auto& ti = HUDElements.images[w.params.background_image];
+         if ((ti.texture = add_texture(data, w.params.background_image, &(ti.width), &(ti.height), 0)))
+         {
+            ti.valid = true;
+            auto& image = data->images[HKEY(ti.texture)];
+            SPDLOG_DEBUG("Adding '{}'", w.params.background_image);
+            load_image_file(data, w.params.background_image, &image);
+            ti.loaded = true;
+         }
+         else
+            SPDLOG_WARN("Failed to load image: {}", w.params.background_image);
+      }
+      SPDLOG_DEBUG("DONE LOADING");
+   });
 }
 
 static void CreateOrResizeBuffer(struct device_data *data,
@@ -988,37 +1087,40 @@ static struct overlay_draw *render_swapchain_display(struct swapchain_data *data
 //    ensure_swapchain_fonts(data->device, draw->command_buffer);
 
    /* ensure_textures */
-   for (auto& tex : data->device->textures) {
-      if (!tex.descset)
-         continue;
-
-      if (!tex.image.uploaded) {
-//          tex.image.uploaded = true;
-
-         // load
-         int width, height, channels;
-         unsigned char* pixels = stbi_load(tex.filename.c_str(), &width, &height, &channels, STBI_rgb_alpha);
-         if (!pixels)
-         {
-            SPDLOG_ERROR("Failed to load image: {}", tex.filename);
-            continue;
-         }
-
-         // reduce the image
-         if (width > tex.maxwidth && tex.maxwidth != 0) {
-            unsigned char* pixels_resized = (unsigned char*)malloc(width * height * STBI_rgb_alpha);
-            stbir_resize_uint8(pixels, width, height, 0, pixels_resized, tex.image.width, tex.image.height, 0, STBI_rgb_alpha);
-            stbi_image_free(pixels);
-            pixels = pixels_resized;
-         }
-
-         SPDLOG_DEBUG("Uploading '{}' ({}x{})", tex.filename, tex.image.width, tex.image.height);
-         size_t upload_size = tex.image.width * tex.image.height * STBI_rgb_alpha;
-
-         submit_image_upload_cmd(device_data, &tex.image, pixels, upload_size);
-         stbi_image_free(pixels);
-      }
-   }
+//    for (auto& tex : data->device->textures) {
+//       if (!tex.descset)
+//          continue;
+
+//       if (!tex.image.uploaded && tex.image.loading) {
+//          // Not yet uploaded, clear image
+//          VkImageMemoryBarrier copy_barrier[1] = {};
+//          copy_barrier[0].sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
+//          copy_barrier[0].dstAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;
+//          copy_barrier[0].oldLayout = VK_IMAGE_LAYOUT_UNDEFINED;
+//          copy_barrier[0].newLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;
+//          copy_barrier[0].srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
+//          copy_barrier[0].dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
+//          copy_barrier[0].image = tex.image.image;
+//          copy_barrier[0].subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
+//          copy_barrier[0].subresourceRange.levelCount = 1;
+//          copy_barrier[0].subresourceRange.layerCount = 1;
+//          device_data->vtable.CmdPipelineBarrier(draw->command_buffer,
+//                                                 VK_PIPELINE_STAGE_HOST_BIT,
+//                                                 VK_PIPELINE_STAGE_TRANSFER_BIT,
+//                                                 0, 0, NULL, 0, NULL,
+//                                                 1, copy_barrier);
+//          VkClearColorValue color {};
+//          VkImageSubresourceRange ImageSubresourceRange;
+//          ImageSubresourceRange.aspectMask     = VK_IMAGE_ASPECT_COLOR_BIT;
+//          ImageSubresourceRange.baseMipLevel   = 0;
+//          ImageSubresourceRange.levelCount     = 1;
+//          ImageSubresourceRange.baseArrayLayer = 0;
+//          ImageSubresourceRange.layerCount     = 1;
+//          device_data->vtable.CmdClearColorImage(draw->command_buffer, tex.image.image,
+//                                                 VkImageLayout::VK_IMAGE_LAYOUT_UNDEFINED,
+//                                                 &color, 1, &ImageSubresourceRange);
+//       }
+//    }
 
    /* Bounce the image to display back to color attachment layout for
     * rendering on top of it.
@@ -1566,31 +1668,6 @@ static void setup_swapchain_data(struct swapchain_data *data,
                                                   NULL, &data->command_pool));
 }
 
-static void destroy_vk_image(struct device_data *device_data, vk_image& image)
-{
-   device_data->vtable.DestroyImageView(device_data->device, image.image_view, NULL);
-   device_data->vtable.DestroyImage(device_data->device, image.image, NULL);
-   device_data->vtable.FreeMemory(device_data->device, image.mem, NULL);
-   image = {};
-}
-
-static void shutdown_device_font(struct device_data *device_data)
-{
-   destroy_vk_image(device_data, device_data->font_img);
-}
-
-static void shutdown_textures(struct device_data *device_data)
-{
-   for (auto& tex : device_data->textures)
-   {
-      device_data->vtable.FreeDescriptorSets(device_data->device, device_data->descriptor_pool, 1, &tex.descset);
-      destroy_vk_image(device_data, tex.image);
-   }
-
-   HUDElements.image_infos = {};
-   HUDElements.background_image_infos = {};
-}
-
 static void shutdown_swapchain_data(struct swapchain_data *data)
 {
    struct device_data *device_data = data->device;
@@ -1989,7 +2066,7 @@ static void overlay_DestroyDevice(
    struct device_data *device_data = FIND(struct device_data, device);
    if (!is_blacklisted()) {
       shutdown_device_font(device_data);
-      shutdown_textures(device_data);
+        shutdown_images(device_data);
       IM_FREE(device_data->font_atlas);
       device_unmap_queues(device_data);
    }
@@ -2072,11 +2149,11 @@ static VkResult overlay_CreateInstance(
                              &instance_data->vtable);
    instance_data_map_physical_devices(instance_data, true);
 
-   auto w = g_overlay_params.get();
-   parse_overlay_config(&w.params, getenv("MANGOHUD_CONFIG"));
+   overlay_params params {};
+   parse_overlay_config(&params, getenv("MANGOHUD_CONFIG"));
 
    //check for blacklist item in the config file
-   for (auto& item : w.params.blacklist) {
+   for (auto& item : params.blacklist) {
       add_blacklist(item);
    }
 
@@ -2087,14 +2164,14 @@ static VkResult overlay_CreateInstance(
       start_notifier(instance_data->notifier);
 #endif
 
-      init_cpu_stats(w.params);
+      init_cpu_stats(params);
 
       // Adjust height for DXVK/VKD3D version number
       if (engineName == "DXVK" || engineName == "VKD3D"){
-         if (w.params.font_size){
-            w.params.height += w.params.font_size * w.params.font_scale / 2;
+         if (params.font_size){
+            params.height += params.font_size * params.font_scale / 2;
          } else {
-            w.params.height += 24 * w.params.font_scale / 2;
+            params.height += 24 * params.font_scale / 2;
          }
       }
 
@@ -2104,6 +2181,8 @@ static VkResult overlay_CreateInstance(
    }
 
    instance_data->api_version = pCreateInfo->pApplicationInfo ? pCreateInfo->pApplicationInfo->apiVersion : VK_API_VERSION_1_0;
+
+   g_overlay_params = params;
    return result;
 }
 
-- 
2.34.1


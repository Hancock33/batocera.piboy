From 1cffa6955331ce62f169a3948ece136a5502fa84 Mon Sep 17 00:00:00 2001
From: jackun <jack.un@gmail.com>
Date: Sun, 12 Jun 2022 19:30:10 +0300
Subject: [PATCH 10/14] wip single params

---
 src/app/main.cpp       |  2 +-
 src/gl/gl_hud.cpp      | 54 ++++++++++++-----------
 src/gl/gl_hud.h        |  2 +-
 src/gl/gl_renderer.cpp | 12 ++---
 src/gl/inject_glx.cpp  | 29 +++++++------
 src/keybinds.cpp       |  5 ++-
 src/notify.cpp         | 14 +++---
 src/notify.h           |  4 +-
 src/overlay.cpp        |  3 +-
 src/overlay.h          |  1 -
 src/overlay_params.cpp |  7 ++-
 src/overlay_params.h   | 78 +++++++++++++++++++++++++++++++++
 src/vulkan.cpp         | 99 +++++++++++++++++++++++++-----------------
 src/win/d3d_shared.cpp |  5 +--
 14 files changed, 212 insertions(+), 103 deletions(-)

diff --git a/src/app/main.cpp b/src/app/main.cpp
index 473891c..23ab2fa 100644
--- a/src/app/main.cpp
+++ b/src/app/main.cpp
@@ -264,7 +264,7 @@ int main(int, char**)
     create_fonts(nullptr, params, sw_stats.font1, sw_stats.font_text);
     HUDElements.convert_colors(params);
     init_cpu_stats(params);
-    notifier.params = &params;
+    notifier.params = &g_overlay_params;
     start_notifier(notifier);
     window_size = ImVec2(params.width, params.height);
     deviceName = (char*)glGetString(GL_RENDERER);
diff --git a/src/gl/gl_hud.cpp b/src/gl/gl_hud.cpp
index 904efdd..8885a22 100644
--- a/src/gl/gl_hud.cpp
+++ b/src/gl/gl_hud.cpp
@@ -54,6 +54,7 @@ struct state {
 static GLVec last_vp {}, last_sb {};
 swapchain_stats sw_stats {};
 static size_t font_params_hash = 0;
+// static size_t image_params_hash = 0;
 static state state;
 static uint32_t vendorID;
 static std::string deviceName;
@@ -62,7 +63,7 @@ static notify_thread notifier;
 static bool cfg_inited = false;
 static ImVec2 window_size;
 static bool inited = false;
-overlay_params params {};
+// overlay_params params {};
 
 // seems to quit by itself though
 static std::unique_ptr<notify_thread, std::function<void(notify_thread *)>>
@@ -74,11 +75,11 @@ void imgui_init()
         return;
 
     init_spdlog();
-    parse_overlay_config(&params, getenv("MANGOHUD_CONFIG"));
-    _params = &params;
+    auto w = g_overlay_params.get();
+    parse_overlay_config(&w.params, getenv("MANGOHUD_CONFIG"));
 
-   //check for blacklist item in the config file
-   for (auto& item : params.blacklist) {
+    //check for blacklist item in the config file
+   for (auto& item : w.params.blacklist) {
       add_blacklist(item);
    }
 
@@ -100,12 +101,12 @@ void imgui_init()
     }
 
     is_blacklisted(true);
-    notifier.params = &params;
+    notifier.params = &g_overlay_params;
     start_notifier(notifier);
-    window_size = ImVec2(params.width, params.height);
+    window_size = ImVec2(w.params.width, w.params.height);
     init_system_info();
     cfg_inited = true;
-    init_cpu_stats(params);
+    init_cpu_stats(w.params);
 }
 
 //static
@@ -138,7 +139,9 @@ void imgui_create(void *ctx)
     }
     if (deviceName.find("zink") != std::string::npos)
         sw_stats.engine = EngineTypes::ZINK;
-    init_gpu_stats(vendorID, 0, params);
+
+    auto w = g_overlay_params.get();
+    init_gpu_stats(vendorID, 0, w.params);
     sw_stats.gpuName = gpu = get_device_name(vendorID, deviceID);
     SPDLOG_DEBUG("gpu: {}", gpu);
     // Setup Dear ImGui context
@@ -152,7 +155,7 @@ void imgui_create(void *ctx)
     // Setup Dear ImGui style
     ImGui::StyleColorsDark();
     //ImGui::StyleColorsClassic();
-    HUDElements.convert_colors(false, params);
+    HUDElements.convert_colors(false, w.params);
 
     glGetIntegerv (GL_VIEWPORT, last_vp.v);
     glGetIntegerv (GL_SCISSOR_BOX, last_sb.v);
@@ -162,8 +165,8 @@ void imgui_create(void *ctx)
 
     ImGui_ImplOpenGL3_Init();
 
-    create_fonts(nullptr, params, sw_stats.font1, sw_stats.font_text);
-    font_params_hash = params.font_params_hash;
+    create_fonts(nullptr, w.params, sw_stats.font1, sw_stats.font_text);
+    font_params_hash = w.params.font_params_hash;
 
     // Restore global context or ours might clash with apps that use Dear ImGui
     ImGui::SetCurrentContext(saved_ctx);
@@ -192,35 +195,36 @@ void imgui_render(unsigned int width, unsigned int height)
     if (!state.imgui_ctx)
         return;
 
+    auto w = g_overlay_params.get();
     static int control_client = -1;
-    if (params.control >= 0) {
-        control_client_check(params.control, control_client, deviceName);
-        process_control_socket(control_client, params);
+    if (w.params.control >= 0) {
+        control_client_check(w.params.control, control_client, deviceName);
+        process_control_socket(control_client, w.params);
     }
 
-    check_keybinds(params, vendorID);
-    update_hud_info(sw_stats, params, vendorID);
+    check_keybinds(w.params, vendorID);
+    update_hud_info(sw_stats, w.params, vendorID);
 
     ImGuiContext *saved_ctx = ImGui::GetCurrentContext();
     ImGui::SetCurrentContext(state.imgui_ctx);
     ImGui::GetIO().DisplaySize = ImVec2(width, height);
     if (HUDElements.colors.update)
-        HUDElements.convert_colors(params);
+        HUDElements.convert_colors(w.params);
 
-    if (font_params_hash != params.font_params_hash)
+    if (font_params_hash != w.params.font_params_hash)
     {
-        font_params_hash = params.font_params_hash;
-        create_fonts(nullptr, params, sw_stats.font1, sw_stats.font_text);
+        font_params_hash = w.params.font_params_hash;
+        create_fonts(nullptr, w.params, sw_stats.font1, sw_stats.font_text);
         ImGui_ImplOpenGL3_CreateFontsTexture();
     }
 
     ImGui_ImplOpenGL3_NewFrame();
     ImGui::NewFrame();
     {
-        std::lock_guard<std::mutex> lk(notifier.mutex);
-        overlay_new_frame(params);
-        position_layer(sw_stats, params, window_size);
-        render_imgui(sw_stats, params, window_size, false);
+//         std::lock_guard<std::mutex> lk(notifier.mutex);
+        overlay_new_frame(w.params);
+        position_layer(sw_stats, w.params, window_size);
+        render_imgui(sw_stats, w.params, window_size, false);
         overlay_end_frame();
     }
 
diff --git a/src/gl/gl_hud.h b/src/gl/gl_hud.h
index 99658ef..81b08c9 100644
--- a/src/gl/gl_hud.h
+++ b/src/gl/gl_hud.h
@@ -7,7 +7,7 @@
 
 namespace MangoHud { namespace GL {
 
-extern overlay_params params;
+// extern overlay_params params;
 void imgui_init();
 void imgui_create(void *ctx);
 void imgui_shutdown();
diff --git a/src/gl/gl_renderer.cpp b/src/gl/gl_renderer.cpp
index 6b60dd0..540b250 100644
--- a/src/gl/gl_renderer.cpp
+++ b/src/gl/gl_renderer.cpp
@@ -78,7 +78,7 @@
 
 namespace MangoHud { namespace GL {
 
-extern overlay_params params;
+// extern overlay_params params;
 
 // OpenGL Data
 static GLuint       g_GlVersion = 0;                // Extracted at runtime using GL_MAJOR_VERSION, GL_MINOR_VERSION queries.
@@ -494,8 +494,8 @@ void    ImGui_ImplOpenGL3_NewFrame()
 static void ImGui_ImplOpenGL3_SetupRenderState(ImDrawData* draw_data, int fb_width, int fb_height, GLuint vertex_array_object)
 {
     // Setup render state: alpha-blending enabled, no face culling, no depth testing, scissor enabled, polygon fill
-    if (params.gl_bind_framebuffer >= 0 && (g_IsGLES || g_GlVersion >= 300))
-        glBindFramebuffer(GL_DRAW_FRAMEBUFFER, params.gl_bind_framebuffer);
+    if (g_overlay_params->gl_bind_framebuffer >= 0 && (g_IsGLES || g_GlVersion >= 300))
+        glBindFramebuffer(GL_DRAW_FRAMEBUFFER, g_overlay_params->gl_bind_framebuffer);
     glEnable(GL_BLEND);
     glBlendEquation(GL_FUNC_ADD);
     glBlendFuncSeparate(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
@@ -530,7 +530,7 @@ static void ImGui_ImplOpenGL3_SetupRenderState(ImDrawData* draw_data, int fb_wid
     float R = draw_data->DisplayPos.x + draw_data->DisplaySize.x;
     float T = draw_data->DisplayPos.y;
     float B = draw_data->DisplayPos.y + draw_data->DisplaySize.y;
-    if (!params.gl_dont_flip && !clip_origin_lower_left) { float tmp = T; T = B; B = tmp; } // Swap top and bottom if origin is upper left
+    if (!g_overlay_params->gl_dont_flip && !clip_origin_lower_left) { float tmp = T; T = B; B = tmp; } // Swap top and bottom if origin is upper left
     const float ortho_projection[4][4] =
     {
         { 2.0f/(R-L),   0.0f,         0.0f,   0.0f },
@@ -574,7 +574,7 @@ void    ImGui_ImplOpenGL3_RenderDrawData(ImDrawData* draw_data)
 
     // Backup GL state
     GLint last_fb = -1;
-    if (params.gl_bind_framebuffer >= 0 && (g_IsGLES || g_GlVersion >= 300))
+    if (g_overlay_params->gl_bind_framebuffer >= 0 && (g_IsGLES || g_GlVersion >= 300))
         glGetIntegerv(GL_DRAW_FRAMEBUFFER_BINDING, &last_fb);
     GLenum last_active_texture; glGetIntegerv(GL_ACTIVE_TEXTURE, (GLint*)&last_active_texture);
     glActiveTexture(GL_TEXTURE0);
@@ -660,7 +660,7 @@ void    ImGui_ImplOpenGL3_RenderDrawData(ImDrawData* draw_data)
                 if (clip_rect.x < fb_width && clip_rect.y < fb_height && clip_rect.z >= 0.0f && clip_rect.w >= 0.0f)
                 {
                     // Apply scissor/clipping rectangle
-                    if (!params.gl_dont_flip)
+                    if (!g_overlay_params->gl_dont_flip)
                         glScissor((int)clip_rect.x, (int)(fb_height - clip_rect.w), (int)(clip_rect.z - clip_rect.x), (int)(clip_rect.w - clip_rect.y));
                     else
                         glScissor((int)clip_rect.x, (int)clip_rect.y, (int)clip_rect.z, (int)clip_rect.w);
diff --git a/src/gl/inject_glx.cpp b/src/gl/inject_glx.cpp
index 55a985d..a36c2bb 100644
--- a/src/gl/inject_glx.cpp
+++ b/src/gl/inject_glx.cpp
@@ -105,16 +105,17 @@ EXPORT_C_(int) glXMakeCurrent(void* dpy, void* drawable, void* ctx) {
             SPDLOG_DEBUG("GL ref count: {}", refcnt);
         }
 
+        auto vsync = g_overlay_params->gl_vsync;
         // Afaik -1 only works with EXT version if it has GLX_EXT_swap_control_tear, maybe EGL_MESA_swap_control_tear someday
-        if (params.gl_vsync >= -1) {
+        if (vsync >= -1) {
             if (glx.SwapIntervalEXT)
-                glx.SwapIntervalEXT(dpy, drawable, params.gl_vsync);
+                glx.SwapIntervalEXT(dpy, drawable, vsync);
         }
-        if (params.gl_vsync >= 0) {
+        if (vsync >= 0) {
             if (glx.SwapIntervalSGI)
-                glx.SwapIntervalSGI(params.gl_vsync);
+                glx.SwapIntervalSGI(vsync);
             if (glx.SwapIntervalMESA)
-                glx.SwapIntervalMESA(params.gl_vsync);
+                glx.SwapIntervalMESA(vsync);
         }
     }
 
@@ -129,7 +130,7 @@ static void do_imgui_swap(void *dpy, void *drawable)
 
         unsigned int width = -1, height = -1;
 
-        switch (params.gl_size_query)
+        switch (g_overlay_params->gl_size_query)
         {
             case GL_SIZE_VIEWPORT:
                 glGetIntegerv (GL_VIEWPORT, vp);
@@ -190,8 +191,8 @@ EXPORT_C_(void) glXSwapIntervalEXT(void *dpy, void *draw, int interval) {
     if (!glx.SwapIntervalEXT)
         return;
 
-    if (!is_blacklisted() && params.gl_vsync >= 0)
-        interval = params.gl_vsync;
+    if (!is_blacklisted() && g_overlay_params->gl_vsync >= 0)
+        interval = g_overlay_params->gl_vsync;
 
     glx.SwapIntervalEXT(dpy, draw, interval);
 }
@@ -202,8 +203,8 @@ EXPORT_C_(int) glXSwapIntervalSGI(int interval) {
     if (!glx.SwapIntervalSGI)
         return -1;
 
-    if (!is_blacklisted() && params.gl_vsync >= 0)
-        interval = params.gl_vsync;
+    if (!is_blacklisted() && g_overlay_params->gl_vsync >= 0)
+        interval = g_overlay_params->gl_vsync;
 
     return glx.SwapIntervalSGI(interval);
 }
@@ -214,8 +215,8 @@ EXPORT_C_(int) glXSwapIntervalMESA(unsigned int interval) {
     if (!glx.SwapIntervalMESA)
         return -1;
 
-    if (!is_blacklisted() && params.gl_vsync >= 0)
-        interval = (unsigned int)params.gl_vsync;
+    if (!is_blacklisted() && g_overlay_params->gl_vsync >= 0)
+        interval = (unsigned int)g_overlay_params->gl_vsync;
 
     return glx.SwapIntervalMESA(interval);
 }
@@ -232,8 +233,8 @@ EXPORT_C_(int) glXGetSwapIntervalMESA() {
 
         if (first_call) {
             first_call = false;
-            if (params.gl_vsync >= 0) {
-                interval = params.gl_vsync;
+            if (g_overlay_params->gl_vsync >= 0) {
+                interval = g_overlay_params->gl_vsync;
                 glx.SwapIntervalMESA(interval);
             }
         }
diff --git a/src/keybinds.cpp b/src/keybinds.cpp
index 12e73e5..a6a8af0 100644
--- a/src/keybinds.cpp
+++ b/src/keybinds.cpp
@@ -57,8 +57,9 @@ void check_keybinds(struct overlay_params& params, uint32_t vendorID){
 
    if (elapsedReloadCfg >= keyPressDelay &&
        keys_are_pressed(params.reload_cfg)) {
-      parse_overlay_config(&params, getenv("MANGOHUD_CONFIG"));
-      _params = &params;
+      overlay_params temp;
+      parse_overlay_config(&temp, getenv("MANGOHUD_CONFIG"));
+      g_overlay_params = temp;
       reload_cfg_press = now;
    }
 
diff --git a/src/notify.cpp b/src/notify.cpp
index 589d279..61c9c8a 100644
--- a/src/notify.cpp
+++ b/src/notify.cpp
@@ -13,7 +13,7 @@
 static void fileChanged(notify_thread *nt) {
     int length, i = 0;
     char buffer[EVENT_BUF_LEN];
-    overlay_params local_params = *nt->params;
+//     overlay_params local_params = *nt->params;
 
     while (!nt->quit) {
         length = read( nt->fd, buffer, EVENT_BUF_LEN );
@@ -25,14 +25,17 @@ static void fileChanged(notify_thread *nt) {
                 // In the case of IN_DELETE_SELF, some editors may do a save-to-temp-file/delete-original/move-temp-file
                 // so sleep a little to let file to be replaced
                 std::this_thread::sleep_for(std::chrono::milliseconds(100));
+                overlay_params local_params;
                 parse_overlay_config(&local_params, getenv("MANGOHUD_CONFIG"));
-                if ((event->mask & IN_DELETE_SELF) || (nt->params->config_file_path != local_params.config_file_path)) {
+                auto w = nt->params->get();
+                if ((event->mask & IN_DELETE_SELF) || (w.params.config_file_path != local_params.config_file_path)) {
                     SPDLOG_DEBUG("Watching config file: {}", local_params.config_file_path.c_str());
                     inotify_rm_watch(nt->fd, nt->wd);
                     nt->wd = inotify_add_watch(nt->fd, local_params.config_file_path.c_str(), IN_MODIFY | IN_DELETE_SELF);
                 }
-                std::lock_guard<std::mutex> lk(nt->mutex);
-                *nt->params = local_params;
+                nt->params->assign(local_params);
+//                 std::lock_guard<std::mutex> lk(nt->mutex);
+//                 *nt->params = local_params;
             }
         }
         i = 0;
@@ -48,7 +51,8 @@ bool start_notifier(notify_thread& nt)
         return false;
     }
 
-    nt.wd = inotify_add_watch(nt.fd, nt.params->config_file_path.c_str(), IN_MODIFY | IN_DELETE_SELF);
+    auto w = nt.params->get();
+    nt.wd = inotify_add_watch(nt.fd, w.params.config_file_path.c_str(), IN_MODIFY | IN_DELETE_SELF);
     if (nt.wd < 0) {
         close(nt.fd);
         nt.fd = -1;
diff --git a/src/notify.h b/src/notify.h
index 559bda4..428416f 100644
--- a/src/notify.h
+++ b/src/notify.h
@@ -9,9 +9,9 @@
 struct notify_thread
 {
     int fd = -1, wd = -1;
-    overlay_params *params = nullptr;
+    overlay_params_mutexed *params = nullptr;
     bool quit = false;
-    std::mutex mutex;
+//     std::mutex mutex;
     std::thread thread;
 };
 
diff --git a/src/overlay.cpp b/src/overlay.cpp
index d59753f..e2c2728 100644
--- a/src/overlay.cpp
+++ b/src/overlay.cpp
@@ -46,7 +46,6 @@ struct fps_limit fps_limit_stats {};
 ImVec2 real_font_size;
 std::deque<logData> graph_data;
 const char* engines[] = {"Unknown", "OpenGL", "VULKAN", "DXVK", "VKD3D", "DAMAVAND", "ZINK", "WINED3D", "Feral3D", "ToGL", "GAMESCOPE"};
-overlay_params *_params {};
 double min_frametime, max_frametime;
 bool gpu_metrics_exists = false;
 bool steam_focused = false;
@@ -572,7 +571,7 @@ void render_imgui(swapchain_stats& data, struct overlay_params& params, ImVec2&
       if((now - logger->last_log_end()) < 12s && !logger->is_active())
          render_benchmark(data, params, window_size, height, now);
    }
-   
+
    if(params.enabled[OVERLAY_PARAM_ENABLED_fcat])
      {
        fcatstatus.update(&params);
diff --git a/src/overlay.h b/src/overlay.h
index 37db3db..7ebdc64 100644
--- a/src/overlay.h
+++ b/src/overlay.h
@@ -87,7 +87,6 @@ extern struct benchmark_stats benchmark;
 extern ImVec2 real_font_size;
 extern std::string wineVersion;
 extern std::deque<logData> graph_data;
-extern overlay_params *_params;
 extern double min_frametime, max_frametime;
 extern bool steam_focused;
 extern int fan_speed;
diff --git a/src/overlay_params.cpp b/src/overlay_params.cpp
index 2fd370b..c65fb58 100644
--- a/src/overlay_params.cpp
+++ b/src/overlay_params.cpp
@@ -40,6 +40,9 @@
 #include "app/mangoapp.h"
 #endif
 
+// Global params
+overlay_params_mutexed g_overlay_params;
+
 #if __cplusplus >= 201703L
 
 template<typename... Ts>
@@ -561,7 +564,8 @@ void
 parse_overlay_config(struct overlay_params *params,
                   const char *env)
 {
-   *params = {};
+   if (params->control >= 0)
+      os_socket_close(params->control);
 
    /* Visible by default */
    params->enabled[OVERLAY_PARAM_ENABLED_fps] = true;
@@ -782,6 +786,7 @@ parse_overlay_config(struct overlay_params *params,
                                  params->font_file_text,
                                  params->font_glyph_ranges
                                 );
+   params->image_params_hash = get_hash(params->image, params->background_image);
 
    // set frametime limit
    using namespace std::chrono;
diff --git a/src/overlay_params.h b/src/overlay_params.h
index 33eb55b..4f4f91a 100644
--- a/src/overlay_params.h
+++ b/src/overlay_params.h
@@ -2,9 +2,14 @@
 #ifndef MANGOHUD_OVERLAY_PARAMS_H
 #define MANGOHUD_OVERLAY_PARAMS_H
 
+#include <spdlog/spdlog.h>
 #include <string>
 #include <vector>
 #include <unordered_map>
+#include <mutex>
+#include <condition_variable>
+#include <atomic>
+#include <functional>
 
 #ifdef __cplusplus
 extern "C" {
@@ -265,8 +270,81 @@ struct overlay_params {
    unsigned short fcat_overlay_width;
 
    size_t font_params_hash;
+   size_t image_params_hash;
 };
 
+class overlay_params_wrapper {
+public:
+   overlay_params_wrapper(overlay_params& p, std::function<void(void)> f)
+   : params(p), unlocker(f)
+   {
+   }
+
+   ~overlay_params_wrapper()
+   {
+      unlocker();
+   }
+
+   overlay_params& params;
+private:
+   std::function<void(void)> unlocker;
+};
+
+class overlay_params_mutexed {
+   overlay_params instance;
+   std::mutex m;
+   std::condition_variable reader_cv;
+   std::condition_variable writer_cv;
+   std::atomic_size_t waiting_writers, active_readers, active_writers;
+public:
+   overlay_params_mutexed() = default;
+
+   overlay_params_mutexed(const overlay_params& r) {
+      assign(r);
+   }
+
+   overlay_params_mutexed(const overlay_params&& r) {
+      assign(r);
+   }
+
+   overlay_params_mutexed& operator=(const overlay_params& r)
+   {
+      assign(r);
+      return *this;
+   }
+
+   void assign(const overlay_params& r)
+   {
+      std::unique_lock<std::mutex> lk(m);
+      ++waiting_writers;
+      writer_cv.wait(lk, [&](){ return active_readers == 0 && active_writers == 0; });
+      ++active_writers;
+      instance = r;
+      --waiting_writers;
+      --active_writers;
+      reader_cv.notify_all();
+   }
+
+   const overlay_params* operator->() {
+//       std::unique_lock<std::mutex> l(m);
+      return &instance;
+   }
+
+   overlay_params_wrapper get()
+   {
+      std::unique_lock<std::mutex> lk(m);
+      // If get() is called again from a sub function, it may block on waiting writers so just continue if active_readers > 0
+      reader_cv.wait(lk, [&](){ return waiting_writers == 0 || active_readers > 0; });
+      ++active_readers;
+      return {instance, [&]() -> void {
+         --active_readers;
+         writer_cv.notify_all();
+      }};
+   }
+};
+
+extern overlay_params_mutexed g_overlay_params;
+
 const extern char *overlay_param_names[];
 
 void parse_overlay_config(struct overlay_params *params,
diff --git a/src/vulkan.cpp b/src/vulkan.cpp
index d656fc7..4b967c0 100644
--- a/src/vulkan.cpp
+++ b/src/vulkan.cpp
@@ -85,7 +85,7 @@ struct texture_info {
 struct instance_data {
    struct vk_instance_dispatch_table vtable;
    VkInstance instance;
-   struct overlay_params params;
+//    struct overlay_params params;
    uint32_t api_version;
    string engineName, engineVersion;
    enum EngineTypes engine;
@@ -123,6 +123,7 @@ struct device_data {
    ImFont *font_alt, *font_text;
    struct vk_image font_img;
    size_t font_params_hash = 0;
+   size_t image_params_hash = 0;
 
    std::vector<struct texture_info> textures;
 };
@@ -266,16 +267,13 @@ static struct instance_data *new_instance_data(VkInstance instance)
 {
    struct instance_data *data = new instance_data();
    data->instance = instance;
-   data->params = {};
-   data->params.control = -1;
+   data->control_client = -1;
    map_object(HKEY(data->instance), data);
    return data;
 }
 
 static void destroy_instance_data(struct instance_data *data)
 {
-   if (data->params.control >= 0)
-      os_socket_close(data->params.control);
    unmap_object(HKEY(data->instance));
    delete data;
 }
@@ -480,13 +478,15 @@ static void destroy_command_buffer_data(struct command_buffer_data *data)
 
 /**/
 static struct swapchain_data *new_swapchain_data(VkSwapchainKHR swapchain,
-                                                 struct device_data *device_data)
+                                                 struct device_data *device_data,
+                                                 overlay_params& params)
 {
-   struct instance_data *instance_data = device_data->instance;
+//    struct instance_data *instance_data = device_data->instance;
+//    const overlay_params_wrapper w = g_overlay_params.get();
    struct swapchain_data *data = new swapchain_data();
    data->device = device_data;
    data->swapchain = swapchain;
-   data->window_size = ImVec2(instance_data->params.width, instance_data->params.height);
+   data->window_size = ImVec2(params.width, params.height);
    map_object(HKEY(data->swapchain), data);
    return data;
 }
@@ -547,38 +547,37 @@ struct overlay_draw *get_overlay_draw(struct swapchain_data *data)
 
 static void snapshot_swapchain_frame(struct swapchain_data *data)
 {
+   const overlay_params_wrapper w = g_overlay_params.get();
    struct device_data *device_data = data->device;
    struct instance_data *instance_data = device_data->instance;
-   update_hud_info(data->sw_stats, instance_data->params, device_data->properties.vendorID);
-   check_keybinds(instance_data->params, device_data->properties.vendorID);
+   (void)instance_data;
+   update_hud_info(data->sw_stats, w.params, device_data->properties.vendorID);
+   check_keybinds(w.params, device_data->properties.vendorID);
 #ifdef __linux__
-   if (instance_data->params.control >= 0) {
-      control_client_check(instance_data->params.control, instance_data->control_client, gpu.c_str());
-      process_control_socket(instance_data->control_client, instance_data->params);
+   if (w.params.control >= 0) {
+      control_client_check(w.params.control, instance_data->control_client, gpu.c_str());
+      process_control_socket(instance_data->control_client, w.params);
    }
 #endif
 }
 
 static void compute_swapchain_display(struct swapchain_data *data)
 {
-   struct device_data *device_data = data->device;
-   struct instance_data *instance_data = device_data->instance;
-
-   if (instance_data->params.no_display)
+   const overlay_params_wrapper w = g_overlay_params.get();
+   if (w.params.no_display)
       return;
 
    check_fonts(data);
 
    ImGui::SetCurrentContext(data->imgui_context);
    if (HUDElements.colors.update)
-      HUDElements.convert_colors(instance_data->params);
+      HUDElements.convert_colors(w.params);
 
    ImGui::NewFrame();
    {
-      ::scoped_lock lk(instance_data->notifier.mutex);
-      overlay_new_frame(instance_data->params);
-      position_layer(data->sw_stats, instance_data->params, data->window_size);
-      render_imgui(data->sw_stats, instance_data->params, data->window_size, true);
+      overlay_new_frame(w.params);
+      position_layer(data->sw_stats, w.params, data->window_size);
+      render_imgui(data->sw_stats, w.params, data->window_size, true);
       overlay_end_frame();
    }
    ImGui::EndFrame();
@@ -825,12 +824,14 @@ static void submit_image_upload_cmd(struct device_data *device_data, vk_image *i
    img->uploaded = true;
    auto dur = Clock::now() - start;
    auto dur_us = std::chrono::duration_cast<std::chrono::microseconds>(dur).count();
+   (void)dur_us;
    SPDLOG_DEBUG("upload duration: {} us, {} bytes, {:0.02f} MiB/s", dur_us, upload_size, upload_size/(dur_us/1e6f)/(1024*1024));
 }
 
 static void check_fonts(struct device_data* device_data)
 {
-   const auto& params = device_data->instance->params;
+   const overlay_params_wrapper w = g_overlay_params.get();
+   const auto& params = w.params;
    if (params.font_params_hash == device_data->font_params_hash)
       return;
 
@@ -857,8 +858,9 @@ static void check_fonts(struct device_data* device_data)
    update_image_descriptor(device_data, device_data->font_img.image_view, device_data->descriptor_set);
    device_data->font_atlas->SetTexID((ImTextureID)device_data->descriptor_set);
 
-   std::thread(submit_image_upload_cmd, device_data, &device_data->font_img, pixels, width * height * 4 * sizeof(char)).detach();
-//     submit_image_upload_cmd(device_data, &device_data->font_img, pixels, width * height * 4 * sizeof(char));
+//    std::thread(submit_image_upload_cmd, device_data, &device_data->font_img, pixels, width * height * 4 * sizeof(char)).detach();
+   // Blocking until font image is uploaded might be more preferable
+   submit_image_upload_cmd(device_data, &device_data->font_img, pixels, width * height * 4 * sizeof(char));
 }
 
 static void check_fonts(struct swapchain_data* data)
@@ -902,6 +904,18 @@ ImTextureID add_texture(swapchain_stats *stats, const std::string& filename, int
    return (ImTextureID) ti.descset;
 }
 
+static void check_images(struct device_data* device_data)
+{
+   const overlay_params_wrapper w = g_overlay_params.get();
+   const auto& params = w.params;
+   if (params.image_params_hash == device_data->image_params_hash)
+      return;
+
+   std::unique_lock<std::mutex> lk(device_data->font_mutex);
+   if (params.image_params_hash == device_data->image_params_hash)
+      return;
+}
+
 static void CreateOrResizeBuffer(struct device_data *data,
                                  VkBuffer *buffer,
                                  VkDeviceMemory *buffer_memory,
@@ -947,8 +961,9 @@ static struct overlay_draw *render_swapchain_display(struct swapchain_data *data
 {
    ImDrawData* draw_data = ImGui::GetDrawData();
    struct device_data *device_data = data->device;
+   const overlay_params_wrapper w = g_overlay_params.get();
 
-   if (!draw_data || draw_data->TotalVtxCount == 0 || device_data->instance->params.no_display)
+   if (!draw_data || draw_data->TotalVtxCount == 0 || w.params.no_display)
       return nullptr;
 
    if (!device_data->font_img.uploaded)
@@ -1435,6 +1450,7 @@ static void convert_colors_vk(VkFormat format, struct swapchain_stats& sw_stats,
 static void setup_swapchain_data(struct swapchain_data *data,
                                  const VkSwapchainCreateInfoKHR *pCreateInfo)
 {
+   const overlay_params_wrapper w = g_overlay_params.get();
    struct device_data *device_data = data->device;
    data->width = pCreateInfo->imageExtent.width;
    data->height = pCreateInfo->imageExtent.height;
@@ -1445,7 +1461,7 @@ static void setup_swapchain_data(struct swapchain_data *data,
 
    ImGui::GetIO().IniFilename = NULL;
    ImGui::GetIO().DisplaySize = ImVec2((float)data->width, (float)data->height);
-   convert_colors_vk(pCreateInfo->imageFormat, data->sw_stats, device_data->instance->params);
+   convert_colors_vk(pCreateInfo->imageFormat, data->sw_stats, w.params);
 
    /* Render pass */
    VkAttachmentDescription attachment_desc = {};
@@ -1640,12 +1656,14 @@ static VkResult overlay_CreateSwapchainKHR(
            VK_PRESENT_MODE_IMMEDIATE_KHR,
            VK_PRESENT_MODE_MAILBOX_KHR,
            VK_PRESENT_MODE_FIFO_KHR};
-   if (device_data->instance->params.vsync < 4)
-      createInfo.presentMode = modes[device_data->instance->params.vsync];
+
+   const overlay_params_wrapper w = g_overlay_params.get();
+   if (w.params.vsync < 4)
+      createInfo.presentMode = modes[w.params.vsync];
 
    VkResult result = device_data->vtable.CreateSwapchainKHR(device, &createInfo, pAllocator, pSwapchain);
    if (result != VK_SUCCESS) return result;
-   struct swapchain_data *swapchain_data = new_swapchain_data(*pSwapchain, device_data);
+   struct swapchain_data *swapchain_data = new_swapchain_data(*pSwapchain, device_data, w.params);
    setup_swapchain_data(swapchain_data, pCreateInfo);
 
    const VkPhysicalDeviceProperties& prop = device_data->properties;
@@ -1713,6 +1731,7 @@ static VkResult overlay_QueuePresentKHR(
    struct queue_data *queue_data = FIND(struct queue_data, queue);
 
    check_fonts(queue_data->device);
+   check_images(queue_data->device);
 
    /* Otherwise we need to add our overlay drawing semaphore to the list of
     * semaphores to wait on. If we don't do that the presented picture might
@@ -1956,7 +1975,8 @@ static VkResult overlay_CreateDevice(
       gpu = get_device_name(device_data->properties.vendorID, device_data->properties.deviceID);
       SPDLOG_DEBUG("gpu: {}", gpu);
 #endif
-      init_gpu_stats(device_data->properties.vendorID, device_data->properties.deviceID, device_data->instance->params);
+      const overlay_params_wrapper w = g_overlay_params.get();
+      init_gpu_stats(device_data->properties.vendorID, device_data->properties.deviceID, w.params);
    }
 
    return result;
@@ -2052,29 +2072,29 @@ static VkResult overlay_CreateInstance(
                              &instance_data->vtable);
    instance_data_map_physical_devices(instance_data, true);
 
-   parse_overlay_config(&instance_data->params, getenv("MANGOHUD_CONFIG"));
-   _params = &instance_data->params;
+   auto w = g_overlay_params.get();
+   parse_overlay_config(&w.params, getenv("MANGOHUD_CONFIG"));
 
    //check for blacklist item in the config file
-   for (auto& item : instance_data->params.blacklist) {
+   for (auto& item : w.params.blacklist) {
       add_blacklist(item);
    }
 
    if (!is_blacklisted()) {
 #ifdef __linux__
       init_system_info();
-      instance_data->notifier.params = &instance_data->params;
+      instance_data->notifier.params = &g_overlay_params;
       start_notifier(instance_data->notifier);
 #endif
 
-      init_cpu_stats(instance_data->params);
+      init_cpu_stats(w.params);
 
       // Adjust height for DXVK/VKD3D version number
       if (engineName == "DXVK" || engineName == "VKD3D"){
-         if (instance_data->params.font_size){
-            instance_data->params.height += instance_data->params.font_size * instance_data->params.font_scale / 2;
+         if (w.params.font_size){
+            w.params.height += w.params.font_size * w.params.font_scale / 2;
          } else {
-            instance_data->params.height += 24 * instance_data->params.font_scale / 2;
+            w.params.height += 24 * w.params.font_scale / 2;
          }
       }
 
@@ -2084,7 +2104,6 @@ static VkResult overlay_CreateInstance(
    }
 
    instance_data->api_version = pCreateInfo->pApplicationInfo ? pCreateInfo->pApplicationInfo->apiVersion : VK_API_VERSION_1_0;
-
    return result;
 }
 
diff --git a/src/win/d3d_shared.cpp b/src/win/d3d_shared.cpp
index b7d61a4..80ecdb1 100644
--- a/src/win/d3d_shared.cpp
+++ b/src/win/d3d_shared.cpp
@@ -13,8 +13,7 @@ void init_d3d_shared(){
     vendorID = get_device_id_dxgi();
     if (cfg_inited)
         return;
-     parse_overlay_config(&params, getenv("MANGOHUD_CONFIG"));
-     _params = &params;
+     parse_overlay_config(/*&params, */getenv("MANGOHUD_CONFIG"));
      cfg_inited = true;
     //  init_cpu_stats(params);
 }
@@ -22,4 +21,4 @@ void init_d3d_shared(){
 void d3d_run(){
     check_keybinds(params, vendorID);
 	update_hud_info(sw_stats, params, vendorID);
-}
\ No newline at end of file
+}
-- 
2.34.1


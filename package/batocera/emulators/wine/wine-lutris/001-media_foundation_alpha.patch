From 0b9a7c4a339d44aed6e1662e544834c19769a8a1 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Fri, 16 Oct 2020 16:48:30 -0500
Subject: [PATCH 01/57] mfplat: Fix asynchronous object creation from URL.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/mfplat/main.c         | 4 +++-
 dlls/mfplat/tests/mfplat.c | 2 --
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/dlls/mfplat/main.c b/dlls/mfplat/main.c
index a6ff97ae04a..8ed18b1b87f 100644
--- a/dlls/mfplat/main.c
+++ b/dlls/mfplat/main.c
@@ -5750,6 +5750,8 @@ static HRESULT resolver_handler_end_create(struct source_resolver *resolver, enu
     if (!(queued_result = heap_alloc_zero(sizeof(*queued_result))))
         return E_OUTOFMEMORY;
 
+    queued_result->origin = origin;
+
     IRtwqAsyncResult_GetObject(inner_result, &handler.handler);
 
     switch (origin)
@@ -5788,8 +5790,8 @@ static HRESULT resolver_handler_end_create(struct source_resolver *resolver, enu
 
         if (SUCCEEDED(RtwqCreateAsyncResult(queued_result->object, data->pCallback, caller_state, &caller_result)))
         {
+            queued_result->inner_result = caller_result;
             RtwqInvokeCallback(caller_result);
-            IRtwqAsyncResult_Release(caller_result);
         }
     }
 
diff --git a/dlls/mfplat/tests/mfplat.c b/dlls/mfplat/tests/mfplat.c
index 55c07adb1fe..a5388840bc5 100644
--- a/dlls/mfplat/tests/mfplat.c
+++ b/dlls/mfplat/tests/mfplat.c
@@ -343,12 +343,10 @@ static HRESULT WINAPI test_create_from_url_callback_Invoke(IMFAsyncCallback *ifa
 
     object = NULL;
     hr = IMFSourceResolver_EndCreateObjectFromURL(resolver, result, &obj_type, &object);
-todo_wine
     ok(hr == S_OK, "Failed to create an object, hr %#x.\n", hr);
 
     hr = IMFAsyncResult_GetObject(result, &object2);
     ok(hr == S_OK, "Failed to get result object, hr %#x.\n", hr);
-todo_wine
     ok(object2 == object, "Unexpected object.\n");
 
     if (object)
-- 
2.26.2

From 3277e517f89730f9963d4fc619179a882e9911d0 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Fri, 16 Oct 2020 16:53:29 -0500
Subject: [PATCH 02/57] mfmediaengine: Provide the partial topology to the
 media session.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/mfmediaengine/main.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/dlls/mfmediaengine/main.c b/dlls/mfmediaengine/main.c
index d93e2b2f38c..d1261e3cd73 100644
--- a/dlls/mfmediaengine/main.c
+++ b/dlls/mfmediaengine/main.c
@@ -418,7 +418,10 @@ static HRESULT media_engine_create_topology(struct media_engine *engine, IMFMedi
             {
                 sd_video = sd;
                 IMFStreamDescriptor_AddRef(sd_video);
+                /* TODO: reintroduce this once we set up video stream nodes */
+#if 0
                 IMFPresentationDescriptor_SelectStream(pd, i);
+#endif
             }
 
             IMFMediaTypeHandler_Release(type_handler);
@@ -480,6 +483,9 @@ static HRESULT media_engine_create_topology(struct media_engine *engine, IMFMedi
             if (audio_src)
                 IMFTopologyNode_Release(audio_src);
         }
+
+        if (SUCCEEDED(hr))
+            hr = IMFMediaSession_SetTopology(engine->session, MFSESSION_SETTOPOLOGY_IMMEDIATE, topology);
     }
 
     if (topology)
-- 
2.26.2

From 0979488b998dde4074fe4f443971fc90534c3fad Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Fri, 16 Oct 2020 16:54:57 -0500
Subject: [PATCH 03/57] mfmediaengine: Issue MF_MEDIA_ENGINE_EVENT_CANPLAY upon
 MF_TOPOSTATUS_READY.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/mfmediaengine/main.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/dlls/mfmediaengine/main.c b/dlls/mfmediaengine/main.c
index d1261e3cd73..bc89b2f702a 100644
--- a/dlls/mfmediaengine/main.c
+++ b/dlls/mfmediaengine/main.c
@@ -295,6 +295,14 @@ static HRESULT WINAPI media_engine_session_events_Invoke(IMFAsyncCallback *iface
             IMFMediaEngineNotify_EventNotify(engine->callback, event_type == MEBufferingStarted ?
                     MF_MEDIA_ENGINE_EVENT_BUFFERINGSTARTED : MF_MEDIA_ENGINE_EVENT_BUFFERINGENDED, 0, 0);
             break;
+        case MESessionTopologyStatus:
+        {
+            UINT32 topo_status = 0;
+            IMFMediaEvent_GetUINT32(event, &MF_EVENT_TOPOLOGY_STATUS, &topo_status);
+            if (topo_status == MF_TOPOSTATUS_READY)
+                IMFMediaEngineNotify_EventNotify(engine->callback, MF_MEDIA_ENGINE_EVENT_CANPLAY, 0, 0);
+            break;
+        }
     }
 
 failed:
-- 
2.26.2

From a18e891de447633290c6a22ba556bff695ae9f40 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Fri, 16 Oct 2020 16:57:21 -0500
Subject: [PATCH 04/57] mfmediaengine: Issue MF_MEDIA_ENGINE_EVENT_PLAYING upon
 MESessionStarted.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/mfmediaengine/main.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/dlls/mfmediaengine/main.c b/dlls/mfmediaengine/main.c
index bc89b2f702a..ed57aec7eb1 100644
--- a/dlls/mfmediaengine/main.c
+++ b/dlls/mfmediaengine/main.c
@@ -303,6 +303,10 @@ static HRESULT WINAPI media_engine_session_events_Invoke(IMFAsyncCallback *iface
                 IMFMediaEngineNotify_EventNotify(engine->callback, MF_MEDIA_ENGINE_EVENT_CANPLAY, 0, 0);
             break;
         }
+        case MESessionStarted:
+
+            IMFMediaEngineNotify_EventNotify(engine->callback, MF_MEDIA_ENGINE_EVENT_PLAYING, 0, 0);
+            break;
     }
 
 failed:
-- 
2.26.2

From ef80a5e368f46d035b15910f591fa6e6adf214d4 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Fri, 16 Oct 2020 16:58:20 -0500
Subject: [PATCH 05/57] mfmediaengine: Issue MF_MEDIA_ENGINE_EVENT_ENDED upon
 MESessionEnded.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/mfmediaengine/main.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/dlls/mfmediaengine/main.c b/dlls/mfmediaengine/main.c
index ed57aec7eb1..fe9aa81121f 100644
--- a/dlls/mfmediaengine/main.c
+++ b/dlls/mfmediaengine/main.c
@@ -307,6 +307,10 @@ static HRESULT WINAPI media_engine_session_events_Invoke(IMFAsyncCallback *iface
 
             IMFMediaEngineNotify_EventNotify(engine->callback, MF_MEDIA_ENGINE_EVENT_PLAYING, 0, 0);
             break;
+        case MESessionEnded:
+
+            IMFMediaEngineNotify_EventNotify(engine->callback, MF_MEDIA_ENGINE_EVENT_ENDED, 0, 0);
+            break;
     }
 
 failed:
-- 
2.26.2

From 0f807d915d1ee170217cd97d85183922fbda1722 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Wed, 14 Oct 2020 11:07:05 -0500
Subject: [PATCH 06/57] mf: Unconditionally deliver NULL (EOS) samples.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/mf/session.c | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/dlls/mf/session.c b/dlls/mf/session.c
index a1b54b7080e..7c82aa42a4b 100644
--- a/dlls/mf/session.c
+++ b/dlls/mf/session.c
@@ -2599,11 +2599,12 @@ static void session_deliver_sample_to_node(struct media_session *session, IMFTop
                 LIST_FOR_EACH_ENTRY_SAFE(sample_entry, sample_entry2, &topo_node->u.transform.outputs[i].samples,
                         struct sample, entry)
                 {
-                    if (!topo_node->u.transform.outputs[i].requests)
+                    if (!topo_node->u.transform.outputs[i].requests && sample_entry->sample)
                         break;
 
                     session_deliver_sample_to_node(session, downstream_node, downstream_input, sample_entry->sample);
-                    topo_node->u.transform.outputs[i].requests--;
+                    if (sample_entry->sample)
+                        topo_node->u.transform.outputs[i].requests--;
 
                     transform_release_sample(sample_entry);
                 }
-- 
2.26.2

From 2e4958801053b8318417b903334fd4c6be817e8e Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 25 Aug 2020 17:35:49 -0500
Subject: [PATCH 07/57] winegstreamer: Insert videoconvert into decoded-video
 streams.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/media_source.c | 125 ++++++++++++++++++++++++++----
 1 file changed, 111 insertions(+), 14 deletions(-)

diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index 5f3c43a0204..258b8c2dfb1 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -384,6 +384,43 @@ static const IMFMediaStreamVtbl media_stream_vtbl =
     media_stream_RequestSample
 };
 
+/* Setup a chain of elements which should hopefully allow transformations to any IMFMediaType
+   the user throws at us through gstreamer's caps negotiation. */
+static HRESULT media_stream_connect_to_sink(struct media_stream *stream)
+{
+    GstCaps *source_caps = gst_pad_query_caps(stream->their_src, NULL);
+    const gchar *stream_type;
+
+    if (!source_caps)
+        return E_FAIL;
+
+    stream_type = gst_structure_get_name(gst_caps_get_structure(source_caps, 0));
+    gst_caps_unref(source_caps);
+
+    if (!strcmp(stream_type, "video/x-raw"))
+    {
+        GstElement *videoconvert = gst_element_factory_make("videoconvert", NULL);
+
+        gst_bin_add(GST_BIN(stream->parent_source->container), videoconvert);
+
+        stream->my_sink = gst_element_get_static_pad(videoconvert, "sink");
+
+        if (!gst_element_link(videoconvert, stream->appsink))
+            return E_FAIL;
+
+        gst_element_sync_state_with_parent(videoconvert);
+    }
+    else
+    {
+        stream->my_sink = gst_element_get_static_pad(stream->appsink, "sink");
+    }
+
+    if (gst_pad_link(stream->their_src, stream->my_sink) != GST_PAD_LINK_OK)
+        return E_FAIL;
+
+    return S_OK;
+}
+
 static HRESULT new_media_stream(struct media_source *source, GstPad *pad, DWORD stream_id, struct media_stream **out_stream)
 {
     struct media_stream *object = heap_alloc_zero(sizeof(*object));
@@ -414,8 +451,8 @@ static HRESULT new_media_stream(struct media_source *source, GstPad *pad, DWORD
     g_object_set(object->appsink, "sync", FALSE, NULL);
     g_object_set(object->appsink, "max-buffers", 5, NULL);
 
-    object->my_sink = gst_element_get_static_pad(object->appsink, "sink");
-    gst_pad_link(object->their_src, object->my_sink);
+    if (FAILED(hr = media_stream_connect_to_sink(object)))
+        goto fail;
 
     gst_element_sync_state_with_parent(object->appsink);
 
@@ -435,28 +472,88 @@ static HRESULT media_stream_init_desc(struct media_stream *stream)
 {
     GstCaps *current_caps = gst_pad_get_current_caps(stream->their_src);
     IMFMediaTypeHandler *type_handler;
+    IMFMediaType **stream_types = NULL;
     IMFMediaType *stream_type = NULL;
+    DWORD type_count = 0;
+    const gchar *major_type;
+    unsigned int i;
     HRESULT hr;
 
-    stream_type = mf_media_type_from_caps(current_caps);
-    gst_caps_unref(current_caps);
-    if (!stream_type)
-        return E_FAIL;
+    major_type = gst_structure_get_name(gst_caps_get_structure(current_caps, 0));
+
+    if (!strcmp(major_type, "video/x-raw"))
+    {
+        /* These are the most common native output types of decoders:
+            https://docs.microsoft.com/en-us/windows/win32/medfound/mft-decoder-expose-output-types-in-native-order */
+        static const GUID *const video_types[] =
+        {
+            &MFVideoFormat_NV12,
+            &MFVideoFormat_YV12,
+            &MFVideoFormat_YUY2,
+            &MFVideoFormat_IYUV,
+            &MFVideoFormat_I420,
+        };
 
-    hr = MFCreateStreamDescriptor(stream->stream_id, 1, &stream_type, &stream->descriptor);
+        IMFMediaType *base_type = mf_media_type_from_caps(current_caps);
+        GUID base_subtype;
 
-    IMFMediaType_Release(stream_type);
+        IMFMediaType_GetGUID(base_type, &MF_MT_SUBTYPE, &base_subtype);
 
-    if (FAILED(hr))
-        return hr;
+        stream_types = heap_alloc( sizeof(IMFMediaType *) * ARRAY_SIZE(video_types) + 1);
 
-    if (FAILED(hr = IMFStreamDescriptor_GetMediaTypeHandler(stream->descriptor, &type_handler)))
-        return hr;
+        stream_types[0] = base_type;
+        type_count = 1;
 
-    hr = IMFMediaTypeHandler_SetCurrentMediaType(type_handler, stream_type);
+        for (i = 0; i < ARRAY_SIZE(video_types); i++)
+        {
+            IMFMediaType *new_type;
 
-    IMFMediaTypeHandler_Release(type_handler);
+            if (IsEqualGUID(&base_subtype, video_types[i]))
+                continue;
 
+            if (FAILED(hr = MFCreateMediaType(&new_type)))
+                goto done;
+            stream_types[type_count++] = new_type;
+
+            if (FAILED(hr = IMFMediaType_CopyAllItems(base_type, (IMFAttributes *) new_type)))
+                goto done;
+            if (FAILED(hr = IMFMediaType_SetGUID(new_type, &MF_MT_SUBTYPE, video_types[i])))
+                goto done;
+        }
+    }
+    else
+    {
+        stream_type = mf_media_type_from_caps(current_caps);
+        if (stream_type)
+        {
+            stream_types = &stream_type;
+            type_count = 1;
+        }
+    }
+
+    if (!type_count)
+    {
+        ERR("Failed to establish an IMFMediaType from any of the possible stream caps!\n");
+        return E_FAIL;
+    }
+
+    if (FAILED(hr = MFCreateStreamDescriptor(stream->stream_id, type_count, stream_types, &stream->descriptor)))
+        goto done;
+
+    if (FAILED(hr = IMFStreamDescriptor_GetMediaTypeHandler(stream->descriptor, &type_handler)))
+        goto done;
+
+    if (FAILED(hr = IMFMediaTypeHandler_SetCurrentMediaType(type_handler, stream_types[0])))
+        goto done;
+
+done:
+    gst_caps_unref(current_caps);
+    if (type_handler)
+        IMFMediaTypeHandler_Release(type_handler);
+    for (i = 0; i < type_count; i++)
+        IMFMediaType_Release(stream_types[i]);
+    if (stream_types != &stream_type)
+        heap_free(stream_types);
     return hr;
 }
 
-- 
2.26.2

From d25d65e440a32d9a5f5d933084ff0d2d81c1427d Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 25 Aug 2020 17:37:28 -0500
Subject: [PATCH 08/57] winegstreamer: Insert audioconvert into decoded audio
 streams.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/media_source.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index 258b8c2dfb1..d6c7837e544 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -410,6 +410,19 @@ static HRESULT media_stream_connect_to_sink(struct media_stream *stream)
 
         gst_element_sync_state_with_parent(videoconvert);
     }
+    else if (!strcmp(stream_type, "audio/x-raw"))
+    {
+        GstElement *audioconvert = gst_element_factory_make("audioconvert", NULL);
+
+        gst_bin_add(GST_BIN(stream->parent_source->container), audioconvert);
+
+        stream->my_sink = gst_element_get_static_pad(audioconvert, "sink");
+
+        if (!gst_element_link(audioconvert, stream->appsink))
+            return E_FAIL;
+
+        gst_element_sync_state_with_parent(audioconvert);
+    }
     else
     {
         stream->my_sink = gst_element_get_static_pad(stream->appsink, "sink");
-- 
2.26.2

From 2955cbeaa8b000785b87e39b542d4bebef394644 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 31 Mar 2020 11:21:21 -0500
Subject: [PATCH 09/57] winegstreamer: Implement
 IMFMediaSource::CreatePresentationDescriptor.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/mf/tests/mf.c                |  1 -
 dlls/mfplat/tests/mfplat.c        | 10 +++++-----
 dlls/winegstreamer/media_source.c | 28 ++++++++++++++++++++++++++--
 3 files changed, 31 insertions(+), 8 deletions(-)

diff --git a/dlls/mf/tests/mf.c b/dlls/mf/tests/mf.c
index 351a6e1edab..e6f3593a74b 100644
--- a/dlls/mf/tests/mf.c
+++ b/dlls/mf/tests/mf.c
@@ -1451,7 +1451,6 @@ todo_wine
         return;
 
     hr = IMFMediaSource_CreatePresentationDescriptor(source, &pd);
-todo_wine
     ok(hr == S_OK, "Failed to create descriptor, hr %#x.\n", hr);
     if (FAILED(hr))
         return;
diff --git a/dlls/mfplat/tests/mfplat.c b/dlls/mfplat/tests/mfplat.c
index a5388840bc5..81d09694dae 100644
--- a/dlls/mfplat/tests/mfplat.c
+++ b/dlls/mfplat/tests/mfplat.c
@@ -574,10 +574,7 @@ static void test_source_resolver(void)
     ok(obj_type == MF_OBJECT_MEDIASOURCE, "got %d\n", obj_type);
 
     hr = IMFMediaSource_CreatePresentationDescriptor(mediasource, &descriptor);
-todo_wine
     ok(hr == S_OK, "Failed to get presentation descriptor, hr %#x.\n", hr);
-    if (FAILED(hr))
-        goto skip_source_tests;
     ok(descriptor != NULL, "got %p\n", descriptor);
 
     hr = IMFPresentationDescriptor_GetStreamDescriptorByIndex(descriptor, 0, &selected, &sd);
@@ -597,6 +594,7 @@ todo_wine
     ok(hr == S_OK, "Failed to get current media type, hr %#x.\n", hr);
     hr = IMFMediaType_GetGUID(media_type, &MF_MT_SUBTYPE, &guid);
     ok(hr == S_OK, "Failed to get media sub type, hr %#x.\n", hr);
+todo_wine
     ok(IsEqualGUID(&guid, &MFVideoFormat_M4S2), "Unexpected sub type %s.\n", debugstr_guid(&guid));
     IMFMediaType_Release(media_type);
 
@@ -605,7 +603,10 @@ todo_wine
 
     var.vt = VT_EMPTY;
     hr = IMFMediaSource_Start(mediasource, descriptor, &GUID_NULL, &var);
+todo_wine
     ok(hr == S_OK, "Failed to start media source, hr %#x.\n", hr);
+    if (FAILED(hr))
+        goto skip_source_tests;
 
     get_event((IMFMediaEventGenerator *)mediasource, MENewStream, &var);
     ok(var.vt == VT_UNKNOWN, "Unexpected value type %u from MENewStream event.\n", var.vt);
@@ -668,11 +669,10 @@ todo_wine
 
     get_event((IMFMediaEventGenerator *)mediasource, MEEndOfPresentation, NULL);
 
+skip_source_tests:
     IMFMediaTypeHandler_Release(handler);
     IMFPresentationDescriptor_Release(descriptor);
 
-skip_source_tests:
-
     hr = IMFMediaSource_Shutdown(mediasource);
     ok(hr == S_OK, "Unexpected hr %#x.\n", hr);
 
diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index d6c7837e544..9b2c2174318 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -67,6 +67,7 @@ struct media_source
     IMFByteStream *byte_stream;
     struct media_stream **streams;
     ULONG stream_count;
+    IMFPresentationDescriptor *pres_desc;
     GstBus *bus;
     GstElement *container;
     GstElement *decodebin;
@@ -673,12 +674,12 @@ static HRESULT WINAPI media_source_CreatePresentationDescriptor(IMFMediaSource *
 {
     struct media_source *source = impl_from_IMFMediaSource(iface);
 
-    FIXME("(%p)->(%p): stub\n", source, descriptor);
+    TRACE("(%p)->(%p)\n", source, descriptor);
 
     if (source->state == SOURCE_SHUTDOWN)
         return MF_E_SHUTDOWN;
 
-    return E_NOTIMPL;
+    return IMFPresentationDescriptor_Clone(source->pres_desc, descriptor);
 }
 
 static HRESULT WINAPI media_source_Start(IMFMediaSource *iface, IMFPresentationDescriptor *descriptor,
@@ -741,6 +742,8 @@ static HRESULT WINAPI media_source_Shutdown(IMFMediaSource *iface)
     if (source->their_sink)
         gst_object_unref(GST_OBJECT(source->their_sink));
 
+    if (source->pres_desc)
+        IMFPresentationDescriptor_Release(source->pres_desc);
     if (source->event_queue)
         IMFMediaEventQueue_Shutdown(source->event_queue);
     if (source->byte_stream)
@@ -841,6 +844,7 @@ static HRESULT media_source_constructor(IMFByteStream *bytestream, struct media_
         GST_STATIC_PAD_TEMPLATE("mf_src", GST_PAD_SRC, GST_PAD_ALWAYS, GST_STATIC_CAPS_ANY);
 
     struct media_source *object = heap_alloc_zero(sizeof(*object));
+    IMFStreamDescriptor **descriptors = NULL;
     unsigned int i;
     HRESULT hr;
     int ret;
@@ -928,6 +932,25 @@ static HRESULT media_source_constructor(IMFByteStream *bytestream, struct media_
         gst_sample_unref(preroll);
     }
 
+    /* init presentation descriptor */
+
+    descriptors = heap_alloc(object->stream_count * sizeof(IMFStreamDescriptor*));
+    for (i = 0; i < object->stream_count; i++)
+    {
+        IMFMediaStream_GetStreamDescriptor(&object->streams[i]->IMFMediaStream_iface, &descriptors[i]);
+    }
+
+    if (FAILED(hr = MFCreatePresentationDescriptor(object->stream_count, descriptors, &object->pres_desc)))
+        goto fail;
+
+    for (i = 0; i < object->stream_count; i++)
+    {
+        IMFPresentationDescriptor_SelectStream(object->pres_desc, i);
+        IMFStreamDescriptor_Release(descriptors[i]);
+    }
+    heap_free(descriptors);
+    descriptors = NULL;
+
     object->state = SOURCE_STOPPED;
 
     *out_media_source = object;
@@ -936,6 +959,7 @@ static HRESULT media_source_constructor(IMFByteStream *bytestream, struct media_
     fail:
     WARN("Failed to construct MFMediaSource, hr %#x.\n", hr);
 
+    heap_free(descriptors);
     IMFMediaSource_Release(&object->IMFMediaSource_iface);
     return hr;
 }
-- 
2.26.2

From 3bda7ac147cd3bff5c6eabce86a9f54338d4abab Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 24 Mar 2020 16:15:35 -0500
Subject: [PATCH 10/57] winegstreamer: Implement IMFMediaSource::Start.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/mfplat/tests/mfplat.c        |   8 +-
 dlls/winegstreamer/gst_private.h  |   1 +
 dlls/winegstreamer/media_source.c | 307 +++++++++++++++++++++++++++++-
 dlls/winegstreamer/mfplat.c       | 131 +++++++++++++
 4 files changed, 439 insertions(+), 8 deletions(-)

diff --git a/dlls/mfplat/tests/mfplat.c b/dlls/mfplat/tests/mfplat.c
index 81d09694dae..ceabbd09d0d 100644
--- a/dlls/mfplat/tests/mfplat.c
+++ b/dlls/mfplat/tests/mfplat.c
@@ -603,10 +603,7 @@ todo_wine
 
     var.vt = VT_EMPTY;
     hr = IMFMediaSource_Start(mediasource, descriptor, &GUID_NULL, &var);
-todo_wine
     ok(hr == S_OK, "Failed to start media source, hr %#x.\n", hr);
-    if (FAILED(hr))
-        goto skip_source_tests;
 
     get_event((IMFMediaEventGenerator *)mediasource, MENewStream, &var);
     ok(var.vt == VT_UNKNOWN, "Unexpected value type %u from MENewStream event.\n", var.vt);
@@ -624,10 +621,13 @@ todo_wine
         hr = IMFMediaStream_RequestSample(video_stream, NULL);
         if (i == sample_count)
             break;
+todo_wine
         ok(hr == S_OK, "Failed to request sample %u, hr %#x.\n", i + 1, hr);
         if (hr != S_OK)
             break;
     }
+    if (FAILED(hr))
+        goto skip_source_tests;
 
     for (i = 0; i < sample_count; ++i)
     {
@@ -665,11 +665,11 @@ todo_wine
 
     hr = IMFMediaStream_RequestSample(video_stream, NULL);
     ok(hr == MF_E_END_OF_STREAM, "Unexpected hr %#x.\n", hr);
-    IMFMediaStream_Release(video_stream);
 
     get_event((IMFMediaEventGenerator *)mediasource, MEEndOfPresentation, NULL);
 
 skip_source_tests:
+    IMFMediaStream_Release(video_stream);
     IMFMediaTypeHandler_Release(handler);
     IMFPresentationDescriptor_Release(descriptor);
 
diff --git a/dlls/winegstreamer/gst_private.h b/dlls/winegstreamer/gst_private.h
index 60b38a48f5a..07556802a51 100644
--- a/dlls/winegstreamer/gst_private.h
+++ b/dlls/winegstreamer/gst_private.h
@@ -57,6 +57,7 @@ extern HRESULT mfplat_get_class_object(REFCLSID rclsid, REFIID riid, void **obj)
 
 HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj) DECLSPEC_HIDDEN;
 IMFMediaType *mf_media_type_from_caps(const GstCaps *caps) DECLSPEC_HIDDEN;
+GstCaps *caps_from_mf_media_type(IMFMediaType *type) DECLSPEC_HIDDEN;
 
 HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj) DECLSPEC_HIDDEN;
 
diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index 9b2c2174318..70c5b47ba84 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -55,14 +55,38 @@ struct media_stream
     {
         STREAM_INACTIVE,
         STREAM_SHUTDOWN,
+        STREAM_RUNNING,
     } state;
     DWORD stream_id;
 };
 
+enum source_async_op
+{
+    SOURCE_ASYNC_START,
+};
+
+struct source_async_command
+{
+    IUnknown IUnknown_iface;
+    LONG refcount;
+    enum source_async_op op;
+    union
+    {
+        struct
+        {
+            IMFPresentationDescriptor *descriptor;
+            GUID format;
+            PROPVARIANT position;
+        } start;
+    } u;
+};
+
 struct media_source
 {
     IMFMediaSource IMFMediaSource_iface;
+    IMFAsyncCallback async_commands_callback;
     LONG ref;
+    DWORD async_commands_queue;
     IMFMediaEventQueue *event_queue;
     IMFByteStream *byte_stream;
     struct media_stream **streams;
@@ -76,6 +100,7 @@ struct media_source
     {
         SOURCE_OPENING,
         SOURCE_STOPPED,
+        SOURCE_RUNNING,
         SOURCE_SHUTDOWN,
     } state;
     HANDLE no_more_pads_event;
@@ -91,7 +116,260 @@ static inline struct media_source *impl_from_IMFMediaSource(IMFMediaSource *ifac
     return CONTAINING_RECORD(iface, struct media_source, IMFMediaSource_iface);
 }
 
-static GstFlowReturn bytestream_wrapper_pull(GstPad *pad, GstObject *parent, guint64 ofs, guint len,
+static inline struct media_source *impl_from_async_commands_callback_IMFAsyncCallback(IMFAsyncCallback *iface)
+{
+    return CONTAINING_RECORD(iface, struct media_source, async_commands_callback);
+}
+
+static inline struct source_async_command *impl_from_async_command_IUnknown(IUnknown *iface)
+{
+    return CONTAINING_RECORD(iface, struct source_async_command, IUnknown_iface);
+}
+
+static HRESULT WINAPI source_async_command_QueryInterface(IUnknown *iface, REFIID riid, void **obj)
+{
+    if (IsEqualIID(riid, &IID_IUnknown))
+    {
+        *obj = iface;
+        IUnknown_AddRef(iface);
+        return S_OK;
+    }
+
+    WARN("Unsupported interface %s.\n", debugstr_guid(riid));
+    *obj = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI source_async_command_AddRef(IUnknown *iface)
+{
+    struct source_async_command *command = impl_from_async_command_IUnknown(iface);
+    return InterlockedIncrement(&command->refcount);
+}
+
+static ULONG WINAPI source_async_command_Release(IUnknown *iface)
+{
+    struct source_async_command *command = impl_from_async_command_IUnknown(iface);
+    ULONG refcount = InterlockedDecrement(&command->refcount);
+
+    if (!refcount)
+    {
+        if (command->op == SOURCE_ASYNC_START)
+            PropVariantClear(&command->u.start.position);
+        heap_free(command);
+    }
+
+    return refcount;
+}
+
+static const IUnknownVtbl source_async_command_vtbl =
+{
+    source_async_command_QueryInterface,
+    source_async_command_AddRef,
+    source_async_command_Release,
+};
+
+static HRESULT source_create_async_op(enum source_async_op op, struct source_async_command **ret)
+{
+    struct source_async_command *command;
+
+    if (!(command = heap_alloc_zero(sizeof(*command))))
+        return E_OUTOFMEMORY;
+
+    command->IUnknown_iface.lpVtbl = &source_async_command_vtbl;
+    command->op = op;
+
+    *ret = command;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI callback_QueryInterface(IMFAsyncCallback *iface, REFIID riid, void **obj)
+{
+    TRACE("%p, %s, %p.\n", iface, debugstr_guid(riid), obj);
+
+    if (IsEqualIID(riid, &IID_IMFAsyncCallback) ||
+            IsEqualIID(riid, &IID_IUnknown))
+    {
+        *obj = iface;
+        IMFAsyncCallback_AddRef(iface);
+        return S_OK;
+    }
+
+    WARN("Unsupported %s.\n", debugstr_guid(riid));
+    *obj = NULL;
+    return E_NOINTERFACE;
+}
+
+static HRESULT WINAPI callback_GetParameters(IMFAsyncCallback *iface,
+        DWORD *flags, DWORD *queue)
+{
+    return E_NOTIMPL;
+}
+
+static ULONG WINAPI source_async_commands_callback_AddRef(IMFAsyncCallback *iface)
+{
+    struct media_source *source = impl_from_async_commands_callback_IMFAsyncCallback(iface);
+    return IMFMediaSource_AddRef(&source->IMFMediaSource_iface);
+}
+
+static ULONG WINAPI source_async_commands_callback_Release(IMFAsyncCallback *iface)
+{
+    struct media_source *source = impl_from_async_commands_callback_IMFAsyncCallback(iface);
+    return IMFMediaSource_Release(&source->IMFMediaSource_iface);
+}
+
+static IMFStreamDescriptor *stream_descriptor_from_id(IMFPresentationDescriptor *pres_desc, DWORD id, BOOL *selected)
+{
+    ULONG sd_count;
+    IMFStreamDescriptor *ret;
+    unsigned int i;
+
+    if (FAILED(IMFPresentationDescriptor_GetStreamDescriptorCount(pres_desc, &sd_count)))
+        return NULL;
+
+    for (i = 0; i < sd_count; i++)
+    {
+        DWORD stream_id;
+
+        if (FAILED(IMFPresentationDescriptor_GetStreamDescriptorByIndex(pres_desc, i, selected, &ret)))
+            return NULL;
+
+        if (SUCCEEDED(IMFStreamDescriptor_GetStreamIdentifier(ret, &stream_id)) && stream_id == id)
+            return ret;
+
+        IMFStreamDescriptor_Release(ret);
+    }
+    return NULL;
+}
+
+static void start_pipeline(struct media_source *source, struct source_async_command *command)
+{
+    PROPVARIANT *position = &command->u.start.position;
+    BOOL seek_message = source->state != SOURCE_STOPPED && position->vt != VT_EMPTY;
+    GstStateChangeReturn ret;
+    unsigned int i;
+
+    gst_element_set_state(source->container, GST_STATE_PAUSED);
+    ret = gst_element_get_state(source->container, NULL, NULL, -1);
+    assert(ret == GST_STATE_CHANGE_SUCCESS);
+
+    /* seek to beginning on stop->play */
+    if (source->state == SOURCE_STOPPED && position->vt == VT_EMPTY)
+    {
+        position->vt = VT_I8;
+        position->u.hVal.QuadPart = 0;
+    }
+
+    for (i = 0; i < source->stream_count; i++)
+    {
+        struct media_stream *stream;
+        IMFStreamDescriptor *sd;
+        IMFMediaTypeHandler *mth;
+        IMFMediaType *current_mt;
+        GstCaps *current_caps;
+        GstCaps *prev_caps;
+        DWORD stream_id;
+        BOOL was_active;
+        BOOL selected;
+
+        stream = source->streams[i];
+
+        IMFStreamDescriptor_GetStreamIdentifier(stream->descriptor, &stream_id);
+
+        sd = stream_descriptor_from_id(command->u.start.descriptor, stream_id, &selected);
+        IMFStreamDescriptor_Release(sd);
+
+        was_active = stream->state != STREAM_INACTIVE;
+
+        stream->state = selected ? STREAM_RUNNING : STREAM_INACTIVE;
+
+        if (selected)
+        {
+            IMFStreamDescriptor_GetMediaTypeHandler(stream->descriptor, &mth);
+            IMFMediaTypeHandler_GetCurrentMediaType(mth, &current_mt);
+            current_caps = caps_from_mf_media_type(current_mt);
+            g_object_get(stream->appsink, "caps", &prev_caps, NULL);
+            if (!gst_caps_is_equal(prev_caps, current_caps))
+            {
+                GstEvent *reconfigure_event = gst_event_new_reconfigure();
+                g_object_set(stream->appsink, "caps", current_caps, NULL);
+                gst_pad_push_event(gst_element_get_static_pad(stream->appsink, "sink"), reconfigure_event);
+            }
+
+            gst_caps_unref(current_caps);
+            gst_caps_unref(prev_caps);
+            IMFMediaType_Release(current_mt);
+            IMFMediaTypeHandler_Release(mth);
+        }
+
+        g_object_set(stream->appsink, "drop", !selected, NULL);
+
+        if (position->vt != VT_EMPTY)
+        {
+            GstEvent *seek_event = gst_event_new_seek(1.0, GST_FORMAT_TIME, GST_SEEK_FLAG_FLUSH,
+                    GST_SEEK_TYPE_SET, position->u.hVal.QuadPart / 100, GST_SEEK_TYPE_NONE, 0);
+            GstSample *preroll;
+
+            gst_pad_push_event(stream->my_sink, seek_event);
+        }
+
+        if (selected)
+        {
+            TRACE("Stream %u (%p) selected\n", i, stream);
+            IMFMediaEventQueue_QueueEventParamUnk(source->event_queue,
+                was_active ? MEUpdatedStream : MENewStream, &GUID_NULL,
+                S_OK, (IUnknown*) &stream->IMFMediaStream_iface);
+
+            IMFMediaEventQueue_QueueEventParamVar(stream->event_queue,
+                seek_message ? MEStreamSeeked : MEStreamStarted, &GUID_NULL, S_OK, position);
+        }
+    }
+
+    IMFMediaEventQueue_QueueEventParamVar(source->event_queue,
+        seek_message ? MESourceSeeked : MESourceStarted,
+        &GUID_NULL, S_OK, position);
+
+    source->state = SOURCE_RUNNING;
+
+    gst_element_set_state(source->container, GST_STATE_PLAYING);
+}
+
+static HRESULT WINAPI source_async_commands_Invoke(IMFAsyncCallback *iface, IMFAsyncResult *result)
+{
+    struct media_source *source = impl_from_async_commands_callback_IMFAsyncCallback(iface);
+    struct source_async_command *command;
+    IUnknown *state;
+    HRESULT hr;
+
+    if (source->state == SOURCE_SHUTDOWN)
+        return S_OK;
+
+    if (FAILED(hr = IMFAsyncResult_GetState(result, &state)))
+        return hr;
+
+    command = impl_from_async_command_IUnknown(state);
+    switch (command->op)
+    {
+        case SOURCE_ASYNC_START:
+            start_pipeline(source, command);
+            break;
+    }
+
+    IUnknown_Release(state);
+
+    return S_OK;
+}
+
+static const IMFAsyncCallbackVtbl source_async_commands_callback_vtbl =
+{
+    callback_QueryInterface,
+    source_async_commands_callback_AddRef,
+    source_async_commands_callback_Release,
+    callback_GetParameters,
+    source_async_commands_Invoke,
+};
+
+GstFlowReturn bytestream_wrapper_pull(GstPad *pad, GstObject *parent, guint64 ofs, guint len,
         GstBuffer **buf)
 {
     struct media_source *source = gst_pad_get_element_private(pad);
@@ -683,16 +961,30 @@ static HRESULT WINAPI media_source_CreatePresentationDescriptor(IMFMediaSource *
 }
 
 static HRESULT WINAPI media_source_Start(IMFMediaSource *iface, IMFPresentationDescriptor *descriptor,
-                                     const GUID *time_format, const PROPVARIANT *start_position)
+                                     const GUID *time_format, const PROPVARIANT *position)
 {
     struct media_source *source = impl_from_IMFMediaSource(iface);
+    struct source_async_command *command;
+    HRESULT hr;
 
-    FIXME("(%p)->(%p, %p, %p): stub\n", source, descriptor, time_format, start_position);
+    TRACE("(%p)->(%p, %p, %p)\n", source, descriptor, time_format, position);
 
     if (source->state == SOURCE_SHUTDOWN)
         return MF_E_SHUTDOWN;
 
-    return E_NOTIMPL;
+    if (!(IsEqualIID(time_format, &GUID_NULL)))
+        return MF_E_UNSUPPORTED_TIME_FORMAT;
+
+    if (SUCCEEDED(hr = source_create_async_op(SOURCE_ASYNC_START, &command)))
+    {
+        command->u.start.descriptor = descriptor;
+        command->u.start.format = *time_format;
+        PropVariantCopy(&command->u.start.position, position);
+
+        hr = MFPutWorkItem(source->async_commands_queue, &source->async_commands_callback, &command->IUnknown_iface);
+    }
+
+    return hr;
 }
 
 static HRESULT WINAPI media_source_Stop(IMFMediaSource *iface)
@@ -773,6 +1065,9 @@ static HRESULT WINAPI media_source_Shutdown(IMFMediaSource *iface)
     if (source->no_more_pads_event)
         CloseHandle(source->no_more_pads_event);
 
+    if (source->async_commands_queue)
+        MFUnlockWorkQueue(source->async_commands_queue);
+
     return S_OK;
 }
 
@@ -853,6 +1148,7 @@ static HRESULT media_source_constructor(IMFByteStream *bytestream, struct media_
         return E_OUTOFMEMORY;
 
     object->IMFMediaSource_iface.lpVtbl = &IMFMediaSource_vtbl;
+    object->async_commands_callback.lpVtbl = &source_async_commands_callback_vtbl;
     object->ref = 1;
     object->byte_stream = bytestream;
     IMFByteStream_AddRef(bytestream);
@@ -861,6 +1157,9 @@ static HRESULT media_source_constructor(IMFByteStream *bytestream, struct media_
     if (FAILED(hr = MFCreateEventQueue(&object->event_queue)))
         goto fail;
 
+    if (FAILED(hr = MFAllocateWorkQueue(&object->async_commands_queue)))
+        goto fail;
+
     object->container = gst_bin_new(NULL);
     object->bus = gst_bus_new();
     gst_bus_set_sync_handler(object->bus, mf_src_bus_watch_wrapper, object, NULL);
diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 2e8b0978648..12bce9257dd 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -601,3 +601,134 @@ IMFMediaType *mf_media_type_from_caps(const GstCaps *caps)
 
     return media_type;
 }
+
+GstCaps *caps_from_mf_media_type(IMFMediaType *type)
+{
+    GUID major_type;
+    GUID subtype;
+    GstCaps *output = NULL;
+
+    if (FAILED(IMFMediaType_GetMajorType(type, &major_type)))
+        return NULL;
+    if (FAILED(IMFMediaType_GetGUID(type, &MF_MT_SUBTYPE, &subtype)))
+        return NULL;
+
+    if (IsEqualGUID(&major_type, &MFMediaType_Video))
+    {
+        UINT64 frame_rate = 0, frame_size = 0;
+        DWORD width, height;
+        UINT32 unused;
+        GstVideoFormat format = GST_VIDEO_FORMAT_UNKNOWN;
+        GUID subtype_base;
+        GstVideoInfo info;
+        unsigned int i;
+
+        if (FAILED(IMFMediaType_GetUINT64(type, &MF_MT_FRAME_SIZE, &frame_size)))
+            return NULL;
+        width = frame_size >> 32;
+        height = frame_size;
+
+        output = gst_caps_new_empty_simple("video/x-raw");
+
+        for (i = 0; i < ARRAY_SIZE(uncompressed_video_formats); i++)
+        {
+            if (IsEqualGUID(uncompressed_video_formats[i].subtype, &subtype))
+            {
+                format = uncompressed_video_formats[i].format;
+                break;
+            }
+        }
+
+        subtype_base = subtype;
+        subtype_base.Data1 = 0;
+        if (format == GST_VIDEO_FORMAT_UNKNOWN && IsEqualGUID(&MFVideoFormat_Base, &subtype_base))
+            format = gst_video_format_from_fourcc(subtype.Data1);
+
+        if (format == GST_VIDEO_FORMAT_UNKNOWN)
+        {
+            FIXME("Unrecognized format %s\n", debugstr_guid(&subtype));
+            return NULL;
+        }
+
+        gst_video_info_set_format(&info, format, width, height);
+        output = gst_video_info_to_caps(&info);
+
+        if (frame_size)
+        {
+            gst_caps_set_simple(output, "width", G_TYPE_INT, width, NULL);
+            gst_caps_set_simple(output, "height", G_TYPE_INT, height, NULL);
+        }
+        if (SUCCEEDED(IMFMediaType_GetUINT64(type, &MF_MT_FRAME_RATE, &frame_rate)))
+        {
+            /* Darksiders: Warmastered Edition uses a MF_MT_FRAME_RATE of 0,
+               and gstreamer won't accept an undefined number as the framerate. */
+            if (!(DWORD32)frame_rate)
+                frame_rate = 1;
+            gst_caps_set_simple(output, "framerate", GST_TYPE_FRACTION, frame_rate >> 32, (DWORD32) frame_rate, NULL);
+        }
+        return output;
+    }
+    else if (IsEqualGUID(&major_type, &MFMediaType_Audio))
+    {
+        DWORD rate, channels, channel_mask, bitrate;
+
+        if (IsEqualGUID(&subtype, &MFAudioFormat_Float))
+        {
+            output = gst_caps_new_empty_simple("audio/x-raw");
+
+            gst_caps_set_simple(output, "format", G_TYPE_STRING, "F32LE", NULL);
+            gst_caps_set_simple(output, "layout", G_TYPE_STRING, "interleaved", NULL);
+        }
+        else if (IsEqualGUID(&subtype, &MFAudioFormat_PCM))
+        {
+            DWORD bits_per_sample;
+
+            if (SUCCEEDED(IMFMediaType_GetUINT32(type, &MF_MT_AUDIO_BITS_PER_SAMPLE, &bits_per_sample)))
+            {
+                char format[6];
+                char type;
+
+                type = bits_per_sample > 8 ? 'S' : 'U';
+
+                output = gst_caps_new_empty_simple("audio/x-raw");
+
+                sprintf(format, "%c%u%s", type, bits_per_sample, bits_per_sample > 8 ? "LE" : "");
+
+                gst_caps_set_simple(output, "format", G_TYPE_STRING, format, NULL);
+            }
+            else
+            {
+                ERR("Bits per sample not set.\n");
+                return NULL;
+            }
+        }
+        else
+        {
+            FIXME("Unrecognized subtype %s\n", debugstr_guid(&subtype));
+            return NULL;
+        }
+
+        if (SUCCEEDED(IMFMediaType_GetUINT32(type, &MF_MT_AUDIO_SAMPLES_PER_SECOND, &rate)))
+        {
+            gst_caps_set_simple(output, "rate", G_TYPE_INT, rate, NULL);
+        }
+        if (SUCCEEDED(IMFMediaType_GetUINT32(type, &MF_MT_AUDIO_NUM_CHANNELS, &channels)))
+        {
+            gst_caps_set_simple(output, "channels", G_TYPE_INT, channels, NULL);
+        }
+        if (SUCCEEDED(IMFMediaType_GetUINT32(type, &MF_MT_AUDIO_CHANNEL_MASK, &channel_mask)))
+        {
+            gst_caps_set_simple(output, "channel-mask", GST_TYPE_BITMASK, (guint64) channel_mask, NULL);
+        }
+
+        if (SUCCEEDED(IMFMediaType_GetUINT32(type, &MF_MT_AVG_BITRATE, &bitrate)))
+        {
+            gst_caps_set_simple(output, "bitrate", G_TYPE_INT, bitrate, NULL);
+        }
+
+        return output;
+    }
+
+    FIXME("Unrecognized major type %s\n", debugstr_guid(&major_type));
+    return NULL;
+}
-- 
2.26.2

From 65b1f4c2914cf346efa95bc07e0524c412023762 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Thu, 8 Oct 2020 16:39:53 -0500
Subject: [PATCH 11/57] winegstreamer: Implement IMFMediaStream::RequestSample.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/mfplat/tests/mfplat.c        |  4 --
 dlls/winegstreamer/gst_private.h  |  1 +
 dlls/winegstreamer/media_source.c | 92 ++++++++++++++++++++++++++++++-
 dlls/winegstreamer/mfplat.c       | 69 +++++++++++++++++++++++
 4 files changed, 161 insertions(+), 5 deletions(-)

diff --git a/dlls/mfplat/tests/mfplat.c b/dlls/mfplat/tests/mfplat.c
index ceabbd09d0d..a6bfaab22bf 100644
--- a/dlls/mfplat/tests/mfplat.c
+++ b/dlls/mfplat/tests/mfplat.c
@@ -621,13 +621,10 @@ todo_wine
         hr = IMFMediaStream_RequestSample(video_stream, NULL);
         if (i == sample_count)
             break;
-todo_wine
         ok(hr == S_OK, "Failed to request sample %u, hr %#x.\n", i + 1, hr);
         if (hr != S_OK)
             break;
     }
-    if (FAILED(hr))
-        goto skip_source_tests;
 
     for (i = 0; i < sample_count; ++i)
     {
@@ -668,7 +665,6 @@ todo_wine
 
     get_event((IMFMediaEventGenerator *)mediasource, MEEndOfPresentation, NULL);
 
-skip_source_tests:
     IMFMediaStream_Release(video_stream);
     IMFMediaTypeHandler_Release(handler);
     IMFPresentationDescriptor_Release(descriptor);
diff --git a/dlls/winegstreamer/gst_private.h b/dlls/winegstreamer/gst_private.h
index 07556802a51..ff5aff42482 100644
--- a/dlls/winegstreamer/gst_private.h
+++ b/dlls/winegstreamer/gst_private.h
@@ -58,6 +58,7 @@ extern HRESULT mfplat_get_class_object(REFCLSID rclsid, REFIID riid, void **obj)
 HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj) DECLSPEC_HIDDEN;
 IMFMediaType *mf_media_type_from_caps(const GstCaps *caps) DECLSPEC_HIDDEN;
 GstCaps *caps_from_mf_media_type(IMFMediaType *type) DECLSPEC_HIDDEN;
+IMFSample *mf_sample_from_gst_buffer(GstBuffer *in) DECLSPEC_HIDDEN;
 
 HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj) DECLSPEC_HIDDEN;
 
diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index 70c5b47ba84..a67f1cb71d7 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -58,11 +58,13 @@ struct media_stream
         STREAM_RUNNING,
     } state;
     DWORD stream_id;
+    BOOL eos;
 };
 
 enum source_async_op
 {
     SOURCE_ASYNC_START,
+    SOURCE_ASYNC_REQUEST_SAMPLE,
 };
 
 struct source_async_command
@@ -78,6 +80,11 @@ struct source_async_command
             GUID format;
             PROPVARIANT position;
         } start;
+        struct
+        {
+            struct media_stream *stream;
+            IUnknown *token;
+        } request_sample;
     } u;
 };
 
@@ -311,6 +318,8 @@ static void start_pipeline(struct media_source *source, struct source_async_comm
             GstSample *preroll;
 
             gst_pad_push_event(stream->my_sink, seek_event);
+
+            stream->eos = FALSE;
         }
 
         if (selected)
@@ -334,6 +343,59 @@ static void start_pipeline(struct media_source *source, struct source_async_comm
     gst_element_set_state(source->container, GST_STATE_PLAYING);
 }
 
+static void dispatch_end_of_presentation(struct media_source *source)
+{
+    PROPVARIANT empty = {.vt = VT_EMPTY};
+    unsigned int i;
+
+    /* A stream has ended, check whether all have */
+    for (i = 0; i < source->stream_count; i++)
+    {
+        struct media_stream *stream = source->streams[i];
+
+        if (stream->state != STREAM_INACTIVE && !stream->eos)
+            return;
+    }
+
+    IMFMediaEventQueue_QueueEventParamVar(source->event_queue, MEEndOfPresentation, &GUID_NULL, S_OK, &empty);
+}
+
+static void wait_on_sample(struct media_stream *stream, IUnknown *token)
+{
+    PROPVARIANT empty_var = {.vt = VT_EMPTY};
+    GstSample *gst_sample;
+    GstBuffer *buffer;
+    IMFSample *sample;
+
+    TRACE("%p, %p\n", stream, token);
+
+    g_signal_emit_by_name(stream->appsink, "pull-sample", &gst_sample);
+    if (gst_sample)
+    {
+        buffer = gst_sample_get_buffer(gst_sample);
+
+        TRACE("PTS = %llu\n", (unsigned long long int) GST_BUFFER_PTS(buffer));
+
+        sample = mf_sample_from_gst_buffer(buffer);
+        gst_sample_unref(gst_sample);
+
+        if (token)
+            IMFSample_SetUnknown(sample, &MFSampleExtension_Token, token);
+
+        IMFMediaEventQueue_QueueEventParamUnk(stream->event_queue, MEMediaSample, &GUID_NULL, S_OK, (IUnknown *)sample);
+        IMFSample_Release(sample);
+    }
+
+    g_object_get(stream->appsink, "eos", &stream->eos, NULL);
+    if (stream->eos)
+    {
+        if (token)
+            IUnknown_Release(token);
+        IMFMediaEventQueue_QueueEventParamVar(stream->event_queue, MEEndOfStream, &GUID_NULL, S_OK, &empty_var);
+        dispatch_end_of_presentation(stream->parent_source);
+    }
+}
+
 static HRESULT WINAPI source_async_commands_Invoke(IMFAsyncCallback *iface, IMFAsyncResult *result)
 {
     struct media_source *source = impl_from_async_commands_callback_IMFAsyncCallback(iface);
@@ -353,6 +415,9 @@ static HRESULT WINAPI source_async_commands_Invoke(IMFAsyncCallback *iface, IMFA
         case SOURCE_ASYNC_START:
             start_pipeline(source, command);
             break;
+        case SOURCE_ASYNC_REQUEST_SAMPLE:
+            wait_on_sample(command->u.request_sample.stream, command->u.request_sample.token);
+            break;
     }
 
     IUnknown_Release(state);
@@ -640,13 +705,37 @@ static HRESULT WINAPI media_stream_GetStreamDescriptor(IMFMediaStream* iface, IM
 static HRESULT WINAPI media_stream_RequestSample(IMFMediaStream *iface, IUnknown *token)
 {
     struct media_stream *stream = impl_from_IMFMediaStream(iface);
+    struct source_async_command *command;
+    HRESULT hr;
 
     TRACE("(%p)->(%p)\n", iface, token);
 
     if (stream->state == STREAM_SHUTDOWN)
         return MF_E_SHUTDOWN;
 
-    return E_NOTIMPL;
+    if (stream->state == STREAM_INACTIVE)
+    {
+        WARN("Stream isn't active\n");
+        return MF_E_MEDIA_SOURCE_WRONGSTATE;
+    }
+
+    if (stream->eos)
+    {
+        return MF_E_END_OF_STREAM;
+    }
+
+    if (SUCCEEDED(hr = source_create_async_op(SOURCE_ASYNC_REQUEST_SAMPLE, &command)))
+    {
+        command->u.request_sample.stream = stream;
+        if (token)
+            IUnknown_AddRef(token);
+        command->u.request_sample.token = token;
+
+        /* Once pause support is added, this will need to put into a stream queue, and synchronization will need to be added*/
+        hr = MFPutWorkItem(stream->parent_source->async_commands_queue, &stream->parent_source->async_commands_callback, &command->IUnknown_iface);
+    }
+
+    return hr;
 }
 
 static const IMFMediaStreamVtbl media_stream_vtbl =
@@ -729,6 +818,7 @@ static HRESULT new_media_stream(struct media_source *source, GstPad *pad, DWORD
     object->stream_id = stream_id;
 
     object->state = STREAM_INACTIVE;
+    object->eos = FALSE;
 
     if (FAILED(hr = MFCreateEventQueue(&object->event_queue)))
         goto fail;
diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 12bce9257dd..50bda6c6807 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -732,3 +732,72 @@ GstCaps *caps_from_mf_media_type(IMFMediaType *type)
     FIXME("Unrecognized major type %s\n", debugstr_guid(&major_type));
     return NULL;
 }
+
+/* IMFSample = GstBuffer
+   IMFBuffer = GstMemory */
+
+/* TODO: Future optimization could be to create a custom
+   IMFMediaBuffer wrapper around GstMemory, and to utilize
+   gst_memory_new_wrapped on IMFMediaBuffer data.  However,
+   this wouldn't work if we allow the callers to allocate
+   the buffers. */
+
+IMFSample* mf_sample_from_gst_buffer(GstBuffer *gst_buffer)
+{
+    IMFMediaBuffer *mf_buffer = NULL;
+    GstMapInfo map_info = {0};
+    LONGLONG duration, time;
+    BYTE *mapped_buf = NULL;
+    IMFSample *out = NULL;
+    HRESULT hr;
+
+    if (FAILED(hr = MFCreateSample(&out)))
+        goto done;
+
+    duration = GST_BUFFER_DURATION(gst_buffer);
+    time = GST_BUFFER_PTS(gst_buffer);
+
+    if (FAILED(hr = IMFSample_SetSampleDuration(out, duration / 100)))
+        goto done;
+
+    if (FAILED(hr = IMFSample_SetSampleTime(out, time / 100)))
+        goto done;
+
+    if (!gst_buffer_map(gst_buffer, &map_info, GST_MAP_READ))
+    {
+        hr = E_FAIL;
+        goto done;
+    }
+
+    if (FAILED(hr = MFCreateMemoryBuffer(map_info.maxsize, &mf_buffer)))
+        goto done;
+
+    if (FAILED(hr = IMFMediaBuffer_Lock(mf_buffer, &mapped_buf, NULL, NULL)))
+        goto done;
+
+    memcpy(mapped_buf, map_info.data, map_info.size);
+
+    if (FAILED(hr = IMFMediaBuffer_Unlock(mf_buffer)))
+        goto done;
+
+    if (FAILED(hr = IMFMediaBuffer_SetCurrentLength(mf_buffer, map_info.size)))
+        goto done;
+
+    if (FAILED(hr = IMFSample_AddBuffer(out, mf_buffer)))
+        goto done;
+
+done:
+    if (mf_buffer)
+        IMFMediaBuffer_Release(mf_buffer);
+    if (map_info.data)
+        gst_buffer_unmap(gst_buffer, &map_info);
+    if (FAILED(hr))
+    {
+        ERR("Failed to copy IMFSample to GstBuffer, hr = %#x\n", hr);
+        if (out)
+            IMFSample_Release(out);
+        out = NULL;
+    }
+
+    return out;
+}
-- 
2.26.2

From fa168ec5f74da53249dbcc2ec632aa781ac3e5fa Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 15 Sep 2020 14:25:26 -0500
Subject: [PATCH 12/57] winegstreamer: Insert parser into pipeline to rectify
 type differences.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/gst_private.h  |   1 +
 dlls/winegstreamer/media_source.c | 111 ++++++++++++++++++++++++++++--
 dlls/winegstreamer/mfplat.c       |  22 ++++++
 3 files changed, 130 insertions(+), 4 deletions(-)

diff --git a/dlls/winegstreamer/gst_private.h b/dlls/winegstreamer/gst_private.h
index ff5aff42482..df1e643c3f6 100644
--- a/dlls/winegstreamer/gst_private.h
+++ b/dlls/winegstreamer/gst_private.h
@@ -56,6 +56,7 @@ void start_dispatch_thread(void) DECLSPEC_HIDDEN;
 extern HRESULT mfplat_get_class_object(REFCLSID rclsid, REFIID riid, void **obj) DECLSPEC_HIDDEN;
 
 HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj) DECLSPEC_HIDDEN;
+GstCaps *make_mf_compatible_caps(GstCaps *caps) DECLSPEC_HIDDEN;
 IMFMediaType *mf_media_type_from_caps(const GstCaps *caps) DECLSPEC_HIDDEN;
 GstCaps *caps_from_mf_media_type(IMFMediaType *type) DECLSPEC_HIDDEN;
 IMFSample *mf_sample_from_gst_buffer(GstBuffer *in) DECLSPEC_HIDDEN;
diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index a67f1cb71d7..c72ac064518 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -752,8 +752,17 @@ static const IMFMediaStreamVtbl media_stream_vtbl =
     media_stream_RequestSample
 };
 
-/* Setup a chain of elements which should hopefully allow transformations to any IMFMediaType
-   the user throws at us through gstreamer's caps negotiation. */
+/* There are two paths this function can take.
+   1) In the first path, we are acting as a real media source, purely demuxing the input data,
+      in whichever format it may be in, and passing it along.  However, there can be different ways
+      to interpret the same streams. Subtypes in MF usually carry an implicit meaning, so we define
+      what caps an IMFMediaType corresponds to in mfplat.c, and insert a parser between decodebin
+      and the appsink, which usually can resolve these differences.  As an example, MFVideoFormat_H264
+      implies stream-format=byte-stream, and inserting h264parse can transform stream-format=avc
+      into stream-format=byte-stream.
+   2) In the second path, we are dealing with x-raw output from decodebin.  In this case, we just
+      have to setup a chain of elements which should hopefully allow transformations to any IMFMediaType
+      the user throws at us through gstreamer's caps negotiation.*/
 static HRESULT media_stream_connect_to_sink(struct media_stream *stream)
 {
     GstCaps *source_caps = gst_pad_query_caps(stream->their_src, NULL);
@@ -793,7 +802,68 @@ static HRESULT media_stream_connect_to_sink(struct media_stream *stream)
     }
     else
     {
-        stream->my_sink = gst_element_get_static_pad(stream->appsink, "sink");
+        GstElement *parser = NULL;
+        GstCaps *target_caps;
+
+        assert(gst_caps_is_fixed(source_caps));
+
+        if (!(target_caps = make_mf_compatible_caps(source_caps)))
+        {
+            gst_caps_unref(source_caps);
+            return E_FAIL;
+        }
+
+        g_object_set(stream->appsink, "caps", target_caps, NULL);
+
+        if (!(gst_caps_is_equal(source_caps, target_caps)))
+        {
+            GList *parser_list_one, *parser_list_two;
+            GstElementFactory *parser_factory;
+
+            parser_list_one = gst_element_factory_list_get_elements(GST_ELEMENT_FACTORY_TYPE_PARSER, 1);
+
+            parser_list_two = gst_element_factory_list_filter(parser_list_one, source_caps, GST_PAD_SINK, 0);
+            gst_plugin_feature_list_free(parser_list_one);
+            parser_list_one = parser_list_two;
+
+            parser_list_two = gst_element_factory_list_filter(parser_list_one, target_caps, GST_PAD_SRC, 0);
+            gst_plugin_feature_list_free(parser_list_one);
+            parser_list_one = parser_list_two;
+            gst_caps_unref(target_caps);
+
+            if (!(g_list_length(parser_list_one)))
+            {
+                gst_plugin_feature_list_free(parser_list_one);
+                ERR("Failed to find parser for stream\n");
+                gst_caps_unref(source_caps);
+                return E_FAIL;
+            }
+
+            parser_factory = g_list_first(parser_list_one)->data;
+            TRACE("Found parser %s.\n", GST_ELEMENT_NAME(parser_factory));
+
+            parser = gst_element_factory_create(parser_factory, NULL);
+
+            gst_plugin_feature_list_free(parser_list_one);
+
+            if (!parser)
+            {
+                gst_caps_unref(source_caps);
+                return E_FAIL;
+            }
+
+            gst_bin_add(GST_BIN(stream->parent_source->container), parser);
+
+            assert(gst_element_link(parser, stream->appsink));
+
+            gst_element_sync_state_with_parent(parser);
+        }
+        else
+        {
+            gst_caps_unref(target_caps);
+        }
+
+        stream->my_sink = gst_element_get_static_pad(parser ? parser : stream->appsink, "sink");
     }
 
     if (gst_pad_link(stream->their_src, stream->my_sink) != GST_PAD_LINK_OK)
@@ -903,7 +973,7 @@ static HRESULT media_stream_init_desc(struct media_stream *stream)
                 goto done;
         }
     }
-    else
+    else if (!strcmp(major_type, "audio/x-raw"))
     {
         stream_type = mf_media_type_from_caps(current_caps);
         if (stream_type)
@@ -912,6 +982,20 @@ static HRESULT media_stream_init_desc(struct media_stream *stream)
             type_count = 1;
         }
     }
+    else
+    {
+        GstCaps *compatible_caps = make_mf_compatible_caps(current_caps);
+        if (compatible_caps)
+        {
+            stream_type = mf_media_type_from_caps(compatible_caps);
+            gst_caps_unref(compatible_caps);
+            if (stream_type)
+            {
+                stream_types = &stream_type;
+                type_count = 1;
+            }
+        }
+    }
 
     if (!type_count)
     {
@@ -1178,6 +1262,23 @@ static const IMFMediaSourceVtbl IMFMediaSource_vtbl =
     media_source_Shutdown,
 };
 
+/* If this callback is extended to use any significant win32 APIs, a wrapper function
+   should be added */
+gboolean stream_found(GstElement *bin, GstPad *pad, GstCaps *caps, gpointer user)
+{
+    GstCaps *target_caps;
+
+    /* if the stream can be converted into an MF compatible type, we'll go that route
+       otherwise, we'll rely on decodebin for the whole process */
+
+    if ((target_caps = make_mf_compatible_caps(caps)))
+    {
+        gst_caps_unref(target_caps);
+        return FALSE;
+    }
+    return TRUE;
+}
+
 static void stream_added(GstElement *element, GstPad *pad, gpointer user)
 {
     struct media_source *source = user;
@@ -1283,6 +1384,8 @@ static HRESULT media_source_constructor(IMFByteStream *bytestream, struct media_
 
     gst_bin_add(GST_BIN(object->container), object->decodebin);
 
+    if(!GetEnvironmentVariableA("MF_DECODE_IN_SOURCE", NULL, 0))
+        g_signal_connect(object->decodebin, "autoplug-continue", G_CALLBACK(stream_found), object);
     g_signal_connect(object->decodebin, "pad-added", G_CALLBACK(mf_src_stream_added_wrapper), object);
     g_signal_connect(object->decodebin, "pad-removed", G_CALLBACK(mf_src_stream_removed_wrapper), object);
     g_signal_connect(object->decodebin, "no-more-pads", G_CALLBACK(mf_src_no_more_pads_wrapper), object);
diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 50bda6c6807..34bc2ca4fde 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -602,6 +602,28 @@ IMFMediaType *mf_media_type_from_caps(const GstCaps *caps)
     return media_type;
 }
 
+GstCaps *make_mf_compatible_caps(GstCaps *caps)
+{
+    GstCaps *ret;
+    IMFMediaType *media_type;
+
+    if (gst_caps_get_size(caps) != 1)
+        return NULL;
+
+    ret = gst_caps_copy(caps);
+
+    if ((media_type = mf_media_type_from_caps(ret)))
+        IMFMediaType_Release(media_type);
+
+    if (!media_type)
+    {
+        gst_caps_unref(ret);
+        return NULL;
+    }
+
+    return ret;
+}
+
 GstCaps *caps_from_mf_media_type(IMFMediaType *type)
 {
     GUID major_type;
-- 
2.26.2

From b619bda7be2574511b8a50881acaf64cd6208d9a Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 24 Mar 2020 16:00:26 -0500
Subject: [PATCH 13/57] winegstreamer: Translate H.264 caps to attributes.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/mfplat.c | 80 +++++++++++++++++++++++++++++++++++++
 1 file changed, 80 insertions(+)

diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 34bc2ca4fde..b10486416c3 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -26,6 +26,7 @@
 #include "gst_private.h"
 #include "mfapi.h"
 #include "mfidl.h"
+#include "codecapi.h"
 
 #include "wine/debug.h"
 #include "wine/heap.h"
@@ -521,6 +522,74 @@ IMFMediaType *mf_media_type_from_caps(const GstCaps *caps)
                 }
             }
         }
+        else if (!(strcmp(mime_type, "video/x-h264")))
+        {
+            const char *profile, *level;
+
+            /* validation */
+            if (strcmp(gst_structure_get_string(info, "stream-format"), "byte-stream"))
+                return NULL;
+            if (strcmp(gst_structure_get_string(info, "alignment"), "au"))
+                return NULL;
+            if (gst_structure_get_value(info, "codec-data"))
+                return NULL;
+
+            /* conversion */
+            IMFMediaType_SetGUID(media_type, &MF_MT_SUBTYPE, &MFVideoFormat_H264);
+            IMFMediaType_SetUINT32(media_type, &MF_MT_COMPRESSED, TRUE);
+
+            if ((profile = gst_structure_get_string(info, "profile")))
+            {
+                if (!(strcmp(profile, "main")))
+                    IMFMediaType_SetUINT32(media_type, &MF_MT_MPEG2_PROFILE, eAVEncH264VProfile_Main);
+                else if (!(strcmp(profile, "high")))
+                    IMFMediaType_SetUINT32(media_type, &MF_MT_MPEG2_PROFILE, eAVEncH264VProfile_High);
+                else if (!(strcmp(profile, "high-4:4:4")))
+                    IMFMediaType_SetUINT32(media_type, &MF_MT_MPEG2_PROFILE, eAVEncH264VProfile_444);
+                else
+                    FIXME("Unrecognized profile %s\n", profile);
+            }
+            if ((level = gst_structure_get_string(info, "level")))
+            {
+                unsigned int i;
+
+                const static struct
+                {
+                    const char *name;
+                    enum eAVEncH264VLevel val;
+                } levels[] =
+                {
+                    {"1",   eAVEncH264VLevel1},
+                    {"1.1", eAVEncH264VLevel1_1},
+                    {"1.2", eAVEncH264VLevel1_2},
+                    {"1.3", eAVEncH264VLevel1_3},
+                    {"2",   eAVEncH264VLevel2},
+                    {"2.1", eAVEncH264VLevel2_1},
+                    {"2.2", eAVEncH264VLevel2_2},
+                    {"3",   eAVEncH264VLevel3},
+                    {"3.1", eAVEncH264VLevel3_1},
+                    {"3.2", eAVEncH264VLevel3_2},
+                    {"4",   eAVEncH264VLevel4},
+                    {"4.1", eAVEncH264VLevel4_1},
+                    {"4.2", eAVEncH264VLevel4_2},
+                    {"5",   eAVEncH264VLevel5},
+                    {"5.1", eAVEncH264VLevel5_1},
+                    {"5.2", eAVEncH264VLevel5_2},
+                };
+                for (i = 0 ; i < ARRAY_SIZE(levels); i++)
+                {
+                    if (!(strcmp(level, levels[i].name)))
+                    {
+                        IMFMediaType_SetUINT32(media_type, &MF_MT_MPEG2_LEVEL, levels[i].val);
+                        break;
+                    }
+                }
+                if (i == ARRAY_SIZE(levels))
+                {
+                    FIXME("Unrecognized level %s", level);
+                }
+            }
+        }
         else
         {
             FIXME("Unrecognized video format %s\n", mime_type);
@@ -606,11 +675,22 @@ GstCaps *make_mf_compatible_caps(GstCaps *caps)
 {
     GstCaps *ret;
     IMFMediaType *media_type;
+    GstStructure *structure;
+    const char *mime_type;
 
     if (gst_caps_get_size(caps) != 1)
         return NULL;
 
     ret = gst_caps_copy(caps);
+    structure = gst_caps_get_structure(ret, 0);
+    mime_type = gst_structure_get_name(structure);
+
+    if (!strcmp(mime_type, "video/x-h264"))
+    {
+        gst_caps_set_simple(ret, "stream-format", G_TYPE_STRING, "byte-stream", NULL);
+        gst_caps_set_simple(ret, "alignment", G_TYPE_STRING, "au", NULL);
+        gst_structure_remove_field(structure, "codec_data");
+    }
 
     if ((media_type = mf_media_type_from_caps(ret)))
         IMFMediaType_Release(media_type);
-- 
2.26.2

From 36dc3a39cac411b6f1b1c8a91d994e38b237473c Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 24 Mar 2020 16:01:20 -0500
Subject: [PATCH 14/57] winegstreamer: Translate WMV caps to attributes.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/mfplat.c | 51 +++++++++++++++++++++++++++++++++++++
 1 file changed, 51 insertions(+)

diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index b10486416c3..a857ffd5f69 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -457,6 +457,24 @@ uncompressed_video_formats[] =
     {&MFVideoFormat_RGB555,  GST_VIDEO_FORMAT_BGR15},
 };
 
+static void codec_data_to_user_data(GstStructure *structure, IMFMediaType *type)
+{
+    const GValue *codec_data;
+
+    if ((codec_data = gst_structure_get_value(structure, "codec_data")))
+    {
+        GstBuffer *codec_data_buffer = gst_value_get_buffer(codec_data);
+        if (codec_data_buffer)
+        {
+            gsize codec_data_size = gst_buffer_get_size(codec_data_buffer);
+            gpointer codec_data_raw = heap_alloc(codec_data_size);
+            gst_buffer_extract(codec_data_buffer, 0, codec_data_raw, codec_data_size);
+            IMFMediaType_SetBlob(type, &MF_MT_USER_DATA, codec_data_raw, codec_data_size);
+            heap_free(codec_data_raw);
+        }
+    }
+}
+
 /* returns NULL if doesn't match exactly */
 IMFMediaType *mf_media_type_from_caps(const GstCaps *caps)
 {
@@ -590,6 +608,39 @@ IMFMediaType *mf_media_type_from_caps(const GstCaps *caps)
                 }
             }
         }
+        else if (!(strcmp(mime_type, "video/x-wmv")))
+        {
+            gint wmv_version;
+            const char *format;
+
+            if (gst_structure_get_int(info, "wmvversion", &wmv_version))
+            {
+                switch (wmv_version)
+                {
+                    case 1:
+                        IMFMediaType_SetGUID(media_type, &MF_MT_SUBTYPE, &MFVideoFormat_WMV1);
+                        break;
+                    case 2:
+                        IMFMediaType_SetGUID(media_type, &MF_MT_SUBTYPE, &MFVideoFormat_WMV2);
+                        break;
+                    case 3:
+                        IMFMediaType_SetGUID(media_type, &MF_MT_SUBTYPE, &MFVideoFormat_WMV3);
+                        break;
+                    default:
+                        FIXME("Unrecognized wmvversion %d\n", wmv_version);
+                }
+            }
+
+            if ((format = gst_structure_get_string(info, "format")))
+            {
+                if (!(strcmp(format, "WVC1")))
+                    IMFMediaType_SetGUID(media_type, &MF_MT_SUBTYPE, &MFVideoFormat_WVC1);
+                else
+                    FIXME("Unrecognized format %s\n", format);
+            }
+
+            codec_data_to_user_data(info, media_type);
+        }
         else
         {
             FIXME("Unrecognized video format %s\n", mime_type);
-- 
2.26.2

From 5d55b4502d6daae2ca84d1955d37483f1a01e159 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 24 Mar 2020 16:02:27 -0500
Subject: [PATCH 15/57] winegstreamer: Translate AAC caps to attributes.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/mfplat.c | 108 ++++++++++++++++++++++++++++++++++++
 1 file changed, 108 insertions(+)

diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index a857ffd5f69..43673a058be 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -457,6 +457,15 @@ uncompressed_video_formats[] =
     {&MFVideoFormat_RGB555,  GST_VIDEO_FORMAT_BGR15},
 };
 
+struct aac_user_data
+{
+    WORD payload_type;
+    WORD profile_level_indication;
+    WORD struct_type;
+    WORD reserved;
+  /* audio-specific-config is stored here */
+};
+
 static void codec_data_to_user_data(GstStructure *structure, IMFMediaType *type)
 {
     const GValue *codec_data;
@@ -706,6 +715,105 @@ IMFMediaType *mf_media_type_from_caps(const GstCaps *caps)
 
             IMFMediaType_SetUINT32(media_type, &MF_MT_AUDIO_BITS_PER_SAMPLE, depth);
         }
+        else if (!(strcmp(mime_type, "audio/mpeg")))
+        {
+            int mpeg_version = -1;
+
+            IMFMediaType_SetUINT32(media_type, &MF_MT_COMPRESSED, TRUE);
+
+            if (!(gst_structure_get_int(info, "mpegversion", &mpeg_version)))
+                ERR("Failed to get mpegversion\n");
+            switch (mpeg_version)
+            {
+                case 2:
+                case 4:
+                {
+                    const char *format, *profile, *level;
+                    DWORD profile_level_indication = 0;
+                    const GValue *codec_data;
+                    DWORD asc_size = 0;
+                    struct aac_user_data *user_data = NULL;
+
+                    IMFMediaType_SetGUID(media_type, &MF_MT_SUBTYPE, &MFAudioFormat_AAC);
+                    IMFMediaType_SetUINT32(media_type, &MF_MT_AUDIO_BITS_PER_SAMPLE, 16);
+
+                    codec_data = gst_structure_get_value(info, "codec_data");
+                    if (codec_data)
+                    {
+                        GstBuffer *codec_data_buffer = gst_value_get_buffer(codec_data);
+                        if (codec_data_buffer)
+                        {
+                            if ((asc_size = gst_buffer_get_size(codec_data_buffer)) >= 2)
+                            {
+                                user_data = heap_alloc_zero(sizeof(*user_data)+asc_size);
+                                gst_buffer_extract(codec_data_buffer, 0, (gpointer)(user_data + 1), asc_size);
+                            }
+                            else
+                                ERR("Unexpected buffer size\n");
+                        }
+                        else
+                            ERR("codec_data not a buffer\n");
+                    }
+                    else
+                        ERR("codec_data not found\n");
+                    if (!user_data)
+                        user_data = heap_alloc_zero(sizeof(*user_data));
+
+                    if ((format = gst_structure_get_string(info, "stream-format")))
+                    {
+                        DWORD payload_type = -1;
+                        if (!(strcmp(format, "raw")))
+                            payload_type = 0;
+                        else if (!(strcmp(format, "adts")))
+                            payload_type = 1;
+                        else if (!(strcmp(format, "adif")))
+                            payload_type = 2;
+                        else if (!(strcmp(format, "loas")))
+                            payload_type = 3;
+                        else
+                            FIXME("Unrecognized stream-format\n");
+                        if (payload_type != -1)
+                        {
+                            IMFMediaType_SetUINT32(media_type, &MF_MT_AAC_PAYLOAD_TYPE, payload_type);
+                            user_data->payload_type = payload_type;
+                        }
+                    }
+                    else
+                    {
+                        ERR("Stream format not present\n");
+                    }
+
+                    profile = gst_structure_get_string(info, "profile");
+                    level = gst_structure_get_string(info, "level");
+                    /* Data from http://archive.is/whp6P#45% */
+                    if (profile && level)
+                    {
+                        if (!(strcmp(profile, "lc")) && !(strcmp(level, "2")))
+                            profile_level_indication = 0x29;
+                        else if (!(strcmp(profile, "lc")) && !(strcmp(level, "4")))
+                            profile_level_indication = 0x2A;
+                        else if (!(strcmp(profile, "lc")) && !(strcmp(level, "5")))
+                            profile_level_indication = 0x2B;
+                        else
+                            FIXME("Unhandled profile/level combo\n");
+                    }
+                    else
+                        ERR("Profile or level not present\n");
+
+                    if (profile_level_indication)
+                    {
+                        IMFMediaType_SetUINT32(media_type, &MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION, profile_level_indication);
+                        user_data->profile_level_indication = profile_level_indication;
+                    }
+
+                    IMFMediaType_SetBlob(media_type, &MF_MT_USER_DATA, (BYTE *)user_data, sizeof(*user_data) + asc_size);
+                    heap_free(user_data);
+                    break;
+                }
+                default:
+                    FIXME("Unhandled mpegversion %d\n", mpeg_version);
+            }
+        }
         else
         {
             FIXME("Unrecognized audio format %s\n", mime_type);
-- 
2.26.2

From cd06036658253c87e3be0a229d42d62ef2c86317 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Wed, 25 Mar 2020 13:36:19 -0500
Subject: [PATCH 16/57] winegstreamer: Translate MPEG-4 Section-2 caps to
 attributes.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/mfplat.c | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 43673a058be..f55080685bc 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -650,6 +650,22 @@ IMFMediaType *mf_media_type_from_caps(const GstCaps *caps)
 
             codec_data_to_user_data(info, media_type);
         }
+        else if (!(strcmp(mime_type, "video/mpeg")))
+        {
+            gint mpegversion;
+            if (gst_structure_get_int(info, "mpegversion", &mpegversion))
+            {
+                if (mpegversion == 4)
+                {
+                    IMFMediaType_SetGUID(media_type, &MF_MT_SUBTYPE, &MFVideoFormat_M4S2);
+                    IMFMediaType_SetUINT32(media_type, &MF_MT_COMPRESSED, TRUE);
+
+                    codec_data_to_user_data(info, media_type);
+                }
+                else
+                    FIXME("Unrecognized mpeg version %d\n", mpegversion);
+            }
+        }
         else
         {
             FIXME("Unrecognized video format %s\n", mime_type);
-- 
2.26.2

From fcf12b069f62a8a2af96a5ffb5a3a14075a3d88f Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 12 May 2020 17:05:41 -0500
Subject: [PATCH 17/57] winegstreamer: Translate WMA caps to attributes.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/mfplat.c | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index f55080685bc..691ea4b74ed 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -830,6 +830,30 @@ IMFMediaType *mf_media_type_from_caps(const GstCaps *caps)
                     FIXME("Unhandled mpegversion %d\n", mpeg_version);
             }
         }
+        else if (!(strcmp(mime_type, "audio/x-wma")))
+        {
+            gint wma_version, block_align;
+
+            if (gst_structure_get_int(info, "wmaversion", &wma_version))
+            {
+                switch (wma_version)
+                {
+                    case 2:
+                        IMFMediaType_SetGUID(media_type, &MF_MT_SUBTYPE, &MFAudioFormat_WMAudioV8);
+                        break;
+                    case 3:
+                        IMFMediaType_SetGUID(media_type, &MF_MT_SUBTYPE, &MFAudioFormat_WMAudioV9);
+                        break;
+                    default:
+                        FIXME("Unrecognized wmaversion %d\n", wma_version);
+                }
+            }
+
+            if (gst_structure_get_int(info, "block_align", &block_align))
+                IMFMediaType_SetUINT32(media_type, &MF_MT_AUDIO_BLOCK_ALIGNMENT, block_align);
+
+            codec_data_to_user_data(info, media_type);
+        }
         else
         {
             FIXME("Unrecognized audio format %s\n", mime_type);
-- 
2.26.2

From 2e3c9e176ce464b1d14efa4b7bb29e1d7fe42e3a Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 24 Mar 2020 16:18:40 -0500
Subject: [PATCH 18/57] winegstreamer: Translate H.264 attributes to caps.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/mfplat.c | 90 +++++++++++++++++++++++++++++--------
 1 file changed, 71 insertions(+), 19 deletions(-)

diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 691ea4b74ed..24921573235 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -919,10 +919,6 @@ GstCaps *caps_from_mf_media_type(IMFMediaType *type)
         UINT64 frame_rate = 0, frame_size = 0;
         DWORD width, height;
         UINT32 unused;
-        GstVideoFormat format = GST_VIDEO_FORMAT_UNKNOWN;
-        GUID subtype_base;
-        GstVideoInfo info;
-        unsigned int i;
 
         if (FAILED(IMFMediaType_GetUINT64(type, &MF_MT_FRAME_SIZE, &frame_size)))
             return NULL;
@@ -931,28 +927,84 @@ GstCaps *caps_from_mf_media_type(IMFMediaType *type)
 
         output = gst_caps_new_empty_simple("video/x-raw");
 
-        for (i = 0; i < ARRAY_SIZE(uncompressed_video_formats); i++)
+        if (IsEqualGUID(&subtype, &MFVideoFormat_H264))
         {
-            if (IsEqualGUID(uncompressed_video_formats[i].subtype, &subtype))
+            enum eAVEncH264VProfile h264_profile;
+            enum eAVEncH264VLevel h264_level;
+            output = gst_caps_new_empty_simple("video/x-h264");
+            gst_caps_set_simple(output, "stream-format", G_TYPE_STRING, "byte-stream", NULL);
+            gst_caps_set_simple(output, "alignment", G_TYPE_STRING, "au", NULL);
+
+            if (SUCCEEDED(IMFMediaType_GetUINT32(type, &MF_MT_MPEG2_PROFILE, &h264_profile)))
+            {
+                const char *profile = NULL;
+                switch (h264_profile)
+                {
+                    case eAVEncH264VProfile_Main: profile = "main"; break;
+                    case eAVEncH264VProfile_High: profile = "high"; break;
+                    case eAVEncH264VProfile_444: profile = "high-4:4:4"; break;
+                    default: FIXME("Unknown profile %u\n", h264_profile);
+                }
+                if (profile)
+                    gst_caps_set_simple(output, "profile", G_TYPE_STRING, profile, NULL);
+            }
+            if (SUCCEEDED(IMFMediaType_GetUINT32(type, &MF_MT_MPEG2_LEVEL, &h264_level)))
             {
-                format = uncompressed_video_formats[i].format;
-                break;
+                const char *level = NULL;
+                switch (h264_level)
+                {
+                    case eAVEncH264VLevel1:   level = "1";   break;
+                    case eAVEncH264VLevel1_1: level = "1.1"; break;
+                    case eAVEncH264VLevel1_2: level = "1.2"; break;
+                    case eAVEncH264VLevel1_3: level = "1.3"; break;
+                    case eAVEncH264VLevel2:   level = "2";   break;
+                    case eAVEncH264VLevel2_1: level = "2.1"; break;
+                    case eAVEncH264VLevel2_2: level = "2.2"; break;
+                    case eAVEncH264VLevel3:   level = "3";   break;
+                    case eAVEncH264VLevel3_1: level = "3.1"; break;
+                    case eAVEncH264VLevel3_2: level = "3.2"; break;
+                    case eAVEncH264VLevel4:   level = "4";   break;
+                    case eAVEncH264VLevel4_1: level = "4.1"; break;
+                    case eAVEncH264VLevel4_2: level = "4.2"; break;
+                    case eAVEncH264VLevel5:   level = "5";   break;
+                    case eAVEncH264VLevel5_1: level = "5.1"; break;
+                    case eAVEncH264VLevel5_2: level = "5.2"; break;
+                    default: FIXME("Unknown level %u\n", h264_level);
+                }
+                if (level)
+                    gst_caps_set_simple(output, "level", G_TYPE_STRING, level, NULL);
             }
         }
+        else
+        {
+            GstVideoFormat format = GST_VIDEO_FORMAT_UNKNOWN;
+            GUID subtype_base;
+            GstVideoInfo info;
+            unsigned int i;
 
-        subtype_base = subtype;
-        subtype_base.Data1 = 0;
-        if (format == GST_VIDEO_FORMAT_UNKNOWN && IsEqualGUID(&MFVideoFormat_Base, &subtype_base))
-            format = gst_video_format_from_fourcc(subtype.Data1);
+            for (i = 0; i < ARRAY_SIZE(uncompressed_video_formats); i++)
+            {
+                if (IsEqualGUID(uncompressed_video_formats[i].subtype, &subtype))
+                {
+                    format = uncompressed_video_formats[i].format;
+                    break;
+                }
+            }
 
-        if (format == GST_VIDEO_FORMAT_UNKNOWN)
-        {
-            FIXME("Unrecognized format %s\n", debugstr_guid(&subtype));
-            return NULL;
-        }
+            subtype_base = subtype;
+            subtype_base.Data1 = 0;
+            if (format == GST_VIDEO_FORMAT_UNKNOWN && IsEqualGUID(&MFVideoFormat_Base, &subtype_base))
+                format = gst_video_format_from_fourcc(subtype.Data1);
 
-        gst_video_info_set_format(&info, format, width, height);
-        output = gst_video_info_to_caps(&info);
+            if (format == GST_VIDEO_FORMAT_UNKNOWN)
+            {
+                FIXME("Unrecognized format %s\n", debugstr_guid(&subtype));
+                return NULL;
+            }
+
+            gst_video_info_set_format(&info, format, width, height);
+            output = gst_video_info_to_caps(&info);
+        }
 
         if (frame_size)
         {
-- 
2.26.2

From 926fb4468a42f41404f7dee6a904a60083010017 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 24 Mar 2020 16:20:17 -0500
Subject: [PATCH 19/57] winegstreamer: Translate WMV attributes to caps.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/mfplat.c | 51 +++++++++++++++++++++++++++++++++++++
 1 file changed, 51 insertions(+)

diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 24921573235..9105ce5a221 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -903,6 +903,21 @@ GstCaps *make_mf_compatible_caps(GstCaps *caps)
     return ret;
 }
 
+static void user_data_to_codec_data(IMFMediaType *type, GstCaps *caps)
+{
+    BYTE *user_data;
+    DWORD user_data_size;
+
+    if (SUCCEEDED(IMFMediaType_GetAllocatedBlob(type, &MF_MT_USER_DATA, &user_data, &user_data_size)))
+    {
+        GstBuffer *codec_data_buffer = gst_buffer_new_allocate(NULL, user_data_size, NULL);
+        gst_buffer_fill(codec_data_buffer, 0, user_data, user_data_size);
+        gst_caps_set_simple(caps, "codec_data", GST_TYPE_BUFFER, codec_data_buffer, NULL);
+        gst_buffer_unref(codec_data_buffer);
+        CoTaskMemFree(user_data);
+    }
+}
+
 GstCaps *caps_from_mf_media_type(IMFMediaType *type)
 {
     GUID major_type;
@@ -975,6 +990,42 @@ GstCaps *caps_from_mf_media_type(IMFMediaType *type)
                     gst_caps_set_simple(output, "level", G_TYPE_STRING, level, NULL);
             }
         }
+        else if (IsEqualGUID(&subtype, &MFVideoFormat_WMV1))
+        {
+            output = gst_caps_new_empty_simple("video/x-wmv");
+            gst_caps_set_simple(output, "format", G_TYPE_STRING, "WMV1", NULL);
+
+            gst_caps_set_simple(output, "wmvversion", G_TYPE_INT, 1, NULL);
+
+            user_data_to_codec_data(type, output);
+        }
+        else if (IsEqualGUID(&subtype, &MFVideoFormat_WMV2))
+        {
+            output = gst_caps_new_empty_simple("video/x-wmv");
+            gst_caps_set_simple(output, "format", G_TYPE_STRING, "WMV2", NULL);
+
+            gst_caps_set_simple(output, "wmvversion", G_TYPE_INT, 2, NULL);
+
+            user_data_to_codec_data(type, output);
+        }
+        else if (IsEqualGUID(&subtype, &MFVideoFormat_WMV3))
+        {
+            output = gst_caps_new_empty_simple("video/x-wmv");
+            gst_caps_set_simple(output, "format", G_TYPE_STRING, "WMV3", NULL);
+
+            gst_caps_set_simple(output, "wmvversion", G_TYPE_INT, 3, NULL);
+
+            user_data_to_codec_data(type, output);
+        }
+        else if (IsEqualGUID(&subtype, &MFVideoFormat_WVC1))
+        {
+            output = gst_caps_new_empty_simple("video/x-wmv");
+            gst_caps_set_simple(output, "format", G_TYPE_STRING, "WVC1", NULL);
+
+            gst_caps_set_simple(output, "wmvversion", G_TYPE_INT, 3, NULL);
+
+            user_data_to_codec_data(type, output);
+        }
         else
         {
             GstVideoFormat format = GST_VIDEO_FORMAT_UNKNOWN;
-- 
2.26.2

From f35a9b2a422a8a645141c3fffa2dcdeb15da1083 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 21 Apr 2020 10:31:02 -0500
Subject: [PATCH 20/57] winegstreamer: Translate AAC attributes to caps.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/mfplat.c | 66 +++++++++++++++++++++++++++++++++++++
 1 file changed, 66 insertions(+)

diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 9105ce5a221..cd8eaecb187 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -1106,6 +1106,72 @@ GstCaps *caps_from_mf_media_type(IMFMediaType *type)
                 return NULL;
             }
         }
+        else if (IsEqualGUID(&subtype, &MFAudioFormat_AAC))
+        {
+            DWORD payload_type, indication;
+            struct aac_user_data *user_data;
+            UINT32 user_data_size;
+            output = gst_caps_new_empty_simple("audio/mpeg");
+
+            /* Unsure of how to differentiate between mpegversion 2 and 4 */
+            gst_caps_set_simple(output, "mpegversion", G_TYPE_INT, 4, NULL);
+
+            if (SUCCEEDED(IMFMediaType_GetUINT32(type, &MF_MT_AAC_PAYLOAD_TYPE, &payload_type)))
+            {
+                switch (payload_type)
+                {
+                    case 0:
+                        gst_caps_set_simple(output, "stream-format", G_TYPE_STRING, "raw", NULL);
+                        break;
+                    case 1:
+                        gst_caps_set_simple(output, "stream-format", G_TYPE_STRING, "adts", NULL);
+                        break;
+                    case 2:
+                        gst_caps_set_simple(output, "stream-format", G_TYPE_STRING, "adif", NULL);
+                        break;
+                    case 3:
+                        gst_caps_set_simple(output, "stream-format", G_TYPE_STRING, "loas", NULL);
+                        break;
+                    default:
+                        gst_caps_set_simple(output, "stream-format", G_TYPE_STRING, "raw", NULL);
+                }
+            }
+            else
+                gst_caps_set_simple(output, "stream-format", G_TYPE_STRING, "raw", NULL);
+
+            if (SUCCEEDED(IMFMediaType_GetUINT32(type, &MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION, &indication)))
+            {
+                const char *profile, *level;
+                switch (indication)
+                {
+                    case 0x29: profile = "lc"; level = "2";  break;
+                    case 0x2A: profile = "lc"; level = "4"; break;
+                    case 0x2B: profile = "lc"; level = "5"; break;
+                    default:
+                    {
+                        profile = level = NULL;
+                        FIXME("Unrecognized profile-level-indication %u\n", indication);
+                    }
+                }
+                if (profile)
+                    gst_caps_set_simple(output, "profile", G_TYPE_STRING, profile, NULL);
+                if (level)
+                    gst_caps_set_simple(output, "level", G_TYPE_STRING, level, NULL);
+            }
+
+            if (SUCCEEDED(IMFMediaType_GetAllocatedBlob(type, &MF_MT_USER_DATA, (BYTE **) &user_data, &user_data_size)))
+            {
+                if (user_data_size > sizeof(*user_data))
+                {
+                    GstBuffer *audio_specific_config = gst_buffer_new_allocate(NULL, user_data_size - sizeof(*user_data), NULL);
+                    gst_buffer_fill(audio_specific_config, 0, user_data + 1, user_data_size - sizeof(*user_data));
+
+                    gst_caps_set_simple(output, "codec_data", GST_TYPE_BUFFER, audio_specific_config, NULL);
+                    gst_buffer_unref(audio_specific_config);
+                }
+                CoTaskMemFree(user_data);
+            }
+        }
         else
         {
             FIXME("Unrecognized subtype %s\n", debugstr_guid(&subtype));
-- 
2.26.2

From 4affbf60a1b64036aac89fee8d776d69254fe6a4 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Mon, 11 May 2020 16:03:09 -0500
Subject: [PATCH 21/57] winegstreamer: Translate MPEG-4 Section-2 attributes to
 caps.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/mfplat.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index cd8eaecb187..2168ed153eb 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -1026,6 +1026,14 @@ GstCaps *caps_from_mf_media_type(IMFMediaType *type)
 
             user_data_to_codec_data(type, output);
         }
+        else if (IsEqualGUID(&subtype, &MFVideoFormat_M4S2))
+        {
+            output = gst_caps_new_empty_simple("video/mpeg");
+            gst_caps_set_simple(output, "mpegversion", G_TYPE_INT, 4, NULL);
+            gst_caps_set_simple(output, "systemstream", G_TYPE_BOOLEAN, FALSE, NULL);
+
+            user_data_to_codec_data(type, output);
+        }
         else
         {
             GstVideoFormat format = GST_VIDEO_FORMAT_UNKNOWN;
-- 
2.26.2

From ad67b975463ddce1226a90a614b691e5d6827108 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 12 May 2020 17:05:59 -0500
Subject: [PATCH 22/57] winegstreamer: Translate WMA attributes to caps.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/mfplat.c | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 2168ed153eb..e73c923dfac 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -1180,6 +1180,21 @@ GstCaps *caps_from_mf_media_type(IMFMediaType *type)
                 CoTaskMemFree(user_data);
             }
         }
+        else if (IsEqualGUID(&subtype, &MFAudioFormat_WMAudioV9) ||
+                 IsEqualGUID(&subtype, &MFAudioFormat_WMAudioV8))
+        {
+            DWORD block_align;
+
+            output = gst_caps_new_empty_simple("audio/x-wma");
+
+            gst_caps_set_simple(output, "wmaversion", G_TYPE_INT,
+                IsEqualGUID(&subtype, &MFAudioFormat_WMAudioV9) ? 3 : 2, NULL);
+
+            if (SUCCEEDED(IMFMediaType_GetUINT32(type, &MF_MT_AUDIO_BLOCK_ALIGNMENT, &block_align)))
+                gst_caps_set_simple(output, "block_align", G_TYPE_INT, block_align, NULL);
+
+            user_data_to_codec_data(type, output);
+        }
         else
         {
             FIXME("Unrecognized subtype %s\n", debugstr_guid(&subtype));
-- 
2.26.2

From db2fbe17c7e382f09e1ec5ffe6350639668a9d88 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 31 Mar 2020 15:15:07 -0500
Subject: [PATCH 23/57] winegstreamer: Implement
 IMFMediaSource::GetCharacteristics.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/media_source.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index c72ac064518..2d00ca7e901 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -1114,12 +1114,14 @@ static HRESULT WINAPI media_source_GetCharacteristics(IMFMediaSource *iface, DWO
 {
     struct media_source *source = impl_from_IMFMediaSource(iface);
 
-    FIXME("(%p)->(%p): stub\n", source, characteristics);
+    TRACE("(%p)->(%p)\n", source, characteristics);
 
     if (source->state == SOURCE_SHUTDOWN)
         return MF_E_SHUTDOWN;
 
-    return E_NOTIMPL;
+    *characteristics = MFMEDIASOURCE_CAN_SEEK;
+
+    return S_OK;
 }
 
 static HRESULT WINAPI media_source_CreatePresentationDescriptor(IMFMediaSource *iface, IMFPresentationDescriptor **descriptor)
-- 
2.26.2

From 50a40948294f5909903d261b082a954976d1a317 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 31 Mar 2020 15:15:50 -0500
Subject: [PATCH 24/57] winegstreamer: Calculate the MF_PD_DURATION of the
 media source's PD.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/media_source.c | 40 +++++++++++++++++++++++++++++++
 1 file changed, 40 insertions(+)

diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index 2d00ca7e901..e1b018b74ce 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -1445,6 +1445,46 @@ static HRESULT media_source_constructor(IMFByteStream *bytestream, struct media_
     heap_free(descriptors);
     descriptors = NULL;
 
+    /* miscelaneous presentation descriptor setup */
+    {
+        IMFAttributes *byte_stream_attributes;
+        gint64 total_pres_time = 0;
+
+        if (SUCCEEDED(IMFByteStream_QueryInterface(object->byte_stream, &IID_IMFAttributes, (void **)&byte_stream_attributes)))
+        {
+            WCHAR *mimeW = NULL;
+            DWORD length;
+            if (SUCCEEDED(IMFAttributes_GetAllocatedString(byte_stream_attributes, &MF_BYTESTREAM_CONTENT_TYPE, &mimeW, &length)))
+            {
+                IMFPresentationDescriptor_SetString(object->pres_desc, &MF_PD_MIME_TYPE, mimeW);
+                CoTaskMemFree(mimeW);
+            }
+            IMFAttributes_Release(byte_stream_attributes);
+        }
+
+        for (unsigned int i = 0; i < object->stream_count; i++)
+        {
+            GstQuery *query = gst_query_new_duration(GST_FORMAT_TIME);
+            if (gst_pad_query(object->streams[i]->their_src, query))
+            {
+                gint64 stream_pres_time;
+                gst_query_parse_duration(query, NULL, &stream_pres_time);
+
+                TRACE("Stream %u has duration %lu\n", i, stream_pres_time);
+
+                if (stream_pres_time > total_pres_time)
+                    total_pres_time = stream_pres_time;
+            }
+            else
+            {
+                WARN("Unable to get presentation time of stream %u\n", i);
+            }
+        }
+
+        if (object->stream_count)
+            IMFPresentationDescriptor_SetUINT64(object->pres_desc, &MF_PD_DURATION, total_pres_time / 100);
+    }
+
     object->state = SOURCE_STOPPED;
 
     *out_media_source = object;
-- 
2.26.2

From b245e88401d65b2f1973dd34297edddd918aed97 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Wed, 29 Jan 2020 15:37:39 -0600
Subject: [PATCH 25/57] tools: Add support for multiple parent directories.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 tools/make_makefiles | 45 +++++++++++++++++++++++++++-----------------
 tools/makedep.c      | 26 +++++++++++++++++--------
 2 files changed, 46 insertions(+), 25 deletions(-)

diff --git a/tools/make_makefiles b/tools/make_makefiles
index a92987c2ab5..6bc1b47ca5d 100755
--- a/tools/make_makefiles
+++ b/tools/make_makefiles
@@ -230,14 +230,14 @@ sub parse_makefile($)
         {
             die "Configure substitution is not allowed in $file" unless $file eq "Makefile";
         }
-        if (/^\s*(MODULE|IMPORTLIB|TESTDLL|PARENTSRC|APPMODE|EXTRADLLFLAGS)\s*=\s*(.*)/)
+        if (/^\s*(MODULE|IMPORTLIB|TESTDLL|APPMODE|EXTRADLLFLAGS)\s*=\s*(.*)/)
         {
             my $var = $1;
             $make{$var} = $2;
             next;
         }
         my $source_vars_regexp = join "|", @source_vars;
-        if (/^\s*($source_vars_regexp|PROGRAMS|EXTRA_TARGETS|EXTRA_OBJS|INSTALL_LIB|INSTALL_DEV)\s*=\s*(.*)/)
+        if (/^\s*($source_vars_regexp|PROGRAMS|EXTRA_TARGETS|EXTRA_OBJS|INSTALL_LIB|INSTALL_DEV|PARENTSRC)\s*=\s*(.*)/)
         {
             my $var = $1;
             my @list = split(/\s+/, $2);
@@ -292,19 +292,27 @@ sub get_makedep_flags($)
     return %flags;
 }
 
-sub get_parent_makefile($)
+sub get_parent_makefiles($)
 {
     my $file = shift;
     my %make = %{$makefiles{$file}};
-    my $reldir = $make{"PARENTSRC"} || "";
-    return "" unless $reldir;
-    (my $path = $file) =~ s/\/Makefile$/\//;
-    while ($reldir =~ /^\.\.\//)
+    my $pointer = $make{"PARENTSRC"} || ();
+    return () unless $pointer;
+    my @reldirs = @{$pointer};
+    my @makefiles = ();
+    foreach my $reldir (@reldirs)
     {
-        $reldir =~ s/^\.\.\///;
-        $path =~ s/[^\/]+\/$//;
+        my $length = @reldirs;
+        (my $path = $file) =~ s/\/Makefile$/\//;
+        while ($reldir =~ /^\.\.\//)
+        {
+            $reldir =~ s/^\.\.\///;
+            $path =~ s/[^\/]+\/$//;
+        }
+        push @makefiles, "$path$reldir/Makefile";
     }
-    return "$path$reldir/Makefile";
+
+    return @makefiles
 }
 
 # preserve shared source files that are listed in the existing makefile
@@ -409,13 +417,16 @@ sub assign_sources_to_makefiles(@)
     foreach my $file (@makefiles)
     {
         my $make = $makefiles{$file};
-        my $parent = get_parent_makefile( $file );
-        next unless $parent;
-        preserve_shared_source_files( $makefiles{$file}, $makefiles{$parent}, "C_SRCS" );
-        preserve_shared_source_files( $makefiles{$file}, $makefiles{$parent}, "RC_SRCS" );
-        preserve_shared_source_files( $makefiles{$file}, $makefiles{$parent}, "IDL_SRCS" );
-        preserve_shared_source_files( $makefiles{$file}, $makefiles{$parent}, "LEX_SRCS" );
-        preserve_shared_source_files( $makefiles{$file}, $makefiles{$parent}, "BISON_SRCS" );
+        my @parents = get_parent_makefiles( $file );
+        next unless @parents;
+        foreach my $parent (@parents)
+        {
+            preserve_shared_source_files( $makefiles{$file}, $makefiles{$parent}, "C_SRCS" );
+            preserve_shared_source_files( $makefiles{$file}, $makefiles{$parent}, "RC_SRCS" );
+            preserve_shared_source_files( $makefiles{$file}, $makefiles{$parent}, "IDL_SRCS" );
+            preserve_shared_source_files( $makefiles{$file}, $makefiles{$parent}, "LEX_SRCS" );
+            preserve_shared_source_files( $makefiles{$file}, $makefiles{$parent}, "BISON_SRCS" );
+        }
     }
 }
 
diff --git a/tools/makedep.c b/tools/makedep.c
index df3805591ea..df07eec5ab7 100644
--- a/tools/makedep.c
+++ b/tools/makedep.c
@@ -184,6 +184,7 @@ struct makefile
     struct strarray install_lib;
     struct strarray install_dev;
     struct strarray extra_targets;
+    struct strarray parent_dirs;
     struct list     sources;
     struct list     includes;
     const char     *base_dir;
@@ -191,7 +192,6 @@ struct makefile
     const char     *obj_dir;
     const char     *top_src_dir;
     const char     *top_obj_dir;
-    const char     *parent_dir;
     const char     *module;
     const char     *testdll;
     const char     *sharedlib;
@@ -1376,15 +1376,24 @@ static struct file *open_local_file( const struct makefile *make, const char *pa
 {
     char *src_path = root_dir_path( base_dir_path( make, path ));
     struct file *ret = load_file( src_path );
+    unsigned int i;
 
-    /* if not found, try parent dir */
-    if (!ret && make->parent_dir)
+    /* if not found, try parent dirs */
+    for (i = 0; !ret && i < make->parent_dirs.count; i++)
     {
+        char *new_path;
+
         free( src_path );
-        path = strmake( "%s/%s", make->parent_dir, path );
-        src_path = root_dir_path( base_dir_path( make, path ));
+        new_path = strmake( "%s/%s", make->parent_dirs.str[i], path );
+        src_path = root_dir_path( base_dir_path( make, new_path ));
         ret = load_file( src_path );
-        if (ret) ret->flags |= FLAG_PARENTDIR;
+        if (ret)
+        {
+            ret->flags |= FLAG_PARENTDIR;
+            path = new_path;
+        }
+        else
+            free(new_path);
     }
 
     if (ret) *filename = src_dir_path( make, path );
@@ -4119,13 +4126,13 @@ static void load_sources( struct makefile *make )
     strarray_set_value( &make->vars, "top_srcdir", root_src_dir_path( "" ));
     strarray_set_value( &make->vars, "srcdir", src_dir_path( make, "" ));
 
-    make->parent_dir    = get_expanded_make_variable( make, "PARENTSRC" );
     make->module        = get_expanded_make_variable( make, "MODULE" );
     make->testdll       = get_expanded_make_variable( make, "TESTDLL" );
     make->sharedlib     = get_expanded_make_variable( make, "SHAREDLIB" );
     make->staticlib     = get_expanded_make_variable( make, "STATICLIB" );
     make->importlib     = get_expanded_make_variable( make, "IMPORTLIB" );
 
+    make->parent_dirs   = get_expanded_make_var_array( make, "PARENTSRC" );
     make->programs      = get_expanded_make_var_array( make, "PROGRAMS" );
     make->scripts       = get_expanded_make_var_array( make, "SCRIPTS" );
     make->imports       = get_expanded_make_var_array( make, "IMPORTS" );
@@ -4326,8 +4335,11 @@ static void load_sources( struct makefile *make )
     strarray_add( &make->include_args, strmake( "-I%s", obj_dir_path( make, "" )));
     if (make->src_dir)
         strarray_add( &make->include_args, strmake( "-I%s", make->src_dir ));
-    if (make->parent_dir)
-        strarray_add( &make->include_args, strmake( "-I%s", src_dir_path( make, make->parent_dir )));
+    if (make->parent_dirs.count)
+    {
+        for (i = 0; i < make->parent_dirs.count; i++)
+            strarray_add( &make->include_args, strmake( "-I%s", src_dir_path( make, make->parent_dirs.str[i] )));
+    }
     strarray_add( &make->include_args, strmake( "-I%s", top_obj_dir_path( make, "include" )));
     if (make->top_src_dir)
         strarray_add( &make->include_args, strmake( "-I%s", top_src_dir_path( make, "include" )));
-- 
2.28.0

From 09d2c93517dd39d6696ffb7a58537c76f4af0847 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Wed, 29 Jan 2020 15:30:49 -0600
Subject: [PATCH 26/57] mf: Introduce handler helper.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/mf/Makefile.in               |   1 +
 dlls/mf/handler.c                 | 360 ++++++++++++++++++++++++++++
 dlls/mf/handler.h                 |  30 +++
 dlls/mf/main.c                    | 373 ++++--------------------------
 dlls/winegstreamer/Makefile.in    |   3 +-
 dlls/winegstreamer/media_source.c | 334 ++------------------------
 6 files changed, 447 insertions(+), 654 deletions(-)
 create mode 100644 dlls/mf/handler.c
 create mode 100644 dlls/mf/handler.h

diff --git a/dlls/mf/Makefile.in b/dlls/mf/Makefile.in
index f1d0571d143..1f741269f71 100644
--- a/dlls/mf/Makefile.in
+++ b/dlls/mf/Makefile.in
@@ -7,6 +7,7 @@ EXTRADLLFLAGS = -mno-cygwin
 
 C_SRCS = \
 	evr.c \
+	handler.c \
 	main.c \
 	samplegrabber.c \
 	sar.c \
diff --git a/dlls/mf/handler.c b/dlls/mf/handler.c
new file mode 100644
index 00000000000..da40049377e
--- /dev/null
+++ b/dlls/mf/handler.c
@@ -0,0 +1,360 @@
+#include <stdarg.h>
+
+#define COBJMACROS
+
+#include "windef.h"
+#include "winbase.h"
+#include "mfidl.h"
+
+#include "mfapi.h"
+#include "mferror.h"
+
+#include "handler.h"
+
+#include "wine/debug.h"
+#include "wine/heap.h"
+#include "wine/list.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(mfplat);
+
+struct create_object_context
+{
+    IUnknown IUnknown_iface;
+    LONG refcount;
+
+    IPropertyStore *props;
+    IMFByteStream *stream;
+    WCHAR *url;
+    DWORD flags;
+};
+
+struct handler_result
+{
+    struct list entry;
+    IMFAsyncResult *result;
+    MF_OBJECT_TYPE obj_type;
+    IUnknown *object;
+};
+
+static struct create_object_context *impl_from_IUnknown(IUnknown *iface)
+{
+    return CONTAINING_RECORD(iface, struct create_object_context, IUnknown_iface);
+}
+
+static HRESULT WINAPI create_object_context_QueryInterface(IUnknown *iface, REFIID riid, void **obj)
+{
+    TRACE("%p, %s, %p.\n", iface, debugstr_guid(riid), obj);
+
+    if (IsEqualIID(riid, &IID_IUnknown))
+    {
+        *obj = iface;
+        IUnknown_AddRef(iface);
+        return S_OK;
+    }
+
+    WARN("Unsupported %s.\n", debugstr_guid(riid));
+    *obj = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI create_object_context_AddRef(IUnknown *iface)
+{
+    struct create_object_context *context = impl_from_IUnknown(iface);
+    ULONG refcount = InterlockedIncrement(&context->refcount);
+
+    TRACE("%p, refcount %u.\n", iface, refcount);
+
+    return refcount;
+}
+
+static ULONG WINAPI create_object_context_Release(IUnknown *iface)
+{
+    struct create_object_context *context = impl_from_IUnknown(iface);
+    ULONG refcount = InterlockedDecrement(&context->refcount);
+
+    TRACE("%p, refcount %u.\n", iface, refcount);
+
+    if (!refcount)
+    {
+        if (context->props)
+            IPropertyStore_Release(context->props);
+        if (context->stream)
+            IMFByteStream_Release(context->stream);
+        if (context->url)
+            heap_free(context->url);
+        heap_free(context);
+    }
+
+    return refcount;
+}
+
+static const IUnknownVtbl create_object_context_vtbl =
+{
+    create_object_context_QueryInterface,
+    create_object_context_AddRef,
+    create_object_context_Release,
+};
+
+/* Start async methods */
+static struct handler *impl_from_IMFAsyncCallback(IMFAsyncCallback *iface)
+{
+    return CONTAINING_RECORD(iface, struct handler, IMFAsyncCallback_iface);
+}
+
+static HRESULT WINAPI handler_callback_QueryInterface(IMFAsyncCallback *iface, REFIID riid, void **obj)
+{
+    if (IsEqualIID(riid, &IID_IMFAsyncCallback) ||
+            IsEqualIID(riid, &IID_IUnknown))
+    {
+        *obj = iface;
+        IMFAsyncCallback_AddRef(iface);
+        return S_OK;
+    }
+
+    WARN("Unsupported %s.\n", debugstr_guid(riid));
+    *obj = NULL;
+    return E_NOINTERFACE;
+}
+
+/* lifetime not managed with COM */
+static ULONG WINAPI handler_callback_AddRef(IMFAsyncCallback *iface)
+{
+    return 2;
+}
+
+static ULONG WINAPI handler_callback_Release(IMFAsyncCallback *iface)
+{
+    return 1;
+}
+
+static HRESULT WINAPI handler_callback_GetParameters(IMFAsyncCallback *iface, DWORD *flags, DWORD *queue)
+{
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI handler_callback_Invoke(IMFAsyncCallback *iface, IMFAsyncResult *result)
+{
+    struct handler *handler = impl_from_IMFAsyncCallback(iface);
+    struct handler_result *handler_result;
+    MF_OBJECT_TYPE obj_type = MF_OBJECT_INVALID;
+    IUnknown *object = NULL, *context_object;
+    struct create_object_context *context;
+    IMFAsyncResult *caller;
+    HRESULT hr;
+
+    caller = (IMFAsyncResult *)IMFAsyncResult_GetStateNoAddRef(result);
+
+    if (FAILED(hr = IMFAsyncResult_GetObject(result, &context_object)))
+    {
+        WARN("Expected context set for callee result.\n");
+        return hr;
+    }
+
+    context = impl_from_IUnknown(context_object);
+
+    hr = handler->create_object(handler, context->url, context->stream, context->flags, context->props, &object, &obj_type);
+
+    handler_result = heap_alloc(sizeof(*handler_result));
+    if (handler_result)
+    {
+        handler_result->result = caller;
+        IMFAsyncResult_AddRef(handler_result->result);
+        handler_result->obj_type = obj_type;
+        handler_result->object = object;
+
+        EnterCriticalSection(&handler->cs);
+        list_add_tail(&handler->results, &handler_result->entry);
+        LeaveCriticalSection(&handler->cs);
+    }
+    else
+    {
+        if (object)
+            IUnknown_Release(object);
+        hr = E_OUTOFMEMORY;
+    }
+
+    IUnknown_Release(&context->IUnknown_iface);
+
+    IMFAsyncResult_SetStatus(caller, hr);
+    MFInvokeCallback(caller);
+
+    return S_OK;
+}
+
+static const IMFAsyncCallbackVtbl handler_callback_vtbl =
+{
+    handler_callback_QueryInterface,
+    handler_callback_AddRef,
+    handler_callback_Release,
+    handler_callback_GetParameters,
+    handler_callback_Invoke,
+};
+
+/* Start handler helpers */
+
+static WCHAR *heap_strdupW(const WCHAR *str)
+{
+    WCHAR *ret = NULL;
+
+    if (str)
+    {
+        unsigned int size;
+
+        size = (lstrlenW(str) + 1) * sizeof(WCHAR);
+        ret = heap_alloc(size);
+        if (ret)
+            memcpy(ret, str, size);
+    }
+
+    return ret;
+}
+
+HRESULT handler_begin_create_object(struct handler *handler, IMFByteStream *stream,
+        const WCHAR *url, DWORD flags, IPropertyStore *props, IUnknown **cancel_cookie,
+        IMFAsyncCallback *callback, IUnknown *state)
+{
+    struct create_object_context *context;
+    IMFAsyncResult *caller, *item;
+    HRESULT hr;
+
+    if (cancel_cookie)
+        *cancel_cookie = NULL;
+
+    if (FAILED(hr = MFCreateAsyncResult(NULL, callback, state, &caller)))
+        return hr;
+
+    context = heap_alloc(sizeof(*context));
+    if (!context)
+    {
+        IMFAsyncResult_Release(caller);
+        return E_OUTOFMEMORY;
+    }
+
+    context->IUnknown_iface.lpVtbl = &create_object_context_vtbl;
+    context->refcount = 1;
+    context->props = props;
+    if (context->props)
+        IPropertyStore_AddRef(context->props);
+    context->flags = flags;
+    context->stream = stream;
+    if (context->stream)
+        IMFByteStream_AddRef(context->stream);
+    if (url)
+        context->url = heap_strdupW(url);
+    if (!context->url && !context->stream)
+    {
+        IMFAsyncResult_Release(caller);
+        IUnknown_Release(&context->IUnknown_iface);
+        return E_OUTOFMEMORY;
+    }
+
+    hr = MFCreateAsyncResult(&context->IUnknown_iface, &handler->IMFAsyncCallback_iface, (IUnknown *)caller, &item);
+    IUnknown_Release(&context->IUnknown_iface);
+    if (SUCCEEDED(hr))
+    {
+        if (SUCCEEDED(hr = MFPutWorkItemEx(MFASYNC_CALLBACK_QUEUE_IO, item)))
+        {
+            if (cancel_cookie)
+            {
+                *cancel_cookie = (IUnknown *)caller;
+                IUnknown_AddRef(*cancel_cookie);
+            }
+        }
+
+        IMFAsyncResult_Release(item);
+    }
+    IMFAsyncResult_Release(caller);
+
+    return hr;
+}
+
+HRESULT handler_end_create_object(struct handler *handler, IMFAsyncResult *result,
+        MF_OBJECT_TYPE *obj_type, IUnknown **object)
+{
+    struct handler_result *found = NULL, *cur;
+    HRESULT hr;
+
+    EnterCriticalSection(&handler->cs);
+
+    LIST_FOR_EACH_ENTRY(cur, &handler->results, struct handler_result, entry)
+    {
+        if (result == cur->result)
+        {
+            list_remove(&cur->entry);
+            found = cur;
+            break;
+        }
+    }
+
+    LeaveCriticalSection(&handler->cs);
+
+    if (found)
+    {
+        *obj_type = found->obj_type;
+        *object = found->object;
+        hr = IMFAsyncResult_GetStatus(found->result);
+        IMFAsyncResult_Release(found->result);
+        heap_free(found);
+    }
+    else
+    {
+        *obj_type = MF_OBJECT_INVALID;
+        *object = NULL;
+        hr = MF_E_UNEXPECTED;
+    }
+
+    return hr;
+}
+
+HRESULT handler_cancel_object_creation(struct handler *handler, IUnknown *cancel_cookie)
+{
+    struct handler_result *found = NULL, *cur;
+
+    EnterCriticalSection(&handler->cs);
+
+    LIST_FOR_EACH_ENTRY(cur, &handler->results, struct handler_result, entry)
+    {
+        if (cancel_cookie == (IUnknown *)cur->result)
+        {
+            list_remove(&cur->entry);
+            found = cur;
+            break;
+        }
+    }
+
+    LeaveCriticalSection(&handler->cs);
+
+    if (found)
+    {
+        IMFAsyncResult_Release(found->result);
+        if (found->object)
+            IUnknown_Release(found->object);
+        heap_free(found);
+    }
+
+    return found ? S_OK : MF_E_UNEXPECTED;
+}
+
+void handler_construct(struct handler *handler, p_create_object_callback create_object_callback)
+{
+    handler->IMFAsyncCallback_iface.lpVtbl = &handler_callback_vtbl;
+    handler->create_object = create_object_callback;
+
+    list_init(&handler->results);
+    InitializeCriticalSection(&handler->cs);
+}
+
+void handler_destruct(struct handler *handler)
+{
+    struct handler_result *result, *next;
+
+    LIST_FOR_EACH_ENTRY_SAFE(result, next, &handler->results, struct handler_result, entry)
+    {
+        list_remove(&result->entry);
+        IMFAsyncResult_Release(result->result);
+        if (result->object)
+            IUnknown_Release(result->object);
+        heap_free(result);
+    }
+    DeleteCriticalSection(&handler->cs);
+}
\ No newline at end of file
diff --git a/dlls/mf/handler.h b/dlls/mf/handler.h
new file mode 100644
index 00000000000..fbebd26e8d0
--- /dev/null
+++ b/dlls/mf/handler.h
@@ -0,0 +1,30 @@
+#include "windef.h"
+
+#include "mfidl.h"
+#include "mfapi.h"
+#include "mfobjects.h"
+
+#include "wine/list.h"
+
+/* helper sub-object that handles ansyncronous nature of handlers */
+
+struct handler;
+typedef HRESULT (*p_create_object_callback)(struct handler *handler, WCHAR *url, IMFByteStream *stream, DWORD flags, IPropertyStore *props,
+                                            IUnknown **out_object, MF_OBJECT_TYPE *out_obj_type);
+
+struct handler
+{
+    IMFAsyncCallback IMFAsyncCallback_iface;
+    struct list results;
+    CRITICAL_SECTION cs;
+    p_create_object_callback create_object;
+};
+
+void handler_construct(struct handler *handler, p_create_object_callback create_object_callback);
+void handler_destruct(struct handler *handler);
+HRESULT handler_begin_create_object(struct handler *handler, IMFByteStream *stream,
+        const WCHAR *url, DWORD flags, IPropertyStore *props, IUnknown **cancel_cookie,
+        IMFAsyncCallback *callback, IUnknown *state);
+HRESULT handler_end_create_object(struct handler *handler, IMFAsyncResult *result,
+        MF_OBJECT_TYPE *obj_type, IUnknown **object);
+HRESULT handler_cancel_object_creation(struct handler *handler, IUnknown *cancel_cookie);
\ No newline at end of file
diff --git a/dlls/mf/main.c b/dlls/mf/main.c
index 53264258137..ebcaef4cad3 100644
--- a/dlls/mf/main.c
+++ b/dlls/mf/main.c
@@ -27,6 +27,7 @@
 #include "rpcproxy.h"
 
 #include "mf_private.h"
+#include "handler.h"
 
 #include "wine/debug.h"
 #include "wine/heap.h"
@@ -550,22 +551,12 @@ static const IClassFactoryVtbl class_factory_vtbl =
     class_factory_LockServer,
 };
 
-struct file_scheme_handler_result
-{
-    struct list entry;
-    IMFAsyncResult *result;
-    MF_OBJECT_TYPE obj_type;
-    IUnknown *object;
-};
-
 struct file_scheme_handler
 {
     IMFSchemeHandler IMFSchemeHandler_iface;
-    IMFAsyncCallback IMFAsyncCallback_iface;
     LONG refcount;
     IMFSourceResolver *resolver;
-    struct list results;
-    CRITICAL_SECTION cs;
+    struct handler handler;
 };
 
 static struct file_scheme_handler *impl_from_IMFSchemeHandler(IMFSchemeHandler *iface)
@@ -573,11 +564,6 @@ static struct file_scheme_handler *impl_from_IMFSchemeHandler(IMFSchemeHandler *
     return CONTAINING_RECORD(iface, struct file_scheme_handler, IMFSchemeHandler_iface);
 }
 
-static struct file_scheme_handler *impl_from_IMFAsyncCallback(IMFAsyncCallback *iface)
-{
-    return CONTAINING_RECORD(iface, struct file_scheme_handler, IMFAsyncCallback_iface);
-}
-
 static HRESULT WINAPI file_scheme_handler_QueryInterface(IMFSchemeHandler *iface, REFIID riid, void **obj)
 {
     TRACE("%p, %s, %p.\n", iface, debugstr_guid(riid), obj);
@@ -607,242 +593,45 @@ static ULONG WINAPI file_scheme_handler_AddRef(IMFSchemeHandler *iface)
 
 static ULONG WINAPI file_scheme_handler_Release(IMFSchemeHandler *iface)
 {
-    struct file_scheme_handler *handler = impl_from_IMFSchemeHandler(iface);
-    ULONG refcount = InterlockedDecrement(&handler->refcount);
-    struct file_scheme_handler_result *result, *next;
+    struct file_scheme_handler *this = impl_from_IMFSchemeHandler(iface);
+    ULONG refcount = InterlockedDecrement(&this->refcount);
 
     TRACE("%p, refcount %u.\n", iface, refcount);
 
     if (!refcount)
     {
-        LIST_FOR_EACH_ENTRY_SAFE(result, next, &handler->results, struct file_scheme_handler_result, entry)
-        {
-            list_remove(&result->entry);
-            IMFAsyncResult_Release(result->result);
-            if (result->object)
-                IUnknown_Release(result->object);
-            heap_free(result);
-        }
-        DeleteCriticalSection(&handler->cs);
-        if (handler->resolver)
-            IMFSourceResolver_Release(handler->resolver);
-        heap_free(handler);
+        if (this->resolver)
+            IMFSourceResolver_Release(this->resolver);
+        handler_destruct(&this->handler);
     }
 
     return refcount;
 }
 
-struct create_object_context
-{
-    IUnknown IUnknown_iface;
-    LONG refcount;
-
-    IPropertyStore *props;
-    WCHAR *url;
-    DWORD flags;
-};
-
-static struct create_object_context *impl_from_IUnknown(IUnknown *iface)
-{
-    return CONTAINING_RECORD(iface, struct create_object_context, IUnknown_iface);
-}
-
-static HRESULT WINAPI create_object_context_QueryInterface(IUnknown *iface, REFIID riid, void **obj)
-{
-    TRACE("%p, %s, %p.\n", iface, debugstr_guid(riid), obj);
-
-    if (IsEqualIID(riid, &IID_IUnknown))
-    {
-        *obj = iface;
-        IUnknown_AddRef(iface);
-        return S_OK;
-    }
-
-    WARN("Unsupported %s.\n", debugstr_guid(riid));
-    *obj = NULL;
-    return E_NOINTERFACE;
-}
-
-static ULONG WINAPI create_object_context_AddRef(IUnknown *iface)
-{
-    struct create_object_context *context = impl_from_IUnknown(iface);
-    ULONG refcount = InterlockedIncrement(&context->refcount);
-
-    TRACE("%p, refcount %u.\n", iface, refcount);
-
-    return refcount;
-}
-
-static ULONG WINAPI create_object_context_Release(IUnknown *iface)
-{
-    struct create_object_context *context = impl_from_IUnknown(iface);
-    ULONG refcount = InterlockedDecrement(&context->refcount);
-
-    TRACE("%p, refcount %u.\n", iface, refcount);
-
-    if (!refcount)
-    {
-        if (context->props)
-            IPropertyStore_Release(context->props);
-        heap_free(context->url);
-        heap_free(context);
-    }
-
-    return refcount;
-}
-
-static const IUnknownVtbl create_object_context_vtbl =
-{
-    create_object_context_QueryInterface,
-    create_object_context_AddRef,
-    create_object_context_Release,
-};
-
-static WCHAR *heap_strdupW(const WCHAR *str)
-{
-    WCHAR *ret = NULL;
-
-    if (str)
-    {
-        unsigned int size;
-
-        size = (lstrlenW(str) + 1) * sizeof(WCHAR);
-        ret = heap_alloc(size);
-        if (ret)
-            memcpy(ret, str, size);
-    }
-
-    return ret;
-}
-
 static HRESULT WINAPI file_scheme_handler_BeginCreateObject(IMFSchemeHandler *iface, const WCHAR *url, DWORD flags,
         IPropertyStore *props, IUnknown **cancel_cookie, IMFAsyncCallback *callback, IUnknown *state)
 {
-    struct file_scheme_handler *handler = impl_from_IMFSchemeHandler(iface);
-    struct create_object_context *context;
-    IMFAsyncResult *caller, *item;
-    HRESULT hr;
+    struct file_scheme_handler *this = impl_from_IMFSchemeHandler(iface);
 
     TRACE("%p, %s, %#x, %p, %p, %p, %p.\n", iface, debugstr_w(url), flags, props, cancel_cookie, callback, state);
-
-    if (cancel_cookie)
-        *cancel_cookie = NULL;
-
-    if (FAILED(hr = MFCreateAsyncResult(NULL, callback, state, &caller)))
-        return hr;
-
-    context = heap_alloc(sizeof(*context));
-    if (!context)
-    {
-        IMFAsyncResult_Release(caller);
-        return E_OUTOFMEMORY;
-    }
-
-    context->IUnknown_iface.lpVtbl = &create_object_context_vtbl;
-    context->refcount = 1;
-    context->props = props;
-    if (context->props)
-        IPropertyStore_AddRef(context->props);
-    context->flags = flags;
-    context->url = heap_strdupW(url);
-    if (!context->url)
-    {
-        IMFAsyncResult_Release(caller);
-        IUnknown_Release(&context->IUnknown_iface);
-        return E_OUTOFMEMORY;
-    }
-
-    hr = MFCreateAsyncResult(&context->IUnknown_iface, &handler->IMFAsyncCallback_iface, (IUnknown *)caller, &item);
-    IUnknown_Release(&context->IUnknown_iface);
-    if (SUCCEEDED(hr))
-    {
-        if (SUCCEEDED(hr = MFPutWorkItemEx(MFASYNC_CALLBACK_QUEUE_IO, item)))
-        {
-            if (cancel_cookie)
-            {
-                *cancel_cookie = (IUnknown *)caller;
-                IUnknown_AddRef(*cancel_cookie);
-            }
-        }
-
-        IMFAsyncResult_Release(item);
-    }
-    IMFAsyncResult_Release(caller);
-
-    return hr;
+    return handler_begin_create_object(&this->handler, NULL, url, flags, props, cancel_cookie, callback, state);
 }
 
 static HRESULT WINAPI file_scheme_handler_EndCreateObject(IMFSchemeHandler *iface, IMFAsyncResult *result,
         MF_OBJECT_TYPE *obj_type, IUnknown **object)
 {
-    struct file_scheme_handler *handler = impl_from_IMFSchemeHandler(iface);
-    struct file_scheme_handler_result *found = NULL, *cur;
-    HRESULT hr;
+    struct file_scheme_handler *this = impl_from_IMFSchemeHandler(iface);
 
     TRACE("%p, %p, %p, %p.\n", iface, result, obj_type, object);
-
-    EnterCriticalSection(&handler->cs);
-
-    LIST_FOR_EACH_ENTRY(cur, &handler->results, struct file_scheme_handler_result, entry)
-    {
-        if (result == cur->result)
-        {
-            list_remove(&cur->entry);
-            found = cur;
-            break;
-        }
-    }
-
-    LeaveCriticalSection(&handler->cs);
-
-    if (found)
-    {
-        *obj_type = found->obj_type;
-        *object = found->object;
-        hr = IMFAsyncResult_GetStatus(found->result);
-        IMFAsyncResult_Release(found->result);
-        heap_free(found);
-    }
-    else
-    {
-        *obj_type = MF_OBJECT_INVALID;
-        *object = NULL;
-        hr = MF_E_UNEXPECTED;
-    }
-
-    return hr;
+    return handler_end_create_object(&this->handler, result, obj_type, object);
 }
 
 static HRESULT WINAPI file_scheme_handler_CancelObjectCreation(IMFSchemeHandler *iface, IUnknown *cancel_cookie)
 {
-    struct file_scheme_handler *handler = impl_from_IMFSchemeHandler(iface);
-    struct file_scheme_handler_result *found = NULL, *cur;
+    struct file_scheme_handler *this = impl_from_IMFSchemeHandler(iface);
 
     TRACE("%p, %p.\n", iface, cancel_cookie);
-
-    EnterCriticalSection(&handler->cs);
-
-    LIST_FOR_EACH_ENTRY(cur, &handler->results, struct file_scheme_handler_result, entry)
-    {
-        if (cancel_cookie == (IUnknown *)cur->result)
-        {
-            list_remove(&cur->entry);
-            found = cur;
-            break;
-        }
-    }
-
-    LeaveCriticalSection(&handler->cs);
-
-    if (found)
-    {
-        IMFAsyncResult_Release(found->result);
-        if (found->object)
-            IUnknown_Release(found->object);
-        heap_free(found);
-    }
-
-    return found ? S_OK : MF_E_UNEXPECTED;
+    return handler_cancel_object_creation(&this->handler, cancel_cookie);
 }
 
 static const IMFSchemeHandlerVtbl file_scheme_handler_vtbl =
@@ -855,38 +644,6 @@ static const IMFSchemeHandlerVtbl file_scheme_handler_vtbl =
     file_scheme_handler_CancelObjectCreation,
 };
 
-static HRESULT WINAPI file_scheme_handler_callback_QueryInterface(IMFAsyncCallback *iface, REFIID riid, void **obj)
-{
-    if (IsEqualIID(riid, &IID_IMFAsyncCallback) ||
-            IsEqualIID(riid, &IID_IUnknown))
-    {
-        *obj = iface;
-        IMFAsyncCallback_AddRef(iface);
-        return S_OK;
-    }
-
-    WARN("Unsupported %s.\n", debugstr_guid(riid));
-    *obj = NULL;
-    return E_NOINTERFACE;
-}
-
-static ULONG WINAPI file_scheme_handler_callback_AddRef(IMFAsyncCallback *iface)
-{
-    struct file_scheme_handler *handler = impl_from_IMFAsyncCallback(iface);
-    return IMFSchemeHandler_AddRef(&handler->IMFSchemeHandler_iface);
-}
-
-static ULONG WINAPI file_scheme_handler_callback_Release(IMFAsyncCallback *iface)
-{
-    struct file_scheme_handler *handler = impl_from_IMFAsyncCallback(iface);
-    return IMFSchemeHandler_Release(&handler->IMFSchemeHandler_iface);
-}
-
-static HRESULT WINAPI file_scheme_handler_callback_GetParameters(IMFAsyncCallback *iface, DWORD *flags, DWORD *queue)
-{
-    return E_NOTIMPL;
-}
-
 static HRESULT file_scheme_handler_get_resolver(struct file_scheme_handler *handler, IMFSourceResolver **resolver)
 {
     HRESULT hr;
@@ -908,111 +665,63 @@ static HRESULT file_scheme_handler_get_resolver(struct file_scheme_handler *hand
     return S_OK;
 }
 
-static HRESULT WINAPI file_scheme_handler_callback_Invoke(IMFAsyncCallback *iface, IMFAsyncResult *result)
+static HRESULT file_scheme_handler_create_object(struct handler *handler, WCHAR *url, IMFByteStream *stream, DWORD flags,
+                                         IPropertyStore *props, IUnknown **out_object, MF_OBJECT_TYPE *out_obj_type)
 {
     static const WCHAR schemeW[] = {'f','i','l','e',':','/','/'};
-    struct file_scheme_handler *handler = impl_from_IMFAsyncCallback(iface);
-    struct file_scheme_handler_result *handler_result;
-    MF_OBJECT_TYPE obj_type = MF_OBJECT_INVALID;
-    IUnknown *object = NULL, *context_object;
-    struct create_object_context *context;
+    HRESULT hr = S_OK;
+    WCHAR *path;
+    IMFByteStream *file_byte_stream;
+    struct file_scheme_handler *this = CONTAINING_RECORD(handler, struct file_scheme_handler, handler);
     IMFSourceResolver *resolver;
-    IMFAsyncResult *caller;
-    IMFByteStream *stream;
-    const WCHAR *url;
-    HRESULT hr;
-
-    caller = (IMFAsyncResult *)IMFAsyncResult_GetStateNoAddRef(result);
-
-    if (FAILED(hr = IMFAsyncResult_GetObject(result, &context_object)))
-    {
-        WARN("Expected context set for callee result.\n");
-        return hr;
-    }
-
-    context = impl_from_IUnknown(context_object);
 
     /* Strip from scheme, MFCreateFile() won't be expecting it. */
-    url = context->url;
-    if (!wcsnicmp(context->url, schemeW, ARRAY_SIZE(schemeW)))
-        url += ARRAY_SIZE(schemeW);
+    path = url;
+    if (!wcsnicmp(url, schemeW, ARRAY_SIZE(schemeW)))
+        path += ARRAY_SIZE(schemeW);
 
-    hr = MFCreateFile(context->flags & MF_RESOLUTION_WRITE ? MF_ACCESSMODE_READWRITE : MF_ACCESSMODE_READ,
-            MF_OPENMODE_FAIL_IF_NOT_EXIST, MF_FILEFLAGS_NONE, url, &stream);
+    hr = MFCreateFile(flags & MF_RESOLUTION_WRITE ? MF_ACCESSMODE_READWRITE : MF_ACCESSMODE_READ,
+            MF_OPENMODE_FAIL_IF_NOT_EXIST, MF_FILEFLAGS_NONE, path, &file_byte_stream);
     if (SUCCEEDED(hr))
     {
-        if (context->flags & MF_RESOLUTION_MEDIASOURCE)
+        if (flags & MF_RESOLUTION_MEDIASOURCE)
         {
-            if (SUCCEEDED(hr = file_scheme_handler_get_resolver(handler, &resolver)))
+            if (SUCCEEDED(hr = file_scheme_handler_get_resolver(this, &resolver)))
             {
-                hr = IMFSourceResolver_CreateObjectFromByteStream(resolver, stream, context->url, context->flags,
-                        context->props, &obj_type, &object);
+                hr = IMFSourceResolver_CreateObjectFromByteStream(resolver, file_byte_stream, url, flags,
+                        props, out_obj_type, out_object);
                 IMFSourceResolver_Release(resolver);
-                IMFByteStream_Release(stream);
+                IMFByteStream_Release(file_byte_stream);
             }
         }
         else
         {
-            object = (IUnknown *)stream;
-            obj_type = MF_OBJECT_BYTESTREAM;
+            *out_object = (IUnknown *)file_byte_stream;
+            *out_obj_type = MF_OBJECT_BYTESTREAM;
         }
     }
 
-    handler_result = heap_alloc(sizeof(*handler_result));
-    if (handler_result)
-    {
-        handler_result->result = caller;
-        IMFAsyncResult_AddRef(handler_result->result);
-        handler_result->obj_type = obj_type;
-        handler_result->object = object;
-
-        EnterCriticalSection(&handler->cs);
-        list_add_tail(&handler->results, &handler_result->entry);
-        LeaveCriticalSection(&handler->cs);
-    }
-    else
-    {
-        if (object)
-            IUnknown_Release(object);
-        hr = E_OUTOFMEMORY;
-    }
-
-    IUnknown_Release(&context->IUnknown_iface);
-
-    IMFAsyncResult_SetStatus(caller, hr);
-    MFInvokeCallback(caller);
-
-    return S_OK;
+    return hr;
 }
 
-static const IMFAsyncCallbackVtbl file_scheme_handler_callback_vtbl =
-{
-    file_scheme_handler_callback_QueryInterface,
-    file_scheme_handler_callback_AddRef,
-    file_scheme_handler_callback_Release,
-    file_scheme_handler_callback_GetParameters,
-    file_scheme_handler_callback_Invoke,
-};
-
 static HRESULT file_scheme_handler_construct(REFIID riid, void **obj)
 {
-    struct file_scheme_handler *handler;
+    struct file_scheme_handler *this;
     HRESULT hr;
 
     TRACE("%s, %p.\n", debugstr_guid(riid), obj);
 
-    handler = heap_alloc_zero(sizeof(*handler));
-    if (!handler)
+    this = heap_alloc_zero(sizeof(*this));
+    if (!this)
         return E_OUTOFMEMORY;
 
-    handler->IMFSchemeHandler_iface.lpVtbl = &file_scheme_handler_vtbl;
-    handler->IMFAsyncCallback_iface.lpVtbl = &file_scheme_handler_callback_vtbl;
-    handler->refcount = 1;
-    list_init(&handler->results);
-    InitializeCriticalSection(&handler->cs);
+    handler_construct(&this->handler, file_scheme_handler_create_object);
+
+    this->IMFSchemeHandler_iface.lpVtbl = &file_scheme_handler_vtbl;
+    this->refcount = 1;
 
-    hr = IMFSchemeHandler_QueryInterface(&handler->IMFSchemeHandler_iface, riid, obj);
-    IMFSchemeHandler_Release(&handler->IMFSchemeHandler_iface);
+    hr = IMFSchemeHandler_QueryInterface(&this->IMFSchemeHandler_iface, riid, obj);
+    IMFSchemeHandler_Release(&this->IMFSchemeHandler_iface);
 
     return hr;
 }
diff --git a/dlls/winegstreamer/Makefile.in b/dlls/winegstreamer/Makefile.in
index e578d194f7f..f2e87494459 100644
--- a/dlls/winegstreamer/Makefile.in
+++ b/dlls/winegstreamer/Makefile.in
@@ -3,12 +3,13 @@ IMPORTS   = strmiids uuid ole32 mfuuid
 DELAYIMPORTS = mfplat
 EXTRAINCL = $(GSTREAMER_CFLAGS)
 EXTRALIBS = $(GSTREAMER_LIBS) $(PTHREAD_LIBS)
-PARENTSRC = ../strmbase
+PARENTSRC = ../strmbase ../mf
 
 C_SRCS = \
 	filter.c \
 	gst_cbs.c \
 	gstdemux.c \
+	handler.c \
 	main.c \
 	media_source.c \
 	mediatype.c \
diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index e1b018b74ce..b8431569e6a 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -23,6 +23,7 @@
 
 #include "gst_private.h"
 #include "gst_cbs.h"
+#include "handler.h"
 
 #include <assert.h>
 #include <stdarg.h>
@@ -1498,21 +1499,11 @@ static HRESULT media_source_constructor(IMFByteStream *bytestream, struct media_
     return hr;
 }
 
-struct winegstreamer_stream_handler_result
-{
-    struct list entry;
-    IMFAsyncResult *result;
-    MF_OBJECT_TYPE obj_type;
-    IUnknown *object;
-};
-
 struct winegstreamer_stream_handler
 {
     IMFByteStreamHandler IMFByteStreamHandler_iface;
-    IMFAsyncCallback IMFAsyncCallback_iface;
     LONG refcount;
-    struct list results;
-    CRITICAL_SECTION cs;
+    struct handler handler;
 };
 
 static struct winegstreamer_stream_handler *impl_from_IMFByteStreamHandler(IMFByteStreamHandler *iface)
@@ -1520,11 +1511,6 @@ static struct winegstreamer_stream_handler *impl_from_IMFByteStreamHandler(IMFBy
     return CONTAINING_RECORD(iface, struct winegstreamer_stream_handler, IMFByteStreamHandler_iface);
 }
 
-static struct winegstreamer_stream_handler *impl_from_IMFAsyncCallback(IMFAsyncCallback *iface)
-{
-    return CONTAINING_RECORD(iface, struct winegstreamer_stream_handler, IMFAsyncCallback_iface);
-}
-
 static HRESULT WINAPI winegstreamer_stream_handler_QueryInterface(IMFByteStreamHandler *iface, REFIID riid, void **obj)
 {
     TRACE("%p, %s, %p.\n", iface, debugstr_guid(riid), obj);
@@ -1751,247 +1751,46 @@ static ULONG WINAPI winegstreamer_stream_handler_AddRef(IMFByteStreamHandler *if
 
 static ULONG WINAPI winegstreamer_stream_handler_Release(IMFByteStreamHandler *iface)
 {
-    struct winegstreamer_stream_handler *handler = impl_from_IMFByteStreamHandler(iface);
-    ULONG refcount = InterlockedDecrement(&handler->refcount);
-    struct winegstreamer_stream_handler_result *result, *next;
-
-    TRACE("%p, refcount %u.\n", iface, refcount);
-
-    if (!refcount)
-    {
-        LIST_FOR_EACH_ENTRY_SAFE(result, next, &handler->results, struct winegstreamer_stream_handler_result, entry)
-        {
-            list_remove(&result->entry);
-            IMFAsyncResult_Release(result->result);
-            if (result->object)
-                IUnknown_Release(result->object);
-            heap_free(result);
-        }
-        DeleteCriticalSection(&handler->cs);
-        heap_free(handler);
-    }
-
-    return refcount;
-}
-
-struct create_object_context
-{
-    IUnknown IUnknown_iface;
-    LONG refcount;
-
-    IPropertyStore *props;
-    IMFByteStream *stream;
-    WCHAR *url;
-    DWORD flags;
-};
-
-static struct create_object_context *impl_from_IUnknown(IUnknown *iface)
-{
-    return CONTAINING_RECORD(iface, struct create_object_context, IUnknown_iface);
-}
-
-static HRESULT WINAPI create_object_context_QueryInterface(IUnknown *iface, REFIID riid, void **obj)
-{
-    TRACE("%p, %s, %p.\n", iface, debugstr_guid(riid), obj);
-
-    if (IsEqualIID(riid, &IID_IUnknown))
-    {
-        *obj = iface;
-        IUnknown_AddRef(iface);
-        return S_OK;
-    }
-
-    WARN("Unsupported %s.\n", debugstr_guid(riid));
-    *obj = NULL;
-    return E_NOINTERFACE;
-}
-
-static ULONG WINAPI create_object_context_AddRef(IUnknown *iface)
-{
-    struct create_object_context *context = impl_from_IUnknown(iface);
-    ULONG refcount = InterlockedIncrement(&context->refcount);
-
-    TRACE("%p, refcount %u.\n", iface, refcount);
-
-    return refcount;
-}
-
-static ULONG WINAPI create_object_context_Release(IUnknown *iface)
-{
-    struct create_object_context *context = impl_from_IUnknown(iface);
-    ULONG refcount = InterlockedDecrement(&context->refcount);
-
+    struct winegstreamer_stream_handler *this = impl_from_IMFByteStreamHandler(iface);
+    ULONG refcount = InterlockedDecrement(&this->refcount);
     TRACE("%p, refcount %u.\n", iface, refcount);
 
     if (!refcount)
     {
-        if (context->props)
-            IPropertyStore_Release(context->props);
-        if (context->stream)
-            IMFByteStream_Release(context->stream);
-        heap_free(context->url);
-        heap_free(context);
+        handler_destruct(&this->handler);
+        heap_free(this);
     }
 
     return refcount;
 }
 
-static const IUnknownVtbl create_object_context_vtbl =
-{
-    create_object_context_QueryInterface,
-    create_object_context_AddRef,
-    create_object_context_Release,
-};
-
-static WCHAR *heap_strdupW(const WCHAR *str)
-{
-    WCHAR *ret = NULL;
-
-    if (str)
-    {
-        unsigned int size;
-
-        size = (lstrlenW(str) + 1) * sizeof(WCHAR);
-        ret = heap_alloc(size);
-        if (ret)
-            memcpy(ret, str, size);
-    }
-
-    return ret;
-}
-
 static HRESULT WINAPI winegstreamer_stream_handler_BeginCreateObject(IMFByteStreamHandler *iface, IMFByteStream *stream, const WCHAR *url, DWORD flags,
         IPropertyStore *props, IUnknown **cancel_cookie, IMFAsyncCallback *callback, IUnknown *state)
 {
     struct winegstreamer_stream_handler *this = impl_from_IMFByteStreamHandler(iface);
-    struct create_object_context *context;
-    IMFAsyncResult *caller, *item;
-    HRESULT hr;
 
     TRACE("%p, %s, %#x, %p, %p, %p, %p.\n", iface, debugstr_w(url), flags, props, cancel_cookie, callback, state);
 
-    if (cancel_cookie)
-        *cancel_cookie = NULL;
-
-    if (FAILED(hr = MFCreateAsyncResult(NULL, callback, state, &caller)))
-        return hr;
-
-    context = heap_alloc(sizeof(*context));
-    if (!context)
-    {
-        IMFAsyncResult_Release(caller);
-        return E_OUTOFMEMORY;
-    }
-
-    context->IUnknown_iface.lpVtbl = &create_object_context_vtbl;
-    context->refcount = 1;
-    context->props = props;
-    if (context->props)
-        IPropertyStore_AddRef(context->props);
-    context->flags = flags;
-    context->stream = stream;
-    if (context->stream)
-        IMFByteStream_AddRef(context->stream);
-    if (url)
-        context->url = heap_strdupW(url);
-    if (!context->stream)
-    {
-        IMFAsyncResult_Release(caller);
-        IUnknown_Release(&context->IUnknown_iface);
-        return E_OUTOFMEMORY;
-    }
-
-    hr = MFCreateAsyncResult(&context->IUnknown_iface, &this->IMFAsyncCallback_iface, (IUnknown *)caller, &item);
-    IUnknown_Release(&context->IUnknown_iface);
-    if (SUCCEEDED(hr))
-    {
-        if (SUCCEEDED(hr = MFPutWorkItemEx(MFASYNC_CALLBACK_QUEUE_IO, item)))
-        {
-            if (cancel_cookie)
-            {
-                *cancel_cookie = (IUnknown *)caller;
-                IUnknown_AddRef(*cancel_cookie);
-            }
-        }
-
-        IMFAsyncResult_Release(item);
-    }
-    IMFAsyncResult_Release(caller);
-
-    return hr;
+    return handler_begin_create_object(&this->handler, stream, url, flags, props, cancel_cookie, callback, state);
 }
 
 static HRESULT WINAPI winegstreamer_stream_handler_EndCreateObject(IMFByteStreamHandler *iface, IMFAsyncResult *result,
         MF_OBJECT_TYPE *obj_type, IUnknown **object)
 {
     struct winegstreamer_stream_handler *this = impl_from_IMFByteStreamHandler(iface);
-    struct winegstreamer_stream_handler_result *found = NULL, *cur;
-    HRESULT hr;
 
     TRACE("%p, %p, %p, %p.\n", iface, result, obj_type, object);
 
-    EnterCriticalSection(&this->cs);
-
-    LIST_FOR_EACH_ENTRY(cur, &this->results, struct winegstreamer_stream_handler_result, entry)
-    {
-        if (result == cur->result)
-        {
-            list_remove(&cur->entry);
-            found = cur;
-            break;
-        }
-    }
-
-    LeaveCriticalSection(&this->cs);
-
-    if (found)
-    {
-        *obj_type = found->obj_type;
-        *object = found->object;
-        hr = IMFAsyncResult_GetStatus(found->result);
-        IMFAsyncResult_Release(found->result);
-        heap_free(found);
-    }
-    else
-    {
-        *obj_type = MF_OBJECT_INVALID;
-        *object = NULL;
-        hr = MF_E_UNEXPECTED;
-    }
-
-    return hr;
+    return handler_end_create_object(&this->handler, result, obj_type, object);
 }
 
 static HRESULT WINAPI winegstreamer_stream_handler_CancelObjectCreation(IMFByteStreamHandler *iface, IUnknown *cancel_cookie)
 {
     struct winegstreamer_stream_handler *this = impl_from_IMFByteStreamHandler(iface);
-    struct winegstreamer_stream_handler_result *found = NULL, *cur;
 
     TRACE("%p, %p.\n", iface, cancel_cookie);
 
-    EnterCriticalSection(&this->cs);
-
-    LIST_FOR_EACH_ENTRY(cur, &this->results, struct winegstreamer_stream_handler_result, entry)
-    {
-        if (cancel_cookie == (IUnknown *)cur->result)
-        {
-            list_remove(&cur->entry);
-            found = cur;
-            break;
-        }
-    }
-
-    LeaveCriticalSection(&this->cs);
-
-    if (found)
-    {
-        IMFAsyncResult_Release(found->result);
-        if (found->object)
-            IUnknown_Release(found->object);
-        heap_free(found);
-    }
-
-    return found ? S_OK : MF_E_UNEXPECTED;
+    return handler_cancel_object_creation(&this->handler, cancel_cookie);
 }
 
 static HRESULT WINAPI winegstreamer_stream_handler_GetMaxNumberOfBytesRequiredForResolution(IMFByteStreamHandler *iface, QWORD *bytes)
@@ -1814,47 +1597,16 @@ static const IMFByteStreamHandlerVtbl winegstreamer_stream_handler_vtbl =
     winegstreamer_stream_handler_GetMaxNumberOfBytesRequiredForResolution,
 };
 
-static HRESULT WINAPI winegstreamer_stream_handler_callback_QueryInterface(IMFAsyncCallback *iface, REFIID riid, void **obj)
-{
-    if (IsEqualIID(riid, &IID_IMFAsyncCallback) ||
-            IsEqualIID(riid, &IID_IUnknown))
-    {
-        *obj = iface;
-        IMFAsyncCallback_AddRef(iface);
-        return S_OK;
-    }
-
-    WARN("Unsupported %s.\n", debugstr_guid(riid));
-    *obj = NULL;
-    return E_NOINTERFACE;
-}
-
-static ULONG WINAPI winegstreamer_stream_handler_callback_AddRef(IMFAsyncCallback *iface)
-{
-    struct winegstreamer_stream_handler *handler = impl_from_IMFAsyncCallback(iface);
-    return IMFByteStreamHandler_AddRef(&handler->IMFByteStreamHandler_iface);
-}
-
-static ULONG WINAPI winegstreamer_stream_handler_callback_Release(IMFAsyncCallback *iface)
-{
-    struct winegstreamer_stream_handler *handler = impl_from_IMFAsyncCallback(iface);
-    return IMFByteStreamHandler_Release(&handler->IMFByteStreamHandler_iface);
-}
-
-static HRESULT WINAPI winegstreamer_stream_handler_callback_GetParameters(IMFAsyncCallback *iface, DWORD *flags, DWORD *queue)
-{
-    return E_NOTIMPL;
-}
-
-static HRESULT winegstreamer_stream_handler_create_object(struct winegstreamer_stream_handler *This, WCHAR *url, IMFByteStream *stream, DWORD flags,
+static HRESULT winegstreamer_stream_handler_create_object(struct handler *handler, WCHAR *url, IMFByteStream *stream, DWORD flags,
                                             IPropertyStore *props, IUnknown **out_object, MF_OBJECT_TYPE *out_obj_type)
 {
-    TRACE("(%p %s %p %u %p %p %p)\n", This, debugstr_w(url), stream, flags, props, out_object, out_obj_type);
+    TRACE("(%p %s %p %u %p %p %p)\n", handler, debugstr_w(url), stream, flags, props, out_object, out_obj_type);
 
     if (flags & MF_RESOLUTION_MEDIASOURCE)
     {
         HRESULT hr;
         struct media_source *new_source;
+        struct winegstreamer_stream_handler *This = CONTAINING_RECORD(handler, struct winegstreamer_stream_handler, handler);
 
         if (FAILED(hr = media_source_constructor(stream, &new_source)))
             return hr;
@@ -1873,64 +1625,6 @@ static HRESULT winegstreamer_stream_handler_create_object(struct winegstreamer_s
     }
 }
 
-static HRESULT WINAPI winegstreamer_stream_handler_callback_Invoke(IMFAsyncCallback *iface, IMFAsyncResult *result)
-{
-    struct winegstreamer_stream_handler *handler = impl_from_IMFAsyncCallback(iface);
-    struct winegstreamer_stream_handler_result *handler_result;
-    MF_OBJECT_TYPE obj_type = MF_OBJECT_INVALID;
-    IUnknown *object = NULL, *context_object;
-    struct create_object_context *context;
-    IMFAsyncResult *caller;
-    HRESULT hr;
-
-    caller = (IMFAsyncResult *)IMFAsyncResult_GetStateNoAddRef(result);
-
-    if (FAILED(hr = IMFAsyncResult_GetObject(result, &context_object)))
-    {
-        WARN("Expected context set for callee result.\n");
-        return hr;
-    }
-
-    context = impl_from_IUnknown(context_object);
-
-    hr = winegstreamer_stream_handler_create_object(handler, context->url, context->stream, context->flags, context->props, &object, &obj_type);
-
-    handler_result = heap_alloc(sizeof(*handler_result));
-    if (handler_result)
-    {
-        handler_result->result = caller;
-        IMFAsyncResult_AddRef(handler_result->result);
-        handler_result->obj_type = obj_type;
-        handler_result->object = object;
-
-        EnterCriticalSection(&handler->cs);
-        list_add_tail(&handler->results, &handler_result->entry);
-        LeaveCriticalSection(&handler->cs);
-    }
-    else
-    {
-        if (object)
-            IUnknown_Release(object);
-        hr = E_OUTOFMEMORY;
-    }
-
-    IUnknown_Release(&context->IUnknown_iface);
-
-    IMFAsyncResult_SetStatus(caller, hr);
-    MFInvokeCallback(caller);
-
-    return S_OK;
-}
-
-static const IMFAsyncCallbackVtbl winegstreamer_stream_handler_callback_vtbl =
-{
-    winegstreamer_stream_handler_callback_QueryInterface,
-    winegstreamer_stream_handler_callback_AddRef,
-    winegstreamer_stream_handler_callback_Release,
-    winegstreamer_stream_handler_callback_GetParameters,
-    winegstreamer_stream_handler_callback_Invoke,
-};
-
 HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj)
 {
     struct winegstreamer_stream_handler *this;
@@ -1942,11 +1636,9 @@ HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj)
     if (!this)
         return E_OUTOFMEMORY;
 
-    list_init(&this->results);
-    InitializeCriticalSection(&this->cs);
+    handler_construct(&this->handler, winegstreamer_stream_handler_create_object);
 
     this->IMFByteStreamHandler_iface.lpVtbl = &winegstreamer_stream_handler_vtbl;
-    this->IMFAsyncCallback_iface.lpVtbl = &winegstreamer_stream_handler_callback_vtbl;
     this->refcount = 1;
 
     hr = IMFByteStreamHandler_QueryInterface(&this->IMFByteStreamHandler_iface, riid, obj);
-- 
2.26.2

From fcbd8b1813e95778f7f58445140b9aeeb6dea043 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Wed, 25 Mar 2020 10:43:27 -0500
Subject: [PATCH 27/57] Introduce IMFSample -> GstBuffer converter.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/gst_private.h |  1 +
 dlls/winegstreamer/mfplat.c      | 74 ++++++++++++++++++++++++++++++++
 2 files changed, 75 insertions(+)

diff --git a/dlls/winegstreamer/gst_private.h b/dlls/winegstreamer/gst_private.h
index df1e643c3f6..db0ea881a83 100644
--- a/dlls/winegstreamer/gst_private.h
+++ b/dlls/winegstreamer/gst_private.h
@@ -60,6 +60,7 @@ GstCaps *make_mf_compatible_caps(GstCaps *caps) DECLSPEC_HIDDEN;
 IMFMediaType *mf_media_type_from_caps(const GstCaps *caps) DECLSPEC_HIDDEN;
 GstCaps *caps_from_mf_media_type(IMFMediaType *type) DECLSPEC_HIDDEN;
 IMFSample *mf_sample_from_gst_buffer(GstBuffer *in) DECLSPEC_HIDDEN;
+GstBuffer *gst_buffer_from_mf_sample(IMFSample *in) DECLSPEC_HIDDEN;
 
 HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj) DECLSPEC_HIDDEN;
 
diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index e73c923dfac..2078905f3d7 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -1294,3 +1294,77 @@ done:
 
     return out;
 }
+
+GstBuffer* gst_buffer_from_mf_sample(IMFSample *mf_sample)
+{
+    GstBuffer *out = gst_buffer_new();
+    IMFMediaBuffer *mf_buffer = NULL;
+    LONGLONG duration, time;
+    DWORD buffer_count;
+    HRESULT hr;
+
+    if (FAILED(hr = IMFSample_GetSampleDuration(mf_sample, &duration)))
+        goto fail;
+
+    if (FAILED(hr = IMFSample_GetSampleTime(mf_sample, &time)))
+        goto fail;
+
+    GST_BUFFER_DURATION(out) = duration;
+    GST_BUFFER_PTS(out) = time * 100;
+
+    if (FAILED(hr = IMFSample_GetBufferCount(mf_sample, &buffer_count)))
+        goto fail;
+
+    for (unsigned int i = 0; i < buffer_count; i++)
+    {
+        DWORD buffer_max_size, buffer_size;
+        GstMapInfo map_info;
+        GstMemory *memory;
+        BYTE *buf_data;
+
+        if (FAILED(hr = IMFSample_GetBufferByIndex(mf_sample, i, &mf_buffer)))
+            goto fail;
+
+        if (FAILED(hr = IMFMediaBuffer_GetMaxLength(mf_buffer, &buffer_max_size)))
+            goto fail;
+
+        if (FAILED(hr = IMFMediaBuffer_GetCurrentLength(mf_buffer, &buffer_size)))
+            goto fail;
+
+        memory = gst_allocator_alloc(NULL, buffer_size, NULL);
+        gst_memory_resize(memory, 0, buffer_size);
+
+        if (!(gst_memory_map(memory, &map_info, GST_MAP_WRITE)))
+        {
+            hr = E_FAIL;
+            goto fail;
+        }
+
+        if (FAILED(hr = IMFMediaBuffer_Lock(mf_buffer, &buf_data, NULL, NULL)))
+            goto fail;
+
+        memcpy(map_info.data, buf_data, buffer_size);
+
+        if (FAILED(hr = IMFMediaBuffer_Unlock(mf_buffer)))
+            goto fail;
+
+        if (FAILED(hr = IMFMediaBuffer_SetCurrentLength(mf_buffer, buffer_size)))
+            goto fail;
+
+        gst_memory_unmap(memory, &map_info);
+
+        gst_buffer_append_memory(out, memory);
+
+        IMFMediaBuffer_Release(mf_buffer);
+        mf_buffer = NULL;
+    }
+
+    return out;
+
+fail:
+    ERR("Failed to copy IMFSample to GstBuffer, hr = %#x\n", hr);
+    if (mf_buffer)
+        IMFMediaBuffer_Release(mf_buffer);
+    gst_buffer_unref(out);
+    return NULL;
+}
-- 
2.26.2

From fb8418e39879f5d091051c3171fdd35913d3b2cb Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Mon, 16 Mar 2020 12:09:39 -0500
Subject: [PATCH 28/57] winegstreamer: Implement decoder MFT on gstreamer.

---
 dlls/winegstreamer/Makefile.in               |    1 +
 dlls/winegstreamer/gst_cbs.c                 |   65 +
 dlls/winegstreamer/gst_cbs.h                 |   23 +
 dlls/winegstreamer/gst_private.h             |    7 +
 dlls/winegstreamer/main.c                    |    3 +-
 dlls/winegstreamer/mf_decode.c               | 1322 ++++++++++++++++++
 dlls/winegstreamer/mfplat.c                  |  118 +-
 dlls/winegstreamer/winegstreamer_classes.idl |   12 +
 include/mfidl.idl                            |    2 +
 9 files changed, 1551 insertions(+), 2 deletions(-)
 create mode 100644 dlls/winegstreamer/mf_decode.c

diff --git a/dlls/winegstreamer/Makefile.in b/dlls/winegstreamer/Makefile.in
index f2e87494459..e2af4085827 100644
--- a/dlls/winegstreamer/Makefile.in
+++ b/dlls/winegstreamer/Makefile.in
@@ -13,6 +13,7 @@ C_SRCS = \
 	main.c \
 	media_source.c \
 	mediatype.c \
+	mf_decode.c \
 	mfplat.c \
 	pin.c \
 	qualitycontrol.c \
diff --git a/dlls/winegstreamer/gst_cbs.c b/dlls/winegstreamer/gst_cbs.c
index 51aaefa911d..261a5b9f4ce 100644
--- a/dlls/winegstreamer/gst_cbs.c
+++ b/dlls/winegstreamer/gst_cbs.c
@@ -51,6 +51,8 @@ static void CALLBACK perform_cb(TP_CALLBACK_INSTANCE *instance, void *user)
         perform_cb_gstdemux(cbdata);
     else if (cbdata->type < MEDIA_SOURCE_MAX)
         perform_cb_media_source(cbdata);
+    else if (cbdata->type < MF_DECODE_MAX)
+        perform_cb_mf_decode(cbdata);
 
     pthread_mutex_lock(&cbdata->lock);
     cbdata->finished = 1;
@@ -404,3 +406,66 @@ void mf_src_no_more_pads_wrapper(GstElement *element, gpointer user)
 
     call_cb(&cbdata);
 }
+
+gboolean activate_push_mode_wrapper(GstPad *pad, GstObject *parent, GstPadMode mode, gboolean activate)
+{
+    struct cb_data cbdata = { ACTIVATE_PUSH_MODE };
+
+    cbdata.u.activate_mode_data.pad = pad;
+    cbdata.u.activate_mode_data.parent = parent;
+    cbdata.u.activate_mode_data.mode = mode;
+    cbdata.u.activate_mode_data.activate = activate;
+
+    call_cb(&cbdata);
+
+    return cbdata.u.query_function_data.ret;
+}
+
+gboolean query_input_src_wrapper(GstPad *pad, GstObject *parent, GstQuery *query)
+{
+    struct cb_data cbdata = { QUERY_INPUT_SRC };
+
+    cbdata.u.query_function_data.pad = pad;
+    cbdata.u.query_function_data.parent = parent;
+    cbdata.u.query_function_data.query = query;
+
+    call_cb(&cbdata);
+
+    return cbdata.u.query_function_data.ret;
+}
+
+GstBusSyncReply watch_decoder_bus_wrapper(GstBus *bus, GstMessage *message, gpointer user)
+{
+    struct cb_data cbdata = { WATCH_DECODER_BUS };
+
+    cbdata.u.watch_bus_data.bus = bus;
+    cbdata.u.watch_bus_data.msg = message;
+    cbdata.u.watch_bus_data.user = user;
+
+    call_cb(&cbdata);
+
+    return cbdata.u.watch_bus_data.ret;
+}
+
+void decoder_pad_added_wrapper(GstElement *element, GstPad *pad, gpointer user)
+{
+    struct cb_data cbdata = { DECODER_PAD_ADDED };
+
+    cbdata.u.pad_added_data.element = element;
+    cbdata.u.pad_added_data.pad = pad;
+    cbdata.u.pad_added_data.user = user;
+
+    call_cb(&cbdata);
+}
+
+GstFlowReturn decoder_new_sample_wrapper(GstElement *appsink, gpointer user)
+{
+    struct cb_data cbdata = {DECODER_NEW_SAMPLE};
+
+    cbdata.u.new_sample_data.appsink = appsink;
+    cbdata.u.new_sample_data.user = user;
+
+    call_cb(&cbdata);
+
+    return cbdata.u.new_sample_data.ret;
+}
diff --git a/dlls/winegstreamer/gst_cbs.h b/dlls/winegstreamer/gst_cbs.h
index a48999bbf71..6659aedefa5 100644
--- a/dlls/winegstreamer/gst_cbs.h
+++ b/dlls/winegstreamer/gst_cbs.h
@@ -53,6 +53,12 @@ enum CB_TYPE {
     MF_SRC_STREAM_REMOVED,
     MF_SRC_NO_MORE_PADS,
     MEDIA_SOURCE_MAX,
+    ACTIVATE_PUSH_MODE,
+    QUERY_INPUT_SRC,
+    DECODER_NEW_SAMPLE,
+    WATCH_DECODER_BUS,
+    DECODER_PAD_ADDED,
+    MF_DECODE_MAX,
 };
 
 struct cb_data {
@@ -137,6 +143,17 @@ struct cb_data {
             GstQuery *query;
             gboolean ret;
         } query_sink_data;
+        struct chain_data {
+            GstPad *pad;
+            GstObject *parent;
+            GstBuffer *buffer;
+            GstFlowReturn ret;
+        } chain_data;
+        struct new_sample_data {
+            GstElement *appsink;
+            gpointer user;
+            GstFlowReturn ret;
+        } new_sample_data;
     } u;
 
     int finished;
@@ -148,6 +165,7 @@ struct cb_data {
 void mark_wine_thread(void) DECLSPEC_HIDDEN;
 void perform_cb_gstdemux(struct cb_data *data) DECLSPEC_HIDDEN;
 void perform_cb_media_source(struct cb_data *data) DECLSPEC_HIDDEN;
+void perform_cb_mf_decode(struct cb_data *data) DECLSPEC_HIDDEN;
 
 GstBusSyncReply watch_bus_wrapper(GstBus *bus, GstMessage *msg, gpointer user) DECLSPEC_HIDDEN;
 void existing_new_pad_wrapper(GstElement *bin, GstPad *pad, gpointer user) DECLSPEC_HIDDEN;
@@ -172,5 +190,10 @@ GstBusSyncReply mf_src_bus_watch_wrapper(GstBus *bus, GstMessage *message, gpoin
 void mf_src_stream_added_wrapper(GstElement *bin, GstPad *pad, gpointer user) DECLSPEC_HIDDEN;
 void mf_src_stream_removed_wrapper(GstElement *element, GstPad *pad, gpointer user) DECLSPEC_HIDDEN;
 void mf_src_no_more_pads_wrapper(GstElement *element, gpointer user) DECLSPEC_HIDDEN;
+gboolean activate_push_mode_wrapper(GstPad *pad, GstObject *parent, GstPadMode mode, gboolean activate) DECLSPEC_HIDDEN;
+gboolean query_input_src_wrapper(GstPad *pad, GstObject *parent, GstQuery *query) DECLSPEC_HIDDEN;
+GstBusSyncReply watch_decoder_bus_wrapper(GstBus *bus, GstMessage *message, gpointer user) DECLSPEC_HIDDEN;
+GstFlowReturn decoder_new_sample_wrapper(GstElement *appsink, gpointer user) DECLSPEC_HIDDEN;
+void decoder_pad_added_wrapper(GstElement *element, GstPad *Pad, gpointer user) DECLSPEC_HIDDEN;
 
 #endif
diff --git a/dlls/winegstreamer/gst_private.h b/dlls/winegstreamer/gst_private.h
index db0ea881a83..707fc286a69 100644
--- a/dlls/winegstreamer/gst_private.h
+++ b/dlls/winegstreamer/gst_private.h
@@ -53,6 +53,7 @@ BOOL init_gstreamer(void) DECLSPEC_HIDDEN;
 
 void start_dispatch_thread(void) DECLSPEC_HIDDEN;
 
+extern HRESULT mfplat_DllRegisterServer(void) DECLSPEC_HIDDEN;
 extern HRESULT mfplat_get_class_object(REFCLSID rclsid, REFIID riid, void **obj) DECLSPEC_HIDDEN;
 
 HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj) DECLSPEC_HIDDEN;
@@ -62,6 +63,12 @@ GstCaps *caps_from_mf_media_type(IMFMediaType *type) DECLSPEC_HIDDEN;
 IMFSample *mf_sample_from_gst_buffer(GstBuffer *in) DECLSPEC_HIDDEN;
 GstBuffer *gst_buffer_from_mf_sample(IMFSample *in) DECLSPEC_HIDDEN;
 
+enum decoder_type
+{
+    DECODER_TYPE_H264,
+    DECODER_TYPE_AAC,
+};
+HRESULT generic_decoder_construct(REFIID riid, void **obj, enum decoder_type) DECLSPEC_HIDDEN;
 HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj) DECLSPEC_HIDDEN;
 
 #endif /* __GST_PRIVATE_INCLUDED__ */
diff --git a/dlls/winegstreamer/main.c b/dlls/winegstreamer/main.c
index 4ca371d58bd..385c5550235 100644
--- a/dlls/winegstreamer/main.c
+++ b/dlls/winegstreamer/main.c
@@ -368,7 +368,8 @@ HRESULT WINAPI DllRegisterServer(void)
     IFilterMapper2_RegisterFilter(mapper, &CLSID_WAVEParser, wave_parserW, NULL, NULL, NULL, &reg_wave_parser);
 
     IFilterMapper2_Release(mapper);
-    return S_OK;
+
+    return mfplat_DllRegisterServer();
 }
 
 HRESULT WINAPI DllUnregisterServer(void)
diff --git a/dlls/winegstreamer/mf_decode.c b/dlls/winegstreamer/mf_decode.c
new file mode 100644
index 00000000000..70a20ebe69b
--- /dev/null
+++ b/dlls/winegstreamer/mf_decode.c
@@ -0,0 +1,1322 @@
+#include "config.h"
+
+#include <gst/gst.h>
+
+#include "gst_private.h"
+#include "gst_cbs.h"
+
+#include <stdarg.h>
+
+#define COBJMACROS
+#define NONAMELESSUNION
+
+#include "mfapi.h"
+#include "mferror.h"
+#include "mfobjects.h"
+#include "mftransform.h"
+
+#include "wine/debug.h"
+#include "wine/heap.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(mfplat);
+
+/* keep in sync with mfplat.c's mft registrations */
+
+const GUID *h264_input_types[] = {&MFVideoFormat_H264};
+/* NV12 comes first https://docs.microsoft.com/en-us/windows/win32/medfound/mft-decoder-expose-output-types-in-native-order. thanks to @vitorhnn */
+const GUID *h264_output_types[] = {&MFVideoFormat_NV12, &MFVideoFormat_I420, &MFVideoFormat_IYUV, &MFVideoFormat_YUY2, &MFVideoFormat_YV12};
+
+const GUID *aac_input_types[] = {&MFAudioFormat_AAC};
+const GUID *aac_output_types[] = {&MFAudioFormat_Float};
+
+static struct decoder_desc
+{
+    const GUID *major_type;
+    const GUID **input_types;
+    unsigned int input_types_count;
+    const GUID **output_types;
+    unsigned int output_types_count;
+} decoder_descs[] =
+{
+    { /* DECODER_TYPE_H264 */
+        &MFMediaType_Video,
+        h264_input_types,
+        ARRAY_SIZE(h264_input_types),
+        h264_output_types,
+        ARRAY_SIZE(h264_output_types),
+    },
+    { /* DECODER_TYPE_AAC */
+        &MFMediaType_Audio,
+        aac_input_types,
+        ARRAY_SIZE(aac_input_types),
+        aac_output_types,
+        ARRAY_SIZE(aac_output_types),
+    }
+};
+
+struct mf_decoder
+{
+    IMFTransform IMFTransform_iface;
+    IMFAsyncCallback process_message_callback;
+    LONG refcount;
+    enum decoder_type type;
+    BOOL video;
+    IMFMediaType *input_type, *output_type;
+    BOOL valid_state;
+    GstBus *bus;
+    GstElement *container;
+    GstElement *parser, *decoder, *post_process_start, *videobox, *appsink;
+    GstPad *input_src, *their_sink;
+    unsigned int output_counter;
+    BOOL flushing, draining;
+    CRITICAL_SECTION state_cs;
+    CONDITION_VARIABLE state_cv;
+    DWORD message_queue;
+};
+
+static struct mf_decoder *impl_mf_decoder_from_IMFTransform(IMFTransform *iface)
+{
+    return CONTAINING_RECORD(iface, struct mf_decoder, IMFTransform_iface);
+}
+
+static struct mf_decoder *impl_from_message_callback_IMFAsyncCallback(IMFAsyncCallback *iface)
+{
+    return CONTAINING_RECORD(iface, struct mf_decoder, process_message_callback);
+}
+
+static HRESULT WINAPI mf_decoder_QueryInterface (IMFTransform *iface, REFIID riid, void **out)
+{
+    TRACE("%p, %s, %p.\n", iface, debugstr_guid(riid), out);
+
+    if (IsEqualIID(riid, &IID_IMFTransform) ||
+            IsEqualIID(riid, &IID_IUnknown))
+    {
+        *out = iface;
+        IMFTransform_AddRef(iface);
+        return S_OK;
+    }
+
+    WARN("Unsupported %s.\n", debugstr_guid(riid));
+    *out = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI mf_decoder_AddRef(IMFTransform *iface)
+{
+    struct mf_decoder *decoder = impl_mf_decoder_from_IMFTransform(iface);
+    ULONG refcount = InterlockedIncrement(&decoder->refcount);
+
+    TRACE("%p, refcount %u.\n", iface, refcount);
+
+    return refcount;
+}
+
+static void mf_decoder_destroy(struct mf_decoder *decoder);
+static ULONG WINAPI mf_decoder_Release(IMFTransform *iface)
+{
+    struct mf_decoder *decoder = impl_mf_decoder_from_IMFTransform(iface);
+    ULONG refcount = InterlockedDecrement(&decoder->refcount);
+
+    TRACE("%p, refcount %u.\n", iface, refcount);
+
+    if (!refcount)
+    {
+        mf_decoder_destroy(decoder);
+    }
+
+    return refcount;
+}
+
+static HRESULT WINAPI mf_decoder_GetStreamLimits(IMFTransform *iface, DWORD *input_minimum, DWORD *input_maximum,
+        DWORD *output_minimum, DWORD *output_maximum)
+{
+    TRACE("%p, %p, %p, %p, %p.\n", iface, input_minimum, input_maximum, output_minimum, output_maximum);
+
+    *input_minimum = *input_maximum = *output_minimum = *output_maximum = 1;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI mf_decoder_GetStreamCount(IMFTransform *iface, DWORD *inputs, DWORD *outputs)
+{
+    TRACE("%p %p %p.\n", iface, inputs, outputs);
+
+    *inputs = *outputs = 1;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI mf_decoder_GetStreamIDs(IMFTransform *iface, DWORD input_size, DWORD *inputs,
+        DWORD output_size, DWORD *outputs)
+{
+    TRACE("%p %u %p %u %p.\n", iface, input_size, inputs, output_size, outputs);
+
+    return E_NOTIMPL;
+}
+
+
+static HRESULT WINAPI mf_decoder_GetInputStreamInfo(IMFTransform *iface, DWORD id, MFT_INPUT_STREAM_INFO *info)
+{
+    struct mf_decoder *decoder = impl_mf_decoder_from_IMFTransform(iface);
+
+    TRACE("%p %u %p\n", decoder, id, info);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    /* If we create a wrapped GstBuffer, remove MFT_INPUT_STREAM_DOES_NOT_ADDREF */
+    info->dwFlags = MFT_INPUT_STREAM_WHOLE_SAMPLES | MFT_INPUT_STREAM_DOES_NOT_ADDREF;
+    info->cbMaxLookahead = 0;
+    info->cbAlignment = 0;
+    /* this is incorrect */
+    info->hnsMaxLatency = 0;
+    return S_OK;
+}
+
+static HRESULT WINAPI mf_decoder_GetOutputStreamInfo(IMFTransform *iface, DWORD id, MFT_OUTPUT_STREAM_INFO *info)
+{
+    struct mf_decoder *decoder = impl_mf_decoder_from_IMFTransform(iface);
+    MFT_OUTPUT_STREAM_INFO stream_info = {};
+
+    TRACE("%p %u %p\n", decoder, id, info);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    stream_info.dwFlags = MFT_OUTPUT_STREAM_PROVIDES_SAMPLES;
+    stream_info.cbSize = 0;
+    stream_info.cbAlignment = 0;
+
+    *info = stream_info;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI mf_decoder_GetAttributes(IMFTransform *iface, IMFAttributes **attributes)
+{
+    FIXME("%p, %p. semi-stub!\n", iface, attributes);
+
+    return MFCreateAttributes(attributes, 0);
+}
+
+static HRESULT WINAPI mf_decoder_GetInputStreamAttributes(IMFTransform *iface, DWORD id,
+        IMFAttributes **attributes)
+{
+    FIXME("%p, %u, %p. stub!\n", iface, id, attributes);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mf_decoder_GetOutputStreamAttributes(IMFTransform *iface, DWORD id,
+        IMFAttributes **attributes)
+{
+    FIXME("%p, %u, %p. stub!\n", iface, id, attributes);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mf_decoder_DeleteInputStream(IMFTransform *iface, DWORD id)
+{
+    FIXME("%p, %u. stub!\n", iface, id);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mf_decoder_AddInputStreams(IMFTransform *iface, DWORD streams, DWORD *ids)
+{
+    FIXME("%p, %u, %p. stub!\n", iface, streams, ids);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mf_decoder_GetInputAvailableType(IMFTransform *iface, DWORD id, DWORD index,
+        IMFMediaType **type)
+{
+    struct mf_decoder *decoder = impl_mf_decoder_from_IMFTransform(iface);
+    IMFMediaType *input_type;
+    HRESULT hr;
+
+    TRACE("%p, %u, %u, %p\n", decoder, id, index, type);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    if (index >= decoder_descs[decoder->type].input_types_count)
+        return MF_E_NO_MORE_TYPES;
+
+    if (FAILED(hr = MFCreateMediaType(&input_type)))
+        return hr;
+
+    if (FAILED(hr = IMFMediaType_SetGUID(input_type, &MF_MT_MAJOR_TYPE, decoder_descs[decoder->type].major_type)))
+    {
+        IMFMediaType_Release(input_type);
+        return hr;
+    }
+
+    if (FAILED(hr = IMFMediaType_SetGUID(input_type, &MF_MT_SUBTYPE, decoder_descs[decoder->type].input_types[index])))
+    {
+        IMFMediaType_Release(input_type);
+        return hr;
+    }
+
+    *type = input_type;
+
+    return S_OK;
+}
+
+static void copy_attr(IMFMediaType *target, IMFMediaType *source, const GUID *key)
+{
+    PROPVARIANT val;
+
+    if (SUCCEEDED(IMFAttributes_GetItem((IMFAttributes *)source, key, &val)))
+    {
+        IMFAttributes_SetItem((IMFAttributes* )target, key, &val);
+    }
+}
+
+static HRESULT WINAPI mf_decoder_GetOutputAvailableType(IMFTransform *iface, DWORD id, DWORD index,
+        IMFMediaType **type)
+{
+    struct mf_decoder *decoder = impl_mf_decoder_from_IMFTransform(iface);
+    IMFMediaType *output_type;
+    HRESULT hr;
+
+    TRACE("%p, %u, %u, %p\n", decoder, id, index, type);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    if (!(decoder->input_type))
+        return MF_E_TRANSFORM_TYPE_NOT_SET;
+
+    if (index >= decoder_descs[decoder->type].output_types_count)
+        return MF_E_NO_MORE_TYPES;
+
+    if (FAILED(hr = MFCreateMediaType(&output_type)))
+        return hr;
+
+    copy_attr(output_type, decoder->input_type, &MF_MT_FRAME_SIZE);
+    copy_attr(output_type, decoder->input_type, &MF_MT_FRAME_RATE);
+    copy_attr(output_type, decoder->input_type, &MF_MT_AUDIO_NUM_CHANNELS);
+    copy_attr(output_type, decoder->input_type, &MF_MT_AUDIO_SAMPLES_PER_SECOND);
+
+    if (FAILED(hr = IMFMediaType_SetGUID(output_type, &MF_MT_MAJOR_TYPE, decoder_descs[decoder->type].major_type)))
+    {
+        IMFMediaType_Release(output_type);
+        return hr;
+    }
+
+    if (FAILED(hr = IMFMediaType_SetGUID(output_type, &MF_MT_SUBTYPE, decoder_descs[decoder->type].output_types[index])))
+    {
+        IMFMediaType_Release(output_type);
+        return hr;
+    }
+
+    *type = output_type;
+
+    return S_OK;
+}
+
+static gboolean activate_push_mode(GstPad *pad, GstObject *parent, GstPadMode mode, gboolean activate)
+{
+    TRACE("%s mft input pad in %s mode.\n",
+            activate ? "Activating" : "Deactivating", gst_pad_mode_get_name(mode));
+
+    switch (mode) {
+        case GST_PAD_MODE_PUSH:
+            return TRUE;
+        default:
+            return FALSE;
+    }
+}
+
+static gboolean query_input_src(GstPad *pad, GstObject *parent, GstQuery *query)
+{
+    struct mf_decoder *decoder = gst_pad_get_element_private(pad);
+
+    TRACE("GStreamer queries MFT Input Pad %p for %s\n", decoder, GST_QUERY_TYPE_NAME(query));
+
+    switch (GST_QUERY_TYPE(query))
+    {
+        case GST_QUERY_CAPS:
+        {
+            gst_query_set_caps_result(query, caps_from_mf_media_type(decoder->input_type));
+            return TRUE;
+        }
+        case GST_QUERY_SCHEDULING:
+        {
+            gst_query_add_scheduling_mode(query, GST_PAD_MODE_PUSH);
+            return TRUE;
+        }
+        case GST_QUERY_SEEKING:
+        {
+            GstFormat format;
+            gboolean seekable;
+            gint64 segment_start, segment_end;
+
+            gst_query_parse_seeking(query, &format, &seekable, &segment_start, &segment_end);
+            gst_query_set_seeking(query, format, 0, segment_start, segment_end);
+            return TRUE;
+        }
+        case GST_QUERY_DURATION:
+        {
+            return FALSE;
+        }
+        case GST_QUERY_LATENCY:
+        {
+            return FALSE;
+        }
+        default:
+        {
+            ERR("Unhandled query type %s on MFT Input Pad %p\n", GST_QUERY_TYPE_NAME(query), decoder);
+            return gst_pad_query_default (pad, parent, query);
+        }
+    }
+}
+
+static GstFlowReturn decoder_new_sample(GstElement *appsink, gpointer user)
+{
+    struct mf_decoder *decoder = (struct mf_decoder *) user;
+
+    TRACE("new sample decoder=%p appsink=%p\n", decoder, appsink);
+
+    if (decoder->flushing)
+    {
+        GstSample *sample;
+        g_signal_emit_by_name(decoder->appsink, "pull-sample", &sample);
+        gst_sample_unref(sample);
+        return GST_FLOW_OK;
+    }
+
+    decoder->output_counter++;
+
+    return GST_FLOW_OK;
+}
+
+static BOOL find_decoder_from_caps(GstCaps *input_caps, GstElement **decoder, GstElement **parser)
+{
+    GList *parser_list_one, *parser_list_two;
+    GList *walk;
+    BOOL ret = TRUE;
+
+    TRACE("input caps: %s\n", gst_caps_to_string(input_caps));
+
+    parser_list_one = gst_element_factory_list_get_elements(GST_ELEMENT_FACTORY_TYPE_PARSER, 1);
+    parser_list_two = gst_element_factory_list_filter(parser_list_one, input_caps, GST_PAD_SINK, 0);
+    gst_plugin_feature_list_free(parser_list_one);
+    parser_list_one = parser_list_two;
+    if (!(g_list_length(parser_list_one)))
+    {
+        GList *decoder_list_one, *decoder_list_two;
+        decoder_list_one = gst_element_factory_list_get_elements(GST_ELEMENT_FACTORY_TYPE_DECODER, 1);
+        decoder_list_two = gst_element_factory_list_filter(decoder_list_one, input_caps, GST_PAD_SINK, 0);
+        gst_plugin_feature_list_free(decoder_list_one);
+        decoder_list_one = decoder_list_two;
+        if (!(g_list_length(decoder_list_one)) ||
+            !(*decoder = gst_element_factory_create(g_list_first(decoder_list_one)->data, NULL)))
+        {
+            gst_plugin_feature_list_free(decoder_list_one);
+            ERR("Failed to create decoder\n");
+            ret = FALSE;
+            goto done;
+        }
+        TRACE("Found decoder %s\n", GST_ELEMENT_NAME(g_list_first(decoder_list_one)->data));
+    }
+    else
+    {
+        for (walk = (GList *) parser_list_one; walk; walk = g_list_next(walk))
+        {
+            GstElementFactory *parser_factory = walk->data;
+            const GList *templates, *walk_templ;
+
+            templates = gst_element_factory_get_static_pad_templates(parser_factory);
+
+            for (walk_templ = (GList *)templates; walk_templ; walk_templ = g_list_next(walk_templ))
+            {
+                GList *decoder_list_one, *decoder_list_two;
+                GstStaticPadTemplate *templ = walk_templ->data;
+                GstCaps *templ_caps;
+
+                if (templ->direction != GST_PAD_SRC)
+                    continue;
+
+                templ_caps = gst_static_pad_template_get_caps(templ);
+
+                TRACE("Matching parser src caps %s to decoder.\n", gst_caps_to_string(templ_caps));
+
+                decoder_list_one = gst_element_factory_list_get_elements(GST_ELEMENT_FACTORY_TYPE_DECODER, 1);
+                decoder_list_two = gst_element_factory_list_filter(decoder_list_one, templ_caps, GST_PAD_SINK, 0);
+                gst_plugin_feature_list_free(decoder_list_one);
+                decoder_list_one = decoder_list_two;
+                gst_caps_unref(templ_caps);
+
+                if (!(g_list_length(decoder_list_one)))
+                    continue;
+
+                if (!(*parser = gst_element_factory_create(parser_factory, NULL)))
+                {
+                    gst_plugin_feature_list_free(decoder_list_one);
+                    ERR("Failed to create parser\n");
+                    ret = FALSE;
+                    goto done;
+                }
+
+                if (!(*decoder = gst_element_factory_create(g_list_first(decoder_list_one)->data, NULL)))
+                {
+                    gst_plugin_feature_list_free(decoder_list_one);
+                    ERR("Failed to create decoder\n");
+                    ret = FALSE;
+                    goto done;
+                }
+
+                TRACE("Found decoder %s parser %s\n",
+                GST_ELEMENT_NAME(g_list_first(decoder_list_one)->data), GST_ELEMENT_NAME(parser_factory));
+                gst_plugin_feature_list_free(decoder_list_one);
+
+                goto done;
+            }
+        }
+    }
+    done:
+    gst_plugin_feature_list_free(parser_list_one);
+    return ret;
+}
+
+static void decoder_update_pipeline(struct mf_decoder *decoder)
+{
+    GstCaps *input_caps = NULL;
+    RECT target_size = {0};
+    MFVideoArea *aperture;
+    UINT32 aperture_size;
+    GstSegment *segment;
+
+    decoder->valid_state = FALSE;
+
+    /* tear down current pipeline */
+    gst_element_set_state(decoder->container, GST_STATE_READY);
+    if (gst_element_get_state(decoder->container, NULL, NULL, -1) == GST_STATE_CHANGE_FAILURE)
+    {
+        ERR("Failed to stop container\n");
+    }
+
+    g_object_set(decoder->appsink, "caps", gst_caps_new_empty(), NULL);
+
+    if (decoder->input_src)
+    {
+        gst_pad_unlink(decoder->input_src, decoder->their_sink);
+        gst_object_unref(G_OBJECT(decoder->input_src));
+        decoder->input_src = NULL;
+    }
+
+    if (decoder->their_sink)
+    {
+        gst_object_unref(G_OBJECT(decoder->their_sink));
+        decoder->their_sink = NULL;
+    }
+
+    if (decoder->parser)
+    {
+        gst_element_unlink(decoder->parser, decoder->decoder);
+        gst_bin_remove(GST_BIN(decoder->container), decoder->parser);
+        decoder->parser = NULL;
+    }
+    if (decoder->decoder)
+    {
+        gst_element_unlink(decoder->decoder, decoder->post_process_start);
+        gst_bin_remove(GST_BIN(decoder->container), decoder->decoder);
+        decoder->decoder = NULL;
+    }
+
+    /* we can only have a valid state if an input and output type is present */
+    if (!decoder->input_type || !decoder->output_type)
+        return;
+
+    /* We do leave a lot of unfreed objects here when we failure,
+       but it will be cleaned up on the next call */
+
+    input_caps = caps_from_mf_media_type(decoder->input_type);
+
+    if (!(decoder->input_src = gst_pad_new_from_template(gst_pad_template_new(
+        "mf_src",
+        GST_PAD_SRC,
+        GST_PAD_ALWAYS,
+        input_caps
+        ), "input_src")))
+    {
+        ERR("Failed to create input source\n");
+        goto done;
+    }
+
+    gst_pad_set_activatemode_function(decoder->input_src, activate_push_mode_wrapper);
+    gst_pad_set_query_function(decoder->input_src, query_input_src_wrapper);
+    gst_pad_set_element_private(decoder->input_src, decoder);
+
+    if (!(find_decoder_from_caps(input_caps, &decoder->decoder, &decoder->parser)))
+    {
+        goto done;
+    }
+
+    gst_bin_add(GST_BIN(decoder->container), decoder->decoder);
+    if (decoder->parser)
+    {
+        gst_bin_add(GST_BIN(decoder->container), decoder->parser);
+    }
+
+    if (!(decoder->their_sink = gst_element_get_static_pad(decoder->parser ? decoder->parser : decoder->decoder, "sink")))
+    {
+        goto done;
+    }
+
+    if (SUCCEEDED(IMFMediaType_GetAllocatedBlob(decoder->output_type, &MF_MT_MINIMUM_DISPLAY_APERTURE, (UINT8 **) &aperture, &aperture_size)))
+    {
+        UINT64 frame_size;
+
+        TRACE("x: %u %u/65536, y: %u %u/65536, area: %u x %u\n", aperture->OffsetX.value, aperture->OffsetX.fract,
+            aperture->OffsetY.value, aperture->OffsetY.fract, aperture->Area.cx, aperture->Area.cy);
+
+        if (SUCCEEDED(IMFMediaType_GetUINT64(decoder->output_type, &MF_MT_FRAME_SIZE, &frame_size)))
+        {
+            DWORD width = frame_size >> 32;
+            DWORD height = frame_size;
+
+            target_size.left = -aperture->OffsetX.value;
+            target_size.top = -aperture->OffsetY.value;
+            target_size.right = aperture->Area.cx - width;
+            target_size.bottom = aperture->Area.cy - height;
+        }
+        else
+            ERR("missing frame size\n");
+
+        CoTaskMemFree(aperture);
+    }
+
+    if (decoder->videobox)
+    {
+        g_object_set(decoder->videobox, "top", target_size.top, NULL);
+        g_object_set(decoder->videobox, "bottom", target_size.bottom, NULL);
+        g_object_set(decoder->videobox, "left", target_size.left, NULL);
+        g_object_set(decoder->videobox, "right", target_size.right, NULL);
+    }
+
+    g_object_set(decoder->appsink, "caps", caps_from_mf_media_type(decoder->output_type), NULL);
+
+    if (gst_pad_link(decoder->input_src, decoder->their_sink) != GST_PAD_LINK_OK)
+    {
+        ERR("Failed to link input source to decoder sink\n");
+        return;
+    }
+
+    if (decoder->parser && !(gst_element_link(decoder->parser, decoder->decoder)))
+    {
+        ERR("Failed to link parser to decoder\n");
+        goto done;
+    }
+
+    if (!(gst_element_link(decoder->decoder, decoder->post_process_start)))
+    {
+        ERR("Failed to link decoder to first element in post processing chain\n");
+        goto done;
+    }
+
+    gst_element_set_state(decoder->container, GST_STATE_PLAYING);
+
+    gst_pad_set_active(decoder->input_src, 1);
+    gst_pad_push_event(decoder->input_src, gst_event_new_stream_start("decoder-stream"));
+    gst_pad_push_event(decoder->input_src, gst_event_new_caps(caps_from_mf_media_type(decoder->input_type)));
+    segment = gst_segment_new();
+    gst_segment_init(segment, GST_FORMAT_TIME);
+    gst_pad_push_event(decoder->input_src, gst_event_new_segment(segment));
+
+    gst_element_get_state(decoder->container, NULL, NULL, -1);
+
+    decoder->valid_state = TRUE;
+    done:
+    if (input_caps)
+        gst_caps_unref(input_caps);
+    return;
+}
+
+static HRESULT WINAPI mf_decoder_SetInputType(IMFTransform *iface, DWORD id, IMFMediaType *type, DWORD flags)
+{
+    struct mf_decoder *decoder = impl_mf_decoder_from_IMFTransform(iface);
+    HRESULT hr = S_OK;
+
+    TRACE("%p, %u, %p, %#x\n", decoder, id, type, flags);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    if (type)
+    {
+        GUID major_type, subtype;
+        UINT64 unused;
+
+        if (FAILED(hr = IMFMediaType_GetGUID(type, &MF_MT_MAJOR_TYPE, &major_type)))
+            return hr;
+        if (FAILED(hr = IMFMediaType_GetGUID(type, &MF_MT_SUBTYPE, &subtype)))
+            return hr;
+
+        if (!(IsEqualGUID(&major_type, decoder_descs[decoder->type].major_type)))
+            return MF_E_INVALIDTYPE;
+
+        if (decoder->video)
+        {
+            if (FAILED(hr = IMFMediaType_GetUINT64(type, &MF_MT_FRAME_SIZE, &unused)))
+                return hr;
+        }
+
+        for (unsigned int i = 0; i < decoder_descs[decoder->type].input_types_count; i++)
+        {
+            if (IsEqualGUID(&subtype, decoder_descs[decoder->type].input_types[i]))
+                break;
+            if (i == decoder_descs[decoder->type].input_types_count)
+                return MF_E_INVALIDTYPE;
+        }
+    }
+
+    if (flags & MFT_SET_TYPE_TEST_ONLY)
+    {
+        return S_OK;
+    }
+
+    EnterCriticalSection(&decoder->state_cs);
+
+    if (type)
+    {
+        if (!decoder->input_type)
+            if (FAILED(hr = MFCreateMediaType(&decoder->input_type)))
+                goto done;
+
+        if (FAILED(hr = IMFMediaType_CopyAllItems(type, (IMFAttributes*) decoder->input_type)))
+            goto done;
+    }
+    else if (decoder->input_type)
+    {
+        IMFMediaType_Release(decoder->input_type);
+        decoder->input_type = NULL;
+    }
+
+    decoder_update_pipeline(decoder);
+
+    done:
+    LeaveCriticalSection(&decoder->state_cs);
+    WakeAllConditionVariable(&decoder->state_cv);
+    return hr;
+}
+
+static HRESULT WINAPI mf_decoder_SetOutputType(IMFTransform *iface, DWORD id, IMFMediaType *type, DWORD flags)
+{
+    struct mf_decoder *decoder = impl_mf_decoder_from_IMFTransform(iface);
+    HRESULT hr = S_OK;
+
+    TRACE("%p, %u, %p, %#x\n", decoder, id, type, flags);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    if (type)
+    {
+        GUID major_type, subtype;
+        UINT64 unused;
+
+        /* validate the type */
+        if (FAILED(hr = IMFMediaType_GetGUID(type, &MF_MT_MAJOR_TYPE, &major_type)))
+            return MF_E_INVALIDTYPE;
+        if (FAILED(hr = IMFMediaType_GetGUID(type, &MF_MT_SUBTYPE, &subtype)))
+            return MF_E_INVALIDTYPE;
+
+        if (!(IsEqualGUID(&major_type, decoder_descs[decoder->type].major_type)))
+            return MF_E_INVALIDTYPE;
+
+        if (decoder->video)
+        {
+            if (FAILED(hr = IMFMediaType_GetUINT64(type, &MF_MT_FRAME_SIZE, &unused)))
+                return MF_E_INVALIDTYPE;
+        }
+
+        for (unsigned int i = 0; i < decoder_descs[decoder->type].output_types_count; i++)
+        {
+            if (IsEqualGUID(&subtype, decoder_descs[decoder->type].output_types[i]))
+                break;
+            if (i == decoder_descs[decoder->type].output_types_count)
+                return MF_E_INVALIDTYPE;
+        }
+    }
+
+    if (flags & MFT_SET_TYPE_TEST_ONLY)
+    {
+        return S_OK;
+    }
+
+    EnterCriticalSection(&decoder->state_cs);
+    if (type)
+    {
+        if (!decoder->output_type)
+            if (FAILED(hr = MFCreateMediaType(&decoder->output_type)))
+                goto done;
+
+        if (FAILED(hr = IMFMediaType_CopyAllItems(type, (IMFAttributes*) decoder->output_type)))
+            goto done;
+    }
+    else if (decoder->output_type)
+    {
+        IMFMediaType_Release(decoder->output_type);
+        decoder->output_type = NULL;
+    }
+
+    decoder_update_pipeline(decoder);
+
+    done:
+    LeaveCriticalSection(&decoder->state_cs);
+    WakeAllConditionVariable(&decoder->state_cv);
+    return hr;
+}
+
+static HRESULT WINAPI mf_decoder_GetInputCurrentType(IMFTransform *iface, DWORD id, IMFMediaType **type)
+{
+    FIXME("%p, %u, %p. stub!\n", iface, id, type);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mf_decoder_GetOutputCurrentType(IMFTransform *iface, DWORD id, IMFMediaType **type)
+{
+    FIXME("%p, %u, %p. stub!\n", iface, id, type);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mf_decoder_GetInputStatus(IMFTransform *iface, DWORD id, DWORD *flags)
+{
+    struct mf_decoder *decoder = impl_mf_decoder_from_IMFTransform(iface);
+
+    TRACE("%p, %u, %p\n", decoder, id, flags);
+
+    *flags = decoder->output_counter ? MFT_INPUT_STATUS_ACCEPT_DATA : 0;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI mf_decoder_GetOutputStatus(IMFTransform *iface, DWORD *flags)
+{
+    struct mf_decoder *decoder = impl_mf_decoder_from_IMFTransform(iface);
+
+    TRACE("%p, %p.\n", decoder, flags);
+
+    *flags = decoder->output_counter ? MFT_OUTPUT_STATUS_SAMPLE_READY : 0;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI mf_decoder_SetOutputBounds(IMFTransform *iface, LONGLONG lower, LONGLONG upper)
+{
+    FIXME("%p, %s, %s. stub!\n", iface, wine_dbgstr_longlong(lower), wine_dbgstr_longlong(upper));
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI mf_decoder_ProcessEvent(IMFTransform *iface, DWORD id, IMFMediaEvent *event)
+{
+    FIXME("%p, %u, %p. stub!\n", iface, id, event);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI decoder_process_message_callback_QueryInterface(IMFAsyncCallback *iface,
+        REFIID riid, void **obj)
+{
+    TRACE("%p, %s, %p.\n", iface, debugstr_guid(riid), obj);
+
+    if (IsEqualIID(riid, &IID_IMFAsyncCallback) ||
+            IsEqualIID(riid, &IID_IUnknown))
+    {
+        *obj = iface;
+        IMFAsyncCallback_AddRef(iface);
+        return S_OK;
+    }
+
+    WARN("Unsupported %s.\n", debugstr_guid(riid));
+    *obj = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI decoder_process_message_callback_AddRef(IMFAsyncCallback *iface)
+{
+    struct mf_decoder *decoder = impl_from_message_callback_IMFAsyncCallback(iface);
+    return IMFTransform_AddRef(&decoder->IMFTransform_iface);
+}
+
+static ULONG WINAPI decoder_process_message_callback_Release(IMFAsyncCallback *iface)
+{
+    struct mf_decoder *decoder = impl_from_message_callback_IMFAsyncCallback(iface);
+    return IMFTransform_Release(&decoder->IMFTransform_iface);
+}
+
+static HRESULT WINAPI decoder_process_message_callback_GetParameters(IMFAsyncCallback *iface,
+        DWORD *flags, DWORD *queue)
+{
+    return E_NOTIMPL;
+}
+
+const GUID WINE_MFT_MESSAGE_TYPE = {0xd09998bf, 0x102f, 0x4efa, {0x8f,0x84,0x06,0x1f,0xa4,0x10,0xf2,0x64}};
+
+static HRESULT WINAPI decoder_process_message_callback_Invoke(IMFAsyncCallback *iface, IMFAsyncResult *result)
+{
+    struct mf_decoder *decoder = impl_from_message_callback_IMFAsyncCallback(iface);
+    IUnknown *state;
+    IMFAttributes *async_param;
+    MFT_MESSAGE_TYPE message_type;
+    HRESULT hr;
+
+    state = IMFAsyncResult_GetStateNoAddRef(result);
+    if (!state)
+        return E_FAIL;
+    if (FAILED(hr = IUnknown_QueryInterface(state, &IID_IMFAttributes, (void **)&async_param)))
+        return hr;
+    if (FAILED(hr = IMFAttributes_GetUINT32(async_param, &WINE_MFT_MESSAGE_TYPE, &message_type)))
+    {
+        IMFAttributes_Release(async_param);
+        return hr;
+    }
+    IMFAttributes_Release(async_param);
+
+    switch (message_type)
+    {
+        case MFT_MESSAGE_COMMAND_DRAIN:
+        {
+            GstSegment *segment = gst_segment_new();
+            gst_segment_init(segment, GST_FORMAT_TIME);
+
+            EnterCriticalSection(&decoder->state_cs);
+            decoder->draining = TRUE;
+            WakeAllConditionVariable(&decoder->state_cv);
+            LeaveCriticalSection(&decoder->state_cs);
+            gst_pad_push_event(decoder->input_src, gst_event_new_eos());
+
+            EnterCriticalSection(&decoder->state_cs);
+            while(decoder->draining)
+                SleepConditionVariableCS(&decoder->state_cv, &decoder->state_cs, INFINITE);
+            gst_pad_push_event(decoder->input_src, gst_event_new_flush_stop(0));
+            gst_pad_push_event(decoder->input_src, gst_event_new_segment(segment));
+            LeaveCriticalSection(&decoder->state_cs);
+            return S_OK;
+        }
+        default:
+            return E_FAIL;
+    }
+}
+
+static const IMFAsyncCallbackVtbl process_message_callback_vtbl =
+{
+    decoder_process_message_callback_QueryInterface,
+    decoder_process_message_callback_AddRef,
+    decoder_process_message_callback_Release,
+    decoder_process_message_callback_GetParameters,
+    decoder_process_message_callback_Invoke,
+};
+
+static HRESULT WINAPI mf_decoder_ProcessMessage(IMFTransform *iface, MFT_MESSAGE_TYPE message, ULONG_PTR param)
+{
+    struct mf_decoder *decoder = impl_mf_decoder_from_IMFTransform(iface);
+    IMFAttributes *async_param;
+    HRESULT hr;
+
+    TRACE("%p, %x %lu.\n", decoder, message, param);
+
+    if (FAILED(hr = MFCreateAttributes(&async_param, 1)))
+        return hr;
+
+    switch (message)
+    {
+        case MFT_MESSAGE_COMMAND_FLUSH:
+        {
+            GstSegment *segment = gst_segment_new();
+            gst_segment_init(segment, GST_FORMAT_TIME);
+
+            EnterCriticalSection(&decoder->state_cs);
+            decoder->flushing = TRUE;
+
+            while (decoder->output_counter)
+            {
+                GstSample *sample;
+                g_signal_emit_by_name(decoder->appsink, "pull-sample", &sample);
+                gst_sample_unref(sample);
+                decoder->output_counter--;
+            }
+
+            gst_pad_push_event(decoder->input_src, gst_event_new_flush_start());
+            gst_pad_push_event(decoder->input_src, gst_event_new_flush_stop(0));
+            gst_pad_push_event(decoder->input_src, gst_event_new_segment(segment));
+            gst_element_set_state(decoder->container, GST_STATE_PLAYING);
+
+            decoder->flushing = FALSE;
+            decoder->draining = FALSE;
+            LeaveCriticalSection(&decoder->state_cs);
+
+            hr = S_OK;
+            break;
+        }
+        case MFT_MESSAGE_COMMAND_DRAIN:
+        {
+            if (decoder->draining)
+            {
+                hr = S_OK;
+                break;
+            }
+
+            IMFAttributes_SetUINT32(async_param, &WINE_MFT_MESSAGE_TYPE, message);
+
+            EnterCriticalSection(&decoder->state_cs);
+            MFPutWorkItem(decoder->message_queue, &decoder->process_message_callback, (IUnknown *)async_param);
+            while (!decoder->draining)
+                SleepConditionVariableCS(&decoder->state_cv, &decoder->state_cs, INFINITE);
+            LeaveCriticalSection(&decoder->state_cs);
+
+            hr = S_OK;
+            break;
+        }
+        case MFT_MESSAGE_NOTIFY_BEGIN_STREAMING:
+        {
+            hr = S_OK;
+            break;
+        }
+        default:
+        {
+            WARN("Unhandled message type %x.\n", message);
+            hr = E_FAIL;
+            break;
+        }
+    }
+
+    IMFAttributes_Release(async_param);
+    return hr;
+}
+
+static HRESULT WINAPI mf_decoder_ProcessInput(IMFTransform *iface, DWORD id, IMFSample *sample, DWORD flags)
+{
+    struct mf_decoder *decoder = impl_mf_decoder_from_IMFTransform(iface);
+    GstBuffer *gst_buffer;
+    GstFlowReturn ret;
+    HRESULT hr = S_OK;
+    GstQuery *drain;
+
+    TRACE("%p, %u, %p, %#x\n", decoder, id, sample, flags);
+
+    if (flags)
+        WARN("Unsupported flags %#x\n", flags);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    if (!decoder->valid_state)
+        return MF_E_TRANSFORM_TYPE_NOT_SET;
+
+    EnterCriticalSection(&decoder->state_cs);
+
+    drain = gst_query_new_drain();
+    gst_pad_peer_query(decoder->input_src, drain);
+
+    if (decoder->output_counter || decoder->draining)
+    {
+        hr = MF_E_NOTACCEPTING;
+        goto done;
+    }
+
+    if (!(gst_buffer = gst_buffer_from_mf_sample(sample)))
+    {
+        hr = E_FAIL;
+        goto done;
+    }
+
+    ret = gst_pad_push(decoder->input_src, gst_buffer);
+    if (ret != GST_FLOW_OK)
+    {
+        ERR("Couldn't process input ret = %d\n", ret);
+        hr =  E_FAIL;
+        goto done;
+    }
+
+    done:
+    LeaveCriticalSection(&decoder->state_cs);
+    return hr;
+}
+
+static HRESULT WINAPI mf_decoder_ProcessOutput(IMFTransform *iface, DWORD flags, DWORD count,
+        MFT_OUTPUT_DATA_BUFFER *samples, DWORD *status)
+{
+    struct mf_decoder *decoder = impl_mf_decoder_from_IMFTransform(iface);
+    MFT_OUTPUT_DATA_BUFFER *relevant_buffer = NULL;
+    GstSample *buffer;
+
+    TRACE("%p, %#x, %u, %p, %p,\n", iface, flags, count, samples, status);
+
+    if (flags)
+        WARN("Unsupported flags %#x\n", flags);
+
+    if (!decoder->valid_state)
+        return MF_E_TRANSFORM_TYPE_NOT_SET;
+
+    for (unsigned int i = 0; i < count; i++)
+    {
+        MFT_OUTPUT_DATA_BUFFER *out_buffer = &samples[i];
+
+        if (out_buffer->dwStreamID != 0)
+            return MF_E_INVALIDSTREAMNUMBER;
+
+        if (relevant_buffer)
+            return MF_E_INVALIDSTREAMNUMBER;
+
+        relevant_buffer = out_buffer;
+    }
+
+    if (!relevant_buffer)
+        return S_OK;
+
+    EnterCriticalSection(&decoder->state_cs);
+
+    if (!decoder->output_counter && !decoder->draining)
+    {
+        LeaveCriticalSection(&decoder->state_cs);
+        return MF_E_TRANSFORM_NEED_MORE_INPUT;
+    }
+    TRACE("%u\n", decoder->output_counter);
+
+    g_signal_emit_by_name(decoder->appsink, "pull-sample", &buffer);
+    if (decoder->draining && !buffer)
+    {
+        decoder->output_counter = 0;
+        decoder->draining = FALSE;
+        LeaveCriticalSection(&decoder->state_cs);
+        WakeAllConditionVariable(&decoder->state_cv);
+        return MF_E_TRANSFORM_NEED_MORE_INPUT;
+    }
+    decoder->output_counter--;
+
+    LeaveCriticalSection(&decoder->state_cs);
+
+    relevant_buffer->pSample = mf_sample_from_gst_buffer(gst_sample_get_buffer(buffer));
+    gst_sample_unref(buffer);
+    relevant_buffer->dwStatus = S_OK;
+    relevant_buffer->pEvents = NULL;
+    *status = 0;
+    return S_OK;
+}
+
+static const IMFTransformVtbl mf_decoder_vtbl =
+{
+    mf_decoder_QueryInterface,
+    mf_decoder_AddRef,
+    mf_decoder_Release,
+    mf_decoder_GetStreamLimits,
+    mf_decoder_GetStreamCount,
+    mf_decoder_GetStreamIDs,
+    mf_decoder_GetInputStreamInfo,
+    mf_decoder_GetOutputStreamInfo,
+    mf_decoder_GetAttributes,
+    mf_decoder_GetInputStreamAttributes,
+    mf_decoder_GetOutputStreamAttributes,
+    mf_decoder_DeleteInputStream,
+    mf_decoder_AddInputStreams,
+    mf_decoder_GetInputAvailableType,
+    mf_decoder_GetOutputAvailableType,
+    mf_decoder_SetInputType,
+    mf_decoder_SetOutputType,
+    mf_decoder_GetInputCurrentType,
+    mf_decoder_GetOutputCurrentType,
+    mf_decoder_GetInputStatus,
+    mf_decoder_GetOutputStatus,
+    mf_decoder_SetOutputBounds,
+    mf_decoder_ProcessEvent,
+    mf_decoder_ProcessMessage,
+    mf_decoder_ProcessInput,
+    mf_decoder_ProcessOutput,
+};
+
+GstBusSyncReply watch_decoder_bus(GstBus *bus, GstMessage *message, gpointer user_data)
+{
+    struct mf_decoder *decoder = user_data;
+    GError *err = NULL;
+    gchar *dbg_info = NULL;
+
+    TRACE("decoder %p message type %s\n", decoder, GST_MESSAGE_TYPE_NAME(message));
+
+    switch (message->type)
+    {
+        case GST_MESSAGE_ERROR:
+            gst_message_parse_error(message, &err, &dbg_info);
+            ERR("%s: %s\n", GST_OBJECT_NAME(message->src), err->message);
+            ERR("%s\n", dbg_info);
+            g_error_free(err);
+            g_free(dbg_info);
+            break;
+        case GST_MESSAGE_WARNING:
+            gst_message_parse_warning(message, &err, &dbg_info);
+            WARN("%s: %s\n", GST_OBJECT_NAME(message->src), err->message);
+            WARN("%s\n", dbg_info);
+            g_error_free(err);
+            g_free(dbg_info);
+            break;
+        case GST_MESSAGE_EOS:
+            break;
+        default:
+            break;
+    }
+
+    return GST_BUS_DROP;
+}
+
+static void mf_decoder_destroy(struct mf_decoder *decoder)
+{
+    if (decoder->input_type)
+    {
+        IMFMediaType_Release(decoder->input_type);
+        decoder->input_type = NULL;
+    }
+
+    if (decoder->output_type)
+    {
+        IMFMediaType_Release(decoder->output_type);
+        decoder->output_type = NULL;
+    }
+
+    decoder_update_pipeline(decoder);
+
+    if (decoder->their_sink)
+        gst_object_unref(G_OBJECT(decoder->their_sink));
+
+    if (decoder->container)
+        gst_object_unref(G_OBJECT(decoder->container));
+
+    if (decoder->bus)
+        gst_object_unref(G_OBJECT(decoder->bus));
+
+    DeleteCriticalSection(&decoder->state_cs);
+
+    MFUnlockWorkQueue(decoder->message_queue);
+
+    heap_free(decoder);
+}
+
+HRESULT generic_decoder_construct(REFIID riid, void **obj, enum decoder_type type)
+{
+    struct mf_decoder *object;
+    GstElement *converter;
+    HRESULT hr = S_OK;
+
+    TRACE("%s, %p %u.\n", debugstr_guid(riid), obj, type);
+
+    if (!(object = heap_alloc_zero(sizeof(*object))))
+        return E_OUTOFMEMORY;
+    object->type = type;
+    object->video = decoder_descs[type].major_type == &MFMediaType_Video;
+    MFAllocateWorkQueue(&object->message_queue);
+
+    InitializeCriticalSection(&object->state_cs);
+    InitializeConditionVariable(&object->state_cv);
+
+    object->container = gst_bin_new(NULL);
+    object->bus = gst_bus_new();
+    gst_bus_set_sync_handler(object->bus, watch_decoder_bus_wrapper, object, NULL);
+    gst_element_set_bus(object->container, object->bus);
+
+    if (object->video)
+    {
+        if (!(object->videobox = gst_element_factory_make("videobox", NULL)))
+        {
+            ERR("Failed to create videobox\n");
+            hr = E_FAIL;
+            goto fail;
+        }
+        gst_bin_add(GST_BIN(object->container), object->videobox);
+    }
+
+    if (!(converter = gst_element_factory_make(object->video ? "videoconvert" : "audioconvert", NULL)))
+    {
+        ERR("Failed to create converter\n");
+        hr = E_FAIL;
+        goto fail;
+    }
+    gst_bin_add(GST_BIN(object->container), converter);
+
+    if (!(object->appsink = gst_element_factory_make("appsink", NULL)))
+    {
+        ERR("Failed to create appsink\n");
+        hr = E_FAIL;
+        goto fail;
+    }
+    gst_bin_add(GST_BIN(object->container), object->appsink);
+
+    g_object_set(object->appsink, "emit-signals", TRUE, NULL);
+    g_object_set(object->appsink, "sync", FALSE, NULL);
+    g_object_set(object->appsink, "async", FALSE, NULL);
+    g_signal_connect(object->appsink, "new-sample", G_CALLBACK(decoder_new_sample_wrapper), object);
+
+
+    if (object->videobox)
+    {
+        if (!(gst_element_link(object->videobox, converter)))
+        {
+            ERR("Failed to link videobox to converter\n");
+            hr = E_FAIL;
+            goto fail;
+        }
+    }
+
+    if (!(gst_element_link(converter, object->appsink)))
+    {
+        ERR("Failed to link converter appsink");
+        hr = E_FAIL;
+        goto fail;
+    }
+
+    object->post_process_start = object->videobox ? object->videobox : converter;
+
+    object->process_message_callback.lpVtbl = &process_message_callback_vtbl;
+
+    object->IMFTransform_iface.lpVtbl = &mf_decoder_vtbl;
+    object->refcount = 1;
+
+    *obj = object;
+    return S_OK;
+
+    fail:
+    ERR("Failed to create Decoder MFT type %u, hr = %#x\n", type, hr);
+    mf_decoder_destroy(object);
+    return hr;
+}
+
+void perform_cb_mf_decode(struct cb_data *cbdata)
+{
+    switch (cbdata->type)
+    {
+    case ACTIVATE_PUSH_MODE:
+        {
+            struct activate_mode_data *data = &cbdata->u.activate_mode_data;
+            cbdata->u.activate_mode_data.ret = activate_push_mode(data->pad, data->parent, data->mode, data->activate);
+            break;
+        }
+    case QUERY_INPUT_SRC:
+        {
+            struct query_function_data *data = &cbdata->u.query_function_data;
+            cbdata->u.query_function_data.ret = query_input_src(data->pad, data->parent, data->query);
+            break;
+        }
+    case DECODER_NEW_SAMPLE:
+        {
+            struct new_sample_data *data = &cbdata->u.new_sample_data;
+            cbdata->u.new_sample_data.ret = decoder_new_sample(data->appsink, data->user);
+            break;
+        }
+    case WATCH_DECODER_BUS:
+        {
+            struct watch_bus_data *data = &cbdata->u.watch_bus_data;
+            cbdata->u.watch_bus_data.ret = watch_decoder_bus(data->bus, data->msg, data->user);
+            break;
+        }
+    default:
+        {
+            ERR("Wrong callback forwarder called\n");
+            return;
+        }
+    }
+}
diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 2078905f3d7..4ffcfa6ede1 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -406,6 +406,16 @@ failed:
 
 static const GUID CLSID_GStreamerByteStreamHandler = {0x317df618, 0x5e5a, 0x468a, {0x9f, 0x15, 0xd8, 0x27, 0xa9, 0xa0, 0x81, 0x62}};
 
+static HRESULT h264_decoder_create(REFIID riid, void **ret)
+{
+    return generic_decoder_construct(riid, ret, DECODER_TYPE_H264);
+}
+
+static HRESULT aac_decoder_create(REFIID riid, void **ret)
+{
+    return generic_decoder_construct(riid, ret, DECODER_TYPE_AAC);
+}
+
 static const struct class_object
 {
     const GUID *clsid;
@@ -415,6 +425,8 @@ class_objects[] =
 {
     { &CLSID_VideoProcessorMFT, &video_processor_create },
     { &CLSID_GStreamerByteStreamHandler, &winegstreamer_stream_handler_create },
+    { &CLSID_CMSH264DecoderMFT, &h264_decoder_create },
+    { &CLSID_CMSAACDecMFT, &aac_decoder_create },
 };
 
 HRESULT mfplat_get_class_object(REFCLSID rclsid, REFIID riid, void **obj)
@@ -443,6 +455,111 @@ HRESULT mfplat_get_class_object(REFCLSID rclsid, REFIID riid, void **obj)
     return CLASS_E_CLASSNOTAVAILABLE;
 }
 
+
+static WCHAR h264decoderW[] = {'H','.','2','6','4',' ','D','e','c','o','d','e','r',0};
+const GUID *h264_decoder_input_types[] =
+{
+    &MFVideoFormat_H264,
+};
+const GUID *h264_decoder_output_types[] =
+{
+    &MFVideoFormat_NV12,
+    &MFVideoFormat_I420,
+    &MFVideoFormat_IYUV,
+    &MFVideoFormat_YUY2,
+    &MFVideoFormat_YV12,
+};
+
+static WCHAR aacdecoderW[] = {'A','A','C',' ','D','e','c','o','d','e','r',0};
+const GUID *aac_decoder_input_types[] =
+{
+    &MFAudioFormat_AAC,
+};
+
+const GUID *aac_decoder_output_types[] =
+{
+    &MFAudioFormat_Float,
+    &MFAudioFormat_PCM,
+};
+
+static const struct mft
+{
+    const GUID *clsid;
+    const GUID *category;
+    LPWSTR name;
+    const UINT32 flags;
+    const GUID *major_type;
+    const UINT32 input_types_count;
+    const GUID **input_types;
+    const UINT32 output_types_count;
+    const GUID **output_types;
+    IMFAttributes *attributes;
+}
+mfts[] =
+{
+    {
+        &CLSID_CMSH264DecoderMFT,
+        &MFT_CATEGORY_VIDEO_DECODER,
+        h264decoderW,
+        MFT_ENUM_FLAG_SYNCMFT,
+        &MFMediaType_Video,
+        ARRAY_SIZE(h264_decoder_input_types),
+        h264_decoder_input_types,
+        ARRAY_SIZE(h264_decoder_output_types),
+        h264_decoder_output_types,
+        NULL
+    },
+    {
+        &CLSID_CMSAACDecMFT,
+        &MFT_CATEGORY_AUDIO_DECODER,
+        aacdecoderW,
+        MFT_ENUM_FLAG_SYNCMFT,
+        &MFMediaType_Audio,
+        ARRAY_SIZE(aac_decoder_input_types),
+        aac_decoder_input_types,
+        ARRAY_SIZE(aac_decoder_output_types),
+        aac_decoder_output_types,
+        NULL
+    }
+};
+
+HRESULT mfplat_DllRegisterServer(void)
+{
+    HRESULT hr;
+
+    for (unsigned int i = 0; i < ARRAY_SIZE(mfts); i++)
+    {
+        const struct mft *cur = &mfts[i];
+
+        MFT_REGISTER_TYPE_INFO *input_types, *output_types;
+        input_types = heap_alloc(cur->input_types_count * sizeof(input_types[0]));
+        output_types = heap_alloc(cur->output_types_count * sizeof(output_types[0]));
+        for (unsigned int i = 0; i < cur->input_types_count; i++)
+        {
+            input_types[i].guidMajorType = *(cur->major_type);
+            input_types[i].guidSubtype = *(cur->input_types[i]);
+        }
+        for (unsigned int i = 0; i < cur->output_types_count; i++)
+        {
+            output_types[i].guidMajorType = *(cur->major_type);
+            output_types[i].guidSubtype = *(cur->output_types[i]);
+        }
+
+        hr = MFTRegister(*(cur->clsid), *(cur->category), cur->name, cur->flags, cur->input_types_count,
+                    input_types, cur->output_types_count, output_types, cur->attributes);
+
+        heap_free(input_types);
+        heap_free(output_types);
+
+        if (FAILED(hr))
+        {
+            FIXME("Failed to register MFT, hr %#x\n", hr);
+            return hr;
+        }
+    }
+    return S_OK;
+}
+
 static const struct
 {
     const GUID *subtype;
@@ -461,7 +578,6 @@ struct aac_user_data
 {
     WORD payload_type;
     WORD profile_level_indication;
-    WORD struct_type;
     WORD reserved;
   /* audio-specific-config is stored here */
 };
diff --git a/dlls/winegstreamer/winegstreamer_classes.idl b/dlls/winegstreamer/winegstreamer_classes.idl
index 1dc4ba9a10b..3f28b4ddec4 100644
--- a/dlls/winegstreamer/winegstreamer_classes.idl
+++ b/dlls/winegstreamer/winegstreamer_classes.idl
@@ -61,3 +61,15 @@ coclass VideoProcessorMFT {}
     uuid(317df618-5e5a-468a-9f15-d827a9a08162)
 ]
 coclass GStreamerByteStreamHandler {}
+
+[
+    threading(both),
+    uuid(62ce7e72-4c71-4d20-b15d-452831a87d9d)
+]
+coclass CMSH264DecoderMFT { }
+
+[
+    threading(both),
+    uuid(32d186a7-218f-4c75-8876-dd77273a8999)
+]
+coclass CMSAACDecMFT { }
diff --git a/include/mfidl.idl b/include/mfidl.idl
index 9f2d825bd5f..20164c39253 100644
--- a/include/mfidl.idl
+++ b/include/mfidl.idl
@@ -1290,3 +1290,5 @@ cpp_quote("EXTERN_GUID(MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE, 0xba491365,
 cpp_quote("EXTERN_GUID(MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS, 0xba491366, 0xbe50, 0x451e, 0x95, 0xab, 0x6d, 0x4a, 0xcc, 0xc7, 0xda, 0xd8);")
 
 cpp_quote("EXTERN_GUID(CLSID_VideoProcessorMFT, 0x88753b26, 0x5b24, 0x49bd, 0xb2, 0xe7, 0xc, 0x44, 0x5c, 0x78, 0xc9, 0x82);")
+cpp_quote("EXTERN_GUID(CLSID_CMSH264DecoderMFT, 0x62ce7e72, 0x4c71, 0x4d20, 0xb1, 0x5d, 0x45, 0x28, 0x31, 0xa8, 0x7d, 0x9d);")
+cpp_quote("EXTERN_GUID(CLSID_CMSAACDecMFT, 0x32d186a7, 0x218f, 0x4c75, 0x88, 0x76, 0xdd, 0x77, 0x27, 0x3a, 0x89, 0x99);")
-- 
2.26.2

From b76b25a9324023698b4fa2b560ecdbef6adca405 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Mon, 23 Mar 2020 11:55:41 -0500
Subject: [PATCH 29/57] mfreadwrite: Select all streams when creating a source
 reader.

---
 dlls/mfreadwrite/reader.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/dlls/mfreadwrite/reader.c b/dlls/mfreadwrite/reader.c
index 96a82b798ab..3b1dcbb9636 100644
--- a/dlls/mfreadwrite/reader.c
+++ b/dlls/mfreadwrite/reader.c
@@ -2120,6 +2120,10 @@ static HRESULT create_source_reader_from_source(IMFMediaSource *source, IMFAttri
             break;
 
         object->streams[i].index = i;
+
+        hr = IMFPresentationDescriptor_SelectStream(object->descriptor, i);
+        if (FAILED(hr))
+            break;
     }
 
     if (FAILED(hr))
-- 
2.26.2

From a6ee98510618fd6f40a1565a5e7859ddb7971a84 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Mon, 16 Mar 2020 15:27:27 -0500
Subject: [PATCH 30/57] Miscellaneous

---
 dlls/mfreadwrite/reader.c         |  12 ++-
 dlls/winegstreamer/gst_cbs.c      |  20 ++---
 dlls/winegstreamer/gst_cbs.h      |   1 -
 dlls/winegstreamer/media_source.c | 137 +++++++++++++++++++++++++++++-
 4 files changed, 155 insertions(+), 15 deletions(-)

diff --git a/dlls/mfreadwrite/reader.c b/dlls/mfreadwrite/reader.c
index 3b1dcbb9636..f8c03e62d35 100644
--- a/dlls/mfreadwrite/reader.c
+++ b/dlls/mfreadwrite/reader.c
@@ -1596,6 +1596,7 @@ static HRESULT source_reader_create_decoder_for_stream(struct source_reader *rea
 {
     MFT_REGISTER_TYPE_INFO in_type, out_type;
     CLSID *clsids, mft_clsid, category;
+    BOOL decoder_found = FALSE;
     unsigned int i = 0, count;
     IMFMediaType *input_type;
     HRESULT hr;
@@ -1642,12 +1643,21 @@ static HRESULT source_reader_create_decoder_for_stream(struct source_reader *rea
                 }
 
             }
+            else if (!decoder_found)
+            {
+                /* see if there are other decoders for this stream */
+                if (SUCCEEDED(MFTEnum(category, 0, &in_type, NULL, NULL, &clsids, &count)) && count)
+                {
+                    decoder_found = TRUE;
+                    CoTaskMemFree(clsids);
+                }
+            }
         }
 
         IMFMediaType_Release(input_type);
     }
 
-    return MF_E_TOPO_CODEC_NOT_FOUND;
+    return decoder_found ? MF_E_INVALIDREQUEST : MF_E_TOPO_CODEC_NOT_FOUND;
 }
 
 static HRESULT WINAPI src_reader_SetCurrentMediaType(IMFSourceReader *iface, DWORD index, DWORD *reserved,
diff --git a/dlls/winegstreamer/gst_cbs.c b/dlls/winegstreamer/gst_cbs.c
index 261a5b9f4ce..81692fdf919 100644
--- a/dlls/winegstreamer/gst_cbs.c
+++ b/dlls/winegstreamer/gst_cbs.c
@@ -18,6 +18,9 @@
 
 #include "config.h"
 
+#include <stdio.h>
+#include <assert.h>
+
 #include <gst/gst.h>
 
 #include "objbase.h"
@@ -53,6 +56,12 @@ static void CALLBACK perform_cb(TP_CALLBACK_INSTANCE *instance, void *user)
         perform_cb_media_source(cbdata);
     else if (cbdata->type < MF_DECODE_MAX)
         perform_cb_mf_decode(cbdata);
+    else
+    {
+        fprintf(stderr, "No handler registered for callback\n");
+        assert(0);
+    }
+
 
     pthread_mutex_lock(&cbdata->lock);
     cbdata->finished = 1;
@@ -447,17 +456,6 @@ GstBusSyncReply watch_decoder_bus_wrapper(GstBus *bus, GstMessage *message, gpoi
     return cbdata.u.watch_bus_data.ret;
 }
 
-void decoder_pad_added_wrapper(GstElement *element, GstPad *pad, gpointer user)
-{
-    struct cb_data cbdata = { DECODER_PAD_ADDED };
-
-    cbdata.u.pad_added_data.element = element;
-    cbdata.u.pad_added_data.pad = pad;
-    cbdata.u.pad_added_data.user = user;
-
-    call_cb(&cbdata);
-}
-
 GstFlowReturn decoder_new_sample_wrapper(GstElement *appsink, gpointer user)
 {
     struct cb_data cbdata = {DECODER_NEW_SAMPLE};
diff --git a/dlls/winegstreamer/gst_cbs.h b/dlls/winegstreamer/gst_cbs.h
index 6659aedefa5..825b46d13bb 100644
--- a/dlls/winegstreamer/gst_cbs.h
+++ b/dlls/winegstreamer/gst_cbs.h
@@ -194,6 +194,5 @@ gboolean activate_push_mode_wrapper(GstPad *pad, GstObject *parent, GstPadMode m
 gboolean query_input_src_wrapper(GstPad *pad, GstObject *parent, GstQuery *query) DECLSPEC_HIDDEN;
 GstBusSyncReply watch_decoder_bus_wrapper(GstBus *bus, GstMessage *message, gpointer user) DECLSPEC_HIDDEN;
 GstFlowReturn decoder_new_sample_wrapper(GstElement *appsink, gpointer user) DECLSPEC_HIDDEN;
-void decoder_pad_added_wrapper(GstElement *element, GstPad *Pad, gpointer user) DECLSPEC_HIDDEN;
 
 #endif
diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index b8431569e6a..db2f14a8c1d 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -92,6 +92,8 @@ struct source_async_command
 struct media_source
 {
     IMFMediaSource IMFMediaSource_iface;
+    IMFGetService IMFGetService_iface;
+    IMFSeekInfo IMFSeekInfo_iface;
     IMFAsyncCallback async_commands_callback;
     LONG ref;
     DWORD async_commands_queue;
@@ -124,6 +126,16 @@ static inline struct media_source *impl_from_IMFMediaSource(IMFMediaSource *ifac
     return CONTAINING_RECORD(iface, struct media_source, IMFMediaSource_iface);
 }
 
+static inline struct media_source *impl_from_IMFGetService(IMFGetService *iface)
+{
+    return CONTAINING_RECORD(iface, struct media_source, IMFGetService_iface);
+}
+
+static inline struct media_source *impl_from_IMFSeekInfo(IMFSeekInfo *iface)
+{
+    return CONTAINING_RECORD(iface, struct media_source, IMFSeekInfo_iface);
+}
+
 static inline struct media_source *impl_from_async_commands_callback_IMFAsyncCallback(IMFAsyncCallback *iface)
 {
     return CONTAINING_RECORD(iface, struct media_source, async_commands_callback);
@@ -518,6 +530,11 @@ static gboolean bytestream_query(GstPad *pad, GstObject *parent, GstQuery *query
             gst_query_add_scheduling_mode(query, GST_PAD_MODE_PULL);
             return TRUE;
         }
+        case GST_QUERY_LATENCY:
+        {
+            gst_query_set_latency(query, FALSE, 0, 0);
+            return TRUE;
+        }
         default:
         {
             WARN("Unhandled query type %s\n", GST_QUERY_TYPE_NAME(query));
@@ -580,6 +597,23 @@ GstBusSyncReply bus_watch(GstBus *bus, GstMessage *message, gpointer user)
             g_error_free(err);
             g_free(dbg_info);
             break;
+        case GST_MESSAGE_TAG:
+        {
+            GstTagList *tag_list;
+            gchar *printable;
+            gst_message_parse_tag(message, &tag_list);
+            if (tag_list)
+            {
+                printable = gst_tag_list_to_string(tag_list);
+                if (printable)
+                {
+                    TRACE("tag test: %s\n", debugstr_a(printable));
+                    g_free(printable);
+                }
+            }
+
+            break;
+        }
         default:
             break;
     }
@@ -1036,6 +1070,10 @@ static HRESULT WINAPI media_source_QueryInterface(IMFMediaSource *iface, REFIID
     {
         *out = &source->IMFMediaSource_iface;
     }
+    else if(IsEqualIID(riid, &IID_IMFGetService))
+    {
+        *out = &source->IMFGetService_iface;
+    }
     else
     {
         FIXME("(%s, %p)\n", debugstr_guid(riid), out);
@@ -1120,7 +1158,7 @@ static HRESULT WINAPI media_source_GetCharacteristics(IMFMediaSource *iface, DWO
     if (source->state == SOURCE_SHUTDOWN)
         return MF_E_SHUTDOWN;
 
-    *characteristics = MFMEDIASOURCE_CAN_SEEK;
+    *characteristics = MFMEDIASOURCE_CAN_SEEK | MFMEDIASOURCE_CAN_PAUSE;
 
     return S_OK;
 }
@@ -1265,6 +1303,99 @@ static const IMFMediaSourceVtbl IMFMediaSource_vtbl =
     media_source_Shutdown,
 };
 
+static HRESULT WINAPI source_get_service_QueryInterface(IMFGetService *iface, REFIID riid, void **obj)
+{
+    struct media_source *source = impl_from_IMFGetService(iface);
+    return IMFMediaSource_QueryInterface(&source->IMFMediaSource_iface, riid, obj);
+}
+
+static ULONG WINAPI source_get_service_AddRef(IMFGetService *iface)
+{
+    struct media_source *source = impl_from_IMFGetService(iface);
+    return IMFMediaSource_AddRef(&source->IMFMediaSource_iface);
+}
+
+static ULONG WINAPI source_get_service_Release(IMFGetService *iface)
+{
+    struct media_source *source = impl_from_IMFGetService(iface);
+    return IMFMediaSource_Release(&source->IMFMediaSource_iface);
+}
+
+static HRESULT WINAPI source_get_service_GetService(IMFGetService *iface, REFGUID service, REFIID riid, void **obj)
+{
+    struct media_source *source = impl_from_IMFGetService(iface);
+
+    TRACE("(%p)->(%s, %s, %p)\n", source, debugstr_guid(service), debugstr_guid(riid), obj);
+
+    if (source->state == SOURCE_SHUTDOWN)
+        return MF_E_SHUTDOWN;
+
+    *obj = NULL;
+
+    if (IsEqualIID(service, &MF_SCRUBBING_SERVICE))
+    {
+        if (IsEqualIID(riid, &IID_IMFSeekInfo))
+        {
+            *obj = &source->IMFSeekInfo_iface;
+        }
+    }
+
+    if (*obj)
+        IUnknown_AddRef((IUnknown*) *obj);
+
+    return *obj ? S_OK : E_NOINTERFACE;
+}
+
+static const IMFGetServiceVtbl IMFGetService_vtbl =
+{
+    source_get_service_QueryInterface,
+    source_get_service_AddRef,
+    source_get_service_Release,
+    source_get_service_GetService,
+};
+
+static HRESULT WINAPI source_seek_info_QueryInterface(IMFSeekInfo *iface, REFIID riid, void **obj)
+{
+    struct media_source *source = impl_from_IMFSeekInfo(iface);
+    return IMFMediaSource_QueryInterface(&source->IMFMediaSource_iface, riid, obj);
+}
+
+static ULONG WINAPI source_seek_info_AddRef(IMFSeekInfo *iface)
+{
+    struct media_source *source = impl_from_IMFSeekInfo(iface);
+    return IMFMediaSource_AddRef(&source->IMFMediaSource_iface);
+}
+
+static ULONG WINAPI source_seek_info_Release(IMFSeekInfo *iface)
+{
+    struct media_source *source = impl_from_IMFSeekInfo(iface);
+    return IMFMediaSource_Release(&source->IMFMediaSource_iface);
+}
+
+static HRESULT WINAPI source_seek_info_GetNearestKeyFrames(IMFSeekInfo *iface, const GUID *format,
+        const PROPVARIANT *position, PROPVARIANT *prev_frame, PROPVARIANT *next_frame)
+{
+    struct media_source *source = impl_from_IMFSeekInfo(iface);
+
+    FIXME("(%p)->(%s, %p, %p, %p) - semi-stub\n", source, debugstr_guid(format), position, prev_frame, next_frame);
+
+    if (source->state == SOURCE_SHUTDOWN)
+        return MF_E_SHUTDOWN;
+
+    PropVariantCopy(prev_frame, position);
+    PropVariantCopy(next_frame, position);
+
+    return S_OK;
+}
+
+static const IMFSeekInfoVtbl IMFSeekInfo_vtbl =
+{
+    source_seek_info_QueryInterface,
+    source_seek_info_AddRef,
+    source_seek_info_Release,
+    source_seek_info_GetNearestKeyFrames,
+};
+
 /* If this callback is extended to use any significant win32 APIs, a wrapper function
    should be added */
 gboolean stream_found(GstElement *bin, GstPad *pad, GstCaps *caps, gpointer user)
@@ -1342,6 +1473,8 @@ static HRESULT media_source_constructor(IMFByteStream *bytestream, struct media_
         return E_OUTOFMEMORY;
 
     object->IMFMediaSource_iface.lpVtbl = &IMFMediaSource_vtbl;
+    object->IMFGetService_iface.lpVtbl = &IMFGetService_vtbl;
+    object->IMFSeekInfo_iface.lpVtbl = &IMFSeekInfo_vtbl;
     object->async_commands_callback.lpVtbl = &source_async_commands_callback_vtbl;
     object->ref = 1;
     object->byte_stream = bytestream;
@@ -1446,7 +1579,6 @@ static HRESULT media_source_constructor(IMFByteStream *bytestream, struct media_
     heap_free(descriptors);
     descriptors = NULL;
 
-    /* miscelaneous presentation descriptor setup */
     {
         IMFAttributes *byte_stream_attributes;
         gint64 total_pres_time = 0;
@@ -1463,6 +1595,7 @@ static HRESULT media_source_constructor(IMFByteStream *bytestream, struct media_
             IMFAttributes_Release(byte_stream_attributes);
         }
 
+        /* TODO: consider streams which don't start at T=0 */
         for (unsigned int i = 0; i < object->stream_count; i++)
         {
             GstQuery *query = gst_query_new_duration(GST_FORMAT_TIME);
-- 
2.26.2

From f86d6f71ca691e1ca6c5493cd59f5731331ec645 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Wed, 25 Mar 2020 19:07:11 -0500
Subject: [PATCH 31/57] WMV

---
 dlls/winegstreamer/gst_private.h             |  1 +
 dlls/winegstreamer/mf_decode.c               | 10 +++++
 dlls/winegstreamer/mfplat.c                  | 40 ++++++++++++++++++++
 dlls/winegstreamer/winegstreamer_classes.idl |  6 +++
 include/mfidl.idl                            |  2 +
 5 files changed, 59 insertions(+)

diff --git a/dlls/winegstreamer/gst_private.h b/dlls/winegstreamer/gst_private.h
index 707fc286a69..73359dd622d 100644
--- a/dlls/winegstreamer/gst_private.h
+++ b/dlls/winegstreamer/gst_private.h
@@ -67,6 +67,7 @@ enum decoder_type
 {
     DECODER_TYPE_H264,
     DECODER_TYPE_AAC,
+    DECODER_TYPE_WMV,
 };
 HRESULT generic_decoder_construct(REFIID riid, void **obj, enum decoder_type) DECLSPEC_HIDDEN;
 HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj) DECLSPEC_HIDDEN;
diff --git a/dlls/winegstreamer/mf_decode.c b/dlls/winegstreamer/mf_decode.c
index 70a20ebe69b..2005443a8a6 100644
--- a/dlls/winegstreamer/mf_decode.c
+++ b/dlls/winegstreamer/mf_decode.c
@@ -29,6 +29,9 @@ const GUID *h264_output_types[] = {&MFVideoFormat_NV12, &MFVideoFormat_I420, &MF
 const GUID *aac_input_types[] = {&MFAudioFormat_AAC};
 const GUID *aac_output_types[] = {&MFAudioFormat_Float};
 
+const GUID *wmv_input_types[] = {&MFVideoFormat_WMV3, &MFVideoFormat_WVC1};
+const GUID *wmv_output_types[] = {&MFVideoFormat_NV12, &MFVideoFormat_YV12, &MFVideoFormat_YUY2, &MFVideoFormat_UYVY, &MFVideoFormat_YVYU, &MFVideoFormat_NV11, &MFVideoFormat_RGB32, &MFVideoFormat_RGB24, &MFVideoFormat_RGB555, &MFVideoFormat_RGB8};
+
 static struct decoder_desc
 {
     const GUID *major_type;
@@ -51,6 +54,13 @@ static struct decoder_desc
         ARRAY_SIZE(aac_input_types),
         aac_output_types,
         ARRAY_SIZE(aac_output_types),
+    },
+    { /* DECODER_TYPE_WMV */
+        &MFMediaType_Video,
+        wmv_input_types,
+        ARRAY_SIZE(wmv_input_types),
+        wmv_output_types,
+        ARRAY_SIZE(wmv_output_types),
     }
 };
 
diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 4ffcfa6ede1..84c0080510c 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -416,6 +416,10 @@ static HRESULT aac_decoder_create(REFIID riid, void **ret)
     return generic_decoder_construct(riid, ret, DECODER_TYPE_AAC);
 }
 
+static HRESULT wmv_decoder_create(REFIID riid, void **ret)
+{
+    return generic_decoder_construct(riid, ret, DECODER_TYPE_WMV);
+}
 static const struct class_object
 {
     const GUID *clsid;
@@ -427,6 +431,7 @@ class_objects[] =
     { &CLSID_GStreamerByteStreamHandler, &winegstreamer_stream_handler_create },
     { &CLSID_CMSH264DecoderMFT, &h264_decoder_create },
     { &CLSID_CMSAACDecMFT, &aac_decoder_create },
+    { &CLSID_CWMVDecMediaObject, &wmv_decoder_create },
 };
 
 HRESULT mfplat_get_class_object(REFCLSID rclsid, REFIID riid, void **obj)
@@ -482,6 +487,29 @@ const GUID *aac_decoder_output_types[] =
     &MFAudioFormat_PCM,
 };
 
+static WCHAR wmvdecoderW[] = {'W','M','V','i','d','e','o',' ','D','e','c','o','d','e','r',' ','M','F','T',0};
+
+const GUID *wmv_decoder_input_types[] =
+{
+    &MFVideoFormat_WMV3,
+    &MFVideoFormat_WVC1,
+};
+
+const GUID *wmv_decoder_output_types[] =
+{
+    &MFVideoFormat_NV12,
+    &MFVideoFormat_YV12,
+    &MFVideoFormat_YUY2,
+    &MFVideoFormat_UYVY,
+    &MFVideoFormat_YVYU,
+    &MFVideoFormat_NV11,
+    &MFVideoFormat_RGB32,
+    &MFVideoFormat_RGB24,
+    &MFVideoFormat_RGB565,
+    &MFVideoFormat_RGB555,
+    &MFVideoFormat_RGB8,
+};
+
 static const struct mft
 {
     const GUID *clsid;
@@ -520,6 +548,18 @@ mfts[] =
         ARRAY_SIZE(aac_decoder_output_types),
         aac_decoder_output_types,
         NULL
+    },
+    {
+        &CLSID_CWMVDecMediaObject,
+        &MFT_CATEGORY_VIDEO_DECODER,
+        wmvdecoderW,
+        MFT_ENUM_FLAG_SYNCMFT,
+        &MFMediaType_Video,
+        ARRAY_SIZE(wmv_decoder_input_types),
+        wmv_decoder_input_types,
+        ARRAY_SIZE(wmv_decoder_output_types),
+        wmv_decoder_output_types,
+        NULL
     }
 };
 
diff --git a/dlls/winegstreamer/winegstreamer_classes.idl b/dlls/winegstreamer/winegstreamer_classes.idl
index 3f28b4ddec4..f9b0158fa6a 100644
--- a/dlls/winegstreamer/winegstreamer_classes.idl
+++ b/dlls/winegstreamer/winegstreamer_classes.idl
@@ -73,3 +73,9 @@ coclass CMSH264DecoderMFT { }
     uuid(32d186a7-218f-4c75-8876-dd77273a8999)
 ]
 coclass CMSAACDecMFT { }
+
+[
+    threading(both),
+    uuid(82d353df-90bd-4382-8bc2-3f6192b76e34)
+]
+coclass CLSID_CWMVDecMediaObject {}
diff --git a/include/mfidl.idl b/include/mfidl.idl
index 20164c39253..467e123255b 100644
--- a/include/mfidl.idl
+++ b/include/mfidl.idl
@@ -1292,3 +1292,5 @@ cpp_quote("EXTERN_GUID(MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS, 0xba491366, 0xb
 cpp_quote("EXTERN_GUID(CLSID_VideoProcessorMFT, 0x88753b26, 0x5b24, 0x49bd, 0xb2, 0xe7, 0xc, 0x44, 0x5c, 0x78, 0xc9, 0x82);")
 cpp_quote("EXTERN_GUID(CLSID_CMSH264DecoderMFT, 0x62ce7e72, 0x4c71, 0x4d20, 0xb1, 0x5d, 0x45, 0x28, 0x31, 0xa8, 0x7d, 0x9d);")
 cpp_quote("EXTERN_GUID(CLSID_CMSAACDecMFT, 0x32d186a7, 0x218f, 0x4c75, 0x88, 0x76, 0xdd, 0x77, 0x27, 0x3a, 0x89, 0x99);")
+cpp_quote("EXTERN_GUID(CLSID_ASFByteStreamHandler, 0x41457294, 0x644c, 0x4298, 0xa2, 0x8a, 0xbd, 0x69, 0xf2, 0xc0, 0xcf, 0x3b);")
+cpp_quote("EXTERN_GUID(CLSID_CWMVDecMediaObject, 0x82d353df, 0x90bd, 0x4382, 0x8b, 0xc2, 0x3f, 0x61, 0x92, 0xb7, 0x6e, 0x34);")
\ No newline at end of file
-- 
2.26.2

From d6984cdf7ff1884be979825a55d4ef3ecfeb500b Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Thu, 2 Apr 2020 15:42:18 -0500
Subject: [PATCH 32/57] mf: Ask for more samples from upstream node when upon
 MF_E_TRANSFORM_NEED_MORE_INPUT

---
 dlls/mf/session.c | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/dlls/mf/session.c b/dlls/mf/session.c
index 7c82aa42a4b..2f1b589a1aa 100644
--- a/dlls/mf/session.c
+++ b/dlls/mf/session.c
@@ -2503,6 +2503,8 @@ static HRESULT transform_node_pull_samples(struct topo_node *node)
     return hr;
 }
 
+static HRESULT session_request_sample_from_node(struct media_session *session, IMFTopologyNode *node, DWORD output);
+
 static void session_deliver_sample_to_node(struct media_session *session, IMFTopologyNode *node, unsigned int input,
         IMFSample *sample)
 {
@@ -2575,7 +2577,14 @@ static void session_deliver_sample_to_node(struct media_session *session, IMFTop
                     WARN("Drain command failed for transform, hr %#x.\n", hr);
             }
 
-            transform_node_pull_samples(topo_node);
+            if (transform_node_pull_samples(topo_node) == MF_E_TRANSFORM_NEED_MORE_INPUT && !drain)
+            {
+                IMFTopologyNode *upstream_node;
+                DWORD upstream_output;
+
+                if (SUCCEEDED(IMFTopologyNode_GetInput(node, input, &upstream_node, &upstream_output)))
+                    session_request_sample_from_node(session, upstream_node, upstream_output);
+            }
 
             /* Remaining unprocessed input has been discarded, now queue markers for every output. */
             if (drain)
-- 
2.26.2

From 3161cec52e7d7336a4e174f8246c4577c65b0162 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Thu, 2 Apr 2020 15:46:25 -0500
Subject: [PATCH 33/57] winegstreamer:  Implement
 IMFMedisStream::GetMediaSource.

---
 dlls/winegstreamer/media_source.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index db2f14a8c1d..47f04af0a04 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -714,12 +714,15 @@ static HRESULT WINAPI media_stream_GetMediaSource(IMFMediaStream *iface, IMFMedi
 {
     struct media_stream *stream = impl_from_IMFMediaStream(iface);
 
-    FIXME("stub (%p)->(%p)\n", stream, source);
+    TRACE("(%p)->(%p)\n", stream, source);
 
     if (stream->state == STREAM_SHUTDOWN)
         return MF_E_SHUTDOWN;
 
-    return E_NOTIMPL;
+    IMFMediaSource_AddRef(&stream->parent_source->IMFMediaSource_iface);
+    *source = &stream->parent_source->IMFMediaSource_iface;
+
+    return S_OK;
 }
 
 static HRESULT WINAPI media_stream_GetStreamDescriptor(IMFMediaStream* iface, IMFStreamDescriptor **descriptor)
-- 
2.26.2

From f2890615b704c6e862748f62e5f6d58690b0c5c6 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Fri, 3 Apr 2020 11:12:33 -0500
Subject: [PATCH 34/57] Expose PCM output type on AAC decoder.

---
 dlls/winegstreamer/mf_decode.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dlls/winegstreamer/mf_decode.c b/dlls/winegstreamer/mf_decode.c
index 2005443a8a6..05c99365e32 100644
--- a/dlls/winegstreamer/mf_decode.c
+++ b/dlls/winegstreamer/mf_decode.c
@@ -27,7 +27,7 @@ const GUID *h264_input_types[] = {&MFVideoFormat_H264};
 const GUID *h264_output_types[] = {&MFVideoFormat_NV12, &MFVideoFormat_I420, &MFVideoFormat_IYUV, &MFVideoFormat_YUY2, &MFVideoFormat_YV12};
 
 const GUID *aac_input_types[] = {&MFAudioFormat_AAC};
-const GUID *aac_output_types[] = {&MFAudioFormat_Float};
+const GUID *aac_output_types[] = {&MFAudioFormat_Float, &MFAudioFormat_PCM};
 
 const GUID *wmv_input_types[] = {&MFVideoFormat_WMV3, &MFVideoFormat_WVC1};
 const GUID *wmv_output_types[] = {&MFVideoFormat_NV12, &MFVideoFormat_YV12, &MFVideoFormat_YUY2, &MFVideoFormat_UYVY, &MFVideoFormat_YVYU, &MFVideoFormat_NV11, &MFVideoFormat_RGB32, &MFVideoFormat_RGB24, &MFVideoFormat_RGB555, &MFVideoFormat_RGB8};
-- 
2.26.2

From 3c4c3fe9e8c5cbfbba0b3eef68ac0a4d76460f30 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Fri, 1 May 2020 11:46:26 -0500
Subject: [PATCH 35/57] mfplat: Add I420 format information.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/mfplat/mediatype.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/dlls/mfplat/mediatype.c b/dlls/mfplat/mediatype.c
index ccae999b7d7..f8e4a169843 100644
--- a/dlls/mfplat/mediatype.c
+++ b/dlls/mfplat/mediatype.c
@@ -2630,6 +2630,7 @@ static const struct uncompressed_video_format video_formats[] =
     { &MFVideoFormat_A2R10G10B10,   4, 3, 1, 0 },
     { &MFVideoFormat_RGB8,          1, 3, 1, 0 },
     { &MFVideoFormat_L8,            1, 3, 1, 0 },
+    { &MFVideoFormat_I420,          1, 0, 0, 1 },
     { &MFVideoFormat_AYUV,          4, 3, 0, 1 },
     { &MFVideoFormat_I420,          1, 0, 0, 1 },
     { &MFVideoFormat_IMC1,          2, 3, 0, 1 },
-- 
2.26.2

From d8b84913ec3b536dde7d92a6b552a620b8b64d16 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Fri, 1 May 2020 13:20:49 -0500
Subject: [PATCH 36/57] winegstreamer: Implement Color Converter MFT.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/Makefile.in               |   1 +
 dlls/winegstreamer/colorconvert.c            | 704 +++++++++++++++++++
 dlls/winegstreamer/gst_private.h             |   2 +
 dlls/winegstreamer/mfplat.c                  |  36 +
 dlls/winegstreamer/winegstreamer_classes.idl |   6 +
 5 files changed, 749 insertions(+)
 create mode 100644 dlls/winegstreamer/colorconvert.c

diff --git a/dlls/winegstreamer/Makefile.in b/dlls/winegstreamer/Makefile.in
index e2af4085827..a266b0a95e4 100644
--- a/dlls/winegstreamer/Makefile.in
+++ b/dlls/winegstreamer/Makefile.in
@@ -6,6 +6,7 @@ EXTRALIBS = $(GSTREAMER_LIBS) $(PTHREAD_LIBS)
 PARENTSRC = ../strmbase ../mf
 
 C_SRCS = \
+	colorconvert.c \
 	filter.c \
 	gst_cbs.c \
 	gstdemux.c \
diff --git a/dlls/winegstreamer/colorconvert.c b/dlls/winegstreamer/colorconvert.c
new file mode 100644
index 00000000000..f01373907ee
--- /dev/null
+++ b/dlls/winegstreamer/colorconvert.c
@@ -0,0 +1,704 @@
+#include "config.h"
+#include <gst/gst.h>
+
+#include "gst_private.h"
+#include "gst_cbs.h"
+
+#include "mfapi.h"
+#include "mferror.h"
+#include "mfidl.h"
+
+#include "wine/debug.h"
+#include "wine/heap.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(mfplat);
+
+static const GUID *raw_types[] = {
+    &MFVideoFormat_RGB24,
+    &MFVideoFormat_RGB32,
+    &MFVideoFormat_RGB555,
+    &MFVideoFormat_RGB8,
+    &MFVideoFormat_AYUV,
+    &MFVideoFormat_I420,
+    &MFVideoFormat_IYUV,
+    &MFVideoFormat_NV11,
+    &MFVideoFormat_NV12,
+    &MFVideoFormat_UYVY,
+    &MFVideoFormat_v216,
+    &MFVideoFormat_v410,
+    &MFVideoFormat_YUY2,
+    &MFVideoFormat_YVYU,
+    &MFVideoFormat_YVYU,
+};
+
+struct color_converter
+{
+    IMFTransform IMFTransform_iface;
+    LONG refcount;
+    IMFAttributes *attributes;
+    IMFAttributes *output_attributes;
+    IMFMediaType *input_type;
+    IMFMediaType *output_type;
+    BOOL valid_state, inflight;
+    GstElement *container, *appsrc, *videoconvert, *appsink;
+    GstBus *bus;
+    CRITICAL_SECTION cs;
+};
+
+static struct color_converter *impl_color_converter_from_IMFTransform(IMFTransform *iface)
+{
+    return CONTAINING_RECORD(iface, struct color_converter, IMFTransform_iface);
+}
+
+static HRESULT WINAPI color_converter_QueryInterface(IMFTransform *iface, REFIID riid, void **obj)
+{
+    TRACE("%p, %s, %p.\n", iface, debugstr_guid(riid), obj);
+
+    if (IsEqualIID(riid, &IID_IMFTransform) ||
+            IsEqualIID(riid, &IID_IUnknown))
+    {
+        *obj = iface;
+        IMFTransform_AddRef(iface);
+        return S_OK;
+    }
+
+    WARN("Unsupported %s.\n", debugstr_guid(riid));
+    *obj = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI color_converter_AddRef(IMFTransform *iface)
+{
+    struct color_converter *transform = impl_color_converter_from_IMFTransform(iface);
+    ULONG refcount = InterlockedIncrement(&transform->refcount);
+
+    TRACE("%p, refcount %u.\n", iface, refcount);
+
+    return refcount;
+}
+
+static ULONG WINAPI color_converter_Release(IMFTransform *iface)
+{
+    struct color_converter *transform = impl_color_converter_from_IMFTransform(iface);
+    ULONG refcount = InterlockedDecrement(&transform->refcount);
+
+    TRACE("%p, refcount %u.\n", iface, refcount);
+
+    if (!refcount)
+    {
+        if (transform->attributes)
+            IMFAttributes_Release(transform->attributes);
+        if (transform->output_attributes)
+            IMFAttributes_Release(transform->output_attributes);
+        heap_free(transform);
+    }
+
+    return refcount;
+}
+
+static HRESULT WINAPI color_converter_GetStreamLimits(IMFTransform *iface, DWORD *input_minimum, DWORD *input_maximum,
+        DWORD *output_minimum, DWORD *output_maximum)
+{
+    TRACE("%p, %p, %p, %p, %p.\n", iface, input_minimum, input_maximum, output_minimum, output_maximum);
+
+    *input_minimum = *input_maximum = *output_minimum = *output_maximum = 1;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI color_converter_GetStreamCount(IMFTransform *iface, DWORD *inputs, DWORD *outputs)
+{
+    TRACE("%p, %p, %p.\n", iface, inputs, outputs);
+
+    *inputs = *outputs = 1;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI color_converter_GetStreamIDs(IMFTransform *iface, DWORD input_size, DWORD *inputs,
+        DWORD output_size, DWORD *outputs)
+{
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI color_converter_GetInputStreamInfo(IMFTransform *iface, DWORD id, MFT_INPUT_STREAM_INFO *info)
+{
+    struct color_converter *converter = impl_color_converter_from_IMFTransform(iface);
+
+    TRACE("%p %u %p\n", converter, id, info);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    /* If we create a wrapped GstBuffer, remove MFT_INPUT_STREAM_DOES_NOT_ADDREF */
+    info->dwFlags = MFT_INPUT_STREAM_WHOLE_SAMPLES | MFT_INPUT_STREAM_DOES_NOT_ADDREF;
+    info->cbMaxLookahead = 0;
+    info->cbAlignment = 0;
+    /* this is incorrect */
+    info->hnsMaxLatency = 0;
+    return S_OK;
+}
+
+static HRESULT WINAPI color_converter_GetOutputStreamInfo(IMFTransform *iface, DWORD id, MFT_OUTPUT_STREAM_INFO *info)
+{
+    struct color_converter *converter = impl_color_converter_from_IMFTransform(iface);
+
+    MFT_OUTPUT_STREAM_INFO stream_info = {};
+
+    TRACE("%p %u %p\n", converter, id, info);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    stream_info.dwFlags = MFT_OUTPUT_STREAM_PROVIDES_SAMPLES;
+    stream_info.cbSize = 0;
+    stream_info.cbAlignment = 0;
+
+    *info = stream_info;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI color_converter_GetAttributes(IMFTransform *iface, IMFAttributes **attributes)
+{
+    struct color_converter *transform = impl_color_converter_from_IMFTransform(iface);
+
+    TRACE("%p, %p.\n", iface, attributes);
+
+    *attributes = transform->attributes;
+    IMFAttributes_AddRef(*attributes);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI color_converter_GetInputStreamAttributes(IMFTransform *iface, DWORD id,
+        IMFAttributes **attributes)
+{
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI color_converter_GetOutputStreamAttributes(IMFTransform *iface, DWORD id,
+        IMFAttributes **attributes)
+{
+    struct color_converter *transform = impl_color_converter_from_IMFTransform(iface);
+
+    TRACE("%p, %u, %p.\n", iface, id, attributes);
+
+    *attributes = transform->output_attributes;
+    IMFAttributes_AddRef(*attributes);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI color_converter_DeleteInputStream(IMFTransform *iface, DWORD id)
+{
+    TRACE("%p, %u.\n", iface, id);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI color_converter_AddInputStreams(IMFTransform *iface, DWORD streams, DWORD *ids)
+{
+    TRACE("%p, %u, %p.\n", iface, streams, ids);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI color_converter_GetInputAvailableType(IMFTransform *iface, DWORD id, DWORD index,
+        IMFMediaType **type)
+{
+    IMFMediaType *ret;
+    HRESULT hr;
+
+    TRACE("%p, %u, %u, %p.\n", iface, id, index, type);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    if (index >= ARRAY_SIZE(raw_types))
+        return MF_E_NO_MORE_TYPES;
+
+    if (FAILED(hr = MFCreateMediaType(&ret)))
+        return hr;
+
+    if (FAILED(hr = IMFMediaType_SetGUID(ret, &MF_MT_MAJOR_TYPE, &MFMediaType_Video)))
+    {
+        IMFMediaType_Release(ret);
+        return hr;
+    }
+
+    if (FAILED(hr = IMFMediaType_SetGUID(ret, &MF_MT_SUBTYPE, raw_types[index])))
+    {
+        IMFMediaType_Release(ret);
+        return hr;
+    }
+
+    *type = ret;
+
+    return S_OK;
+}
+
+static void copy_attr(IMFMediaType *target, IMFMediaType *source, const GUID *key)
+{
+    PROPVARIANT val;
+
+    if (SUCCEEDED(IMFAttributes_GetItem((IMFAttributes *)source, key, &val)))
+    {
+        IMFAttributes_SetItem((IMFAttributes* )target, key, &val);
+    }
+}
+
+static HRESULT WINAPI color_converter_GetOutputAvailableType(IMFTransform *iface, DWORD id, DWORD index,
+        IMFMediaType **type)
+{
+    struct color_converter *converter = impl_color_converter_from_IMFTransform(iface);
+    IMFMediaType *output_type;
+    HRESULT hr;
+
+    TRACE("%p, %u, %u, %p.\n", iface, id, index, type);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    if (!(converter->input_type))
+        return MF_E_TRANSFORM_TYPE_NOT_SET;
+
+    if (index >= ARRAY_SIZE(raw_types))
+        return MF_E_NO_MORE_TYPES;
+
+    if (FAILED(hr = MFCreateMediaType(&output_type)))
+        return hr;
+
+    copy_attr(output_type, converter->input_type, &MF_MT_MAJOR_TYPE);
+    copy_attr(output_type, converter->input_type, &MF_MT_FRAME_SIZE);
+    copy_attr(output_type, converter->input_type, &MF_MT_FRAME_RATE);
+
+    if (FAILED(hr = IMFMediaType_SetGUID(output_type, &MF_MT_SUBTYPE, raw_types[index])))
+    {
+        IMFMediaType_Release(output_type);
+        return hr;
+    }
+
+    *type = output_type;
+
+    return S_OK;
+}
+
+static void color_converter_update_pipeline_state(struct color_converter *converter)
+{
+    converter->valid_state = converter->input_type && converter->output_type;
+
+    if (!converter->valid_state)
+    {
+        gst_element_set_state(converter->container, GST_STATE_READY);
+        return;
+    }
+
+    g_object_set(converter->appsrc, "caps", caps_from_mf_media_type(converter->input_type), NULL);
+    g_object_set(converter->appsink, "caps", caps_from_mf_media_type(converter->output_type), NULL);
+
+    gst_element_set_state(converter->container, GST_STATE_PLAYING);
+    return;
+}
+
+static HRESULT WINAPI color_converter_SetInputType(IMFTransform *iface, DWORD id, IMFMediaType *type, DWORD flags)
+{
+    HRESULT hr;
+
+    struct color_converter *converter = impl_color_converter_from_IMFTransform(iface);
+
+    TRACE("%p, %u, %p, %#x.\n", iface, id, type, flags);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    if (type)
+    {
+        GUID major_type, subtype;
+        BOOL found = FALSE;
+
+        if (FAILED(IMFMediaType_GetGUID(type, &MF_MT_MAJOR_TYPE, &major_type)))
+            return MF_E_INVALIDTYPE;
+        if (FAILED(IMFMediaType_GetGUID(type, &MF_MT_SUBTYPE, &subtype)))
+            return MF_E_INVALIDTYPE;
+
+        if (!(IsEqualGUID(&major_type, &MFMediaType_Video)))
+            return MF_E_INVALIDTYPE;
+
+        for (unsigned int i = 0; i < ARRAY_SIZE(raw_types); i++)
+        {
+            UINT64 unused;
+
+            if (IsEqualGUID(&subtype, raw_types[i]))
+            {
+                if (FAILED(IMFMediaType_GetUINT64(type, &MF_MT_FRAME_SIZE, &unused)))
+                    return MF_E_INVALIDTYPE;
+                found = TRUE;
+                break;
+            }
+        }
+
+        if (!found)
+            return MF_E_INVALIDTYPE;
+    }
+
+    if (flags & MFT_SET_TYPE_TEST_ONLY)
+    {
+        return S_OK;
+    }
+
+    hr = S_OK;
+
+    EnterCriticalSection(&converter->cs);
+
+    if (type)
+    {
+        if (!converter->input_type)
+            if (FAILED(hr = MFCreateMediaType(&converter->input_type)))
+                goto done;
+
+        if (FAILED(hr = IMFMediaType_CopyAllItems(type, (IMFAttributes *) converter->input_type)))
+            goto done;
+    }
+    else if (converter->input_type)
+    {
+        IMFMediaType_Release(converter->input_type);
+        converter->input_type = NULL;
+    }
+
+    done:
+    if (hr == S_OK)
+        color_converter_update_pipeline_state(converter);
+    LeaveCriticalSection(&converter->cs);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI color_converter_SetOutputType(IMFTransform *iface, DWORD id, IMFMediaType *type, DWORD flags)
+{
+    struct color_converter *converter = impl_color_converter_from_IMFTransform(iface);
+    HRESULT hr;
+    GUID major_type, subtype;
+    UINT64 unused;
+
+    TRACE("%p, %u, %p, %#x.\n", iface, id, type, flags);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    if (type)
+    {
+        /* validate the type */
+
+        if (FAILED(IMFMediaType_GetGUID(type, &MF_MT_MAJOR_TYPE, &major_type)))
+            return MF_E_INVALIDTYPE;
+        if (FAILED(IMFMediaType_GetGUID(type, &MF_MT_SUBTYPE, &subtype)))
+            return MF_E_INVALIDTYPE;
+        if (FAILED(IMFMediaType_GetUINT64(type, &MF_MT_FRAME_SIZE, &unused)))
+            return MF_E_INVALIDTYPE;
+
+        if (!(IsEqualGUID(&major_type, &MFMediaType_Video)))
+            return MF_E_INVALIDTYPE;
+
+        for (unsigned int i = 0; i < ARRAY_SIZE(raw_types); i++)
+        {
+            if (IsEqualGUID(&subtype, raw_types[i]))
+                break;
+            if (i == ARRAY_SIZE(raw_types))
+                return MF_E_INVALIDTYPE;
+        }
+    }
+
+    if (flags & MFT_SET_TYPE_TEST_ONLY)
+    {
+        return S_OK;
+    }
+
+    EnterCriticalSection(&converter->cs);
+
+    hr = S_OK;
+
+    if (type)
+    {
+        if (!converter->output_type)
+            if (FAILED(hr = MFCreateMediaType(&converter->output_type)))
+                goto done;
+
+        if (FAILED(hr = IMFMediaType_CopyAllItems(type, (IMFAttributes *) converter->output_type)))
+            goto done;
+    }
+    else if (converter->output_type)
+    {
+        IMFMediaType_Release(converter->output_type);
+        converter->output_type = NULL;
+    }
+
+    done:
+    if (hr == S_OK)
+        color_converter_update_pipeline_state(converter);
+    LeaveCriticalSection(&converter->cs);
+
+    return hr;
+}
+
+static HRESULT WINAPI color_converter_GetInputCurrentType(IMFTransform *iface, DWORD id, IMFMediaType **type)
+{
+    FIXME("%p, %u, %p.\n", iface, id, type);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI color_converter_GetOutputCurrentType(IMFTransform *iface, DWORD id, IMFMediaType **type)
+{
+    FIXME("%p, %u, %p.\n", iface, id, type);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI color_converter_GetInputStatus(IMFTransform *iface, DWORD id, DWORD *flags)
+{
+    FIXME("%p, %u, %p.\n", iface, id, flags);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI color_converter_GetOutputStatus(IMFTransform *iface, DWORD *flags)
+{
+    FIXME("%p, %p.\n", iface, flags);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI color_converter_SetOutputBounds(IMFTransform *iface, LONGLONG lower, LONGLONG upper)
+{
+    FIXME("%p, %s, %s.\n", iface, wine_dbgstr_longlong(lower), wine_dbgstr_longlong(upper));
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI color_converter_ProcessEvent(IMFTransform *iface, DWORD id, IMFMediaEvent *event)
+{
+    TRACE("%p, %u, %p.\n", iface, id, event);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI color_converter_ProcessMessage(IMFTransform *iface, MFT_MESSAGE_TYPE message, ULONG_PTR param)
+{
+    FIXME("%p, %u.\n", iface, message);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI color_converter_ProcessInput(IMFTransform *iface, DWORD id, IMFSample *sample, DWORD flags)
+{
+    struct color_converter *converter = impl_color_converter_from_IMFTransform(iface);
+    GstBuffer *gst_buffer;
+    HRESULT hr = S_OK;
+    int ret;
+
+    TRACE("%p, %u, %p, %#x.\n", iface, id, sample, flags);
+
+    if (flags)
+        WARN("Unsupported flags %#x\n", flags);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    EnterCriticalSection(&converter->cs);
+
+    if (!converter->valid_state)
+    {
+        hr = MF_E_TRANSFORM_TYPE_NOT_SET;
+        goto done;
+    }
+
+    if (converter->inflight)
+    {
+        hr = MF_E_NOTACCEPTING;
+        goto done;
+    }
+
+    if (!(gst_buffer = gst_buffer_from_mf_sample(sample)))
+    {
+        hr = E_FAIL;
+        goto done;
+    }
+
+    g_signal_emit_by_name(converter->appsrc, "push-buffer", gst_buffer, &ret);
+    gst_buffer_unref(gst_buffer);
+    if (ret != GST_FLOW_OK)
+    {
+        ERR("Couldn't push buffer ret = %d\n", ret);
+        hr = E_FAIL;
+        goto done;
+    }
+
+    converter->inflight = TRUE;
+
+    done:
+    LeaveCriticalSection(&converter->cs);
+
+    return hr;
+}
+
+static HRESULT WINAPI color_converter_ProcessOutput(IMFTransform *iface, DWORD flags, DWORD count,
+        MFT_OUTPUT_DATA_BUFFER *samples, DWORD *status)
+{
+    struct color_converter *converter = impl_color_converter_from_IMFTransform(iface);
+    MFT_OUTPUT_DATA_BUFFER *relevant_buffer = NULL;
+    GstSample *sample;
+    HRESULT hr = S_OK;
+
+    TRACE("%p, %#x, %u, %p, %p.\n", iface, flags, count, samples, status);
+
+    if (flags)
+        WARN("Unsupported flags %#x\n", flags);
+
+    for (unsigned int i = 0; i < count; i++)
+    {
+        MFT_OUTPUT_DATA_BUFFER *out_buffer = &samples[i];
+
+        if (out_buffer->dwStreamID != 0)
+            return MF_E_INVALIDSTREAMNUMBER;
+
+        if (relevant_buffer)
+            return MF_E_INVALIDSTREAMNUMBER;
+
+        relevant_buffer = out_buffer;
+    }
+
+    if (!relevant_buffer)
+        return S_OK;
+
+    EnterCriticalSection(&converter->cs);
+
+    if (!converter->valid_state)
+    {
+        hr = MF_E_TRANSFORM_TYPE_NOT_SET;
+        goto done;
+    }
+
+    if (!converter->inflight)
+    {
+        hr = MF_E_TRANSFORM_NEED_MORE_INPUT;
+        goto done;
+    }
+
+    g_signal_emit_by_name(converter->appsink, "pull-sample", &sample);
+
+    converter->inflight =  FALSE;
+
+    relevant_buffer->pSample = mf_sample_from_gst_buffer(gst_sample_get_buffer(sample));
+    gst_sample_unref(sample);
+    relevant_buffer->dwStatus = S_OK;
+    relevant_buffer->pEvents = NULL;
+    *status = 0;
+
+    done:
+    LeaveCriticalSection(&converter->cs);
+
+    return hr;
+}
+
+static const IMFTransformVtbl color_converter_vtbl =
+{
+    color_converter_QueryInterface,
+    color_converter_AddRef,
+    color_converter_Release,
+    color_converter_GetStreamLimits,
+    color_converter_GetStreamCount,
+    color_converter_GetStreamIDs,
+    color_converter_GetInputStreamInfo,
+    color_converter_GetOutputStreamInfo,
+    color_converter_GetAttributes,
+    color_converter_GetInputStreamAttributes,
+    color_converter_GetOutputStreamAttributes,
+    color_converter_DeleteInputStream,
+    color_converter_AddInputStreams,
+    color_converter_GetInputAvailableType,
+    color_converter_GetOutputAvailableType,
+    color_converter_SetInputType,
+    color_converter_SetOutputType,
+    color_converter_GetInputCurrentType,
+    color_converter_GetOutputCurrentType,
+    color_converter_GetInputStatus,
+    color_converter_GetOutputStatus,
+    color_converter_SetOutputBounds,
+    color_converter_ProcessEvent,
+    color_converter_ProcessMessage,
+    color_converter_ProcessInput,
+    color_converter_ProcessOutput,
+};
+
+HRESULT color_converter_create(REFIID riid, void **ret)
+{
+    struct color_converter *object;
+    HRESULT hr;
+
+    TRACE("%s %p\n", debugstr_guid(riid), ret);
+
+    if (!(object = heap_alloc_zero(sizeof(*object))))
+        return E_OUTOFMEMORY;
+
+    object->IMFTransform_iface.lpVtbl = &color_converter_vtbl;
+    object->refcount = 1;
+
+    InitializeCriticalSection(&object->cs);
+
+    if (FAILED(hr = MFCreateAttributes(&object->attributes, 0)))
+        goto failed;
+
+    if (FAILED(hr = MFCreateAttributes(&object->output_attributes, 0)))
+        goto failed;
+
+    object->container = gst_bin_new(NULL);
+    object->bus = gst_bus_new();
+    gst_element_set_bus(object->container, object->bus);
+
+    if (!(object->appsrc = gst_element_factory_make("appsrc", NULL)))
+    {
+        ERR("Failed to create appsrc");
+        hr = E_FAIL;
+        goto failed;
+    }
+    gst_bin_add(GST_BIN(object->container), object->appsrc);
+
+    if (!(object->videoconvert = gst_element_factory_make("videoconvert", NULL)))
+    {
+        ERR("Failed to create converter\n");
+        hr = E_FAIL;
+        goto failed;
+    }
+    gst_bin_add(GST_BIN(object->container), object->videoconvert);
+
+    if (!(object->appsink = gst_element_factory_make("appsink", NULL)))
+    {
+        ERR("Failed to create appsink\n");
+        hr = E_FAIL;
+        goto failed;
+    }
+    gst_bin_add(GST_BIN(object->container), object->appsink);
+
+    if (!(gst_element_link(object->appsrc, object->videoconvert)))
+    {
+        ERR("Failed to link appsrc to videoconvert\n");
+        hr = E_FAIL;
+        goto failed;
+    }
+
+    if (!(gst_element_link(object->videoconvert, object->appsink)))
+    {
+        ERR("Failed to link videoconvert to appsink\n");
+        hr = E_FAIL;
+        goto failed;
+    }
+
+    *ret = &object->IMFTransform_iface;
+    return S_OK;
+
+failed:
+
+    IMFTransform_Release(&object->IMFTransform_iface);
+    return hr;
+}
\ No newline at end of file
diff --git a/dlls/winegstreamer/gst_private.h b/dlls/winegstreamer/gst_private.h
index 73359dd622d..870344e9273 100644
--- a/dlls/winegstreamer/gst_private.h
+++ b/dlls/winegstreamer/gst_private.h
@@ -72,4 +72,6 @@ enum decoder_type
 HRESULT generic_decoder_construct(REFIID riid, void **obj, enum decoder_type) DECLSPEC_HIDDEN;
 HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj) DECLSPEC_HIDDEN;
 
+HRESULT color_converter_create(REFIID riid, void **ret) DECLSPEC_HIDDEN;
+
 #endif /* __GST_PRIVATE_INCLUDED__ */
diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 84c0080510c..271698a1031 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -420,6 +420,9 @@ static HRESULT wmv_decoder_create(REFIID riid, void **ret)
 {
     return generic_decoder_construct(riid, ret, DECODER_TYPE_WMV);
 }
+
+static GUID CLSID_CColorConvertDMO = {0x98230571,0x0087,0x4204,{0xb0,0x20,0x32,0x82,0x53,0x8e,0x57,0xd3}};
+
 static const struct class_object
 {
     const GUID *clsid;
@@ -432,6 +435,7 @@ class_objects[] =
     { &CLSID_CMSH264DecoderMFT, &h264_decoder_create },
     { &CLSID_CMSAACDecMFT, &aac_decoder_create },
     { &CLSID_CWMVDecMediaObject, &wmv_decoder_create },
+    { &CLSID_CColorConvertDMO, &color_converter_create },
 };
 
 HRESULT mfplat_get_class_object(REFCLSID rclsid, REFIID riid, void **obj)
@@ -460,6 +464,26 @@ HRESULT mfplat_get_class_object(REFCLSID rclsid, REFIID riid, void **obj)
     return CLASS_E_CLASSNOTAVAILABLE;
 }
 
+static WCHAR color_converterW[] = {'C','o','l','o','r',' ','C','o','n','v','e','r','t','e','r',0};
+
+const GUID *color_converter_supported_types[] =
+{
+    &MFVideoFormat_RGB24,
+    &MFVideoFormat_RGB32,
+    &MFVideoFormat_RGB555,
+    &MFVideoFormat_RGB8,
+    &MFVideoFormat_AYUV,
+    &MFVideoFormat_I420,
+    &MFVideoFormat_IYUV,
+    &MFVideoFormat_NV11,
+    &MFVideoFormat_NV12,
+    &MFVideoFormat_UYVY,
+    &MFVideoFormat_v216,
+    &MFVideoFormat_v410,
+    &MFVideoFormat_YUY2,
+    &MFVideoFormat_YVYU,
+    &MFVideoFormat_YVYU,
+};
 
 static WCHAR h264decoderW[] = {'H','.','2','6','4',' ','D','e','c','o','d','e','r',0};
 const GUID *h264_decoder_input_types[] =
@@ -525,6 +549,18 @@ static const struct mft
 }
 mfts[] =
 {
+    {
+        &CLSID_CColorConvertDMO,
+        &MFT_CATEGORY_VIDEO_EFFECT,
+        color_converterW,
+        MFT_ENUM_FLAG_SYNCMFT,
+        &MFMediaType_Video,
+        ARRAY_SIZE(color_converter_supported_types),
+        color_converter_supported_types,
+        ARRAY_SIZE(color_converter_supported_types),
+        color_converter_supported_types,
+        NULL
+    },
     {
         &CLSID_CMSH264DecoderMFT,
         &MFT_CATEGORY_VIDEO_DECODER,
diff --git a/dlls/winegstreamer/winegstreamer_classes.idl b/dlls/winegstreamer/winegstreamer_classes.idl
index f9b0158fa6a..1556b6cff9f 100644
--- a/dlls/winegstreamer/winegstreamer_classes.idl
+++ b/dlls/winegstreamer/winegstreamer_classes.idl
@@ -79,3 +79,9 @@ coclass CMSAACDecMFT { }
     uuid(82d353df-90bd-4382-8bc2-3f6192b76e34)
 ]
 coclass CLSID_CWMVDecMediaObject {}
+
+[
+    threading(both),
+    uuid(98230571-0087-4204-b020-3282538e57d3)
+]
+coclass CColorConvertDMO { }
-- 
2.26.2

From c65bd3ccfceb87cc2fcd38d64940487bb6b8c341 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Fri, 1 May 2020 22:36:02 -0500
Subject: [PATCH 37/57] HACK: Set BPS to 16 for output template.

---
 dlls/winegstreamer/mf_decode.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/dlls/winegstreamer/mf_decode.c b/dlls/winegstreamer/mf_decode.c
index 05c99365e32..64138f8cd94 100644
--- a/dlls/winegstreamer/mf_decode.c
+++ b/dlls/winegstreamer/mf_decode.c
@@ -322,6 +322,11 @@ static HRESULT WINAPI mf_decoder_GetOutputAvailableType(IMFTransform *iface, DWO
         return hr;
     }
 
+    if (IsEqualGUID(decoder_descs[decoder->type].output_types[index], &MFAudioFormat_PCM))
+    {
+        IMFMediaType_SetUINT32(output_type, &MF_MT_AUDIO_BITS_PER_SAMPLE, 16);
+    }
+
     *type = output_type;
 
     return S_OK;
-- 
2.26.2

From d2802d71ac8c0bc76cbd90f3546169b5e9432669 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Mon, 9 Mar 2020 11:59:17 -0500
Subject: [PATCH 38/57] Improve tests

---
 dlls/mfplat/tests/mfplat.c         | 245 +++++++++++++++++++++++++++--
 dlls/mfplat/tests/test.mp4         | Bin 1554 -> 121550 bytes
 dlls/mfreadwrite/tests/mfplat.c    | 116 ++++++++------
 dlls/mfreadwrite/tests/resource.rc |   4 +-
 dlls/mfreadwrite/tests/test.mp4    | Bin 0 -> 121550 bytes
 5 files changed, 302 insertions(+), 63 deletions(-)
 create mode 100644 dlls/mfreadwrite/tests/test.mp4

diff --git a/dlls/mfplat/tests/mfplat.c b/dlls/mfplat/tests/mfplat.c
index a6bfaab22bf..46a7a82fa21 100644
--- a/dlls/mfplat/tests/mfplat.c
+++ b/dlls/mfplat/tests/mfplat.c
@@ -438,6 +438,9 @@ static BOOL get_event(IMFMediaEventGenerator *generator, MediaEventType expected
     return TRUE;
 }
 
+static IMFSample *retrieved_h264_samples[60];
+static IMFMediaType *compressed_h264_type;
+
 static void test_source_resolver(void)
 {
     struct test_callback callback = { { &test_create_from_url_callback_vtbl } };
@@ -461,6 +464,7 @@ static void test_source_resolver(void)
     PROPVARIANT var;
     HRESULT hr;
     GUID guid;
+    UINT64 frame_size, frame_rate;
 
     if (!pMFCreateSourceResolver)
     {
@@ -594,13 +598,27 @@ static void test_source_resolver(void)
     ok(hr == S_OK, "Failed to get current media type, hr %#x.\n", hr);
     hr = IMFMediaType_GetGUID(media_type, &MF_MT_SUBTYPE, &guid);
     ok(hr == S_OK, "Failed to get media sub type, hr %#x.\n", hr);
-todo_wine
-    ok(IsEqualGUID(&guid, &MFVideoFormat_M4S2), "Unexpected sub type %s.\n", debugstr_guid(&guid));
-    IMFMediaType_Release(media_type);
+    ok(IsEqualGUID(&guid, &MFVideoFormat_H264), "Unexpected sub type %s.\n", debugstr_guid(&guid));
+
+    hr = IMFMediaType_GetUINT64(media_type, &MF_MT_FRAME_SIZE, &frame_size);
+    ok(hr == S_OK, "Failed to get frame size, hr %#x.\n", hr);
+
+    ok((frame_size >> 32) == 320, "Unexpected width %u.\n", (DWORD)(frame_size >> 32));
+    ok((frame_size & 0xffffffff) == 240, "Unexpected height %u.\n", (DWORD)(frame_size & 0xffffffff));
+
+    hr = IMFMediaType_GetUINT64(media_type, &MF_MT_FRAME_RATE, &frame_rate);
+    ok(hr == S_OK, "Failed to get frame rate, hr %#x.\n", hr);
+
+    ok((frame_rate >> 32) / (frame_rate & 0xffffffff) == 30, "Unexpected framerate %u/%u\n",
+        (DWORD)(frame_rate >> 32), (DWORD)(frame_rate & 0xffffffff));
 
     hr = IMFPresentationDescriptor_SelectStream(descriptor, 0);
     ok(hr == S_OK, "Failed to select video stream, hr %#x.\n", hr);
 
+    compressed_h264_type = media_type;
+    IMFMediaTypeHandler_Release(handler);
+    IMFStreamDescriptor_Release(sd);
+
     var.vt = VT_EMPTY;
     hr = IMFMediaSource_Start(mediasource, descriptor, &GUID_NULL, &var);
     ok(hr == S_OK, "Failed to start media source, hr %#x.\n", hr);
@@ -611,9 +629,9 @@ todo_wine
 
     get_event((IMFMediaEventGenerator *)mediasource, MESourceStarted, NULL);
 
-    /* Request samples, our file is 10 frames at 25fps */
+    /* Request samples, our file is 60 frames at 30fps */
     get_event((IMFMediaEventGenerator *)video_stream, MEStreamStarted, NULL);
-    sample_count = 10;
+    sample_count = 60;
 
     /* Request one beyond EOS, otherwise EndOfStream isn't queued. */
     for (i = 0; i <= sample_count; ++i)
@@ -629,9 +647,14 @@ todo_wine
     for (i = 0; i < sample_count; ++i)
     {
         static const LONGLONG MILLI_TO_100_NANO = 10000;
-        LONGLONG duration, time;
+        static int once = 0;
+        LONGLONG duration;
         DWORD buffer_count;
         IMFSample *sample;
+        IMFMediaBuffer *buffer;
+        BYTE *buffer_data;
+        DWORD buffer_len;
+        BYTE nal_type = 0x00;
         BOOL ret;
 
         ret = get_event((IMFMediaEventGenerator *)video_stream, MEMediaSample, &var);
@@ -642,19 +665,38 @@ todo_wine
         ok(var.vt == VT_UNKNOWN, "Unexpected value type %u from MEMediaSample event.\n", var.vt);
         sample = (IMFSample *)var.punkVal;
 
-        hr = IMFSample_GetBufferCount(sample, &buffer_count);
-        ok(hr == S_OK, "Failed to get buffer count, hr %#x.\n", hr);
-        ok(buffer_count == 1, "Unexpected buffer count %u.\n", buffer_count);
-
         hr = IMFSample_GetSampleDuration(sample, &duration);
         ok(hr == S_OK, "Failed to get sample duration, hr %#x.\n", hr);
-        ok(duration == 40 * MILLI_TO_100_NANO, "Unexpected duration %s.\n", wine_dbgstr_longlong(duration));
+        ok(duration > 33 * MILLI_TO_100_NANO && duration < 34 *MILLI_TO_100_NANO,
+            "Unexpected duration %lu.\n", duration);
 
-        hr = IMFSample_GetSampleTime(sample, &time);
-        ok(hr == S_OK, "Failed to get sample time, hr %#x.\n", hr);
-        ok(time == i * 40 * MILLI_TO_100_NANO, "Unexpected time %s.\n", wine_dbgstr_longlong(time));
+        hr = IMFSample_GetBufferCount(sample, &buffer_count);
+        ok(hr == S_OK, "Failed to get buffer count, hr %#x.\n", hr);
+        ok(buffer_count > 0, "Unexpected buffer count %u.\n", buffer_count);
+
+        hr = IMFSample_GetBufferByIndex(sample, 0, &buffer);
+        ok (hr == S_OK, "Failed to get buffer from sample, hr %#x.\n", hr);
+        hr = IMFMediaBuffer_Lock(buffer, &buffer_data, NULL, &buffer_len);
+        ok (hr == S_OK, "Failed to lock buffer, hr %#x.\n", hr);
+        ok (buffer_len >= 4, "Size of first sample buffer < 4 bytes %u\n", buffer_len);
+        for (unsigned int k = 0; k < 5; k++)
+        {
+            ok (buffer_data[k] == 0x00 || buffer_data[k] == 0x01, "Invalid start prefix\n");
+            if (buffer_data[k] == 0x01)
+            {
+                nal_type = buffer_data[k+1];
+                break;
+            }
+        }
+        if (!once)
+            todo_wine ok(nal_type != 0x09, "Access Unit Delimeter NAL not expected.\n");
+        if (nal_type == 0x09)
+            once = 1;
+        hr = IMFMediaBuffer_Unlock(buffer);
+        ok (hr == S_OK, "Failed to unlock buffer.\n");
+        IMFMediaBuffer_Release(buffer);
 
-        IMFSample_Release(sample);
+        retrieved_h264_samples[i] = sample;
     }
 
     if (i == sample_count)
@@ -712,6 +754,178 @@ todo_wine
     DeleteFileW(filename);
 }
 
+static void test_decoder(void)
+{
+    IMFTransform *decoder;
+    DWORD in_min, in_max, out_min, out_max;
+    IMFMediaType *output_type = NULL;
+    MFT_INPUT_STREAM_INFO input_stream_info;
+    MFT_OUTPUT_STREAM_INFO output_stream_info;
+    DWORD input_counter, output_counter;
+    UINT64 frame_size, frame_rate;
+    LONGLONG last_sample_time = 0;
+    HRESULT hr;
+
+    if (FAILED(CoCreateInstance(&CLSID_CMSH264DecoderMFT, NULL, CLSCTX_INPROC_SERVER, &IID_IMFTransform, (void**)&decoder)))
+    {
+        skip("Skipping decoder tests.\n");
+        return;
+    }
+
+    hr = IMFTransform_GetStreamLimits(decoder, &in_min, &in_max, &out_min, &out_max);
+    ok (hr == S_OK, "Failed to get stream limits, hr %#x\n", hr);
+    ok (in_min == 1 && in_max == 1 && out_min == 1 && out_max == 1, "Unexpected stream limits.\n");
+
+    hr = IMFTransform_GetStreamCount(decoder, &in_min, &out_min);
+    ok (hr == S_OK, "hr %#x\n", hr);
+
+    for (unsigned int i = 0;;i++)
+    {
+        IMFMediaType *available_input_type = NULL;
+        GUID subtype;
+
+        if (FAILED(hr = IMFTransform_GetInputAvailableType(decoder, 0, i, &available_input_type)))
+            break;
+
+        if (FAILED(hr = IMFMediaType_GetGUID(available_input_type, &MF_MT_SUBTYPE, &subtype)))
+        {
+            IMFMediaType_Release(available_input_type);
+            break;
+        }
+
+        if (IsEqualGUID(&subtype, &MFVideoFormat_H264))
+        {
+            IMFMediaType_Release(available_input_type);
+            break;
+        }
+
+        IMFMediaType_Release(available_input_type);
+    }
+    ok (hr == S_OK, "Didn't find MFVideoFormat_H264 as an input type.\n");
+
+    hr = IMFTransform_SetInputType(decoder, 0, compressed_h264_type, 0);
+    ok (hr == S_OK, "Failed to set input type, hr %#x.\n", hr);
+
+    for (unsigned int i = 0;;i++)
+    {
+        IMFMediaType *available_output_type;
+        GUID subtype;
+
+        if (FAILED(hr = IMFTransform_GetOutputAvailableType(decoder, 0, i, &available_output_type)))
+            break;
+
+        if (FAILED(hr = IMFMediaType_GetGUID(available_output_type, &MF_MT_SUBTYPE, &subtype)))
+        {
+            IMFMediaType_Release(available_output_type);
+            break;
+        }
+
+        if (IsEqualGUID(&subtype, &MFVideoFormat_NV12))
+        {
+            output_type = available_output_type;
+            break;
+        }
+
+        IMFMediaType_Release(available_output_type);
+    }
+    ok (hr == S_OK, "Didn't find MFVideoFormat_NV12 as an output type, hr %#x\n", hr);
+
+    hr = IMFMediaType_GetUINT64(output_type, &MF_MT_FRAME_SIZE, &frame_size);
+    ok (hr == S_OK, "Failed to get output frame size, hr %#x.\n", hr);
+
+    ok(frame_size >> 32 == 320, "Unexpected width %u.\n", (DWORD)(frame_size >> 32));
+    ok((frame_size & 0xffffffff) == 240, "Unexpected height %u.\n", (DWORD)(frame_size & 0xffffffff));
+
+    hr = IMFMediaType_GetUINT64(output_type, &MF_MT_FRAME_RATE, &frame_rate);
+    ok (hr == S_OK, "Failed to get output frame rate, hr %#x.\n", hr);
+
+    ok((frame_rate >> 32) / (frame_rate & 0xffffffff) == 30, "Unexpected framerate %u/%u\n",
+        (DWORD)(frame_rate >> 32), (DWORD)(frame_rate & 0xffffffff));
+
+    hr = IMFTransform_SetOutputType(decoder, 0, output_type, 0);
+    ok (hr == S_OK, "Failed to set output type, hr %#x.\n", hr);
+
+    hr = IMFTransform_GetInputStreamInfo(decoder, 0, &input_stream_info);
+    ok (hr == S_OK, "hr %#x.\n");
+
+    hr = IMFTransform_GetOutputStreamInfo(decoder, 0, &output_stream_info);
+    ok (hr == S_OK, "hr = %#x.\n");
+
+    input_counter = 0;
+    output_counter = 0;
+
+    hr = IMFTransform_ProcessMessage(decoder, MFT_MESSAGE_NOTIFY_BEGIN_STREAMING, 0);
+    ok (hr == S_OK, "hr %#x\n");
+
+    while (output_counter < 60 && input_counter < 60)
+    {
+        while (input_counter < 60)
+        {
+            IMFSample *sample = retrieved_h264_samples[input_counter];
+            DWORD output_status;
+
+            hr = IMFTransform_ProcessInput(decoder, 0, sample, 0);
+            ok (hr == S_OK || hr == MF_E_NOTACCEPTING, "Failed to input sample %u, hr %#x.\n", input_counter, hr);
+            if (hr == MF_E_NOTACCEPTING)
+                break;
+            input_counter++;
+            hr = IMFTransform_GetOutputStatus(decoder, &output_status);
+            ok(hr == S_OK, "hr %#x\n", hr);
+            if (output_status & MFT_OUTPUT_STATUS_SAMPLE_READY)
+                break;
+        }
+        if (input_counter == 60)
+        {
+            hr = IMFTransform_ProcessMessage(decoder, MFT_MESSAGE_COMMAND_DRAIN, 0);
+            ok (hr == S_OK, "hr %#x\n", hr);
+        }
+        while (output_counter < 60)
+        {
+            DWORD output_status = 0;
+            MFT_OUTPUT_DATA_BUFFER out_buffers[1];
+            LONGLONG sample_time;
+
+            out_buffers[0].dwStreamID = 0;
+            out_buffers[0].pSample = 0;
+            out_buffers[0].dwStatus = 0;
+            out_buffers[0].pEvents = NULL;
+
+            if (!(output_stream_info.dwFlags & MFT_OUTPUT_STREAM_PROVIDES_SAMPLES))
+            {
+                IMFMediaBuffer *buffer;
+                IMFSample *sample;
+                hr = MFCreateMemoryBuffer(output_stream_info.cbSize, &buffer);
+                ok(hr == S_OK, "hr %#x\n");
+                hr = MFCreateSample(&sample);
+                ok(hr == S_OK, "hr %#x\n");
+                hr = IMFSample_AddBuffer(sample, buffer);
+                ok(hr == S_OK, "hr %#x\n");
+                out_buffers[0].pSample = sample;
+            }
+
+            hr = IMFTransform_ProcessOutput(decoder, 0, 1, out_buffers, &output_status);
+            ok (out_buffers[0].pEvents == NULL, "Unexpected events.\n");
+            ok (hr == S_OK || hr == MF_E_TRANSFORM_NEED_MORE_INPUT, "Failed to process output, sample %u, hr %#x.\n", output_counter, hr);
+            if (hr == MF_E_TRANSFORM_NEED_MORE_INPUT) break;
+            ok (out_buffers[0].dwStatus == S_OK, "hr %#x\n", out_buffers[0].dwStatus);
+            hr = IMFSample_GetSampleTime(out_buffers[0].pSample, &sample_time);
+            ok (hr == S_OK, "hr %#x\n", hr);
+            if (last_sample_time)
+            {
+                ok ((sample_time - last_sample_time - 333333) < 10, "Unexpected sample time progression (%lu)->(%lu)\n", last_sample_time, sample_time);
+            }
+            last_sample_time = sample_time;
+            IMFSample_Release(out_buffers[0].pSample);
+            output_counter++;
+        }
+    }
+    ok (output_counter == 60, "Expected 60 output samples, got %u\n", output_counter);
+
+    IMFMediaType_Release(output_type);
+    IMFMediaType_Release(compressed_h264_type);
+    IMFTransform_Release(decoder);
+}
+
 static void init_functions(void)
 {
     HMODULE mod = GetModuleHandleA("mfplat.dll");
@@ -5637,6 +5851,7 @@ START_TEST(mfplat)
     test_MFCreateMFByteStreamOnStream();
     test_system_memory_buffer();
     test_source_resolver();
+    test_decoder();
     test_MFCreateAsyncResult();
     test_allocate_queue();
     test_MFCopyImage();
diff --git a/dlls/mfplat/tests/test.mp4 b/dlls/mfplat/tests/test.mp4
index a5bbca6bbf7692eab047050b79b8ccc83516e6b4..72bcc0d8f3eafac344bb2152438afb0c4c691338 100644
GIT binary patch
literal 121550
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

literal 1554
zcmZuxeN0nV6u<3bttg}g3M<<3v4A5C7=;cYskS&=aH+Gw(TQ=|2k#+BpKbac6$q26
zgvfMZE^O--6L1NclR1flh8QLw4%rM5#eGC{R2Jv(j|s9(8MANazOwnmo#gk<x#yhw
zyZ4@R-$e*%%DGx+CF@`ik|L}DS&UP!LkKM^chNNX_cIj9Atd<{DdnJiN*lZEK&*TH
zLUnilE|&Pi#`t<(V2JeCh0xUFbE~$JpP!3QD)e^to@B05Kdu~jt~KuYz}1=h$wy;^
z-(P&iYuL#r*6qMlmYD;w&8gboiuVmim)E`@VY(w}d_`I2ihOP3>WzsJPV$oN<)LWX
zeE-6+iWMz`xA<B45szMa^nqwQ5w>wzrc-v;{3ns3&Hgygab@co_v%sWh^~kxZdgv1
zG$e27=y&X0FwfM)&vJ1wQfF>hX5`>p!|hca@<xwAt#6-gnD>;lG>BPmWrt3nUp`73
z+Yr|+TbnzS=UsV1v;C6gviW|rw)-!S-=bHn;0v1+QGDC}Ia|1D&?ob%jF`h$Wc#Ew
zV;vf3`obS*$vM<kEDwCQ`|#nw>4L6xr#4wnKY06wGT*}wdIn7LW=}zVn#?n%4mVMz
zS*QG<-xMcs%$)a1n<6jX{=IjfF~joa!xMeyYRwY|Cr0Vm>*3w%uu#*`=0;_WapAn$
zU<`El@AbuA79AjpWMkq|c1;#tZJ#~+J(2cx>Nm%BvdmP*5AP|wGW~$TESZLVhn6a1
ztO^C+GL%><v}DW7eXsQJ-HUG|I!ZcwqEv0#Ya@m<t5KG7N5rlo$2IYtr*eGsbj8h0
z?c@jJ8?GH6PW~!_$shUIcJraKf^47ff8>qKKRQs;^7r5rKP{`hCoZsRD*LTIOV>}^
zv}Z#0Dsy%(f4!(s5zT+wRX-W1@{bU&DxT$gcYNB95Wz4GhZ`=WopD!CphZIb3Y&Tt
zN#HB;J~@EE6G4Pb;@qcgDO~ywITu+4q3v9iuqGi&TV#WEm&%fL{&(FFn1q2)5>0U|
zXbo*=;Rh207#4X2E~$c{DoKbWFx1ksXMtOViZ2NB(km#tOR(VMuB70{eJoZOI||7?
zl%2*olCw<Zo^mi$Zbl##Z##(!#x#_R#yMDUJgnMfPYBwQI+iQ7gFVc0?7t1cIX-wf
zaHFt@IfI@MICdeJ7+9Xp2>Ks?)jSUa8_iO<Oo;G!Jey%!2<ZHT2<$>SD4dRa20SkU
zV;68rdYYqx<dOt*;hjTh6eXe7GH{(SlkT#Yax=1Y8M;ip4CY9n)kw{9LK`q0-qUjY
z7J{U}>4bH`mH}`KUjy7ccnDD_0CJHA@_=3toU_OwXamIR7Gqf9{35_wfE7@%h&<3n
zKs;bQARC}!xiSZ6ESNJ5P+CoKB<O7nEod-NqPX>NU0kHoiM#Wkq*n&-SMq0^0~2cD
TJ;x-N6hTeOp(eUDP!ruh^$B~#

diff --git a/dlls/mfreadwrite/tests/mfplat.c b/dlls/mfreadwrite/tests/mfplat.c
index 84581f9be9a..e13d428dc3a 100644
--- a/dlls/mfreadwrite/tests/mfplat.c
+++ b/dlls/mfreadwrite/tests/mfplat.c
@@ -624,10 +624,15 @@ static void test_source_reader(void)
         return;
     }
 
-    stream = get_resource_stream("test.wav");
+    stream = get_resource_stream("test.mp4");
+
+    hr = IMFByteStream_QueryInterface(stream, &IID_IMFAttributes, (void **)&attributes);
+    ok(hr == S_OK, "got 0x%08x\n", hr);
+    hr = IMFAttributes_SetString(attributes, &MF_BYTESTREAM_CONTENT_TYPE, L"video/mp4");
+    ok(hr == S_OK, "Failed to set string value, hr %#x.\n", hr);
+    IMFAttributes_Release(attributes);
 
     hr = MFCreateSourceReaderFromByteStream(stream, NULL, &reader);
-todo_wine
     ok(hr == S_OK, "Failed to create source reader, hr %#x.\n", hr);
 
     if (FAILED(hr))
@@ -643,14 +648,14 @@ todo_wine
     IMFMediaSource_Release(source);
 
     /* Stream selection. */
-    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, &selected);
+    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, &selected);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
     hr = IMFSourceReader_GetStreamSelection(reader, 100, &selected);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
     selected = FALSE;
-    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, &selected);
+    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, &selected);
     ok(hr == S_OK, "Failed to get stream selection, hr %#x.\n", hr);
     ok(selected, "Unexpected selection.\n");
 
@@ -659,17 +664,17 @@ todo_wine
     ok(hr == S_OK, "Failed to get stream selection, hr %#x.\n", hr);
     ok(selected, "Unexpected selection.\n");
 
-    hr = IMFSourceReader_SetStreamSelection(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, TRUE);
+    hr = IMFSourceReader_SetStreamSelection(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, TRUE);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
     hr = IMFSourceReader_SetStreamSelection(reader, 100, TRUE);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
-    hr = IMFSourceReader_SetStreamSelection(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, FALSE);
+    hr = IMFSourceReader_SetStreamSelection(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, FALSE);
     ok(hr == S_OK, "Failed to deselect a stream, hr %#x.\n", hr);
 
     selected = TRUE;
-    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, &selected);
+    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, &selected);
     ok(hr == S_OK, "Failed to get stream selection, hr %#x.\n", hr);
     ok(!selected, "Unexpected selection.\n");
 
@@ -677,43 +682,43 @@ todo_wine
     ok(hr == S_OK, "Failed to deselect a stream, hr %#x.\n", hr);
 
     selected = FALSE;
-    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, &selected);
+    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, &selected);
     ok(hr == S_OK, "Failed to get stream selection, hr %#x.\n", hr);
     ok(selected, "Unexpected selection.\n");
 
     /* Native media type. */
-    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, &mediatype);
+    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 0, &mediatype);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
     hr = IMFSourceReader_GetNativeMediaType(reader, 100, 0, &mediatype);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
-    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 0, &mediatype);
+    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, &mediatype);
     ok(hr == S_OK, "Failed to get native mediatype, hr %#x.\n", hr);
-    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 0, &mediatype2);
+    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, &mediatype2);
     ok(hr == S_OK, "Failed to get native mediatype, hr %#x.\n", hr);
     ok(mediatype != mediatype2, "Unexpected media type instance.\n");
     IMFMediaType_Release(mediatype2);
     IMFMediaType_Release(mediatype);
 
     /* MF_SOURCE_READER_CURRENT_TYPE_INDEX is Win8+ */
-    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM,
+    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM,
             MF_SOURCE_READER_CURRENT_TYPE_INDEX, &mediatype);
     ok(hr == S_OK || broken(hr == MF_E_NO_MORE_TYPES), "Failed to get native mediatype, hr %#x.\n", hr);
     if (SUCCEEDED(hr))
         IMFMediaType_Release(mediatype);
 
-    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 1, &mediatype);
+    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 1, &mediatype);
     ok(hr == MF_E_NO_MORE_TYPES, "Unexpected hr %#x.\n", hr);
 
     /* Current media type. */
-    hr = IMFSourceReader_GetCurrentMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, &mediatype);
+    hr = IMFSourceReader_GetCurrentMediaType(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, &mediatype);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
     hr = IMFSourceReader_GetCurrentMediaType(reader, 100, &mediatype);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
-    hr = IMFSourceReader_GetCurrentMediaType(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, &mediatype);
+    hr = IMFSourceReader_GetCurrentMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, &mediatype);
     ok(hr == S_OK, "Failed to get current media type, hr %#x.\n", hr);
     IMFMediaType_Release(mediatype);
 
@@ -721,56 +726,70 @@ todo_wine
     ok(hr == S_OK, "Failed to get current media type, hr %#x.\n", hr);
     IMFMediaType_Release(mediatype);
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 0, &actual_index, &stream_flags,
-            &timestamp, &sample);
-    ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
-    ok(actual_index == 0, "Unexpected stream index %u\n", actual_index);
-    ok(!stream_flags, "Unexpected stream flags %#x.\n", stream_flags);
-    IMFSample_Release(sample);
+    hr = MFCreateMediaType(&mediatype);
+    ok (hr == S_OK, "Unexpected hr %#x.\n");
+    hr = IMFMediaType_SetGUID(mediatype, &MF_MT_MAJOR_TYPE, &MFMediaType_Video);
+    ok(hr == S_OK, "Failed to set attribute, hr %#x.\n", hr);
+    hr = IMFMediaType_SetGUID(mediatype, &MF_MT_SUBTYPE, &MFVideoFormat_NV12);
+    ok(hr == S_OK, "Failed to set attribute, hr %#x.\n", hr);
 
-    /* There is no video stream. */
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, &actual_index, &stream_flags,
+    hr = IMFSourceReader_SetCurrentMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, NULL, mediatype);
+
+    IMFMediaType_Release(mediatype);
+
+    for (unsigned int i = 0; i < 60; i++)
+    {
+        hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, &actual_index, &stream_flags,
+                &timestamp, &sample);
+        ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
+        ok(actual_index == 0, "Unexpected stream index %u\n", actual_index);
+        ok(!stream_flags, "Unexpected stream flags %#x.\n", stream_flags);
+        IMFSample_Release(sample);
+    }
+
+    /* There is no audio stream. */
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 0, &actual_index, &stream_flags,
             &timestamp, &sample);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
-    ok(actual_index == MF_SOURCE_READER_FIRST_VIDEO_STREAM, "Unexpected stream index %u\n", actual_index);
+    ok(actual_index == MF_SOURCE_READER_FIRST_AUDIO_STREAM, "Unexpected stream index %u\n", actual_index);
     ok(stream_flags == MF_SOURCE_READERF_ERROR, "Unexpected stream flags %#x.\n", stream_flags);
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, NULL, &stream_flags, &timestamp,
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 0, NULL, &stream_flags, &timestamp,
             &sample);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, NULL, NULL, &timestamp, &sample);
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 0, NULL, NULL, &timestamp, &sample);
     ok(hr == E_POINTER, "Unexpected hr %#x.\n", hr);
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 0, &actual_index, &stream_flags,
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, &actual_index, &stream_flags,
             &timestamp, &sample);
     ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
     ok(actual_index == 0, "Unexpected stream index %u\n", actual_index);
     ok(stream_flags == MF_SOURCE_READERF_ENDOFSTREAM, "Unexpected stream flags %#x.\n", stream_flags);
     ok(!sample, "Unexpected sample object.\n");
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
             &actual_index, &stream_flags, &timestamp, &sample);
     ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
     ok(actual_index == 0, "Unexpected stream index %u\n", actual_index);
     ok(stream_flags == MF_SOURCE_READERF_ENDOFSTREAM, "Unexpected stream flags %#x.\n", stream_flags);
     ok(!sample, "Unexpected sample object.\n");
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
             &actual_index, &stream_flags, &timestamp, NULL);
     ok(hr == E_POINTER, "Unexpected hr %#x.\n", hr);
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
             &actual_index, NULL, &timestamp, &sample);
     ok(hr == E_POINTER, "Unexpected hr %#x.\n", hr);
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
             NULL, &stream_flags, &timestamp, &sample);
     ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
     ok(stream_flags == MF_SOURCE_READERF_ENDOFSTREAM, "Unexpected stream flags %#x.\n", stream_flags);
     ok(!sample, "Unexpected sample object.\n");
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
             &actual_index, &stream_flags, NULL, &sample);
     ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
     ok(actual_index == 0, "Unexpected stream index %u\n", actual_index);
@@ -779,26 +798,31 @@ todo_wine
 
     hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_ANY_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
             &actual_index, &stream_flags, NULL, &sample);
-    ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
-    ok(actual_index == 0, "Unexpected stream index %u\n", actual_index);
-    ok(stream_flags == MF_SOURCE_READERF_ENDOFSTREAM, "Unexpected stream flags %#x.\n", stream_flags);
-    ok(!sample, "Unexpected sample object.\n");
+    todo_wine ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
+    if (hr == S_OK)
+    {
+        ok(actual_index == 0, "Unexpected stream index %u\n", actual_index);
+        ok(stream_flags == MF_SOURCE_READERF_ENDOFSTREAM, "Unexpected stream flags %#x.\n", stream_flags);
+        ok(!sample, "Unexpected sample object.\n");
+    }
 
     /* Flush. */
     hr = IMFSourceReader_Flush(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM);
-    ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
-
-    hr = IMFSourceReader_Flush(reader, 100);
-    ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
+    todo_wine ok(hr == S_OK, "Failed to flush stream, hr %#x.\n", hr);
+    if (hr == S_OK)
+    {
+        hr = IMFSourceReader_Flush(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM);
+        ok(hr == S_OK, "Failed to flush stream, hr %#x.\n", hr);
 
-    hr = IMFSourceReader_Flush(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM);
-    ok(hr == S_OK, "Failed to flush stream, hr %#x.\n", hr);
+        hr = IMFSourceReader_Flush(reader, MF_SOURCE_READER_ALL_STREAMS);
+        ok(hr == S_OK, "Failed to flush all streams, hr %#x.\n", hr);
 
-    hr = IMFSourceReader_Flush(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM);
-    ok(hr == S_OK, "Failed to flush stream, hr %#x.\n", hr);
+        hr = IMFSourceReader_Flush(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM);
+        ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
-    hr = IMFSourceReader_Flush(reader, MF_SOURCE_READER_ALL_STREAMS);
-    ok(hr == S_OK, "Failed to flush all streams, hr %#x.\n", hr);
+        hr = IMFSourceReader_Flush(reader, 100);
+        ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
+    }
 
     IMFSourceReader_Release(reader);
 
diff --git a/dlls/mfreadwrite/tests/resource.rc b/dlls/mfreadwrite/tests/resource.rc
index f54212a8c8f..5edf5254906 100644
--- a/dlls/mfreadwrite/tests/resource.rc
+++ b/dlls/mfreadwrite/tests/resource.rc
@@ -18,5 +18,5 @@
 
 #include "windef.h"
 
-/* @makedep: test.wav */
-test.wav RCDATA test.wav
+/* @makedep: test.mp4 */
+test.mp4 RCDATA test.mp4
diff --git a/dlls/mfreadwrite/tests/test.mp4 b/dlls/mfreadwrite/tests/test.mp4
new file mode 100644
index 0000000000000000000000000000000000000000..72bcc0d8f3eafac344bb2152438afb0c4c691338
GIT binary patch
literal 121550
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

literal 0
HcmV?d00001

-- 
2.26.2

From ecb3af0934683f2b1ef2ca7e899becad6d00db4c Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Wed, 25 Mar 2020 13:58:36 -0500
Subject: [PATCH 39/57] Revert "Improve tests"

This reverts commit 603b1717a2b511a66d3be99ab5761d49cd5ef34d.
---
 dlls/mfplat/tests/mfplat.c         | 244 ++---------------------------
 dlls/mfplat/tests/test.mp4         | Bin 121550 -> 1554 bytes
 dlls/mfreadwrite/tests/mfplat.c    | 116 ++++++--------
 dlls/mfreadwrite/tests/resource.rc |   4 +-
 dlls/mfreadwrite/tests/test.mp4    | Bin 121550 -> 0 bytes
 5 files changed, 62 insertions(+), 302 deletions(-)
 delete mode 100644 dlls/mfreadwrite/tests/test.mp4

diff --git a/dlls/mfplat/tests/mfplat.c b/dlls/mfplat/tests/mfplat.c
index 46a7a82fa21..54bacbef714 100644
--- a/dlls/mfplat/tests/mfplat.c
+++ b/dlls/mfplat/tests/mfplat.c
@@ -438,9 +438,6 @@ static BOOL get_event(IMFMediaEventGenerator *generator, MediaEventType expected
     return TRUE;
 }
 
-static IMFSample *retrieved_h264_samples[60];
-static IMFMediaType *compressed_h264_type;
-
 static void test_source_resolver(void)
 {
     struct test_callback callback = { { &test_create_from_url_callback_vtbl } };
@@ -464,7 +461,6 @@ static void test_source_resolver(void)
     PROPVARIANT var;
     HRESULT hr;
     GUID guid;
-    UINT64 frame_size, frame_rate;
 
     if (!pMFCreateSourceResolver)
     {
@@ -598,27 +594,12 @@ static void test_source_resolver(void)
     ok(hr == S_OK, "Failed to get current media type, hr %#x.\n", hr);
     hr = IMFMediaType_GetGUID(media_type, &MF_MT_SUBTYPE, &guid);
     ok(hr == S_OK, "Failed to get media sub type, hr %#x.\n", hr);
-    ok(IsEqualGUID(&guid, &MFVideoFormat_H264), "Unexpected sub type %s.\n", debugstr_guid(&guid));
-
-    hr = IMFMediaType_GetUINT64(media_type, &MF_MT_FRAME_SIZE, &frame_size);
-    ok(hr == S_OK, "Failed to get frame size, hr %#x.\n", hr);
-
-    ok((frame_size >> 32) == 320, "Unexpected width %u.\n", (DWORD)(frame_size >> 32));
-    ok((frame_size & 0xffffffff) == 240, "Unexpected height %u.\n", (DWORD)(frame_size & 0xffffffff));
-
-    hr = IMFMediaType_GetUINT64(media_type, &MF_MT_FRAME_RATE, &frame_rate);
-    ok(hr == S_OK, "Failed to get frame rate, hr %#x.\n", hr);
-
-    ok((frame_rate >> 32) / (frame_rate & 0xffffffff) == 30, "Unexpected framerate %u/%u\n",
-        (DWORD)(frame_rate >> 32), (DWORD)(frame_rate & 0xffffffff));
+    ok(IsEqualGUID(&guid, &MFVideoFormat_M4S2), "Unexpected sub type %s.\n", debugstr_guid(&guid));
+    IMFMediaType_Release(media_type);
 
     hr = IMFPresentationDescriptor_SelectStream(descriptor, 0);
     ok(hr == S_OK, "Failed to select video stream, hr %#x.\n", hr);
 
-    compressed_h264_type = media_type;
-    IMFMediaTypeHandler_Release(handler);
-    IMFStreamDescriptor_Release(sd);
-
     var.vt = VT_EMPTY;
     hr = IMFMediaSource_Start(mediasource, descriptor, &GUID_NULL, &var);
     ok(hr == S_OK, "Failed to start media source, hr %#x.\n", hr);
@@ -629,9 +610,9 @@ static void test_source_resolver(void)
 
     get_event((IMFMediaEventGenerator *)mediasource, MESourceStarted, NULL);
 
-    /* Request samples, our file is 60 frames at 30fps */
+    /* Request samples, our file is 10 frames at 25fps */
     get_event((IMFMediaEventGenerator *)video_stream, MEStreamStarted, NULL);
-    sample_count = 60;
+    sample_count = 10;
 
     /* Request one beyond EOS, otherwise EndOfStream isn't queued. */
     for (i = 0; i <= sample_count; ++i)
@@ -647,14 +628,9 @@ static void test_source_resolver(void)
     for (i = 0; i < sample_count; ++i)
     {
         static const LONGLONG MILLI_TO_100_NANO = 10000;
-        static int once = 0;
-        LONGLONG duration;
+        LONGLONG duration, time;
         DWORD buffer_count;
         IMFSample *sample;
-        IMFMediaBuffer *buffer;
-        BYTE *buffer_data;
-        DWORD buffer_len;
-        BYTE nal_type = 0x00;
         BOOL ret;
 
         ret = get_event((IMFMediaEventGenerator *)video_stream, MEMediaSample, &var);
@@ -665,38 +641,19 @@ static void test_source_resolver(void)
         ok(var.vt == VT_UNKNOWN, "Unexpected value type %u from MEMediaSample event.\n", var.vt);
         sample = (IMFSample *)var.punkVal;
 
+        hr = IMFSample_GetBufferCount(sample, &buffer_count);
+        ok(hr == S_OK, "Failed to get buffer count, hr %#x.\n", hr);
+        ok(buffer_count == 1, "Unexpected buffer count %u.\n", buffer_count);
+
         hr = IMFSample_GetSampleDuration(sample, &duration);
         ok(hr == S_OK, "Failed to get sample duration, hr %#x.\n", hr);
-        ok(duration > 33 * MILLI_TO_100_NANO && duration < 34 *MILLI_TO_100_NANO,
-            "Unexpected duration %lu.\n", duration);
+        ok(duration == 40 * MILLI_TO_100_NANO, "Unexpected duration %s.\n", wine_dbgstr_longlong(duration));
 
-        hr = IMFSample_GetBufferCount(sample, &buffer_count);
-        ok(hr == S_OK, "Failed to get buffer count, hr %#x.\n", hr);
-        ok(buffer_count > 0, "Unexpected buffer count %u.\n", buffer_count);
-
-        hr = IMFSample_GetBufferByIndex(sample, 0, &buffer);
-        ok (hr == S_OK, "Failed to get buffer from sample, hr %#x.\n", hr);
-        hr = IMFMediaBuffer_Lock(buffer, &buffer_data, NULL, &buffer_len);
-        ok (hr == S_OK, "Failed to lock buffer, hr %#x.\n", hr);
-        ok (buffer_len >= 4, "Size of first sample buffer < 4 bytes %u\n", buffer_len);
-        for (unsigned int k = 0; k < 5; k++)
-        {
-            ok (buffer_data[k] == 0x00 || buffer_data[k] == 0x01, "Invalid start prefix\n");
-            if (buffer_data[k] == 0x01)
-            {
-                nal_type = buffer_data[k+1];
-                break;
-            }
-        }
-        if (!once)
-            todo_wine ok(nal_type != 0x09, "Access Unit Delimeter NAL not expected.\n");
-        if (nal_type == 0x09)
-            once = 1;
-        hr = IMFMediaBuffer_Unlock(buffer);
-        ok (hr == S_OK, "Failed to unlock buffer.\n");
-        IMFMediaBuffer_Release(buffer);
+        hr = IMFSample_GetSampleTime(sample, &time);
+        ok(hr == S_OK, "Failed to get sample time, hr %#x.\n", hr);
+        ok(time == i * 40 * MILLI_TO_100_NANO, "Unexpected time %s.\n", wine_dbgstr_longlong(time));
 
-        retrieved_h264_samples[i] = sample;
+        IMFSample_Release(sample);
     }
 
     if (i == sample_count)
@@ -754,178 +711,6 @@ static void test_source_resolver(void)
     DeleteFileW(filename);
 }
 
-static void test_decoder(void)
-{
-    IMFTransform *decoder;
-    DWORD in_min, in_max, out_min, out_max;
-    IMFMediaType *output_type = NULL;
-    MFT_INPUT_STREAM_INFO input_stream_info;
-    MFT_OUTPUT_STREAM_INFO output_stream_info;
-    DWORD input_counter, output_counter;
-    UINT64 frame_size, frame_rate;
-    LONGLONG last_sample_time = 0;
-    HRESULT hr;
-
-    if (FAILED(CoCreateInstance(&CLSID_CMSH264DecoderMFT, NULL, CLSCTX_INPROC_SERVER, &IID_IMFTransform, (void**)&decoder)))
-    {
-        skip("Skipping decoder tests.\n");
-        return;
-    }
-
-    hr = IMFTransform_GetStreamLimits(decoder, &in_min, &in_max, &out_min, &out_max);
-    ok (hr == S_OK, "Failed to get stream limits, hr %#x\n", hr);
-    ok (in_min == 1 && in_max == 1 && out_min == 1 && out_max == 1, "Unexpected stream limits.\n");
-
-    hr = IMFTransform_GetStreamCount(decoder, &in_min, &out_min);
-    ok (hr == S_OK, "hr %#x\n", hr);
-
-    for (unsigned int i = 0;;i++)
-    {
-        IMFMediaType *available_input_type = NULL;
-        GUID subtype;
-
-        if (FAILED(hr = IMFTransform_GetInputAvailableType(decoder, 0, i, &available_input_type)))
-            break;
-
-        if (FAILED(hr = IMFMediaType_GetGUID(available_input_type, &MF_MT_SUBTYPE, &subtype)))
-        {
-            IMFMediaType_Release(available_input_type);
-            break;
-        }
-
-        if (IsEqualGUID(&subtype, &MFVideoFormat_H264))
-        {
-            IMFMediaType_Release(available_input_type);
-            break;
-        }
-
-        IMFMediaType_Release(available_input_type);
-    }
-    ok (hr == S_OK, "Didn't find MFVideoFormat_H264 as an input type.\n");
-
-    hr = IMFTransform_SetInputType(decoder, 0, compressed_h264_type, 0);
-    ok (hr == S_OK, "Failed to set input type, hr %#x.\n", hr);
-
-    for (unsigned int i = 0;;i++)
-    {
-        IMFMediaType *available_output_type;
-        GUID subtype;
-
-        if (FAILED(hr = IMFTransform_GetOutputAvailableType(decoder, 0, i, &available_output_type)))
-            break;
-
-        if (FAILED(hr = IMFMediaType_GetGUID(available_output_type, &MF_MT_SUBTYPE, &subtype)))
-        {
-            IMFMediaType_Release(available_output_type);
-            break;
-        }
-
-        if (IsEqualGUID(&subtype, &MFVideoFormat_NV12))
-        {
-            output_type = available_output_type;
-            break;
-        }
-
-        IMFMediaType_Release(available_output_type);
-    }
-    ok (hr == S_OK, "Didn't find MFVideoFormat_NV12 as an output type, hr %#x\n", hr);
-
-    hr = IMFMediaType_GetUINT64(output_type, &MF_MT_FRAME_SIZE, &frame_size);
-    ok (hr == S_OK, "Failed to get output frame size, hr %#x.\n", hr);
-
-    ok(frame_size >> 32 == 320, "Unexpected width %u.\n", (DWORD)(frame_size >> 32));
-    ok((frame_size & 0xffffffff) == 240, "Unexpected height %u.\n", (DWORD)(frame_size & 0xffffffff));
-
-    hr = IMFMediaType_GetUINT64(output_type, &MF_MT_FRAME_RATE, &frame_rate);
-    ok (hr == S_OK, "Failed to get output frame rate, hr %#x.\n", hr);
-
-    ok((frame_rate >> 32) / (frame_rate & 0xffffffff) == 30, "Unexpected framerate %u/%u\n",
-        (DWORD)(frame_rate >> 32), (DWORD)(frame_rate & 0xffffffff));
-
-    hr = IMFTransform_SetOutputType(decoder, 0, output_type, 0);
-    ok (hr == S_OK, "Failed to set output type, hr %#x.\n", hr);
-
-    hr = IMFTransform_GetInputStreamInfo(decoder, 0, &input_stream_info);
-    ok (hr == S_OK, "hr %#x.\n");
-
-    hr = IMFTransform_GetOutputStreamInfo(decoder, 0, &output_stream_info);
-    ok (hr == S_OK, "hr = %#x.\n");
-
-    input_counter = 0;
-    output_counter = 0;
-
-    hr = IMFTransform_ProcessMessage(decoder, MFT_MESSAGE_NOTIFY_BEGIN_STREAMING, 0);
-    ok (hr == S_OK, "hr %#x\n");
-
-    while (output_counter < 60 && input_counter < 60)
-    {
-        while (input_counter < 60)
-        {
-            IMFSample *sample = retrieved_h264_samples[input_counter];
-            DWORD output_status;
-
-            hr = IMFTransform_ProcessInput(decoder, 0, sample, 0);
-            ok (hr == S_OK || hr == MF_E_NOTACCEPTING, "Failed to input sample %u, hr %#x.\n", input_counter, hr);
-            if (hr == MF_E_NOTACCEPTING)
-                break;
-            input_counter++;
-            hr = IMFTransform_GetOutputStatus(decoder, &output_status);
-            ok(hr == S_OK, "hr %#x\n", hr);
-            if (output_status & MFT_OUTPUT_STATUS_SAMPLE_READY)
-                break;
-        }
-        if (input_counter == 60)
-        {
-            hr = IMFTransform_ProcessMessage(decoder, MFT_MESSAGE_COMMAND_DRAIN, 0);
-            ok (hr == S_OK, "hr %#x\n", hr);
-        }
-        while (output_counter < 60)
-        {
-            DWORD output_status = 0;
-            MFT_OUTPUT_DATA_BUFFER out_buffers[1];
-            LONGLONG sample_time;
-
-            out_buffers[0].dwStreamID = 0;
-            out_buffers[0].pSample = 0;
-            out_buffers[0].dwStatus = 0;
-            out_buffers[0].pEvents = NULL;
-
-            if (!(output_stream_info.dwFlags & MFT_OUTPUT_STREAM_PROVIDES_SAMPLES))
-            {
-                IMFMediaBuffer *buffer;
-                IMFSample *sample;
-                hr = MFCreateMemoryBuffer(output_stream_info.cbSize, &buffer);
-                ok(hr == S_OK, "hr %#x\n");
-                hr = MFCreateSample(&sample);
-                ok(hr == S_OK, "hr %#x\n");
-                hr = IMFSample_AddBuffer(sample, buffer);
-                ok(hr == S_OK, "hr %#x\n");
-                out_buffers[0].pSample = sample;
-            }
-
-            hr = IMFTransform_ProcessOutput(decoder, 0, 1, out_buffers, &output_status);
-            ok (out_buffers[0].pEvents == NULL, "Unexpected events.\n");
-            ok (hr == S_OK || hr == MF_E_TRANSFORM_NEED_MORE_INPUT, "Failed to process output, sample %u, hr %#x.\n", output_counter, hr);
-            if (hr == MF_E_TRANSFORM_NEED_MORE_INPUT) break;
-            ok (out_buffers[0].dwStatus == S_OK, "hr %#x\n", out_buffers[0].dwStatus);
-            hr = IMFSample_GetSampleTime(out_buffers[0].pSample, &sample_time);
-            ok (hr == S_OK, "hr %#x\n", hr);
-            if (last_sample_time)
-            {
-                ok ((sample_time - last_sample_time - 333333) < 10, "Unexpected sample time progression (%lu)->(%lu)\n", last_sample_time, sample_time);
-            }
-            last_sample_time = sample_time;
-            IMFSample_Release(out_buffers[0].pSample);
-            output_counter++;
-        }
-    }
-    ok (output_counter == 60, "Expected 60 output samples, got %u\n", output_counter);
-
-    IMFMediaType_Release(output_type);
-    IMFMediaType_Release(compressed_h264_type);
-    IMFTransform_Release(decoder);
-}
-
 static void init_functions(void)
 {
     HMODULE mod = GetModuleHandleA("mfplat.dll");
@@ -5851,7 +5636,6 @@ START_TEST(mfplat)
     test_MFCreateMFByteStreamOnStream();
     test_system_memory_buffer();
     test_source_resolver();
-    test_decoder();
     test_MFCreateAsyncResult();
     test_allocate_queue();
     test_MFCopyImage();
diff --git a/dlls/mfplat/tests/test.mp4 b/dlls/mfplat/tests/test.mp4
index 72bcc0d8f3eafac344bb2152438afb0c4c691338..a5bbca6bbf7692eab047050b79b8ccc83516e6b4 100644
GIT binary patch
literal 1554
zcmZuxeN0nV6u<3bttg}g3M<<3v4A5C7=;cYskS&=aH+Gw(TQ=|2k#+BpKbac6$q26
zgvfMZE^O--6L1NclR1flh8QLw4%rM5#eGC{R2Jv(j|s9(8MANazOwnmo#gk<x#yhw
zyZ4@R-$e*%%DGx+CF@`ik|L}DS&UP!LkKM^chNNX_cIj9Atd<{DdnJiN*lZEK&*TH
zLUnilE|&Pi#`t<(V2JeCh0xUFbE~$JpP!3QD)e^to@B05Kdu~jt~KuYz}1=h$wy;^
z-(P&iYuL#r*6qMlmYD;w&8gboiuVmim)E`@VY(w}d_`I2ihOP3>WzsJPV$oN<)LWX
zeE-6+iWMz`xA<B45szMa^nqwQ5w>wzrc-v;{3ns3&Hgygab@co_v%sWh^~kxZdgv1
zG$e27=y&X0FwfM)&vJ1wQfF>hX5`>p!|hca@<xwAt#6-gnD>;lG>BPmWrt3nUp`73
z+Yr|+TbnzS=UsV1v;C6gviW|rw)-!S-=bHn;0v1+QGDC}Ia|1D&?ob%jF`h$Wc#Ew
zV;vf3`obS*$vM<kEDwCQ`|#nw>4L6xr#4wnKY06wGT*}wdIn7LW=}zVn#?n%4mVMz
zS*QG<-xMcs%$)a1n<6jX{=IjfF~joa!xMeyYRwY|Cr0Vm>*3w%uu#*`=0;_WapAn$
zU<`El@AbuA79AjpWMkq|c1;#tZJ#~+J(2cx>Nm%BvdmP*5AP|wGW~$TESZLVhn6a1
ztO^C+GL%><v}DW7eXsQJ-HUG|I!ZcwqEv0#Ya@m<t5KG7N5rlo$2IYtr*eGsbj8h0
z?c@jJ8?GH6PW~!_$shUIcJraKf^47ff8>qKKRQs;^7r5rKP{`hCoZsRD*LTIOV>}^
zv}Z#0Dsy%(f4!(s5zT+wRX-W1@{bU&DxT$gcYNB95Wz4GhZ`=WopD!CphZIb3Y&Tt
zN#HB;J~@EE6G4Pb;@qcgDO~ywITu+4q3v9iuqGi&TV#WEm&%fL{&(FFn1q2)5>0U|
zXbo*=;Rh207#4X2E~$c{DoKbWFx1ksXMtOViZ2NB(km#tOR(VMuB70{eJoZOI||7?
zl%2*olCw<Zo^mi$Zbl##Z##(!#x#_R#yMDUJgnMfPYBwQI+iQ7gFVc0?7t1cIX-wf
zaHFt@IfI@MICdeJ7+9Xp2>Ks?)jSUa8_iO<Oo;G!Jey%!2<ZHT2<$>SD4dRa20SkU
zV;68rdYYqx<dOt*;hjTh6eXe7GH{(SlkT#Yax=1Y8M;ip4CY9n)kw{9LK`q0-qUjY
z7J{U}>4bH`mH}`KUjy7ccnDD_0CJHA@_=3toU_OwXamIR7Gqf9{35_wfE7@%h&<3n
zKs;bQARC}!xiSZ6ESNJ5P+CoKB<O7nEod-NqPX>NU0kHoiM#Wkq*n&-SMq0^0~2cD
TJ;x-N6hTeOp(eUDP!ruh^$B~#

literal 121550
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

diff --git a/dlls/mfreadwrite/tests/mfplat.c b/dlls/mfreadwrite/tests/mfplat.c
index e13d428dc3a..84581f9be9a 100644
--- a/dlls/mfreadwrite/tests/mfplat.c
+++ b/dlls/mfreadwrite/tests/mfplat.c
@@ -624,15 +624,10 @@ static void test_source_reader(void)
         return;
     }
 
-    stream = get_resource_stream("test.mp4");
-
-    hr = IMFByteStream_QueryInterface(stream, &IID_IMFAttributes, (void **)&attributes);
-    ok(hr == S_OK, "got 0x%08x\n", hr);
-    hr = IMFAttributes_SetString(attributes, &MF_BYTESTREAM_CONTENT_TYPE, L"video/mp4");
-    ok(hr == S_OK, "Failed to set string value, hr %#x.\n", hr);
-    IMFAttributes_Release(attributes);
+    stream = get_resource_stream("test.wav");
 
     hr = MFCreateSourceReaderFromByteStream(stream, NULL, &reader);
+todo_wine
     ok(hr == S_OK, "Failed to create source reader, hr %#x.\n", hr);
 
     if (FAILED(hr))
@@ -648,14 +643,14 @@ static void test_source_reader(void)
     IMFMediaSource_Release(source);
 
     /* Stream selection. */
-    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, &selected);
+    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, &selected);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
     hr = IMFSourceReader_GetStreamSelection(reader, 100, &selected);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
     selected = FALSE;
-    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, &selected);
+    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, &selected);
     ok(hr == S_OK, "Failed to get stream selection, hr %#x.\n", hr);
     ok(selected, "Unexpected selection.\n");
 
@@ -664,17 +659,17 @@ static void test_source_reader(void)
     ok(hr == S_OK, "Failed to get stream selection, hr %#x.\n", hr);
     ok(selected, "Unexpected selection.\n");
 
-    hr = IMFSourceReader_SetStreamSelection(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, TRUE);
+    hr = IMFSourceReader_SetStreamSelection(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, TRUE);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
     hr = IMFSourceReader_SetStreamSelection(reader, 100, TRUE);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
-    hr = IMFSourceReader_SetStreamSelection(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, FALSE);
+    hr = IMFSourceReader_SetStreamSelection(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, FALSE);
     ok(hr == S_OK, "Failed to deselect a stream, hr %#x.\n", hr);
 
     selected = TRUE;
-    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, &selected);
+    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, &selected);
     ok(hr == S_OK, "Failed to get stream selection, hr %#x.\n", hr);
     ok(!selected, "Unexpected selection.\n");
 
@@ -682,43 +677,43 @@ static void test_source_reader(void)
     ok(hr == S_OK, "Failed to deselect a stream, hr %#x.\n", hr);
 
     selected = FALSE;
-    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, &selected);
+    hr = IMFSourceReader_GetStreamSelection(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, &selected);
     ok(hr == S_OK, "Failed to get stream selection, hr %#x.\n", hr);
     ok(selected, "Unexpected selection.\n");
 
     /* Native media type. */
-    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 0, &mediatype);
+    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, &mediatype);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
     hr = IMFSourceReader_GetNativeMediaType(reader, 100, 0, &mediatype);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
-    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, &mediatype);
+    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 0, &mediatype);
     ok(hr == S_OK, "Failed to get native mediatype, hr %#x.\n", hr);
-    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, &mediatype2);
+    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 0, &mediatype2);
     ok(hr == S_OK, "Failed to get native mediatype, hr %#x.\n", hr);
     ok(mediatype != mediatype2, "Unexpected media type instance.\n");
     IMFMediaType_Release(mediatype2);
     IMFMediaType_Release(mediatype);
 
     /* MF_SOURCE_READER_CURRENT_TYPE_INDEX is Win8+ */
-    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM,
+    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM,
             MF_SOURCE_READER_CURRENT_TYPE_INDEX, &mediatype);
     ok(hr == S_OK || broken(hr == MF_E_NO_MORE_TYPES), "Failed to get native mediatype, hr %#x.\n", hr);
     if (SUCCEEDED(hr))
         IMFMediaType_Release(mediatype);
 
-    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 1, &mediatype);
+    hr = IMFSourceReader_GetNativeMediaType(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 1, &mediatype);
     ok(hr == MF_E_NO_MORE_TYPES, "Unexpected hr %#x.\n", hr);
 
     /* Current media type. */
-    hr = IMFSourceReader_GetCurrentMediaType(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, &mediatype);
+    hr = IMFSourceReader_GetCurrentMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, &mediatype);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
     hr = IMFSourceReader_GetCurrentMediaType(reader, 100, &mediatype);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
-    hr = IMFSourceReader_GetCurrentMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, &mediatype);
+    hr = IMFSourceReader_GetCurrentMediaType(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, &mediatype);
     ok(hr == S_OK, "Failed to get current media type, hr %#x.\n", hr);
     IMFMediaType_Release(mediatype);
 
@@ -726,70 +721,56 @@ static void test_source_reader(void)
     ok(hr == S_OK, "Failed to get current media type, hr %#x.\n", hr);
     IMFMediaType_Release(mediatype);
 
-    hr = MFCreateMediaType(&mediatype);
-    ok (hr == S_OK, "Unexpected hr %#x.\n");
-    hr = IMFMediaType_SetGUID(mediatype, &MF_MT_MAJOR_TYPE, &MFMediaType_Video);
-    ok(hr == S_OK, "Failed to set attribute, hr %#x.\n", hr);
-    hr = IMFMediaType_SetGUID(mediatype, &MF_MT_SUBTYPE, &MFVideoFormat_NV12);
-    ok(hr == S_OK, "Failed to set attribute, hr %#x.\n", hr);
-
-    hr = IMFSourceReader_SetCurrentMediaType(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, NULL, mediatype);
-
-    IMFMediaType_Release(mediatype);
-
-    for (unsigned int i = 0; i < 60; i++)
-    {
-        hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, &actual_index, &stream_flags,
-                &timestamp, &sample);
-        ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
-        ok(actual_index == 0, "Unexpected stream index %u\n", actual_index);
-        ok(!stream_flags, "Unexpected stream flags %#x.\n", stream_flags);
-        IMFSample_Release(sample);
-    }
-
-    /* There is no audio stream. */
     hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 0, &actual_index, &stream_flags,
             &timestamp, &sample);
+    ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
+    ok(actual_index == 0, "Unexpected stream index %u\n", actual_index);
+    ok(!stream_flags, "Unexpected stream flags %#x.\n", stream_flags);
+    IMFSample_Release(sample);
+
+    /* There is no video stream. */
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, &actual_index, &stream_flags,
+            &timestamp, &sample);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
-    ok(actual_index == MF_SOURCE_READER_FIRST_AUDIO_STREAM, "Unexpected stream index %u\n", actual_index);
+    ok(actual_index == MF_SOURCE_READER_FIRST_VIDEO_STREAM, "Unexpected stream index %u\n", actual_index);
     ok(stream_flags == MF_SOURCE_READERF_ERROR, "Unexpected stream flags %#x.\n", stream_flags);
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 0, NULL, &stream_flags, &timestamp,
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, NULL, &stream_flags, &timestamp,
             &sample);
     ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 0, NULL, NULL, &timestamp, &sample);
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, NULL, NULL, &timestamp, &sample);
     ok(hr == E_POINTER, "Unexpected hr %#x.\n", hr);
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, 0, &actual_index, &stream_flags,
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, 0, &actual_index, &stream_flags,
             &timestamp, &sample);
     ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
     ok(actual_index == 0, "Unexpected stream index %u\n", actual_index);
     ok(stream_flags == MF_SOURCE_READERF_ENDOFSTREAM, "Unexpected stream flags %#x.\n", stream_flags);
     ok(!sample, "Unexpected sample object.\n");
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
             &actual_index, &stream_flags, &timestamp, &sample);
     ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
     ok(actual_index == 0, "Unexpected stream index %u\n", actual_index);
     ok(stream_flags == MF_SOURCE_READERF_ENDOFSTREAM, "Unexpected stream flags %#x.\n", stream_flags);
     ok(!sample, "Unexpected sample object.\n");
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
             &actual_index, &stream_flags, &timestamp, NULL);
     ok(hr == E_POINTER, "Unexpected hr %#x.\n", hr);
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
             &actual_index, NULL, &timestamp, &sample);
     ok(hr == E_POINTER, "Unexpected hr %#x.\n", hr);
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
             NULL, &stream_flags, &timestamp, &sample);
     ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
     ok(stream_flags == MF_SOURCE_READERF_ENDOFSTREAM, "Unexpected stream flags %#x.\n", stream_flags);
     ok(!sample, "Unexpected sample object.\n");
 
-    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
+    hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
             &actual_index, &stream_flags, NULL, &sample);
     ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
     ok(actual_index == 0, "Unexpected stream index %u\n", actual_index);
@@ -798,31 +779,26 @@ static void test_source_reader(void)
 
     hr = IMFSourceReader_ReadSample(reader, MF_SOURCE_READER_ANY_STREAM, MF_SOURCE_READER_CONTROLF_DRAIN,
             &actual_index, &stream_flags, NULL, &sample);
-    todo_wine ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
-    if (hr == S_OK)
-    {
-        ok(actual_index == 0, "Unexpected stream index %u\n", actual_index);
-        ok(stream_flags == MF_SOURCE_READERF_ENDOFSTREAM, "Unexpected stream flags %#x.\n", stream_flags);
-        ok(!sample, "Unexpected sample object.\n");
-    }
+    ok(hr == S_OK, "Failed to get a sample, hr %#x.\n", hr);
+    ok(actual_index == 0, "Unexpected stream index %u\n", actual_index);
+    ok(stream_flags == MF_SOURCE_READERF_ENDOFSTREAM, "Unexpected stream flags %#x.\n", stream_flags);
+    ok(!sample, "Unexpected sample object.\n");
 
     /* Flush. */
     hr = IMFSourceReader_Flush(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM);
-    todo_wine ok(hr == S_OK, "Failed to flush stream, hr %#x.\n", hr);
-    if (hr == S_OK)
-    {
-        hr = IMFSourceReader_Flush(reader, MF_SOURCE_READER_FIRST_VIDEO_STREAM);
-        ok(hr == S_OK, "Failed to flush stream, hr %#x.\n", hr);
+    ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
-        hr = IMFSourceReader_Flush(reader, MF_SOURCE_READER_ALL_STREAMS);
-        ok(hr == S_OK, "Failed to flush all streams, hr %#x.\n", hr);
+    hr = IMFSourceReader_Flush(reader, 100);
+    ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
 
-        hr = IMFSourceReader_Flush(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM);
-        ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
+    hr = IMFSourceReader_Flush(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM);
+    ok(hr == S_OK, "Failed to flush stream, hr %#x.\n", hr);
 
-        hr = IMFSourceReader_Flush(reader, 100);
-        ok(hr == MF_E_INVALIDSTREAMNUMBER, "Unexpected hr %#x.\n", hr);
-    }
+    hr = IMFSourceReader_Flush(reader, MF_SOURCE_READER_FIRST_AUDIO_STREAM);
+    ok(hr == S_OK, "Failed to flush stream, hr %#x.\n", hr);
+
+    hr = IMFSourceReader_Flush(reader, MF_SOURCE_READER_ALL_STREAMS);
+    ok(hr == S_OK, "Failed to flush all streams, hr %#x.\n", hr);
 
     IMFSourceReader_Release(reader);
 
diff --git a/dlls/mfreadwrite/tests/resource.rc b/dlls/mfreadwrite/tests/resource.rc
index 5edf5254906..f54212a8c8f 100644
--- a/dlls/mfreadwrite/tests/resource.rc
+++ b/dlls/mfreadwrite/tests/resource.rc
@@ -18,5 +18,5 @@
 
 #include "windef.h"
 
-/* @makedep: test.mp4 */
-test.mp4 RCDATA test.mp4
+/* @makedep: test.wav */
+test.wav RCDATA test.wav
diff --git a/dlls/mfreadwrite/tests/test.mp4 b/dlls/mfreadwrite/tests/test.mp4
deleted file mode 100644
index 72bcc0d8f3eafac344bb2152438afb0c4c691338..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 121550
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

-- 
2.26.2

From 3be4c3745ace90c0ba965b58956086fa8b3c63b6 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 5 May 2020 15:35:16 -0500
Subject: [PATCH 40/57] Report streams backwards and only select one of each
 stream type.

---
 dlls/winegstreamer/media_source.c | 24 ++++++++++++++++++++++--
 1 file changed, 22 insertions(+), 2 deletions(-)

diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index 47f04af0a04..ada6a112262 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -1467,6 +1467,7 @@ static HRESULT media_source_constructor(IMFByteStream *bytestream, struct media_
         GST_STATIC_PAD_TEMPLATE("mf_src", GST_PAD_SRC, GST_PAD_ALWAYS, GST_STATIC_CAPS_ANY);
 
     struct media_source *object = heap_alloc_zero(sizeof(*object));
+    BOOL video_selected = FALSE, audio_selected = FALSE;
     IMFStreamDescriptor **descriptors = NULL;
     unsigned int i;
     HRESULT hr;
@@ -1568,15 +1569,34 @@ static HRESULT media_source_constructor(IMFByteStream *bytestream, struct media_
     descriptors = heap_alloc(object->stream_count * sizeof(IMFStreamDescriptor*));
     for (i = 0; i < object->stream_count; i++)
     {
-        IMFMediaStream_GetStreamDescriptor(&object->streams[i]->IMFMediaStream_iface, &descriptors[i]);
+        IMFMediaStream_GetStreamDescriptor(&object->streams[i]->IMFMediaStream_iface, &descriptors[object->stream_count - 1 - i]);
     }
 
     if (FAILED(hr = MFCreatePresentationDescriptor(object->stream_count, descriptors, &object->pres_desc)))
         goto fail;
 
+    /* Select one of each major type. */
     for (i = 0; i < object->stream_count; i++)
     {
-        IMFPresentationDescriptor_SelectStream(object->pres_desc, i);
+        IMFMediaTypeHandler *handler;
+        GUID major_type;
+        BOOL select_stream = FALSE;
+
+        IMFStreamDescriptor_GetMediaTypeHandler(descriptors[i], &handler);
+        IMFMediaTypeHandler_GetMajorType(handler, &major_type);
+        if (IsEqualGUID(&major_type, &MFMediaType_Video) && !video_selected)
+        {
+            select_stream = TRUE;
+            video_selected = TRUE;
+        }
+        if (IsEqualGUID(&major_type, &MFMediaType_Audio) && !audio_selected)
+        {
+            select_stream = TRUE;
+            audio_selected = TRUE;
+        }
+        if (select_stream)
+            IMFPresentationDescriptor_SelectStream(object->pres_desc, i);
+        IMFMediaTypeHandler_Release(handler);
         IMFStreamDescriptor_Release(descriptors[i]);
     }
     heap_free(descriptors);
-- 
2.26.2

From 1167d2842c13fbc2c0d73a73861b3b6adb7ff2fa Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Thu, 7 May 2020 13:09:47 -0500
Subject: [PATCH 41/57] winegstreamer: Implement IMFMediaSource::Stop.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/media_source.c | 30 ++++++++++++++++++++++++++++--
 1 file changed, 28 insertions(+), 2 deletions(-)

diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index ada6a112262..1d2c999b7e1 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -65,6 +65,7 @@ struct media_stream
 enum source_async_op
 {
     SOURCE_ASYNC_START,
+    SOURCE_ASYNC_STOP,
     SOURCE_ASYNC_REQUEST_SAMPLE,
 };
 
@@ -356,6 +357,23 @@ static void start_pipeline(struct media_source *source, struct source_async_comm
     gst_element_set_state(source->container, GST_STATE_PLAYING);
 }
 
+static void stop_pipeline(struct media_source *source)
+{
+    /* TODO: seek to beginning */
+    gst_element_set_state(source->container, GST_STATE_PAUSED);
+
+    for (unsigned int i = 0; i < source->stream_count; i++)
+    {
+        struct media_stream *stream = source->streams[i];
+        if (stream->state != STREAM_INACTIVE)
+            IMFMediaEventQueue_QueueEventParamVar(stream->event_queue, MEStreamStopped, &GUID_NULL, S_OK, NULL);
+    }
+
+    IMFMediaEventQueue_QueueEventParamVar(source->event_queue, MESourceStopped, &GUID_NULL, S_OK, NULL);
+
+    source->state = SOURCE_STOPPED;
+}
+
 static void dispatch_end_of_presentation(struct media_source *source)
 {
     PROPVARIANT empty = {.vt = VT_EMPTY};
@@ -428,6 +446,9 @@ static HRESULT WINAPI source_async_commands_Invoke(IMFAsyncCallback *iface, IMFA
         case SOURCE_ASYNC_START:
             start_pipeline(source, command);
             break;
+        case SOURCE_ASYNC_STOP:
+            stop_pipeline(source);
+            break;
         case SOURCE_ASYNC_REQUEST_SAMPLE:
             wait_on_sample(command->u.request_sample.stream, command->u.request_sample.token);
             break;
@@ -1208,13 +1229,18 @@ static HRESULT WINAPI media_source_Start(IMFMediaSource *iface, IMFPresentationD
 static HRESULT WINAPI media_source_Stop(IMFMediaSource *iface)
 {
     struct media_source *source = impl_from_IMFMediaSource(iface);
+    struct source_async_command *command;
+    HRESULT hr;
 
-    FIXME("(%p): stub\n", source);
+    TRACE("(%p)\n", source);
 
     if (source->state == SOURCE_SHUTDOWN)
         return MF_E_SHUTDOWN;
 
-    return E_NOTIMPL;
+    if (SUCCEEDED(hr = source_create_async_op(SOURCE_ASYNC_STOP, &command)))
+        hr = MFPutWorkItem(source->async_commands_queue, &source->async_commands_callback, &command->IUnknown_iface);
+
+    return hr;
 }
 
 static HRESULT WINAPI media_source_Pause(IMFMediaSource *iface)
-- 
2.26.2

From a971041d22177263e428c9cbd4ecbf00da901043 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Mon, 11 May 2020 16:05:50 -0500
Subject: [PATCH 42/57] winegstreamer: Introduce MPEG-4 Section-2 video
 decoder.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/gst_private.h             |  1 +
 dlls/winegstreamer/mf_decode.c               | 10 ++++++
 dlls/winegstreamer/mfplat.c                  | 34 ++++++++++++++++++++
 dlls/winegstreamer/winegstreamer_classes.idl |  6 ++++
 include/mfidl.idl                            |  1 +
 5 files changed, 52 insertions(+)

diff --git a/dlls/winegstreamer/gst_private.h b/dlls/winegstreamer/gst_private.h
index 870344e9273..3ae89f511e9 100644
--- a/dlls/winegstreamer/gst_private.h
+++ b/dlls/winegstreamer/gst_private.h
@@ -68,6 +68,7 @@ enum decoder_type
     DECODER_TYPE_H264,
     DECODER_TYPE_AAC,
     DECODER_TYPE_WMV,
+    DECODER_TYPE_M4S2,
 };
 HRESULT generic_decoder_construct(REFIID riid, void **obj, enum decoder_type) DECLSPEC_HIDDEN;
 HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj) DECLSPEC_HIDDEN;
diff --git a/dlls/winegstreamer/mf_decode.c b/dlls/winegstreamer/mf_decode.c
index 64138f8cd94..285b3595143 100644
--- a/dlls/winegstreamer/mf_decode.c
+++ b/dlls/winegstreamer/mf_decode.c
@@ -32,6 +32,9 @@ const GUID *aac_output_types[] = {&MFAudioFormat_Float, &MFAudioFormat_PCM};
 const GUID *wmv_input_types[] = {&MFVideoFormat_WMV3, &MFVideoFormat_WVC1};
 const GUID *wmv_output_types[] = {&MFVideoFormat_NV12, &MFVideoFormat_YV12, &MFVideoFormat_YUY2, &MFVideoFormat_UYVY, &MFVideoFormat_YVYU, &MFVideoFormat_NV11, &MFVideoFormat_RGB32, &MFVideoFormat_RGB24, &MFVideoFormat_RGB555, &MFVideoFormat_RGB8};
 
+const GUID *m4s2_input_types[] = {&MFVideoFormat_MPEG2};
+const GUID *m4s2_output_types[] = {&MFVideoFormat_I420, &MFVideoFormat_IYUV, &MFVideoFormat_NV12, &MFVideoFormat_YUY2, &MFVideoFormat_YV12};
+
 static struct decoder_desc
 {
     const GUID *major_type;
@@ -61,6 +64,13 @@ static struct decoder_desc
         ARRAY_SIZE(wmv_input_types),
         wmv_output_types,
         ARRAY_SIZE(wmv_output_types),
+    },
+    { /* DECODER_TYPE_M4S2 */
+        &MFMediaType_Video,
+        m4s2_input_types,
+        ARRAY_SIZE(m4s2_input_types),
+        m4s2_output_types,
+        ARRAY_SIZE(m4s2_output_types),
     }
 };
 
diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 271698a1031..32e3188fada 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -421,6 +421,11 @@ static HRESULT wmv_decoder_create(REFIID riid, void **ret)
     return generic_decoder_construct(riid, ret, DECODER_TYPE_WMV);
 }
 
+static HRESULT m4s2_decoder_create(REFIID riid, void **ret)
+{
+    return generic_decoder_construct(riid, ret, DECODER_TYPE_M4S2);
+}
+
 static GUID CLSID_CColorConvertDMO = {0x98230571,0x0087,0x4204,{0xb0,0x20,0x32,0x82,0x53,0x8e,0x57,0xd3}};
 
 static const struct class_object
@@ -435,6 +440,7 @@ class_objects[] =
     { &CLSID_CMSH264DecoderMFT, &h264_decoder_create },
     { &CLSID_CMSAACDecMFT, &aac_decoder_create },
     { &CLSID_CWMVDecMediaObject, &wmv_decoder_create },
+    { &CLSID_CMpeg4sDecMFT, m4s2_decoder_create },
     { &CLSID_CColorConvertDMO, &color_converter_create },
 };
 
@@ -534,6 +540,22 @@ const GUID *wmv_decoder_output_types[] =
     &MFVideoFormat_RGB8,
 };
 
+static WCHAR m4s2decoderW[] = {'M','p','e','g','4','s',' ','D','e','c','o','d','e','r',' ','M','F','T',0};
+
+const GUID *m4s2_decoder_input_types[] =
+{
+    &MFVideoFormat_M4S2,
+};
+
+const GUID *m4s2_decoder_output_types[] =
+{
+    &MFVideoFormat_I420,
+    &MFVideoFormat_IYUV,
+    &MFVideoFormat_NV12,
+    &MFVideoFormat_YUY2,
+    &MFVideoFormat_YV12,
+};
+
 static const struct mft
 {
     const GUID *clsid;
@@ -596,6 +618,18 @@ mfts[] =
         ARRAY_SIZE(wmv_decoder_output_types),
         wmv_decoder_output_types,
         NULL
+    },
+    {
+        &CLSID_CMpeg4sDecMFT,
+        &MFT_CATEGORY_VIDEO_DECODER,
+        m4s2decoderW,
+        MFT_ENUM_FLAG_SYNCMFT,
+        &MFMediaType_Video,
+        ARRAY_SIZE(m4s2_decoder_input_types),
+        m4s2_decoder_input_types,
+        ARRAY_SIZE(m4s2_decoder_output_types),
+        m4s2_decoder_output_types,
+        NULL
     }
 };
 
diff --git a/dlls/winegstreamer/winegstreamer_classes.idl b/dlls/winegstreamer/winegstreamer_classes.idl
index 1556b6cff9f..5969eaa591a 100644
--- a/dlls/winegstreamer/winegstreamer_classes.idl
+++ b/dlls/winegstreamer/winegstreamer_classes.idl
@@ -74,6 +74,12 @@ coclass CMSH264DecoderMFT { }
 ]
 coclass CMSAACDecMFT { }
 
+[
+    threading(both),
+    uuid(5686a0d9-fe39-409f-9dff-3fdbc849f9f5)
+]
+coclass CMpeg4sDecMFT { }
+
 [
     threading(both),
     uuid(82d353df-90bd-4382-8bc2-3f6192b76e34)
diff --git a/include/mfidl.idl b/include/mfidl.idl
index 467e123255b..4879b612e19 100644
--- a/include/mfidl.idl
+++ b/include/mfidl.idl
@@ -1292,5 +1292,6 @@ cpp_quote("EXTERN_GUID(MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS, 0xba491366, 0xb
 cpp_quote("EXTERN_GUID(CLSID_VideoProcessorMFT, 0x88753b26, 0x5b24, 0x49bd, 0xb2, 0xe7, 0xc, 0x44, 0x5c, 0x78, 0xc9, 0x82);")
 cpp_quote("EXTERN_GUID(CLSID_CMSH264DecoderMFT, 0x62ce7e72, 0x4c71, 0x4d20, 0xb1, 0x5d, 0x45, 0x28, 0x31, 0xa8, 0x7d, 0x9d);")
 cpp_quote("EXTERN_GUID(CLSID_CMSAACDecMFT, 0x32d186a7, 0x218f, 0x4c75, 0x88, 0x76, 0xdd, 0x77, 0x27, 0x3a, 0x89, 0x99);")
+cpp_quote("EXTERN_GUID(CLSID_CMpeg4sDecMFT, 0x5686a0d9, 0xfe39, 0x409f, 0x9d, 0xff, 0x3f, 0xdb, 0xc8, 0x49, 0xf9, 0xf5);")
 cpp_quote("EXTERN_GUID(CLSID_ASFByteStreamHandler, 0x41457294, 0x644c, 0x4298, 0xa2, 0x8a, 0xbd, 0x69, 0xf2, 0xc0, 0xcf, 0x3b);")
 cpp_quote("EXTERN_GUID(CLSID_CWMVDecMediaObject, 0x82d353df, 0x90bd, 0x4382, 0x8b, 0xc2, 0x3f, 0x61, 0x92, 0xb7, 0x6e, 0x34);")
\ No newline at end of file
-- 
2.26.2

From 932e83c8d004699163c99c6eac90cef0c3cc7034 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 12 May 2020 16:48:52 -0500
Subject: [PATCH 43/57] HACK: Switch between all selection streams on
 MF_SOURCE_READER_ANY_STREAM.

---
 dlls/mfreadwrite/reader.c | 24 +++++++++++++++++++++++-
 1 file changed, 23 insertions(+), 1 deletion(-)

diff --git a/dlls/mfreadwrite/reader.c b/dlls/mfreadwrite/reader.c
index f8c03e62d35..423250e3cb7 100644
--- a/dlls/mfreadwrite/reader.c
+++ b/dlls/mfreadwrite/reader.c
@@ -1045,7 +1045,29 @@ static HRESULT source_reader_get_stream_read_index(struct source_reader *reader,
             {
                 /* Cycle through all selected streams once, next pick first selected. */
                 if (FAILED(hr = source_reader_get_first_selected_stream(reader, STREAM_FLAG_REQUESTED_ONCE, stream_index)))
-                    hr = source_reader_get_first_selected_stream(reader, 0, stream_index);
+                {
+                    //hr = source_reader_get_first_selected_stream(reader, 0, stream_index);
+                    static int last_selection = -1;
+                    int i;
+                    BOOL selected;
+
+                    for (i = 0; i < (int) reader->stream_count; ++i)
+                    {
+                        source_reader_get_stream_selection(reader, i, &selected);
+                        if (selected && i > last_selection)
+                        {
+                            last_selection = i;
+                            *stream_index = i;
+                            hr = S_OK;
+                            break;
+                        }
+                    }
+                    if (i == reader->stream_count)
+                    {
+                        hr = source_reader_get_first_selected_stream(reader, 0, stream_index);
+                        last_selection = hr == S_OK ? *stream_index : -1;
+                    }
+                }
             }
             return hr;
         default:
-- 
2.26.2

From 88f26e6f1214bb487ccd0da132e02712520208fc Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 12 May 2020 16:50:41 -0500
Subject: [PATCH 44/57] winegstreamer: Introduce WMA audio decoder.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/gst_private.h             |  1 +
 dlls/winegstreamer/mf_decode.c               | 10 ++++++
 dlls/winegstreamer/mfplat.c                  | 32 ++++++++++++++++++++
 dlls/winegstreamer/winegstreamer_classes.idl |  6 ++++
 include/mfidl.idl                            |  3 +-
 5 files changed, 51 insertions(+), 1 deletion(-)

diff --git a/dlls/winegstreamer/gst_private.h b/dlls/winegstreamer/gst_private.h
index 3ae89f511e9..dc23d5201b1 100644
--- a/dlls/winegstreamer/gst_private.h
+++ b/dlls/winegstreamer/gst_private.h
@@ -68,6 +68,7 @@ enum decoder_type
     DECODER_TYPE_H264,
     DECODER_TYPE_AAC,
     DECODER_TYPE_WMV,
+    DECODER_TYPE_WMA,
     DECODER_TYPE_M4S2,
 };
 HRESULT generic_decoder_construct(REFIID riid, void **obj, enum decoder_type) DECLSPEC_HIDDEN;
diff --git a/dlls/winegstreamer/mf_decode.c b/dlls/winegstreamer/mf_decode.c
index 285b3595143..2cbe99d3168 100644
--- a/dlls/winegstreamer/mf_decode.c
+++ b/dlls/winegstreamer/mf_decode.c
@@ -32,6 +32,9 @@ const GUID *aac_output_types[] = {&MFAudioFormat_Float, &MFAudioFormat_PCM};
 const GUID *wmv_input_types[] = {&MFVideoFormat_WMV3, &MFVideoFormat_WVC1};
 const GUID *wmv_output_types[] = {&MFVideoFormat_NV12, &MFVideoFormat_YV12, &MFVideoFormat_YUY2, &MFVideoFormat_UYVY, &MFVideoFormat_YVYU, &MFVideoFormat_NV11, &MFVideoFormat_RGB32, &MFVideoFormat_RGB24, &MFVideoFormat_RGB555, &MFVideoFormat_RGB8};
 
+const GUID *wma_input_types[] = {&MFAudioFormat_WMAudioV8, &MFAudioFormat_WMAudioV9};
+const GUID *wma_output_types[] = {&MFAudioFormat_Float, &MFAudioFormat_PCM};
+
 const GUID *m4s2_input_types[] = {&MFVideoFormat_MPEG2};
 const GUID *m4s2_output_types[] = {&MFVideoFormat_I420, &MFVideoFormat_IYUV, &MFVideoFormat_NV12, &MFVideoFormat_YUY2, &MFVideoFormat_YV12};
 
@@ -65,6 +68,13 @@ static struct decoder_desc
         wmv_output_types,
         ARRAY_SIZE(wmv_output_types),
     },
+    { /* DECODER_TYPE_WMA */
+        &MFMediaType_Audio,
+        wma_input_types,
+        ARRAY_SIZE(wma_input_types),
+        wma_output_types,
+        ARRAY_SIZE(wma_output_types),
+    },
     { /* DECODER_TYPE_M4S2 */
         &MFMediaType_Video,
         m4s2_input_types,
diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 32e3188fada..671679a79f6 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -421,6 +421,11 @@ static HRESULT wmv_decoder_create(REFIID riid, void **ret)
     return generic_decoder_construct(riid, ret, DECODER_TYPE_WMV);
 }
 
+static HRESULT wma_decoder_create(REFIID riid, void **ret)
+{
+    return generic_decoder_construct(riid, ret, DECODER_TYPE_WMA);
+}
+
 static HRESULT m4s2_decoder_create(REFIID riid, void **ret)
 {
     return generic_decoder_construct(riid, ret, DECODER_TYPE_M4S2);
@@ -440,6 +445,7 @@ class_objects[] =
     { &CLSID_CMSH264DecoderMFT, &h264_decoder_create },
     { &CLSID_CMSAACDecMFT, &aac_decoder_create },
     { &CLSID_CWMVDecMediaObject, &wmv_decoder_create },
+    { &CLSID_CWMADecMediaObject, &wma_decoder_create },
     { &CLSID_CMpeg4sDecMFT, m4s2_decoder_create },
     { &CLSID_CColorConvertDMO, &color_converter_create },
 };
@@ -540,6 +546,20 @@ const GUID *wmv_decoder_output_types[] =
     &MFVideoFormat_RGB8,
 };
 
+static WCHAR wmadecoderW[] = {'W','M','A','u','d','i','o',' ','D','e','c','o','d','e','r',' ','M','F','T',0};
+
+const GUID *wma_decoder_input_types[] =
+{
+    &MFAudioFormat_WMAudioV8,
+    &MFAudioFormat_WMAudioV9,
+};
+
+const GUID *wma_decoder_output_types[] =
+{
+    &MFAudioFormat_Float,
+    &MFAudioFormat_PCM,
+};
+
 static WCHAR m4s2decoderW[] = {'M','p','e','g','4','s',' ','D','e','c','o','d','e','r',' ','M','F','T',0};
 
 const GUID *m4s2_decoder_input_types[] =
@@ -619,6 +639,18 @@ mfts[] =
         wmv_decoder_output_types,
         NULL
     },
+    {
+        &CLSID_CWMADecMediaObject,
+        &MFT_CATEGORY_AUDIO_DECODER,
+        wmadecoderW,
+        MFT_ENUM_FLAG_SYNCMFT,
+        &MFMediaType_Audio,
+        ARRAY_SIZE(wma_decoder_input_types),
+        wma_decoder_input_types,
+        ARRAY_SIZE(wma_decoder_output_types),
+        wma_decoder_output_types,
+        NULL
+    },
     {
         &CLSID_CMpeg4sDecMFT,
         &MFT_CATEGORY_VIDEO_DECODER,
diff --git a/dlls/winegstreamer/winegstreamer_classes.idl b/dlls/winegstreamer/winegstreamer_classes.idl
index 5969eaa591a..c014d359a39 100644
--- a/dlls/winegstreamer/winegstreamer_classes.idl
+++ b/dlls/winegstreamer/winegstreamer_classes.idl
@@ -86,6 +86,12 @@ coclass CMpeg4sDecMFT { }
 ]
 coclass CLSID_CWMVDecMediaObject {}
 
+[
+    threading(both),
+    uuid(2eeb4adf-4578-4d10-bca7-bb955f56320a)
+]
+coclass CLSID_CWMADecMediaObject {}
+
 [
     threading(both),
     uuid(98230571-0087-4204-b020-3282538e57d3)
diff --git a/include/mfidl.idl b/include/mfidl.idl
index 4879b612e19..ecdfed3b1c4 100644
--- a/include/mfidl.idl
+++ b/include/mfidl.idl
@@ -1294,4 +1294,5 @@ cpp_quote("EXTERN_GUID(CLSID_CMSH264DecoderMFT, 0x62ce7e72, 0x4c71, 0x4d20, 0xb1
 cpp_quote("EXTERN_GUID(CLSID_CMSAACDecMFT, 0x32d186a7, 0x218f, 0x4c75, 0x88, 0x76, 0xdd, 0x77, 0x27, 0x3a, 0x89, 0x99);")
 cpp_quote("EXTERN_GUID(CLSID_CMpeg4sDecMFT, 0x5686a0d9, 0xfe39, 0x409f, 0x9d, 0xff, 0x3f, 0xdb, 0xc8, 0x49, 0xf9, 0xf5);")
 cpp_quote("EXTERN_GUID(CLSID_ASFByteStreamHandler, 0x41457294, 0x644c, 0x4298, 0xa2, 0x8a, 0xbd, 0x69, 0xf2, 0xc0, 0xcf, 0x3b);")
-cpp_quote("EXTERN_GUID(CLSID_CWMVDecMediaObject, 0x82d353df, 0x90bd, 0x4382, 0x8b, 0xc2, 0x3f, 0x61, 0x92, 0xb7, 0x6e, 0x34);")
\ No newline at end of file
+cpp_quote("EXTERN_GUID(CLSID_CWMVDecMediaObject, 0x82d353df, 0x90bd, 0x4382, 0x8b, 0xc2, 0x3f, 0x61, 0x92, 0xb7, 0x6e, 0x34);")
+cpp_quote("EXTERN_GUID(CLSID_CWMADecMediaObject, 0x2eeb4adf, 0x4578, 0x4d10, 0xbc, 0xa7, 0xbb, 0x95, 0x5f, 0x56, 0x32, 0x0a);")
\ No newline at end of file
-- 
2.26.2

From 26cddd08d9e48b47c824434ff7a35f9b00d2592e Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Wed, 13 May 2020 12:32:42 -0500
Subject: [PATCH 45/57] Support stereo down folding.

---
 dlls/winegstreamer/mf_decode.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/dlls/winegstreamer/mf_decode.c b/dlls/winegstreamer/mf_decode.c
index 2cbe99d3168..0646cb2e845 100644
--- a/dlls/winegstreamer/mf_decode.c
+++ b/dlls/winegstreamer/mf_decode.c
@@ -327,9 +327,11 @@ static HRESULT WINAPI mf_decoder_GetOutputAvailableType(IMFTransform *iface, DWO
 
     copy_attr(output_type, decoder->input_type, &MF_MT_FRAME_SIZE);
     copy_attr(output_type, decoder->input_type, &MF_MT_FRAME_RATE);
-    copy_attr(output_type, decoder->input_type, &MF_MT_AUDIO_NUM_CHANNELS);
     copy_attr(output_type, decoder->input_type, &MF_MT_AUDIO_SAMPLES_PER_SECOND);
 
+    /* TODO: support both stereo folding and matching channels */
+    IMFMediaType_SetUINT32(output_type, &MF_MT_AUDIO_NUM_CHANNELS, 2);
+
     if (FAILED(hr = IMFMediaType_SetGUID(output_type, &MF_MT_MAJOR_TYPE, decoder_descs[decoder->type].major_type)))
     {
         IMFMediaType_Release(output_type);
-- 
2.26.2

From 228050f3e8332e3103ca87128205757c9fbbc882 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 11 Aug 2020 13:41:15 -0500
Subject: [PATCH 46/57] winegstreamer: Implement MF_SD_LANGUAGE.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/media_source.c | 33 +++++++++++++++++++++++++++++--
 1 file changed, 31 insertions(+), 2 deletions(-)

diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index 1d2c999b7e1..83217ebb5b7 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -1647,8 +1647,12 @@ static HRESULT media_source_constructor(IMFByteStream *bytestream, struct media_
         /* TODO: consider streams which don't start at T=0 */
         for (unsigned int i = 0; i < object->stream_count; i++)
         {
-            GstQuery *query = gst_query_new_duration(GST_FORMAT_TIME);
-            if (gst_pad_query(object->streams[i]->their_src, query))
+            struct media_stream *stream = object->streams[i];
+            GstEvent *tag_event;
+            GstQuery *query;
+
+            query = gst_query_new_duration(GST_FORMAT_TIME);
+            if (gst_pad_query(stream->their_src, query))
             {
                 gint64 stream_pres_time;
                 gst_query_parse_duration(query, NULL, &stream_pres_time);
@@ -1662,6 +1666,31 @@ static HRESULT media_source_constructor(IMFByteStream *bytestream, struct media_
             {
                 WARN("Unable to get presentation time of stream %u\n", i);
             }
+
+            tag_event = gst_pad_get_sticky_event(stream->their_src, GST_EVENT_TAG, 0);
+            if (tag_event)
+            {
+                GstTagList *tag_list;
+                gchar *language_code = NULL;
+
+                gst_event_parse_tag(tag_event, &tag_list);
+
+                gst_tag_list_get_string(tag_list, "language-code", &language_code);
+                if (language_code)
+                {
+                    DWORD char_count = MultiByteToWideChar(CP_UTF8, 0, language_code, -1, NULL, 0);
+                    if (char_count)
+                    {
+                        WCHAR *language_codeW = heap_alloc(char_count * sizeof(WCHAR));
+                        MultiByteToWideChar(CP_UTF8, 0, language_code, -1, language_codeW, char_count);
+                        IMFStreamDescriptor_SetString(stream->descriptor, &MF_SD_LANGUAGE, language_codeW);
+                        heap_free(language_codeW);
+                    }
+                    g_free(language_code);
+                }
+
+                gst_event_unref(tag_event);
+            }
         }
 
         if (object->stream_count)
-- 
2.26.2

From 43c50513cf0e38283b1b3023bf89e376b29b1170 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 11 Aug 2020 15:58:42 -0500
Subject: [PATCH 47/57] Revert "mf/topoloader: Add a structure for iterative
 branch resolution."

This reverts commit e308d81a617632fe0fedd243952f79e8d9ec05b4.
---
 dlls/mf/tests/mf.c |   9 +--
 dlls/mf/topology.c | 138 +--------------------------------------------
 2 files changed, 4 insertions(+), 143 deletions(-)

diff --git a/dlls/mf/tests/mf.c b/dlls/mf/tests/mf.c
index e6f3593a74b..809209eef72 100644
--- a/dlls/mf/tests/mf.c
+++ b/dlls/mf/tests/mf.c
@@ -1400,7 +1400,6 @@ static void test_topology_loader(void)
     IMFPresentationDescriptor *pd;
     IMFSourceResolver *resolver;
     IMFActivate *sink_activate;
-    IMFStreamSink *stream_sink;
     unsigned int count, value;
     IMFMediaType *media_type;
     IMFStreamDescriptor *sd;
@@ -1515,19 +1514,15 @@ todo_wine
     hr = IMFActivate_ActivateObject(sink_activate, &IID_IMFMediaSink, (void **)&sink);
     ok(hr == S_OK, "Failed to activate, hr %#x.\n", hr);
 
-    hr = IMFMediaSink_GetStreamSinkByIndex(sink, 0, &stream_sink);
-    ok(hr == S_OK, "Unexpected hr %#x.\n", hr);
-
-    hr = IMFTopologyNode_SetObject(sink_node, (IUnknown *)stream_sink);
+    hr = IMFTopologyNode_SetObject(sink_node, (IUnknown *)sink);
     ok(hr == S_OK, "Failed to set object, hr %#x.\n", hr);
 
-    IMFStreamSink_Release(stream_sink);
-
     hr = IMFTopology_GetCount(topology, &count);
     ok(hr == S_OK, "Failed to get attribute count, hr %#x.\n", hr);
     ok(count == 0, "Unexpected count %u.\n", count);
 
     hr = IMFTopoLoader_Load(loader, topology, &full_topology, NULL);
+todo_wine
     ok(hr == S_OK, "Failed to resolve topology, hr %#x.\n", hr);
     ok(full_topology != topology, "Unexpected instance.\n");
 
diff --git a/dlls/mf/topology.c b/dlls/mf/topology.c
index 8032e438b73..840f1bd25f4 100644
--- a/dlls/mf/topology.c
+++ b/dlls/mf/topology.c
@@ -1935,41 +1935,17 @@ static ULONG WINAPI topology_loader_Release(IMFTopoLoader *iface)
 
 struct topoloader_context
 {
-    IMFTopology *input_topology;
     IMFTopology *output_topology;
-    unsigned int marker;
     GUID key;
 };
 
-static IMFTopologyNode *topology_loader_get_node_for_marker(struct topoloader_context *context, TOPOID *id)
-{
-    IMFTopologyNode *node;
-    unsigned short i = 0;
-    unsigned int value;
-
-    while (SUCCEEDED(IMFTopology_GetNode(context->output_topology, i++, &node)))
-    {
-        if (SUCCEEDED(IMFTopologyNode_GetUINT32(node, &context->key, &value)) && value == context->marker)
-        {
-            IMFTopologyNode_GetTopoNodeID(node, id);
-            return node;
-        }
-        IMFTopologyNode_Release(node);
-    }
-
-    *id = 0;
-    return NULL;
-}
-
 static HRESULT topology_loader_clone_node(struct topoloader_context *context, IMFTopologyNode *node,
-        IMFTopologyNode **ret, unsigned int marker)
+        unsigned int marker)
 {
     IMFTopologyNode *cloned_node;
     MF_TOPOLOGY_TYPE node_type;
     HRESULT hr;
 
-    if (ret) *ret = NULL;
-
     IMFTopologyNode_GetNodeType(node, &node_type);
 
     if (FAILED(hr = MFCreateTopologyNode(node_type, &cloned_node)))
@@ -1981,113 +1957,17 @@ static HRESULT topology_loader_clone_node(struct topoloader_context *context, IM
     if (SUCCEEDED(hr))
         hr = IMFTopology_AddNode(context->output_topology, cloned_node);
 
-    if (SUCCEEDED(hr) && ret)
-    {
-        *ret = cloned_node;
-        IMFTopologyNode_AddRef(*ret);
-    }
-
     IMFTopologyNode_Release(cloned_node);
 
     return hr;
 }
 
-typedef HRESULT (*p_topology_loader_connect_func)(struct topoloader_context *context, IMFTopologyNode *upstream_node,
-        unsigned int output_index, IMFTopologyNode *downstream_node, unsigned int input_index);
-
-static HRESULT topology_loader_connect_source_node(struct topoloader_context *context, IMFTopologyNode *upstream_node,
-        unsigned int output_index, IMFTopologyNode *downstream_node, unsigned int input_index)
-{
-    FIXME("Unimplemented.\n");
-
-    return E_NOTIMPL;
-}
-
-static HRESULT topology_loader_resolve_branch(struct topoloader_context *context, IMFTopologyNode *upstream_node,
-        unsigned int output_index, IMFTopologyNode *downstream_node, unsigned input_index)
-{
-    static const p_topology_loader_connect_func connectors[MF_TOPOLOGY_TEE_NODE+1][MF_TOPOLOGY_TEE_NODE+1] =
-    {
-          /* OUTPUT */ { NULL },
-    /* SOURCESTREAM */ { topology_loader_connect_source_node, NULL, NULL, NULL },
-       /* TRANSFORM */ { NULL },
-             /* TEE */ { NULL },
-    };
-    MF_TOPOLOGY_TYPE u_type, d_type;
-    IMFTopologyNode *node;
-    TOPOID id;
-
-    /* Downstream node might have already been cloned. */
-    IMFTopologyNode_GetTopoNodeID(downstream_node, &id);
-    if (FAILED(IMFTopology_GetNodeByID(context->output_topology, id, &node)))
-        topology_loader_clone_node(context, downstream_node, &node, context->marker + 1);
-
-    IMFTopologyNode_ConnectOutput(upstream_node, output_index, node, input_index);
-
-    IMFTopologyNode_GetNodeType(upstream_node, &u_type);
-    IMFTopologyNode_GetNodeType(downstream_node, &d_type);
-
-    if (!connectors[u_type][d_type])
-    {
-        WARN("Unsupported branch kind %d -> %d.\n", u_type, d_type);
-        return E_FAIL;
-    }
-
-    return connectors[u_type][d_type](context, upstream_node, output_index, downstream_node, input_index);
-}
-
-static HRESULT topology_loader_resolve_nodes(struct topoloader_context *context, unsigned int *layer_size)
-{
-    IMFTopologyNode *downstream_node, *node, *orig_node;
-    unsigned int input_index, size = 0;
-    MF_TOPOLOGY_TYPE node_type;
-    HRESULT hr = S_OK;
-    TOPOID id;
-
-    while ((node = topology_loader_get_node_for_marker(context, &id)))
-    {
-        ++size;
-
-        IMFTopology_GetNodeByID(context->input_topology, id, &orig_node);
-
-        IMFTopologyNode_GetNodeType(node, &node_type);
-        switch (node_type)
-        {
-            case MF_TOPOLOGY_SOURCESTREAM_NODE:
-                if (FAILED(IMFTopologyNode_GetOutput(orig_node, 0, &downstream_node, &input_index)))
-                {
-                    IMFTopology_RemoveNode(context->output_topology, node);
-                    continue;
-                }
-
-                hr = topology_loader_resolve_branch(context, node, 0, downstream_node, input_index);
-                break;
-            case MF_TOPOLOGY_TRANSFORM_NODE:
-            case MF_TOPOLOGY_TEE_NODE:
-                FIXME("Unsupported node type %d.\n", node_type);
-                break;
-            default:
-                WARN("Unexpected node type %d.\n", node_type);
-        }
-
-        IMFTopologyNode_DeleteItem(node, &context->key);
-
-        if (FAILED(hr))
-            break;
-    }
-
-    *layer_size = size;
-
-    return hr;
-}
-
 static HRESULT WINAPI topology_loader_Load(IMFTopoLoader *iface, IMFTopology *input_topology,
         IMFTopology **ret_topology, IMFTopology *current_topology)
 {
     struct topoloader_context context = { 0 };
     IMFTopology *output_topology;
     MF_TOPOLOGY_TYPE node_type;
-    unsigned int layer_size;
     IMFTopologyNode *node;
     unsigned short i = 0;
     IMFStreamSink *sink;
@@ -2136,7 +2016,6 @@ static HRESULT WINAPI topology_loader_Load(IMFTopoLoader *iface, IMFTopology *in
     if (FAILED(hr = MFCreateTopology(&output_topology)))
         return hr;
 
-    context.input_topology = input_topology;
     context.output_topology = output_topology;
     memset(&context.key, 0xff, sizeof(context.key));
 
@@ -2148,26 +2027,13 @@ static HRESULT WINAPI topology_loader_Load(IMFTopoLoader *iface, IMFTopology *in
 
         if (node_type == MF_TOPOLOGY_SOURCESTREAM_NODE)
         {
-            if (FAILED(hr = topology_loader_clone_node(&context, node, NULL, 0)))
+            if (FAILED(hr = topology_loader_clone_node(&context, node, 0)))
                 WARN("Failed to clone source node, hr %#x.\n", hr);
         }
 
         IMFTopologyNode_Release(node);
     }
 
-    for (context.marker = 0;; ++context.marker)
-    {
-        if (FAILED(hr = topology_loader_resolve_nodes(&context, &layer_size)))
-        {
-            WARN("Failed to resolve for marker %u, hr %#x.\n", context.marker, hr);
-            break;
-        }
-
-        /* Reached last marker value. */
-        if (!layer_size)
-            break;
-    }
-
     /* For now return original topology. */
 
     *ret_topology = output_topology;
-- 
2.26.2

From 0f71d1c1d2f83c106c47238abfca031a87ba9ed5 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 11 Aug 2020 15:59:04 -0500
Subject: [PATCH 48/57] Revert "mf/topoloader: Clone source nodes as a first
 layer of resulting topology."

This reverts commit 16d44b61d15193905ef40661bc1547cb45e7b019.
---
 dlls/mf/topology.c | 61 +++-------------------------------------------
 1 file changed, 4 insertions(+), 57 deletions(-)

diff --git a/dlls/mf/topology.c b/dlls/mf/topology.c
index 840f1bd25f4..8522f569691 100644
--- a/dlls/mf/topology.c
+++ b/dlls/mf/topology.c
@@ -1933,40 +1933,9 @@ static ULONG WINAPI topology_loader_Release(IMFTopoLoader *iface)
     return refcount;
 }
 
-struct topoloader_context
-{
-    IMFTopology *output_topology;
-    GUID key;
-};
-
-static HRESULT topology_loader_clone_node(struct topoloader_context *context, IMFTopologyNode *node,
-        unsigned int marker)
-{
-    IMFTopologyNode *cloned_node;
-    MF_TOPOLOGY_TYPE node_type;
-    HRESULT hr;
-
-    IMFTopologyNode_GetNodeType(node, &node_type);
-
-    if (FAILED(hr = MFCreateTopologyNode(node_type, &cloned_node)))
-        return hr;
-
-    if (SUCCEEDED(hr = IMFTopologyNode_CloneFrom(cloned_node, node)))
-        hr = IMFTopologyNode_SetUINT32(cloned_node, &context->key, marker);
-
-    if (SUCCEEDED(hr))
-        hr = IMFTopology_AddNode(context->output_topology, cloned_node);
-
-    IMFTopologyNode_Release(cloned_node);
-
-    return hr;
-}
-
 static HRESULT WINAPI topology_loader_Load(IMFTopoLoader *iface, IMFTopology *input_topology,
-        IMFTopology **ret_topology, IMFTopology *current_topology)
+        IMFTopology **output_topology, IMFTopology *current_topology)
 {
-    struct topoloader_context context = { 0 };
-    IMFTopology *output_topology;
     MF_TOPOLOGY_TYPE node_type;
     IMFTopologyNode *node;
     unsigned short i = 0;
@@ -1974,7 +1943,7 @@ static HRESULT WINAPI topology_loader_Load(IMFTopoLoader *iface, IMFTopology *in
     IUnknown *object;
     HRESULT hr = E_FAIL;
 
-    FIXME("%p, %p, %p, %p.\n", iface, input_topology, ret_topology, current_topology);
+    FIXME("%p, %p, %p, %p.\n", iface, input_topology, output_topology, current_topology);
 
     if (current_topology)
         FIXME("Current topology instance is ignored.\n");
@@ -2013,32 +1982,10 @@ static HRESULT WINAPI topology_loader_Load(IMFTopoLoader *iface, IMFTopology *in
             return hr;
     }
 
-    if (FAILED(hr = MFCreateTopology(&output_topology)))
+    if (FAILED(hr = MFCreateTopology(output_topology)))
         return hr;
 
-    context.output_topology = output_topology;
-    memset(&context.key, 0xff, sizeof(context.key));
-
-    /* Clone source nodes, use initial marker value. */
-    i = 0;
-    while (SUCCEEDED(IMFTopology_GetNode(input_topology, i++, &node)))
-    {
-        IMFTopologyNode_GetNodeType(node, &node_type);
-
-        if (node_type == MF_TOPOLOGY_SOURCESTREAM_NODE)
-        {
-            if (FAILED(hr = topology_loader_clone_node(&context, node, 0)))
-                WARN("Failed to clone source node, hr %#x.\n", hr);
-        }
-
-        IMFTopologyNode_Release(node);
-    }
-
-    /* For now return original topology. */
-
-    *ret_topology = output_topology;
-
-    return IMFTopology_CloneFrom(output_topology, input_topology);
+    return IMFTopology_CloneFrom(*output_topology, input_topology);
 }
 
 static const IMFTopoLoaderVtbl topologyloadervtbl =
-- 
2.26.2

From b98ec8f3893db87d0447cee393046724d50e6095 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 11 Aug 2020 15:59:13 -0500
Subject: [PATCH 49/57] Revert "mf/topoloader: Switch to public interface for
 initial topology validation."

This reverts commit 8e343024b577892bd4908304ded34b758579698d.
---
 dlls/mf/topology.c | 36 ++++++++++++------------------------
 1 file changed, 12 insertions(+), 24 deletions(-)

diff --git a/dlls/mf/topology.c b/dlls/mf/topology.c
index 8522f569691..abe66c45fd4 100644
--- a/dlls/mf/topology.c
+++ b/dlls/mf/topology.c
@@ -1936,50 +1936,38 @@ static ULONG WINAPI topology_loader_Release(IMFTopoLoader *iface)
 static HRESULT WINAPI topology_loader_Load(IMFTopoLoader *iface, IMFTopology *input_topology,
         IMFTopology **output_topology, IMFTopology *current_topology)
 {
-    MF_TOPOLOGY_TYPE node_type;
-    IMFTopologyNode *node;
-    unsigned short i = 0;
+    struct topology *topology = unsafe_impl_from_IMFTopology(input_topology);
     IMFStreamSink *sink;
-    IUnknown *object;
-    HRESULT hr = E_FAIL;
+    HRESULT hr;
+    size_t i;
 
     FIXME("%p, %p, %p, %p.\n", iface, input_topology, output_topology, current_topology);
 
     if (current_topology)
         FIXME("Current topology instance is ignored.\n");
 
-    /* Basic sanity checks for input topology:
-
-       - source nodes must have stream descriptor set;
-       - sink nodes must be resolved to stream sink objects;
-    */
-    while (SUCCEEDED(IMFTopology_GetNode(input_topology, i++, &node)))
+    for (i = 0; i < topology->nodes.count; ++i)
     {
-        IMFTopologyNode_GetNodeType(node, &node_type);
+        struct topology_node *node = topology->nodes.nodes[i];
 
-        switch (node_type)
+        switch (node->node_type)
         {
             case MF_TOPOLOGY_OUTPUT_NODE:
-                if (SUCCEEDED(hr = IMFTopologyNode_GetObject(node, &object)))
+                if (node->object)
                 {
                     /* Sinks must be bound beforehand. */
-                    if (FAILED(IUnknown_QueryInterface(object, &IID_IMFStreamSink, (void **)&sink)))
-                        hr = MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED;
-                    else if (sink)
-                        IMFStreamSink_Release(sink);
-                    IUnknown_Release(object);
+                    if (FAILED(IUnknown_QueryInterface(node->object, &IID_IMFStreamSink, (void **)&sink)))
+                        return MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED;
+                    IMFStreamSink_Release(sink);
                 }
                 break;
             case MF_TOPOLOGY_SOURCESTREAM_NODE:
-                hr = IMFTopologyNode_GetItem(node, &MF_TOPONODE_STREAM_DESCRIPTOR, NULL);
+                if (FAILED(hr = IMFAttributes_GetItem(node->attributes, &MF_TOPONODE_STREAM_DESCRIPTOR, NULL)))
+                    return hr;
                 break;
             default:
                 ;
         }
-
-        IMFTopologyNode_Release(node);
-        if (FAILED(hr))
-            return hr;
     }
 
     if (FAILED(hr = MFCreateTopology(output_topology)))
-- 
2.26.2

From 5b70027166ade658adc0663c9e0e298c42863fb1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Sergio=20G=C3=B3mez=20Del=20Real?=
 <sdelreal@codeweavers.com>
Date: Wed, 1 Apr 2020 16:11:07 -0500
Subject: [PATCH 50/57] mf: Partially implement the topology loader.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Sergio Gómez Del Real <sdelreal@codeweavers.com>
---
 dlls/mf/tests/mf.c |   3 -
 dlls/mf/topology.c | 337 ++++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 321 insertions(+), 19 deletions(-)

diff --git a/dlls/mf/tests/mf.c b/dlls/mf/tests/mf.c
index 809209eef72..24d4140230b 100644
--- a/dlls/mf/tests/mf.c
+++ b/dlls/mf/tests/mf.c
@@ -1428,7 +1428,6 @@ static void test_topology_loader(void)
 
     /* Empty topology */
     hr = IMFTopoLoader_Load(loader, topology, &full_topology, NULL);
-todo_wine
     ok(hr == MF_E_TOPO_UNSUPPORTED, "Unexpected hr %#x.\n", hr);
 
     hr = MFCreateSourceResolver(&resolver);
@@ -1475,7 +1474,6 @@ todo_wine
 
     /* Source node only. */
     hr = IMFTopoLoader_Load(loader, topology, &full_topology, NULL);
-todo_wine
     ok(hr == MF_E_TOPO_UNSUPPORTED, "Unexpected hr %#x.\n", hr);
 
     /* Add grabber sink. */
@@ -1501,7 +1499,6 @@ todo_wine
     ok(hr == S_OK, "Failed to add sink node, hr %#x.\n", hr);
 
     hr = IMFTopoLoader_Load(loader, topology, &full_topology, NULL);
-todo_wine
     ok(hr == MF_E_TOPO_UNSUPPORTED, "Unexpected hr %#x.\n", hr);
 
     hr = IMFTopologyNode_ConnectOutput(src_node, 0, sink_node, 0);
diff --git a/dlls/mf/topology.c b/dlls/mf/topology.c
index abe66c45fd4..d4a59f7136e 100644
--- a/dlls/mf/topology.c
+++ b/dlls/mf/topology.c
@@ -1933,47 +1933,352 @@ static ULONG WINAPI topology_loader_Release(IMFTopoLoader *iface)
     return refcount;
 }
 
+static void topology_loader_add_branch(struct topology *topology, IMFTopologyNode *first, IMFTopologyNode *last)
+{
+    IMFTopology *full_topo = &topology->IMFTopology_iface;
+    IMFTopologyNode *in, *out;
+    DWORD index;
+
+    in = first;
+    IMFTopology_AddNode(full_topo, in);
+    while (SUCCEEDED(IMFTopologyNode_GetOutput(in, 0, &out, &index)))
+    {
+        IMFTopology_AddNode(full_topo, out);
+        in = out;
+    }
+}
+
+static HRESULT topology_loader_resolve_branch(IMFTopologyNode *src, IMFMediaType *mediatype, IMFTopologyNode *sink, MF_CONNECT_METHOD method)
+{
+    IMFStreamSink *streamsink;
+    IMFMediaTypeHandler *mth;
+    HRESULT hr;
+
+    IMFTopologyNode_GetObject(sink, (IUnknown **)&streamsink);
+    IMFStreamSink_GetMediaTypeHandler(streamsink, &mth);
+    if (method == MF_CONNECT_DIRECT)
+    {
+        if (FAILED(hr = IMFMediaTypeHandler_SetCurrentMediaType(mth, mediatype)))
+            return hr;
+        hr = IMFTopologyNode_ConnectOutput(src, 0, sink, 0);
+        return hr;
+    }
+    else
+    {
+        IMFTopologyNode *node_dec, *node_conv;
+        GUID major_type, subtype, mft_category;
+        MFT_REGISTER_TYPE_INFO mft_typeinfo;
+        UINT32 flags = MFT_ENUM_FLAG_ALL;
+        IMFActivate **activates_decs;
+        UINT32 num_activates_decs;
+        int i, j;
+
+        IMFMediaType_GetGUID(mediatype, &MF_MT_MAJOR_TYPE, &major_type);
+        if (IsEqualGUID(&major_type, &MFMediaType_Audio))
+            mft_category = MFT_CATEGORY_AUDIO_DECODER;
+        else if (IsEqualGUID(&major_type, &MFMediaType_Video))
+            mft_category = MFT_CATEGORY_VIDEO_DECODER;
+        else
+            return MF_E_INVALIDMEDIATYPE;
+
+        IMFMediaType_GetGUID(mediatype, &MF_MT_SUBTYPE, &subtype);
+        mft_typeinfo.guidMajorType = major_type;
+        mft_typeinfo.guidSubtype = subtype;
+        MFTEnumEx(mft_category, flags, &mft_typeinfo, NULL, &activates_decs, &num_activates_decs);
+
+        /* for getting converters later on */
+        if (IsEqualGUID(&major_type, &MFMediaType_Audio))
+            mft_category = MFT_CATEGORY_AUDIO_EFFECT;
+        else if (IsEqualGUID(&major_type, &MFMediaType_Video))
+            mft_category = MFT_CATEGORY_VIDEO_EFFECT;
+
+        /*
+         * Iterate over number of decoders.
+         * Try to set input type on decoder with source's output media type.
+         * If succeeds, iterate over decoder's output media types.
+         * Try to set input type on sink with decoder's output media type.
+         * If fails, iterate over number of converters.
+         * Try to set input type on converter with decoder's output media type.
+         * If succeeds, iterate over converters output media types.
+         * Try to set input type on sink with converter's output media type.
+         */
+        for (i = 0; i < num_activates_decs; i++)
+        {
+            IMFTransform *decoder;
+
+            IMFActivate_ActivateObject(activates_decs[i], &IID_IMFTransform, (void **)&decoder);
+            if (SUCCEEDED(hr = IMFTransform_SetInputType(decoder, 0, mediatype, 0)))
+            {
+                UINT32 num_activates_convs;
+                IMFActivate **activates_convs;
+                IMFMediaType *decoder_mtype;
+
+                int count = 0;
+                while (SUCCEEDED(IMFTransform_GetOutputAvailableType(decoder, 0, count++, &decoder_mtype)))
+                {
+                    IMFTransform *converter;
+
+                    /* succeeded with source -> decoder -> sink */
+                    if (SUCCEEDED(IMFMediaTypeHandler_SetCurrentMediaType(mth, decoder_mtype)))
+                    {
+                        MFCreateTopologyNode(MF_TOPOLOGY_TRANSFORM_NODE, &node_dec);
+                        IMFTopologyNode_SetObject(node_dec, (IUnknown *)decoder);
+                        IMFTopologyNode_ConnectOutput(src, 0, node_dec, 0);
+                        IMFTopologyNode_ConnectOutput(node_dec, 0, sink, 0);
+
+                        IMFActivate_ShutdownObject(activates_convs[i]);
+                        return S_OK;
+                    }
+
+                    IMFMediaType_GetGUID(decoder_mtype, &MF_MT_SUBTYPE, &subtype);
+                    mft_typeinfo.guidSubtype = subtype;
+                    MFTEnumEx(mft_category, flags, &mft_typeinfo, NULL, &activates_convs, &num_activates_convs);
+                    for (j = 0; j < num_activates_convs; j++)
+                    {
+                        IMFMediaType *converter_mtype;
+
+                        IMFActivate_ActivateObject(activates_convs[j], &IID_IMFTransform, (void **)&converter);
+                        if (SUCCEEDED(IMFTransform_SetInputType(converter, 0, decoder_mtype, 0)))
+                        {
+                            int count = 0;
+                            while (SUCCEEDED(IMFTransform_GetOutputAvailableType(converter, 0, count++, &converter_mtype)))
+                            {
+                                /* succeeded with source -> decoder -> converter -> sink */
+                                if (SUCCEEDED(IMFMediaTypeHandler_SetCurrentMediaType(mth, converter_mtype)))
+                                {
+                                    MFCreateTopologyNode(MF_TOPOLOGY_TRANSFORM_NODE, &node_dec);
+                                    IMFTopologyNode_SetObject(node_dec, (IUnknown *)decoder);
+                                    MFCreateTopologyNode(MF_TOPOLOGY_TRANSFORM_NODE, &node_conv);
+                                    IMFTopologyNode_SetObject(node_conv, (IUnknown *)converter);
+                                    IMFTopologyNode_ConnectOutput(src, 0, node_dec, 0);
+                                    IMFTopologyNode_ConnectOutput(node_dec, 0, node_conv, 0);
+                                    IMFTopologyNode_ConnectOutput(node_conv, 0, sink, 0);
+
+                                    IMFActivate_ShutdownObject(activates_convs[j]);
+                                    IMFActivate_ShutdownObject(activates_decs[i]);
+                                    return S_OK;
+                                }
+                            }
+                        }
+                        IMFActivate_ShutdownObject(activates_convs[j]);
+                    }
+                }
+            }
+            IMFActivate_ShutdownObject(activates_decs[i]);
+        }
+    }
+    return E_FAIL;
+}
+
+static HRESULT topology_loader_resolve_partial_topology(struct topology_node *src, struct topology_node *sink, struct topology *topology, struct topology **full_topology)
+{
+    IMFMediaTypeHandler *mth_src, *mth_sink;
+    IMFTopologyNode *clone_src, *clone_sink;
+    UINT32 method, enum_src_types, streamid;
+    IMFMediaType **src_mediatypes;
+    IMFStreamDescriptor *desc;
+    IMFAttributes *attrs_src;
+    IMFStreamSink *strm_sink;
+    IMFMediaType *mtype_src;
+    DWORD num_media_types;
+    HRESULT hr;
+    int i;
+
+    attrs_src = src->attributes;
+    if (FAILED(hr = IMFAttributes_GetUnknown(attrs_src, &MF_TOPONODE_STREAM_DESCRIPTOR, &IID_IMFStreamDescriptor, (void **)&desc)))
+        return hr;
+    strm_sink = (IMFStreamSink *)sink->object;
+
+    if (FAILED(hr = IMFStreamDescriptor_GetMediaTypeHandler(desc, &mth_src)))
+    {
+        IMFStreamDescriptor_Release(desc);
+        return hr;
+    }
+    if (FAILED(hr = IMFStreamSink_GetMediaTypeHandler(strm_sink, &mth_sink)))
+    {
+        IMFStreamDescriptor_Release(desc);
+        IMFMediaTypeHandler_Release(mth_src);
+        return hr;
+    }
+
+    hr = IMFTopology_GetUINT32(&topology->IMFTopology_iface, &MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES, &enum_src_types);
+
+    mtype_src = NULL;
+    if (FAILED(hr) || !enum_src_types)
+    {
+        num_media_types = 1;
+        enum_src_types = 0;
+        if (FAILED(hr = IMFMediaTypeHandler_GetCurrentMediaType(mth_src, &mtype_src)))
+            if (FAILED(hr = IMFMediaTypeHandler_GetMediaTypeByIndex(mth_src, 0, &mtype_src)))
+            {
+                IMFMediaTypeHandler_Release(mth_src);
+                IMFMediaTypeHandler_Release(mth_sink);
+                IMFStreamDescriptor_Release(desc);
+                return hr;
+            }
+    }
+    else
+        IMFMediaTypeHandler_GetMediaTypeCount(mth_src, &num_media_types);
+
+    src_mediatypes = heap_alloc(sizeof(IMFMediaType *) * num_media_types);
+
+    if (mtype_src)
+        src_mediatypes[0] = mtype_src;
+    else
+        for (i = 0; i < num_media_types; i++)
+            IMFMediaTypeHandler_GetMediaTypeByIndex(mth_src, i, &src_mediatypes[i]);
+
+
+    MFCreateTopologyNode(MF_TOPOLOGY_SOURCESTREAM_NODE, &clone_src);
+    MFCreateTopologyNode(MF_TOPOLOGY_OUTPUT_NODE, &clone_sink);
+    IMFTopologyNode_CloneFrom(clone_src, &src->IMFTopologyNode_iface);
+    IMFTopologyNode_CloneFrom(clone_sink, &sink->IMFTopologyNode_iface);
+
+    if (FAILED(IMFTopologyNode_GetUINT32(clone_sink, &MF_TOPONODE_STREAMID, &streamid)))
+        IMFTopologyNode_SetUINT32(clone_sink, &MF_TOPONODE_STREAMID, 0);
+
+    if (enum_src_types)
+    {
+        hr = IMFAttributes_GetUINT32(attrs_src, &MF_TOPONODE_CONNECT_METHOD, &method);
+        if (hr == S_OK && method != MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES)
+        {
+            for (method = MF_CONNECT_DIRECT; method < MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES; method++)
+                for (i = 0; i < num_media_types; i++)
+                    if (SUCCEEDED(topology_loader_resolve_branch(clone_src, src_mediatypes[i], clone_sink, method)))
+                    {
+                        topology_loader_add_branch(*full_topology, clone_src, clone_sink);
+                        heap_free(src_mediatypes);
+                        return S_OK;
+                    }
+        }
+        else
+        {
+            for (i = 0; i < num_media_types; i++)
+                for (method = MF_CONNECT_DIRECT; method < MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES; method++)
+                    if (SUCCEEDED(topology_loader_resolve_branch(clone_src, src_mediatypes[i], clone_sink, method)))
+                    {
+                        topology_loader_add_branch(*full_topology, clone_src, clone_sink);
+                        heap_free(src_mediatypes);
+                        return S_OK;
+                    }
+        }
+    }
+    else
+    {
+        if (SUCCEEDED(topology_loader_resolve_branch(clone_src, src_mediatypes[0], clone_sink, MF_CONNECT_DIRECT)))
+        {
+            topology_loader_add_branch(*full_topology, clone_src, clone_sink);
+            heap_free(src_mediatypes);
+            return S_OK;
+        }
+    }
+
+    heap_free(src_mediatypes);
+    return MF_E_TOPO_UNSUPPORTED;
+}
+
 static HRESULT WINAPI topology_loader_Load(IMFTopoLoader *iface, IMFTopology *input_topology,
         IMFTopology **output_topology, IMFTopology *current_topology)
 {
     struct topology *topology = unsafe_impl_from_IMFTopology(input_topology);
+    struct topology_node *(*node_pairs)[2];
+    int num_connections;
     IMFStreamSink *sink;
     HRESULT hr;
-    size_t i;
+    int i, idx;
 
     FIXME("%p, %p, %p, %p.\n", iface, input_topology, output_topology, current_topology);
 
     if (current_topology)
         FIXME("Current topology instance is ignored.\n");
 
+    if (!topology || topology->nodes.count < 2)
+        return MF_E_TOPO_UNSUPPORTED;
+
+    num_connections = 0;
+    for (i = 0; i < topology->nodes.count; i++)
+    {
+        struct topology_node *node = topology->nodes.nodes[i];
+
+        if (node->node_type == MF_TOPOLOGY_SOURCESTREAM_NODE)
+        {
+            if (node->outputs.count && node->outputs.streams->connection)
+                num_connections++;
+        }
+    }
+
+    if (!num_connections)
+        return MF_E_TOPO_UNSUPPORTED;
+
+    node_pairs = heap_alloc_zero(sizeof(struct topology_node *[2]) * num_connections);
+
+    idx = 0;
     for (i = 0; i < topology->nodes.count; ++i)
     {
         struct topology_node *node = topology->nodes.nodes[i];
 
-        switch (node->node_type)
+        if (node->node_type == MF_TOPOLOGY_SOURCESTREAM_NODE)
         {
-            case MF_TOPOLOGY_OUTPUT_NODE:
-                if (node->object)
+            if (node->outputs.count && node->outputs.streams->connection)
+            {
+                node_pairs[idx][0] = node;
+                if (node->outputs.streams->connection->node_type == MF_TOPOLOGY_TRANSFORM_NODE)
                 {
-                    /* Sinks must be bound beforehand. */
-                    if (FAILED(IUnknown_QueryInterface(node->object, &IID_IMFStreamSink, (void **)&sink)))
-                        return MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED;
-                    IMFStreamSink_Release(sink);
+                    struct topology_node *sink = node->outputs.streams->connection;
+
+                    while (sink && sink->node_type != MF_TOPOLOGY_OUTPUT_NODE && sink->outputs.count)
+                        sink = sink->outputs.streams->connection;
+                    if (!sink || !sink->outputs.count)
+                    {
+                        FIXME("Check for MF_CONNECT_AS_OPTIONAL and MF_CONNECT_AS_OPTIONAL_BRANCH flags.\n");
+                        heap_free(node_pairs);
+                        return MF_E_TOPO_UNSUPPORTED;
+                    }
+                    node_pairs[idx][1] = sink;
                 }
-                break;
-            case MF_TOPOLOGY_SOURCESTREAM_NODE:
-                if (FAILED(hr = IMFAttributes_GetItem(node->attributes, &MF_TOPONODE_STREAM_DESCRIPTOR, NULL)))
-                    return hr;
-                break;
-            default:
-                ;
+                else if (node->outputs.streams->connection->node_type == MF_TOPOLOGY_OUTPUT_NODE)
+                    node_pairs[idx][1] = node->outputs.streams->connection;
+                else {
+                    FIXME("Tee nodes currently unhandled.\n");
+                    heap_free(node_pairs);
+                    return MF_E_TOPO_UNSUPPORTED;
+                }
+                idx++;
+            }
         }
     }
 
+    /* all sinks must be activated */
+    for (i = 0; i < num_connections; i++)
+    {
+        if (FAILED(IUnknown_QueryInterface(node_pairs[i][1]->object, &IID_IMFStreamSink, (void **)&sink)))
+        {
+            FIXME("Check for MF_CONNECT_AS_OPTIONAL and MF_CONNECT_AS_OPTIONAL_BRANCH flags.\n");
+            heap_free(node_pairs);
+            return MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED;
+        }
+        IMFStreamSink_Release(sink);
+    }
+
     if (FAILED(hr = MFCreateTopology(output_topology)))
         return hr;
 
-    return IMFTopology_CloneFrom(*output_topology, input_topology);
+    /* resolve each branch */
+    for (i = 0; i < num_connections; i++)
+    {
+        struct topology_node *src = node_pairs[i][0];
+        struct topology_node *sink = node_pairs[i][1];
+        struct topology *full_topology = unsafe_impl_from_IMFTopology(*output_topology);
+
+        if (FAILED(hr = topology_loader_resolve_partial_topology(src, sink, topology, &full_topology)))
+        {
+            heap_free(node_pairs);
+            return hr;
+        }
+    }
+
+    heap_free(node_pairs);
+    return S_OK;
 }
 
 static const IMFTopoLoaderVtbl topologyloadervtbl =
-- 
2.26.2

From 6ee9420f664a124ad8cb96f85133289ba635e516 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Thu, 2 Apr 2020 15:43:52 -0500
Subject: [PATCH 51/57] mf: Miscelaneous fixes to topology resolution.

---
 dlls/mf/topology.c | 16 +++++++++-------
 1 file changed, 9 insertions(+), 7 deletions(-)

diff --git a/dlls/mf/topology.c b/dlls/mf/topology.c
index d4a59f7136e..2e849204343 100644
--- a/dlls/mf/topology.c
+++ b/dlls/mf/topology.c
@@ -2026,7 +2026,7 @@ static HRESULT topology_loader_resolve_branch(IMFTopologyNode *src, IMFMediaType
                         IMFTopologyNode_ConnectOutput(src, 0, node_dec, 0);
                         IMFTopologyNode_ConnectOutput(node_dec, 0, sink, 0);
 
-                        IMFActivate_ShutdownObject(activates_convs[i]);
+                        IMFActivate_ShutdownObject(activates_decs[i]);
                         return S_OK;
                     }
 
@@ -2165,12 +2165,14 @@ static HRESULT topology_loader_resolve_partial_topology(struct topology_node *sr
     }
     else
     {
-        if (SUCCEEDED(topology_loader_resolve_branch(clone_src, src_mediatypes[0], clone_sink, MF_CONNECT_DIRECT)))
-        {
-            topology_loader_add_branch(*full_topology, clone_src, clone_sink);
-            heap_free(src_mediatypes);
-            return S_OK;
-        }
+        for (method = MF_CONNECT_DIRECT; method < MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES; method++)
+            if (SUCCEEDED(topology_loader_resolve_branch(clone_src, src_mediatypes[0], clone_sink, method)))
+            {
+                TRACE("Successfully connected nodes with method %u\n", method);
+                topology_loader_add_branch(*full_topology, clone_src, clone_sink);
+                heap_free(src_mediatypes);
+                return S_OK;
+            }
     }
 
     heap_free(src_mediatypes);
-- 
2.26.2

From b092f2d0086661a511f7e5bf78a8dfe909eb977a Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Thu, 2 Apr 2020 15:45:52 -0500
Subject: [PATCH 52/57] Rewrite branch resolver.

and a HACK: Set output type of found decoder, this should probably happen somewhere else.
---
 dlls/mf/topology.c | 280 ++++++++++++++++++++++++++++-----------------
 1 file changed, 173 insertions(+), 107 deletions(-)

diff --git a/dlls/mf/topology.c b/dlls/mf/topology.c
index 2e849204343..91d29782582 100644
--- a/dlls/mf/topology.c
+++ b/dlls/mf/topology.c
@@ -1948,135 +1948,196 @@ static void topology_loader_add_branch(struct topology *topology, IMFTopologyNod
     }
 }
 
+struct available_output_type
+{
+    IMFMediaType *type;
+    IMFTransform *transform;
+};
+
+static HRESULT topology_loader_enumerate_output_types(GUID *category, IMFMediaType *input_type, HRESULT (*new_type)(struct available_output_type *, void *), void *context)
+{
+    MFT_REGISTER_TYPE_INFO mft_typeinfo;
+    GUID major_type, subtype;
+    IMFActivate **activates;
+    UINT32 num_activates;
+    HRESULT hr;
+
+    if (FAILED(hr = IMFMediaType_GetMajorType(input_type, &major_type)))
+        return hr;
+
+    if (FAILED(hr = IMFMediaType_GetGUID(input_type, &MF_MT_SUBTYPE, &subtype)))
+        return hr;
+
+    mft_typeinfo.guidMajorType = major_type;
+    mft_typeinfo.guidSubtype = subtype;
+
+    if (FAILED(hr = MFTEnumEx(*category, MFT_ENUM_FLAG_ALL, &mft_typeinfo, NULL, &activates, &num_activates)))
+        return hr;
+
+    hr = E_FAIL;
+
+    for (unsigned int i = 0; i < num_activates; i++)
+    {
+        IMFTransform *mft;
+
+        IMFActivate_ActivateObject(activates[i], &IID_IMFTransform, (void**) &mft);
+
+        if (SUCCEEDED(hr = IMFTransform_SetInputType(mft, 0, input_type, 0)))
+        {
+            struct available_output_type avail = {.transform = mft};
+            unsigned int output_count = 0;
+
+            while (SUCCEEDED(IMFTransform_GetOutputAvailableType(mft, 0, output_count++, &avail.type)))
+            {
+                if (SUCCEEDED(hr = new_type(&avail, context)))
+                {
+                    IMFActivate_ShutdownObject(activates[i]);
+                    return hr;
+                }
+            }
+        }
+
+        IMFActivate_ShutdownObject(activates[i]);
+    }
+
+    return hr;
+}
+
+struct connect_to_sink_context
+{
+    IMFTopologyNode *src, *sink;
+    IMFMediaTypeHandler *sink_mth;
+};
+
+HRESULT connect_to_sink(struct available_output_type *type, void *context)
+{
+    IMFTopologyNode *node;
+    struct connect_to_sink_context *ctx = context;
+
+    if (SUCCEEDED(IMFMediaTypeHandler_IsMediaTypeSupported(ctx->sink_mth, type->type, NULL)))
+    {
+        MFCreateTopologyNode(MF_TOPOLOGY_TRANSFORM_NODE, &node);
+        IMFTopologyNode_SetObject(node, (IUnknown *) type->transform);
+        IMFTopologyNode_ConnectOutput(ctx->src, 0, node, 0);
+        IMFTopologyNode_ConnectOutput(node, 0, ctx->sink, 0);
+
+        IMFMediaTypeHandler_SetCurrentMediaType(ctx->sink_mth, type->type);
+        IMFTransform_SetOutputType(type->transform, 0, type->type, 0);
+
+        return S_OK;
+    }
+    return E_FAIL;
+}
+
+struct connect_to_converter_context
+{
+    struct connect_to_sink_context sink_ctx;
+    GUID *converter_category;
+};
+
+HRESULT connect_to_converter(struct available_output_type *type, void *context)
+{
+    struct connect_to_converter_context *ctx = context;
+    struct connect_to_sink_context sink_ctx;
+    IMFTopologyNode *node;
+
+    MFCreateTopologyNode(MF_TOPOLOGY_TRANSFORM_NODE, &node);
+    IMFTopologyNode_SetObject(node, (IUnknown *) type->transform);
+
+    sink_ctx = ctx->sink_ctx;
+    sink_ctx.src = node;
+    if (SUCCEEDED(topology_loader_enumerate_output_types(ctx->converter_category, type->type, connect_to_sink, &sink_ctx)))
+    {
+        IMFTopologyNode_ConnectOutput(ctx->sink_ctx.src, 0, node, 0);
+
+        IMFTransform_SetOutputType(type->transform, 0, type->type, 0);
+
+        return S_OK;
+    }
+    IMFTopologyNode_Release(node);
+    return E_FAIL;
+}
+
 static HRESULT topology_loader_resolve_branch(IMFTopologyNode *src, IMFMediaType *mediatype, IMFTopologyNode *sink, MF_CONNECT_METHOD method)
 {
+    struct connect_to_converter_context convert_ctx;
+    struct connect_to_sink_context sink_ctx;
+    GUID major_type, decode_cat, convert_cat;
     IMFStreamSink *streamsink;
     IMFMediaTypeHandler *mth;
     HRESULT hr;
 
+    TRACE("method %u\n", method);
+
     IMFTopologyNode_GetObject(sink, (IUnknown **)&streamsink);
     IMFStreamSink_GetMediaTypeHandler(streamsink, &mth);
-    if (method == MF_CONNECT_DIRECT)
+
+    if (SUCCEEDED(hr = IMFMediaTypeHandler_IsMediaTypeSupported(mth, mediatype, NULL)))
     {
-        if (FAILED(hr = IMFMediaTypeHandler_SetCurrentMediaType(mth, mediatype)))
-            return hr;
-        hr = IMFTopologyNode_ConnectOutput(src, 0, sink, 0);
+        IMFMediaTypeHandler_SetCurrentMediaType(mth, mediatype);
+        return IMFTopologyNode_ConnectOutput(src, 0, sink, 0);
+    }
+
+    if (FAILED(hr = IMFMediaType_GetMajorType(mediatype, &major_type)))
         return hr;
+
+    if (IsEqualGUID(&major_type, &MFMediaType_Audio))
+    {
+        decode_cat = MFT_CATEGORY_AUDIO_DECODER;
+        convert_cat = MFT_CATEGORY_AUDIO_EFFECT;
     }
-    else
+    else if (IsEqualGUID(&major_type, &MFMediaType_Video))
     {
-        IMFTopologyNode *node_dec, *node_conv;
-        GUID major_type, subtype, mft_category;
-        MFT_REGISTER_TYPE_INFO mft_typeinfo;
-        UINT32 flags = MFT_ENUM_FLAG_ALL;
-        IMFActivate **activates_decs;
-        UINT32 num_activates_decs;
-        int i, j;
-
-        IMFMediaType_GetGUID(mediatype, &MF_MT_MAJOR_TYPE, &major_type);
-        if (IsEqualGUID(&major_type, &MFMediaType_Audio))
-            mft_category = MFT_CATEGORY_AUDIO_DECODER;
-        else if (IsEqualGUID(&major_type, &MFMediaType_Video))
-            mft_category = MFT_CATEGORY_VIDEO_DECODER;
-        else
-            return MF_E_INVALIDMEDIATYPE;
-
-        IMFMediaType_GetGUID(mediatype, &MF_MT_SUBTYPE, &subtype);
-        mft_typeinfo.guidMajorType = major_type;
-        mft_typeinfo.guidSubtype = subtype;
-        MFTEnumEx(mft_category, flags, &mft_typeinfo, NULL, &activates_decs, &num_activates_decs);
-
-        /* for getting converters later on */
-        if (IsEqualGUID(&major_type, &MFMediaType_Audio))
-            mft_category = MFT_CATEGORY_AUDIO_EFFECT;
-        else if (IsEqualGUID(&major_type, &MFMediaType_Video))
-            mft_category = MFT_CATEGORY_VIDEO_EFFECT;
-
-        /*
-         * Iterate over number of decoders.
-         * Try to set input type on decoder with source's output media type.
-         * If succeeds, iterate over decoder's output media types.
-         * Try to set input type on sink with decoder's output media type.
-         * If fails, iterate over number of converters.
-         * Try to set input type on converter with decoder's output media type.
-         * If succeeds, iterate over converters output media types.
-         * Try to set input type on sink with converter's output media type.
-         */
-        for (i = 0; i < num_activates_decs; i++)
-        {
-            IMFTransform *decoder;
+        decode_cat = MFT_CATEGORY_VIDEO_DECODER;
+        convert_cat = MFT_CATEGORY_VIDEO_EFFECT;
+    }
+    else
+        return E_FAIL;
 
-            IMFActivate_ActivateObject(activates_decs[i], &IID_IMFTransform, (void **)&decoder);
-            if (SUCCEEDED(hr = IMFTransform_SetInputType(decoder, 0, mediatype, 0)))
-            {
-                UINT32 num_activates_convs;
-                IMFActivate **activates_convs;
-                IMFMediaType *decoder_mtype;
+    sink_ctx.src = src;
+    sink_ctx.sink = sink;
+    sink_ctx.sink_mth = mth;
 
-                int count = 0;
-                while (SUCCEEDED(IMFTransform_GetOutputAvailableType(decoder, 0, count++, &decoder_mtype)))
-                {
-                    IMFTransform *converter;
+    convert_ctx.sink_ctx = sink_ctx;
+    convert_ctx.converter_category = &convert_cat;
 
-                    /* succeeded with source -> decoder -> sink */
-                    if (SUCCEEDED(IMFMediaTypeHandler_SetCurrentMediaType(mth, decoder_mtype)))
-                    {
-                        MFCreateTopologyNode(MF_TOPOLOGY_TRANSFORM_NODE, &node_dec);
-                        IMFTopologyNode_SetObject(node_dec, (IUnknown *)decoder);
-                        IMFTopologyNode_ConnectOutput(src, 0, node_dec, 0);
-                        IMFTopologyNode_ConnectOutput(node_dec, 0, sink, 0);
+    hr = E_FAIL;
 
-                        IMFActivate_ShutdownObject(activates_decs[i]);
-                        return S_OK;
-                    }
+    if (method & MF_CONNECT_ALLOW_CONVERTER)
+    {
+        if (SUCCEEDED(hr = topology_loader_enumerate_output_types(&convert_cat, mediatype, connect_to_sink, &sink_ctx)))
+            goto done;
+    }
 
-                    IMFMediaType_GetGUID(decoder_mtype, &MF_MT_SUBTYPE, &subtype);
-                    mft_typeinfo.guidSubtype = subtype;
-                    MFTEnumEx(mft_category, flags, &mft_typeinfo, NULL, &activates_convs, &num_activates_convs);
-                    for (j = 0; j < num_activates_convs; j++)
-                    {
-                        IMFMediaType *converter_mtype;
-
-                        IMFActivate_ActivateObject(activates_convs[j], &IID_IMFTransform, (void **)&converter);
-                        if (SUCCEEDED(IMFTransform_SetInputType(converter, 0, decoder_mtype, 0)))
-                        {
-                            int count = 0;
-                            while (SUCCEEDED(IMFTransform_GetOutputAvailableType(converter, 0, count++, &converter_mtype)))
-                            {
-                                /* succeeded with source -> decoder -> converter -> sink */
-                                if (SUCCEEDED(IMFMediaTypeHandler_SetCurrentMediaType(mth, converter_mtype)))
-                                {
-                                    MFCreateTopologyNode(MF_TOPOLOGY_TRANSFORM_NODE, &node_dec);
-                                    IMFTopologyNode_SetObject(node_dec, (IUnknown *)decoder);
-                                    MFCreateTopologyNode(MF_TOPOLOGY_TRANSFORM_NODE, &node_conv);
-                                    IMFTopologyNode_SetObject(node_conv, (IUnknown *)converter);
-                                    IMFTopologyNode_ConnectOutput(src, 0, node_dec, 0);
-                                    IMFTopologyNode_ConnectOutput(node_dec, 0, node_conv, 0);
-                                    IMFTopologyNode_ConnectOutput(node_conv, 0, sink, 0);
-
-                                    IMFActivate_ShutdownObject(activates_convs[j]);
-                                    IMFActivate_ShutdownObject(activates_decs[i]);
-                                    return S_OK;
-                                }
-                            }
-                        }
-                        IMFActivate_ShutdownObject(activates_convs[j]);
-                    }
-                }
-            }
-            IMFActivate_ShutdownObject(activates_decs[i]);
+    /* 2 = decoder flag */
+    if (method & 2)
+    {
+        if (method & MF_CONNECT_ALLOW_CONVERTER)
+        {
+            if (SUCCEEDED(hr = topology_loader_enumerate_output_types(&decode_cat, mediatype, connect_to_converter, &convert_ctx)))
+                goto done;
+        }
+        else
+        {
+            if (SUCCEEDED(hr = topology_loader_enumerate_output_types(&decode_cat, mediatype, connect_to_sink, &sink_ctx)))
+                goto done;
         }
     }
-    return E_FAIL;
+
+    done:
+    IMFMediaTypeHandler_Release(mth);
+    IMFStreamSink_Release(streamsink);
+    return hr;
 }
 
 static HRESULT topology_loader_resolve_partial_topology(struct topology_node *src, struct topology_node *sink, struct topology *topology, struct topology **full_topology)
 {
+    UINT32 method, src_method, sink_method, enum_src_types, streamid;
     IMFMediaTypeHandler *mth_src, *mth_sink;
     IMFTopologyNode *clone_src, *clone_sink;
-    UINT32 method, enum_src_types, streamid;
     IMFMediaType **src_mediatypes;
     IMFStreamDescriptor *desc;
+    IMFAttributes *attrs_sink;
     IMFAttributes *attrs_src;
     IMFStreamSink *strm_sink;
     IMFMediaType *mtype_src;
@@ -2084,6 +2145,7 @@ static HRESULT topology_loader_resolve_partial_topology(struct topology_node *sr
     HRESULT hr;
     int i;
 
+    attrs_sink = sink->attributes;
     attrs_src = src->attributes;
     if (FAILED(hr = IMFAttributes_GetUnknown(attrs_src, &MF_TOPONODE_STREAM_DESCRIPTOR, &IID_IMFStreamDescriptor, (void **)&desc)))
         return hr;
@@ -2137,12 +2199,15 @@ static HRESULT topology_loader_resolve_partial_topology(struct topology_node *sr
     if (FAILED(IMFTopologyNode_GetUINT32(clone_sink, &MF_TOPONODE_STREAMID, &streamid)))
         IMFTopologyNode_SetUINT32(clone_sink, &MF_TOPONODE_STREAMID, 0);
 
+    if (FAILED(IMFAttributes_GetUINT32(attrs_sink, &MF_TOPONODE_CONNECT_METHOD, &sink_method)))
+        sink_method = MF_CONNECT_ALLOW_DECODER;
+
     if (enum_src_types)
     {
-        hr = IMFAttributes_GetUINT32(attrs_src, &MF_TOPONODE_CONNECT_METHOD, &method);
-        if (hr == S_OK && method != MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES)
+        hr = IMFAttributes_GetUINT32(attrs_src, &MF_TOPONODE_CONNECT_METHOD, &src_method);
+        if (hr == S_OK && src_method != MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES)
         {
-            for (method = MF_CONNECT_DIRECT; method < MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES; method++)
+            for (method = MF_CONNECT_DIRECT; method <= sink_method; method++)
                 for (i = 0; i < num_media_types; i++)
                     if (SUCCEEDED(topology_loader_resolve_branch(clone_src, src_mediatypes[i], clone_sink, method)))
                     {
@@ -2154,7 +2219,7 @@ static HRESULT topology_loader_resolve_partial_topology(struct topology_node *sr
         else
         {
             for (i = 0; i < num_media_types; i++)
-                for (method = MF_CONNECT_DIRECT; method < MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES; method++)
+                for (method = MF_CONNECT_DIRECT; method <= sink_method; method++)
                     if (SUCCEEDED(topology_loader_resolve_branch(clone_src, src_mediatypes[i], clone_sink, method)))
                     {
                         topology_loader_add_branch(*full_topology, clone_src, clone_sink);
@@ -2165,7 +2230,7 @@ static HRESULT topology_loader_resolve_partial_topology(struct topology_node *sr
     }
     else
     {
-        for (method = MF_CONNECT_DIRECT; method < MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES; method++)
+        for (method = MF_CONNECT_DIRECT; method <= sink_method; method++)
             if (SUCCEEDED(topology_loader_resolve_branch(clone_src, src_mediatypes[0], clone_sink, method)))
             {
                 TRACE("Successfully connected nodes with method %u\n", method);
@@ -2274,6 +2339,7 @@ static HRESULT WINAPI topology_loader_Load(IMFTopoLoader *iface, IMFTopology *in
 
         if (FAILED(hr = topology_loader_resolve_partial_topology(src, sink, topology, &full_topology)))
         {
+            ERR("Failed to resolve connection between %p and %p. %x\n", src, sink, hr);
             heap_free(node_pairs);
             return hr;
         }
-- 
2.26.2

From fa2952956340a84140071cd64b194223e2ea1c69 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Wed, 26 Aug 2020 10:23:58 -0500
Subject: [PATCH 53/57] mf/sar: Compare against native media type in
 IsMediaTypeSupported.

TODO: add tests.
---
 dlls/mf/sar.c | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/dlls/mf/sar.c b/dlls/mf/sar.c
index 6f1f1bd834e..547f8eb391c 100644
--- a/dlls/mf/sar.c
+++ b/dlls/mf/sar.c
@@ -1479,8 +1479,9 @@ static HRESULT WINAPI audio_renderer_stream_type_handler_IsMediaTypeSupported(IM
     TRACE("%p, %p, %p.\n", iface, in_type, out_type);
 
     EnterCriticalSection(&renderer->cs);
-    hr = renderer->current_media_type && IMFMediaType_IsEqual(renderer->current_media_type, in_type, &flags) == S_OK ?
-            S_OK : MF_E_INVALIDMEDIATYPE;
+    hr = IMFMediaType_IsEqual(renderer->current_media_type ? renderer->current_media_type : renderer->media_type, in_type, &flags) == S_OK ?
+                S_OK : MF_E_INVALIDMEDIATYPE;
+
     LeaveCriticalSection(&renderer->cs);
 
     return hr;
-- 
2.26.2

From 2ecfd76aca48737b4fc2fa2ada0bcc7c6710cfd3 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Wed, 26 Aug 2020 10:28:37 -0500
Subject: [PATCH 54/57] winegstreamer: Implement audio conversion MFT.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/Makefile.in               |   1 +
 dlls/winegstreamer/audioconvert.c            | 762 +++++++++++++++++++
 dlls/winegstreamer/gst_private.h             |   1 +
 dlls/winegstreamer/mfplat.c                  |  23 +
 dlls/winegstreamer/winegstreamer_classes.idl |   6 +
 5 files changed, 793 insertions(+)
 create mode 100644 dlls/winegstreamer/audioconvert.c

diff --git a/dlls/winegstreamer/Makefile.in b/dlls/winegstreamer/Makefile.in
index a266b0a95e4..81c670c17e4 100644
--- a/dlls/winegstreamer/Makefile.in
+++ b/dlls/winegstreamer/Makefile.in
@@ -6,6 +6,7 @@ EXTRALIBS = $(GSTREAMER_LIBS) $(PTHREAD_LIBS)
 PARENTSRC = ../strmbase ../mf
 
 C_SRCS = \
+	audioconvert.c \
 	colorconvert.c \
 	filter.c \
 	gst_cbs.c \
diff --git a/dlls/winegstreamer/audioconvert.c b/dlls/winegstreamer/audioconvert.c
new file mode 100644
index 00000000000..acb842242f1
--- /dev/null
+++ b/dlls/winegstreamer/audioconvert.c
@@ -0,0 +1,762 @@
+#include "config.h"
+#include <gst/gst.h>
+
+#include "gst_private.h"
+#include "gst_cbs.h"
+
+#include "mfapi.h"
+#include "mferror.h"
+#include "mfidl.h"
+
+#include "wine/debug.h"
+#include "wine/heap.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(mfplat);
+
+static const GUID *raw_types[] = {
+    &MFAudioFormat_PCM,
+    &MFAudioFormat_Float,
+};
+
+struct audio_converter
+{
+    IMFTransform IMFTransform_iface;
+    LONG refcount;
+    IMFAttributes *attributes;
+    IMFAttributes *output_attributes;
+    IMFMediaType *input_type;
+    IMFMediaType *output_type;
+    BOOL valid_state, inflight;
+    GstElement *container, *appsrc, *audioconvert, *resampler, *appsink;
+    GstBus *bus;
+    CRITICAL_SECTION cs;
+};
+
+static struct audio_converter *impl_audio_converter_from_IMFTransform(IMFTransform *iface)
+{
+    return CONTAINING_RECORD(iface, struct audio_converter, IMFTransform_iface);
+}
+
+static HRESULT WINAPI audio_converter_QueryInterface(IMFTransform *iface, REFIID riid, void **obj)
+{
+    TRACE("%p, %s, %p.\n", iface, debugstr_guid(riid), obj);
+
+    if (IsEqualIID(riid, &IID_IMFTransform) ||
+            IsEqualIID(riid, &IID_IUnknown))
+    {
+        *obj = iface;
+        IMFTransform_AddRef(iface);
+        return S_OK;
+    }
+
+    WARN("Unsupported %s.\n", debugstr_guid(riid));
+    *obj = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI audio_converter_AddRef(IMFTransform *iface)
+{
+    struct audio_converter *transform = impl_audio_converter_from_IMFTransform(iface);
+    ULONG refcount = InterlockedIncrement(&transform->refcount);
+
+    TRACE("%p, refcount %u.\n", iface, refcount);
+
+    return refcount;
+}
+
+static ULONG WINAPI audio_converter_Release(IMFTransform *iface)
+{
+    struct audio_converter *transform = impl_audio_converter_from_IMFTransform(iface);
+    ULONG refcount = InterlockedDecrement(&transform->refcount);
+
+    TRACE("%p, refcount %u.\n", iface, refcount);
+
+    if (!refcount)
+    {
+        if (transform->attributes)
+            IMFAttributes_Release(transform->attributes);
+        if (transform->output_attributes)
+            IMFAttributes_Release(transform->output_attributes);
+        heap_free(transform);
+    }
+
+    return refcount;
+}
+
+static HRESULT WINAPI audio_converter_GetStreamLimits(IMFTransform *iface, DWORD *input_minimum, DWORD *input_maximum,
+        DWORD *output_minimum, DWORD *output_maximum)
+{
+    TRACE("%p, %p, %p, %p, %p.\n", iface, input_minimum, input_maximum, output_minimum, output_maximum);
+
+    *input_minimum = *input_maximum = *output_minimum = *output_maximum = 1;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI audio_converter_GetStreamCount(IMFTransform *iface, DWORD *inputs, DWORD *outputs)
+{
+    TRACE("%p, %p, %p.\n", iface, inputs, outputs);
+
+    *inputs = *outputs = 1;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI audio_converter_GetStreamIDs(IMFTransform *iface, DWORD input_size, DWORD *inputs,
+        DWORD output_size, DWORD *outputs)
+{
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI audio_converter_GetInputStreamInfo(IMFTransform *iface, DWORD id, MFT_INPUT_STREAM_INFO *info)
+{
+    struct audio_converter *converter = impl_audio_converter_from_IMFTransform(iface);
+
+    TRACE("%p %u %p\n", converter, id, info);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    /* If we create a wrapped GstBuffer, remove MFT_INPUT_STREAM_DOES_NOT_ADDREF */
+    info->dwFlags = MFT_INPUT_STREAM_WHOLE_SAMPLES | MFT_INPUT_STREAM_DOES_NOT_ADDREF;
+    info->cbMaxLookahead = 0;
+    info->cbAlignment = 0;
+    /* this is incorrect */
+    info->hnsMaxLatency = 0;
+    return S_OK;
+}
+
+static HRESULT WINAPI audio_converter_GetOutputStreamInfo(IMFTransform *iface, DWORD id, MFT_OUTPUT_STREAM_INFO *info)
+{
+    struct audio_converter *converter = impl_audio_converter_from_IMFTransform(iface);
+
+    MFT_OUTPUT_STREAM_INFO stream_info = {};
+
+    TRACE("%p %u %p\n", converter, id, info);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    stream_info.dwFlags = MFT_OUTPUT_STREAM_PROVIDES_SAMPLES;
+    stream_info.cbSize = 0;
+    stream_info.cbAlignment = 0;
+
+    *info = stream_info;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI audio_converter_GetAttributes(IMFTransform *iface, IMFAttributes **attributes)
+{
+    struct audio_converter *transform = impl_audio_converter_from_IMFTransform(iface);
+
+    TRACE("%p, %p.\n", iface, attributes);
+
+    *attributes = transform->attributes;
+    IMFAttributes_AddRef(*attributes);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI audio_converter_GetInputStreamAttributes(IMFTransform *iface, DWORD id,
+        IMFAttributes **attributes)
+{
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI audio_converter_GetOutputStreamAttributes(IMFTransform *iface, DWORD id,
+        IMFAttributes **attributes)
+{
+    struct audio_converter *transform = impl_audio_converter_from_IMFTransform(iface);
+
+    TRACE("%p, %u, %p.\n", iface, id, attributes);
+
+    *attributes = transform->output_attributes;
+    IMFAttributes_AddRef(*attributes);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI audio_converter_DeleteInputStream(IMFTransform *iface, DWORD id)
+{
+    TRACE("%p, %u.\n", iface, id);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI audio_converter_AddInputStreams(IMFTransform *iface, DWORD streams, DWORD *ids)
+{
+    TRACE("%p, %u, %p.\n", iface, streams, ids);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI audio_converter_GetInputAvailableType(IMFTransform *iface, DWORD id, DWORD index,
+        IMFMediaType **type)
+{
+    IMFMediaType *ret;
+    HRESULT hr;
+
+    TRACE("%p, %u, %u, %p.\n", iface, id, index, type);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    if (index >= ARRAY_SIZE(raw_types))
+        return MF_E_NO_MORE_TYPES;
+
+    if (FAILED(hr = MFCreateMediaType(&ret)))
+        return hr;
+
+    if (FAILED(hr = IMFMediaType_SetGUID(ret, &MF_MT_MAJOR_TYPE, &MFMediaType_Audio)))
+    {
+        IMFMediaType_Release(ret);
+        return hr;
+    }
+
+    if (FAILED(hr = IMFMediaType_SetGUID(ret, &MF_MT_SUBTYPE, raw_types[index])))
+    {
+        IMFMediaType_Release(ret);
+        return hr;
+    }
+
+    *type = ret;
+
+    return S_OK;
+}
+
+static void copy_attr(IMFMediaType *target, IMFMediaType *source, const GUID *key)
+{
+    PROPVARIANT val;
+
+    if (SUCCEEDED(IMFAttributes_GetItem((IMFAttributes *)source, key, &val)))
+    {
+        IMFAttributes_SetItem((IMFAttributes* )target, key, &val);
+    }
+}
+
+static HRESULT WINAPI audio_converter_GetOutputAvailableType(IMFTransform *iface, DWORD id, DWORD index,
+        IMFMediaType **type)
+{
+    struct audio_converter *converter = impl_audio_converter_from_IMFTransform(iface);
+    IMFMediaType *output_type;
+    HRESULT hr;
+
+    static const DWORD rates[] = {44100, 48000};
+    static const DWORD channel_cnts[] = {1, 2, 6};
+    static const DWORD sizes[] = {16, 24, 32};
+    const GUID *subtype;
+    DWORD rate, channels, bps;
+
+    TRACE("%p, %u, %u, %p.\n", iface, id, index, type);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    if (!(converter->input_type))
+        return MF_E_TRANSFORM_TYPE_NOT_SET;
+
+    if (index >= (2/*rates*/ * 3/*layouts*/ * 3/*bps PCM*/) + (2 * 3))
+        return MF_E_NO_MORE_TYPES;
+
+    if (FAILED(hr = MFCreateMediaType(&output_type)))
+        return hr;
+
+    copy_attr(output_type, converter->input_type, &MF_MT_MAJOR_TYPE);
+
+    if (index < 2 * 3 * 3)
+    {
+        subtype = &MFAudioFormat_PCM;
+        rate = rates[index % 2];
+        channels = channel_cnts[(index / 2) % 3];
+        bps = sizes[(index / (2*3)) % 3];
+    }
+    else
+    {
+        index -= (2 * 3 * 3);
+        subtype = &MFAudioFormat_Float;
+        bps = 32;
+        rate = rates[index % 2];
+        channels = channel_cnts[(index / 2) % 3];
+    }
+
+    if (FAILED(hr = IMFMediaType_SetGUID(output_type, &MF_MT_SUBTYPE, subtype)))
+        goto fail;
+    if (FAILED(hr = IMFMediaType_SetUINT32(output_type, &MF_MT_AUDIO_SAMPLES_PER_SECOND, rate)))
+        goto fail;
+    if (FAILED(hr = IMFMediaType_SetUINT32(output_type, &MF_MT_AUDIO_NUM_CHANNELS, channels)))
+        goto fail;
+    if (FAILED(hr = IMFMediaType_SetUINT32(output_type, &MF_MT_AUDIO_BITS_PER_SAMPLE, bps)))
+        goto fail;
+
+    if (FAILED(hr = IMFMediaType_SetUINT32(output_type, &MF_MT_AUDIO_BLOCK_ALIGNMENT, channels * bps / 8)))
+        goto fail;
+    if (FAILED(hr = IMFMediaType_SetUINT32(output_type, &MF_MT_AUDIO_AVG_BYTES_PER_SECOND, rate * channels * bps / 8)))
+        goto fail;
+    if (FAILED(hr = IMFMediaType_SetUINT32(output_type, &MF_MT_AUDIO_CHANNEL_MASK,
+            channels == 1 ? SPEAKER_FRONT_CENTER :
+            channels == 2 ? SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT :
+          /*channels == 6*/ 0x3F)))
+        goto fail;
+    if (FAILED(hr = IMFMediaType_SetUINT32(output_type, &MF_MT_ALL_SAMPLES_INDEPENDENT, TRUE)))
+        goto fail;
+
+    *type = output_type;
+
+    return S_OK;
+    fail:
+    IMFMediaType_Release(output_type);
+    return hr;
+}
+
+static void audio_converter_update_pipeline_state(struct audio_converter *converter)
+{
+    GstCaps *input_caps, *output_caps;
+    gchar *input_caps_str, *output_caps_str;
+
+    converter->valid_state = converter->input_type && converter->output_type;
+
+    if (!converter->valid_state)
+    {
+        gst_element_set_state(converter->container, GST_STATE_READY);
+        return;
+    }
+
+    g_object_set(converter->appsrc, "caps", (input_caps = caps_from_mf_media_type(converter->input_type)), NULL);
+    g_object_set(converter->appsink, "caps", (output_caps = caps_from_mf_media_type(converter->output_type)), NULL);
+
+    input_caps_str = gst_caps_to_string(input_caps);
+    output_caps_str = gst_caps_to_string(output_caps);
+    TRACE("AUDIO CONVERTER IN =\n%s\nAUDIO CONVERTER OUT = \n%s\n", debugstr_a(input_caps_str), debugstr_a(output_caps_str));
+    g_free(input_caps_str);
+    g_free(output_caps_str);
+
+    gst_element_set_state(converter->container, GST_STATE_PLAYING);
+    return;
+}
+
+static HRESULT WINAPI audio_converter_SetInputType(IMFTransform *iface, DWORD id, IMFMediaType *type, DWORD flags)
+{
+    HRESULT hr;
+
+    struct audio_converter *converter = impl_audio_converter_from_IMFTransform(iface);
+
+    TRACE("%p, %u, %p, %#x.\n", iface, id, type, flags);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    if (type)
+    {
+        GUID major_type, subtype;
+        DWORD unused;
+        BOOL found = FALSE;
+
+        if (FAILED(IMFMediaType_GetGUID(type, &MF_MT_MAJOR_TYPE, &major_type)))
+            return MF_E_INVALIDTYPE;
+        if (FAILED(IMFMediaType_GetGUID(type, &MF_MT_SUBTYPE, &subtype)))
+            return MF_E_INVALIDTYPE;
+        if (FAILED(IMFMediaType_GetUINT32(type, &MF_MT_AUDIO_SAMPLES_PER_SECOND, &unused)))
+            return MF_E_INVALIDTYPE;
+        if (FAILED(IMFMediaType_GetUINT32(type, &MF_MT_AUDIO_NUM_CHANNELS, &unused)))
+            return MF_E_INVALIDTYPE;
+        if (IsEqualGUID(&subtype, &MFAudioFormat_PCM) && FAILED(IMFMediaType_GetUINT32(type, &MF_MT_AUDIO_BITS_PER_SAMPLE, &unused)))
+            return MF_E_INVALIDTYPE;
+
+        if (!(IsEqualGUID(&major_type, &MFMediaType_Audio)))
+            return MF_E_INVALIDTYPE;
+
+        for (unsigned int i = 0; i < ARRAY_SIZE(raw_types); i++)
+        {
+            if (IsEqualGUID(&subtype, raw_types[i]))
+            {
+                found = TRUE;
+                break;
+            }
+        }
+
+        if (!found)
+            return MF_E_INVALIDTYPE;
+    }
+
+    if (flags & MFT_SET_TYPE_TEST_ONLY)
+        return S_OK;
+
+    hr = S_OK;
+
+    EnterCriticalSection(&converter->cs);
+
+    if (type)
+    {
+        if (!converter->input_type)
+            if (FAILED(hr = MFCreateMediaType(&converter->input_type)))
+                goto done;
+
+        if (FAILED(hr = IMFMediaType_CopyAllItems(type, (IMFAttributes *) converter->input_type)))
+            goto done;
+    }
+    else if (converter->input_type)
+    {
+        IMFMediaType_Release(converter->input_type);
+        converter->input_type = NULL;
+    }
+
+    done:
+    if (hr == S_OK)
+        audio_converter_update_pipeline_state(converter);
+    LeaveCriticalSection(&converter->cs);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI audio_converter_SetOutputType(IMFTransform *iface, DWORD id, IMFMediaType *type, DWORD flags)
+{
+    struct audio_converter *converter = impl_audio_converter_from_IMFTransform(iface);
+    HRESULT hr;
+    GUID major_type, subtype;
+    DWORD output_sample_rate;
+    DWORD unused;
+
+    TRACE("%p, %u, %p, %#x.\n", iface, id, type, flags);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    if (!converter->input_type)
+        return MF_E_TRANSFORM_TYPE_NOT_SET;
+
+    if (type)
+    {
+        /* validate the type */
+
+        if (FAILED(IMFMediaType_GetGUID(type, &MF_MT_MAJOR_TYPE, &major_type)))
+            return MF_E_INVALIDTYPE;
+        if (FAILED(IMFMediaType_GetGUID(type, &MF_MT_SUBTYPE, &subtype)))
+            return MF_E_INVALIDTYPE;
+        if (FAILED(IMFMediaType_GetUINT32(type, &MF_MT_AUDIO_NUM_CHANNELS, &unused)))
+            return MF_E_INVALIDTYPE;
+        if (IsEqualGUID(&subtype, &MFAudioFormat_PCM) && FAILED(IMFMediaType_GetUINT32(type, &MF_MT_AUDIO_BITS_PER_SAMPLE, &unused)))
+            return MF_E_INVALIDTYPE;
+
+
+        if (FAILED(IMFMediaType_GetUINT32(type, &MF_MT_AUDIO_SAMPLES_PER_SECOND, &output_sample_rate)))
+            return MF_E_INVALIDTYPE;
+
+        if (!(IsEqualGUID(&major_type, &MFMediaType_Audio)))
+            return MF_E_INVALIDTYPE;
+
+        for (unsigned int i = 0; i < ARRAY_SIZE(raw_types); i++)
+        {
+            if (IsEqualGUID(&subtype, raw_types[i]))
+                break;
+            if (i == ARRAY_SIZE(raw_types))
+                return MF_E_INVALIDTYPE;
+        }
+    }
+
+    if (flags & MFT_SET_TYPE_TEST_ONLY)
+        return S_OK;
+
+    EnterCriticalSection(&converter->cs);
+
+    hr = S_OK;
+
+    if (type)
+    {
+        if (!converter->output_type)
+            if (FAILED(hr = MFCreateMediaType(&converter->output_type)))
+                goto done;
+
+        if (FAILED(hr = IMFMediaType_CopyAllItems(type, (IMFAttributes *) converter->output_type)))
+            goto done;
+    }
+    else if (converter->output_type)
+    {
+        IMFMediaType_Release(converter->output_type);
+        converter->output_type = NULL;
+    }
+
+    done:
+    if (hr == S_OK)
+        audio_converter_update_pipeline_state(converter);
+    LeaveCriticalSection(&converter->cs);
+
+    return hr;
+}
+
+static HRESULT WINAPI audio_converter_GetInputCurrentType(IMFTransform *iface, DWORD id, IMFMediaType **type)
+{
+    FIXME("%p, %u, %p.\n", iface, id, type);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI audio_converter_GetOutputCurrentType(IMFTransform *iface, DWORD id, IMFMediaType **type)
+{
+    FIXME("%p, %u, %p.\n", iface, id, type);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI audio_converter_GetInputStatus(IMFTransform *iface, DWORD id, DWORD *flags)
+{
+    FIXME("%p, %u, %p.\n", iface, id, flags);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI audio_converter_GetOutputStatus(IMFTransform *iface, DWORD *flags)
+{
+    FIXME("%p, %p.\n", iface, flags);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI audio_converter_SetOutputBounds(IMFTransform *iface, LONGLONG lower, LONGLONG upper)
+{
+    FIXME("%p, %s, %s.\n", iface, wine_dbgstr_longlong(lower), wine_dbgstr_longlong(upper));
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI audio_converter_ProcessEvent(IMFTransform *iface, DWORD id, IMFMediaEvent *event)
+{
+    TRACE("%p, %u, %p.\n", iface, id, event);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI audio_converter_ProcessMessage(IMFTransform *iface, MFT_MESSAGE_TYPE message, ULONG_PTR param)
+{
+    FIXME("%p, %u.\n", iface, message);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI audio_converter_ProcessInput(IMFTransform *iface, DWORD id, IMFSample *sample, DWORD flags)
+{
+    struct audio_converter *converter = impl_audio_converter_from_IMFTransform(iface);
+    GstBuffer *gst_buffer;
+    HRESULT hr = S_OK;
+    int ret;
+
+    TRACE("%p, %u, %p, %#x.\n", iface, id, sample, flags);
+
+    if (flags)
+        WARN("Unsupported flags %#x\n", flags);
+
+    if (id != 0)
+        return MF_E_INVALIDSTREAMNUMBER;
+
+    EnterCriticalSection(&converter->cs);
+
+    if (!converter->valid_state)
+    {
+        hr = MF_E_TRANSFORM_TYPE_NOT_SET;
+        goto done;
+    }
+
+    if (converter->inflight)
+    {
+        hr = MF_E_NOTACCEPTING;
+        goto done;
+    }
+
+    if (!(gst_buffer = gst_buffer_from_mf_sample(sample)))
+    {
+        hr = E_FAIL;
+        goto done;
+    }
+
+    g_signal_emit_by_name(converter->appsrc, "push-buffer", gst_buffer, &ret);
+    gst_buffer_unref(gst_buffer);
+    if (ret != GST_FLOW_OK)
+    {
+        ERR("Couldn't push buffer ret = %d\n", ret);
+        hr = E_FAIL;
+        goto done;
+    }
+
+    converter->inflight = TRUE;
+
+    done:
+    LeaveCriticalSection(&converter->cs);
+
+    return hr;
+}
+
+static HRESULT WINAPI audio_converter_ProcessOutput(IMFTransform *iface, DWORD flags, DWORD count,
+        MFT_OUTPUT_DATA_BUFFER *samples, DWORD *status)
+{
+    struct audio_converter *converter = impl_audio_converter_from_IMFTransform(iface);
+    MFT_OUTPUT_DATA_BUFFER *relevant_buffer = NULL;
+    GstSample *sample;
+    HRESULT hr = S_OK;
+
+    TRACE("%p, %#x, %u, %p, %p.\n", iface, flags, count, samples, status);
+
+    if (flags)
+        WARN("Unsupported flags %#x\n", flags);
+
+    for (unsigned int i = 0; i < count; i++)
+    {
+        MFT_OUTPUT_DATA_BUFFER *out_buffer = &samples[i];
+
+        if (out_buffer->dwStreamID != 0)
+            return MF_E_INVALIDSTREAMNUMBER;
+
+        if (relevant_buffer)
+            return MF_E_INVALIDSTREAMNUMBER;
+
+        relevant_buffer = out_buffer;
+    }
+
+    if (!relevant_buffer)
+        return S_OK;
+
+    EnterCriticalSection(&converter->cs);
+
+    if (!converter->valid_state)
+    {
+        hr = MF_E_TRANSFORM_TYPE_NOT_SET;
+        goto done;
+    }
+
+    if (!converter->inflight)
+    {
+        hr = MF_E_TRANSFORM_NEED_MORE_INPUT;
+        goto done;
+    }
+
+    g_signal_emit_by_name(converter->appsink, "pull-sample", &sample);
+
+    converter->inflight =  FALSE;
+
+    relevant_buffer->pSample = mf_sample_from_gst_buffer(gst_sample_get_buffer(sample));
+    gst_sample_unref(sample);
+    relevant_buffer->dwStatus = S_OK;
+    relevant_buffer->pEvents = NULL;
+    *status = 0;
+
+    done:
+    LeaveCriticalSection(&converter->cs);
+
+    return hr;
+}
+
+static const IMFTransformVtbl audio_converter_vtbl =
+{
+    audio_converter_QueryInterface,
+    audio_converter_AddRef,
+    audio_converter_Release,
+    audio_converter_GetStreamLimits,
+    audio_converter_GetStreamCount,
+    audio_converter_GetStreamIDs,
+    audio_converter_GetInputStreamInfo,
+    audio_converter_GetOutputStreamInfo,
+    audio_converter_GetAttributes,
+    audio_converter_GetInputStreamAttributes,
+    audio_converter_GetOutputStreamAttributes,
+    audio_converter_DeleteInputStream,
+    audio_converter_AddInputStreams,
+    audio_converter_GetInputAvailableType,
+    audio_converter_GetOutputAvailableType,
+    audio_converter_SetInputType,
+    audio_converter_SetOutputType,
+    audio_converter_GetInputCurrentType,
+    audio_converter_GetOutputCurrentType,
+    audio_converter_GetInputStatus,
+    audio_converter_GetOutputStatus,
+    audio_converter_SetOutputBounds,
+    audio_converter_ProcessEvent,
+    audio_converter_ProcessMessage,
+    audio_converter_ProcessInput,
+    audio_converter_ProcessOutput,
+};
+
+HRESULT audio_converter_create(REFIID riid, void **ret)
+{
+    struct audio_converter *object;
+    HRESULT hr;
+
+    TRACE("%s %p\n", debugstr_guid(riid), ret);
+
+    if (!(object = heap_alloc_zero(sizeof(*object))))
+        return E_OUTOFMEMORY;
+
+    object->IMFTransform_iface.lpVtbl = &audio_converter_vtbl;
+    object->refcount = 1;
+
+    InitializeCriticalSection(&object->cs);
+
+    if (FAILED(hr = MFCreateAttributes(&object->attributes, 0)))
+        goto failed;
+
+    if (FAILED(hr = MFCreateAttributes(&object->output_attributes, 0)))
+        goto failed;
+
+    object->container = gst_bin_new(NULL);
+    object->bus = gst_bus_new();
+    gst_element_set_bus(object->container, object->bus);
+
+    if (!(object->appsrc = gst_element_factory_make("appsrc", NULL)))
+    {
+        ERR("Failed to create appsrc");
+        hr = E_FAIL;
+        goto failed;
+    }
+    gst_bin_add(GST_BIN(object->container), object->appsrc);
+
+    if (!(object->audioconvert = gst_element_factory_make("audioconvert", NULL)))
+    {
+        ERR("Failed to create converter\n");
+        hr = E_FAIL;
+        goto failed;
+    }
+    gst_bin_add(GST_BIN(object->container), object->audioconvert);
+
+    if (!(object->resampler = gst_element_factory_make("audioresample", NULL)))
+    {
+        ERR("Failed to create resampler\n");
+        hr = E_FAIL;
+        goto failed;
+    }
+    gst_bin_add(GST_BIN(object->container), object->resampler);
+
+    if (!(object->appsink = gst_element_factory_make("appsink", NULL)))
+    {
+        ERR("Failed to create appsink\n");
+        hr = E_FAIL;
+        goto failed;
+    }
+    gst_bin_add(GST_BIN(object->container), object->appsink);
+
+    if (!(gst_element_link(object->appsrc, object->audioconvert)))
+    {
+        ERR("Failed to link appsrc to audioconvert\n");
+        hr = E_FAIL;
+        goto failed;
+    }
+
+    if (!(gst_element_link(object->audioconvert, object->resampler)))
+    {
+        ERR("Failed to link audioconvert to resampler\n");
+        hr = E_FAIL;
+        goto failed;
+    }
+
+    if (!(gst_element_link(object->resampler, object->appsink)))
+    {
+        ERR("Failed to link resampler to appsink\n");
+        hr = E_FAIL;
+        goto failed;
+    }
+
+    *ret = &object->IMFTransform_iface;
+    return S_OK;
+
+failed:
+
+    IMFTransform_Release(&object->IMFTransform_iface);
+    return hr;
+}
\ No newline at end of file
diff --git a/dlls/winegstreamer/gst_private.h b/dlls/winegstreamer/gst_private.h
index dc23d5201b1..6e718aa6ebe 100644
--- a/dlls/winegstreamer/gst_private.h
+++ b/dlls/winegstreamer/gst_private.h
@@ -75,5 +75,6 @@ HRESULT generic_decoder_construct(REFIID riid, void **obj, enum decoder_type) DE
 HRESULT winegstreamer_stream_handler_create(REFIID riid, void **obj) DECLSPEC_HIDDEN;
 
 HRESULT color_converter_create(REFIID riid, void **ret) DECLSPEC_HIDDEN;
+HRESULT audio_converter_create(REFIID riid, void **ret) DECLSPEC_HIDDEN;
 
 #endif /* __GST_PRIVATE_INCLUDED__ */
diff --git a/dlls/winegstreamer/mfplat.c b/dlls/winegstreamer/mfplat.c
index 671679a79f6..f07c074cbc4 100644
--- a/dlls/winegstreamer/mfplat.c
+++ b/dlls/winegstreamer/mfplat.c
@@ -433,6 +433,8 @@ static HRESULT m4s2_decoder_create(REFIID riid, void **ret)
 
 static GUID CLSID_CColorConvertDMO = {0x98230571,0x0087,0x4204,{0xb0,0x20,0x32,0x82,0x53,0x8e,0x57,0xd3}};
 
+static GUID CLSID_WINEAudioConverter = {0x6a170414,0xaad9,0x4693,{0xb8,0x06,0x3a,0x0c,0x47,0xc5,0x70,0xd6}};
+
 static const struct class_object
 {
     const GUID *clsid;
@@ -448,6 +450,7 @@ class_objects[] =
     { &CLSID_CWMADecMediaObject, &wma_decoder_create },
     { &CLSID_CMpeg4sDecMFT, m4s2_decoder_create },
     { &CLSID_CColorConvertDMO, &color_converter_create },
+    { &CLSID_WINEAudioConverter, &audio_converter_create },
 };
 
 HRESULT mfplat_get_class_object(REFCLSID rclsid, REFIID riid, void **obj)
@@ -497,6 +500,14 @@ const GUID *color_converter_supported_types[] =
     &MFVideoFormat_YVYU,
 };
 
+static WCHAR audio_converterW[] = {'A','u','d','i','o',' ','C','o','n','v','e','r','t','e','r',0};
+
+const GUID *audio_converter_supported_types[] =
+{
+    &MFAudioFormat_PCM,
+    &MFAudioFormat_Float,
+};
+
 static WCHAR h264decoderW[] = {'H','.','2','6','4',' ','D','e','c','o','d','e','r',0};
 const GUID *h264_decoder_input_types[] =
 {
@@ -603,6 +614,18 @@ mfts[] =
         color_converter_supported_types,
         NULL
     },
+    {
+        &CLSID_WINEAudioConverter,
+        &MFT_CATEGORY_AUDIO_EFFECT,
+        audio_converterW,
+        MFT_ENUM_FLAG_SYNCMFT,
+        &MFMediaType_Audio,
+        ARRAY_SIZE(audio_converter_supported_types),
+        audio_converter_supported_types,
+        ARRAY_SIZE(audio_converter_supported_types),
+        audio_converter_supported_types,
+        NULL
+    },
     {
         &CLSID_CMSH264DecoderMFT,
         &MFT_CATEGORY_VIDEO_DECODER,
diff --git a/dlls/winegstreamer/winegstreamer_classes.idl b/dlls/winegstreamer/winegstreamer_classes.idl
index c014d359a39..c58fa417bbe 100644
--- a/dlls/winegstreamer/winegstreamer_classes.idl
+++ b/dlls/winegstreamer/winegstreamer_classes.idl
@@ -97,3 +97,9 @@ coclass CLSID_CWMADecMediaObject {}
     uuid(98230571-0087-4204-b020-3282538e57d3)
 ]
 coclass CColorConvertDMO { }
+
+[
+    threading(both),
+    uuid(6a170414-aad9-4693-b806-3a0c47c570d6)
+]
+coclass WINEAudioConverter { }
-- 
2.26.2

From 33261027f472d8b1b6100c884861708f4fa406a3 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Wed, 14 Oct 2020 11:07:34 -0500
Subject: [PATCH 55/57] HACK: Shutdown media sinks on session shutdown.

TODO: We should be doing this through IMFActivate.
---
 dlls/mf/session.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/dlls/mf/session.c b/dlls/mf/session.c
index 2f1b589a1aa..6fce432da72 100644
--- a/dlls/mf/session.c
+++ b/dlls/mf/session.c
@@ -1637,6 +1637,7 @@ static HRESULT WINAPI mfsession_Close(IMFMediaSession *iface)
 static HRESULT WINAPI mfsession_Shutdown(IMFMediaSession *iface)
 {
     struct media_session *session = impl_from_IMFMediaSession(iface);
+    struct media_sink *sink;
     HRESULT hr = S_OK;
 
     FIXME("%p.\n", iface);
@@ -1648,6 +1649,10 @@ static HRESULT WINAPI mfsession_Shutdown(IMFMediaSession *iface)
         IMFMediaEventQueue_Shutdown(session->event_queue);
         if (session->quality_manager)
             IMFQualityManager_Shutdown(session->quality_manager);
+        LIST_FOR_EACH_ENTRY(sink, &session->presentation.sinks, struct media_sink, entry)
+        {
+            IMFMediaSink_Shutdown(sink->sink);
+        }
     }
     LeaveCriticalSection(&session->cs);
 
-- 
2.26.2

From 0f61590d7908f62de6f1771e49743245d7ff34bd Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Thu, 15 Oct 2020 12:18:10 -0500
Subject: [PATCH 56/57] HACK: Flush decoder when changing times.

---
 dlls/mf/session.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/dlls/mf/session.c b/dlls/mf/session.c
index 6fce432da72..856daebf6b4 100644
--- a/dlls/mf/session.c
+++ b/dlls/mf/session.c
@@ -2094,7 +2094,10 @@ static void session_set_presentation_clock(struct media_session *session)
     LIST_FOR_EACH_ENTRY(node, &session->presentation.nodes, struct topo_node, entry)
     {
         if (node->type == MF_TOPOLOGY_TRANSFORM_NODE)
+        {
+            IMFTransform_ProcessMessage(node->object.transform, MFT_MESSAGE_COMMAND_FLUSH, 0);
             IMFTransform_ProcessMessage(node->object.transform, MFT_MESSAGE_NOTIFY_START_OF_STREAM, 0);
+        }
     }
 
     if (!(session->presentation.flags & SESSION_FLAG_PRESENTATION_CLOCK_SET))
-- 
2.26.2

From 2645e2a08071297f4ef9418d1cf7a323b846680b Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Fri, 16 Oct 2020 16:59:32 -0500
Subject: [PATCH 57/57] mfmediaengine: Implement GetNativeVideoSize.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/mfmediaengine/main.c | 30 ++++++++++++++++++++++++++++--
 1 file changed, 28 insertions(+), 2 deletions(-)

diff --git a/dlls/mfmediaengine/main.c b/dlls/mfmediaengine/main.c
index fe9aa81121f..44e298bf5ef 100644
--- a/dlls/mfmediaengine/main.c
+++ b/dlls/mfmediaengine/main.c
@@ -84,6 +84,7 @@ struct media_engine
     double default_playback_rate;
     double volume;
     double duration;
+    DWORD vid_width, vid_height;
     MF_MEDIA_ENGINE_ERR error_code;
     HRESULT extended_code;
     MF_MEDIA_ENGINE_READY ready_state;
@@ -432,12 +433,26 @@ static HRESULT media_engine_create_topology(struct media_engine *engine, IMFMedi
             }
             else if (IsEqualGUID(&major, &MFMediaType_Video) && !sd_video && !(engine->flags & MF_MEDIA_ENGINE_AUDIOONLY))
             {
+                IMFMediaType *video_type;
+                UINT64 frame_size;
+
                 sd_video = sd;
                 IMFStreamDescriptor_AddRef(sd_video);
                 /* TODO: reintroduce this once we set up video stream nodes */
 #if 0
                 IMFPresentationDescriptor_SelectStream(pd, i);
 #endif
+
+                engine->vid_width = 0;
+                engine->vid_height = 0;
+                if (SUCCEEDED(IMFMediaTypeHandler_GetCurrentMediaType(type_handler, &video_type)))
+                {
+                    if (SUCCEEDED(IMFMediaType_GetUINT64(video_type, &MF_MT_FRAME_SIZE, &frame_size)))
+                    {
+                        engine->vid_width = frame_size >> 32;
+                        engine->vid_height = frame_size;
+                    }
+                }
             }
 
             IMFMediaTypeHandler_Release(type_handler);
@@ -1136,9 +1151,20 @@ static BOOL WINAPI media_engine_HasAudio(IMFMediaEngine *iface)
 
 static HRESULT WINAPI media_engine_GetNativeVideoSize(IMFMediaEngine *iface, DWORD *cx, DWORD *cy)
 {
-    FIXME("(%p, %p, %p): stub.\n", iface, cx, cy);
+    struct media_engine *engine = impl_from_IMFMediaEngine(iface);
 
-    return E_NOTIMPL;
+    TRACE("(%p, %p, %p)\n", iface, cx, cy);
+
+    if (!(engine->flags & FLAGS_ENGINE_HAS_VIDEO))
+        return E_INVALIDARG;
+
+    if (!engine->vid_width || !engine->vid_height)
+        return E_FAIL;
+
+    *cx = engine->vid_width;
+    *cy = engine->vid_height;
+
+    return S_OK;
 }
 
 static HRESULT WINAPI media_engine_GetVideoAspectRatio(IMFMediaEngine *iface, DWORD *cx, DWORD *cy)
-- 
2.26.2

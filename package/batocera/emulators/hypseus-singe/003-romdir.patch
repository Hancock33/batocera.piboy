diff --git a/src/game/game.cpp b/src/game/game.cpp
index 0c595c8..dd7e475 100644
--- a/src/game/game.cpp
+++ b/src/game/game.cpp
@@ -682,9 +682,14 @@ bool game::load_roms()
                 zip_path = path + ".zip"; // append zip extension ...
             }
 
-            // Use homedir to locate the compressed rom
-            zip_path = g_homedir.get_romfile(zip_path);
+            // Use romdir to locate the compressed rom
+            zip_path = g_homedir.get_full_romfile(zip_path);
 
+            // If romdir failed, try homedir
+            if (zip_path.empty()) {
+                zip_path = g_homedir.get_romfile(zip_path);
+            }
+            
             // if we have not opened a ZIP file, or if we need to open a new zip
             // file ...
             if ((!zip_file) || (zip_path.compare(opened_zip_name) != 0)) {
@@ -795,7 +800,12 @@ bool game::verify_required_file(const char *filename, const char *gamedir, Uint3
     path += filename;
 
     // TRY UNCOMPRESSED FIRST
-    string uncompressed_path = g_homedir.get_romfile(path);
+    string uncompressed_path = g_homedir.get_full_romfile(path);
+
+    // If romdir failed, try homedir
+    if (uncompressed_path.empty()) {
+        uncompressed_path = g_homedir.get_romfile(path);
+    }
 
     struct mpo_io *io;
 
@@ -829,7 +839,12 @@ bool game::verify_required_file(const char *filename, const char *gamedir, Uint3
     if (!passed_test) {
         string zip_path = gamedir;
         zip_path += ".zip"; // we now have "/gamename.zip"
-        zip_path = g_homedir.get_romfile(zip_path);
+        zip_path = g_homedir.get_full_romfile(zip_path);
+
+        // If romdir failed, try homedir
+        if (zip_path.empty()) {
+            zip_path = g_homedir.get_romfile(zip_path);
+        }
 
         unzFile zip_file = NULL; // pointer to open zip file (NULL if file is
                                  // closed)
@@ -859,8 +874,12 @@ bool game::load_rom(const char *filename, Uint8 *buf, Uint32 size)
     struct mpo_io *F;
     MPO_BYTES_READ bytes_read = 0;
     bool result               = false;
-    string fullpath           = g_homedir.get_romfile(filename); // pathname to roms
-                                                                 // directory
+    string fullpath = g_homedir.get_full_romfile(filename); // Try romdir first
+    // If romdir failed, try homedir
+    if (fullpath.empty()) {
+        fullpath = g_homedir.get_romfile(filename); // pathname to roms directory
+    }
+
     string s = "Loading " + fullpath + " ... ";
 
     F = mpo_open(fullpath.c_str(), MPO_OPEN_READONLY);
diff '--color=auto' -uri hypseus-singe-v2.11.4/src/io/homedir.cpp hypseus-singe-v2.11.4-lbrpdx/src/io/homedir.cpp
--- hypseus-singe-v2.11.4/src/io/homedir.cpp	2025-01-10 05:00:00.000000000 -0800
+++ hypseus-singe-v2.11.4-lbrpdx/src/io/homedir.cpp	2025-03-29 09:40:15.072359810 -0700
@@ -90,6 +90,11 @@
     return find_file(romDir + s, fallback);
 }

+string homedir::get_full_romfile(const string &s)
+{
+    return get_romdir() + "/roms/" + s;
+}
+
 string homedir::get_ramfile(const string &s)
 {
     return find_file("ram/" + s, false);
diff '--color=auto' -uri hypseus-singe-v2.11.4/src/io/homedir.h hypseus-singe-v2.11.4-lbrpdx/src/io/homedir.h
--- hypseus-singe-v2.11.4/src/io/homedir.h	2025-01-10 05:00:00.000000000 -0800
+++ hypseus-singe-v2.11.4-lbrpdx/src/io/homedir.h	2025-03-29 09:40:40.124638454 -0700
@@ -23,6 +23,7 @@
     void set_homedir(const string &s);
     void set_romdir(const string &s);
     string get_romfile(const string &s);
+    string get_full_romfile(const string &s);
     string get_ramfile(const string &s);
     string get_framefile(const string &s);
     void create_dirs(const string &s);

From ab3c318e2e4247f4f232f2ab5c64a58280cc849a Mon Sep 17 00:00:00 2001
From: Megamouse <studienricky89@googlemail.com>
Date: Tue, 8 Apr 2025 08:58:35 +0200
Subject: [PATCH 2/2] Update ffmpeg to 7.1.1

---
 3rdparty/ffmpeg                          |  2 +-
 rpcs3/Emu/Cell/Modules/cellAtracXdec.cpp | 60 ++++++++++++----------
 rpcs3/util/media_utils.cpp               | 65 +++++++++++++++++++-----
 3 files changed, 88 insertions(+), 39 deletions(-)

diff --git a/rpcs3/Emu/Cell/Modules/cellAtracXdec.cpp b/rpcs3/Emu/Cell/Modules/cellAtracXdec.cpp
index 36228d8a5e31..955727b05b50 100644
--- a/rpcs3/Emu/Cell/Modules/cellAtracXdec.cpp
+++ b/rpcs3/Emu/Cell/Modules/cellAtracXdec.cpp
@@ -113,27 +113,6 @@ void AtracXdecDecoder::alloc_avcodec()
 
 	ensure(!(codec->capabilities & AV_CODEC_CAP_SUBFRAMES));
 
-	ctx = avcodec_alloc_context3(codec);
-	if (!ctx)
-	{
-		fmt::throw_exception("avcodec_alloc_context3() failed");
-	}
-
-	// Allows FFmpeg to output directly into guest memory
-	ctx->opaque = this;
-	ctx->thread_type = FF_THREAD_SLICE; // Silences a warning by FFmpeg about requesting frame threading with a custom get_buffer2(). Default is FF_THREAD_FRAME & FF_THREAD_SLICE
-	ctx->get_buffer2 = [](AVCodecContext* s, AVFrame* frame, int /*flags*/) -> int
-	{
-		for (s32 i = 0; i < frame->ch_layout.nb_channels; i++)
-		{
-			frame->data[i] = static_cast<AtracXdecDecoder*>(s->opaque)->work_mem.get_ptr() + ATXDEC_MAX_FRAME_LENGTH + ATXDEC_SAMPLES_PER_FRAME * sizeof(f32) * i;
-			frame->linesize[i] = ATXDEC_SAMPLES_PER_FRAME * sizeof(f32);
-		}
-
-		frame->buf[0] = av_buffer_create(frame->data[0], ATXDEC_SAMPLES_PER_FRAME * sizeof(f32) * frame->ch_layout.nb_channels, [](void*, uint8_t*){}, nullptr, 0);
-		return 0;
-	};
-
 	packet = av_packet_alloc();
 	if (!packet)
 	{
@@ -149,18 +128,47 @@ void AtracXdecDecoder::alloc_avcodec()
 
 void AtracXdecDecoder::free_avcodec()
 {
-	av_packet_free(&packet);
-	av_frame_free(&frame);
-	avcodec_free_context(&ctx);
+	if (packet)
+	{
+		av_packet_free(&packet);
+	}
+	if (frame)
+	{
+		av_frame_free(&frame);
+	}
+	if (ctx)
+	{
+		avcodec_free_context(&ctx);
+	}
 }
 
 void AtracXdecDecoder::init_avcodec()
 {
-	if (int err = avcodec_close(ctx); err)
+	if (ctx)
+	{
+		avcodec_free_context(&ctx);
+	}
+
+	ctx = avcodec_alloc_context3(codec);
+	if (!ctx)
 	{
-		fmt::throw_exception("avcodec_close() failed (err=0x%x='%s')", err, utils::av_error_to_string(err));
+		fmt::throw_exception("avcodec_alloc_context3() failed");
 	}
 
+	// Allows FFmpeg to output directly into guest memory
+	ctx->opaque = this;
+	ctx->thread_type = FF_THREAD_SLICE; // Silences a warning by FFmpeg about requesting frame threading with a custom get_buffer2(). Default is FF_THREAD_FRAME & FF_THREAD_SLICE
+	ctx->get_buffer2 = [](AVCodecContext* s, AVFrame* frame, int /*flags*/) -> int
+	{
+		for (s32 i = 0; i < frame->ch_layout.nb_channels; i++)
+		{
+			frame->data[i] = static_cast<AtracXdecDecoder*>(s->opaque)->work_mem.get_ptr() + ATXDEC_MAX_FRAME_LENGTH + ATXDEC_SAMPLES_PER_FRAME * sizeof(f32) * i;
+			frame->linesize[i] = ATXDEC_SAMPLES_PER_FRAME * sizeof(f32);
+		}
+
+		frame->buf[0] = av_buffer_create(frame->data[0], ATXDEC_SAMPLES_PER_FRAME * sizeof(f32) * frame->ch_layout.nb_channels, [](void*, uint8_t*){}, nullptr, 0);
+		return 0;
+	};
 	ctx->block_align = nbytes;
 	ctx->ch_layout.nb_channels = nch_in;
 	ctx->sample_rate = sampling_freq;
diff --git a/rpcs3/util/media_utils.cpp b/rpcs3/util/media_utils.cpp
index 73bc86ef46c2..b25415617ef5 100644
--- a/rpcs3/util/media_utils.cpp
+++ b/rpcs3/util/media_utils.cpp
@@ -347,9 +347,22 @@ namespace utils
 	{
 		if (!codec) return false;
 
-		for (const AVSampleFormat* p = codec->sample_fmts; p && *p != AV_SAMPLE_FMT_NONE; p++)
+		const void* sample_formats = nullptr;
+		int num = 0;
+
+		if (const int err = avcodec_get_supported_config(nullptr, codec, AVCodecConfig::AV_CODEC_CONFIG_SAMPLE_FORMAT, 0, &sample_formats, &num))
+		{
+			media_log.error("check_sample_fmt: avcodec_get_supported_config error: %d='%s'", err, av_error_to_string(err));
+			return false;
+		}
+
+		if (!sample_formats)
+			return true; // All supported
+
+		int i = 0;
+		for (const AVSampleFormat* fmt = static_cast<const AVSampleFormat*>(sample_formats); fmt && *fmt != AV_SAMPLE_FMT_NONE && i < num; fmt++, i++)
 		{
-			if (*p == sample_fmt)
+			if (*fmt == sample_fmt)
 			{
 				return true;
 			}
@@ -360,18 +373,33 @@ namespace utils
 	// just pick the highest supported samplerate
 	static int select_sample_rate(const AVCodec* codec)
 	{
-		if (!codec || !codec->supported_samplerates)
-			return 48000;
+		constexpr int default_sample_rate = 48000;
+
+		if (!codec)
+			return default_sample_rate;
+
+		const void* sample_rates = nullptr;
+		int num = 0;
+
+		if (const int err = avcodec_get_supported_config(nullptr, codec, AVCodecConfig::AV_CODEC_CONFIG_SAMPLE_RATE, 0, &sample_rates, &num))
+		{
+			media_log.error("select_sample_rate: avcodec_get_supported_config error: %d='%s'", err, av_error_to_string(err));
+			return default_sample_rate;
+		}
 
-		int best_samplerate = 0;
-		for (const int* samplerate = codec->supported_samplerates; samplerate && *samplerate != 0; samplerate++)
+		if (!sample_rates)
+			return default_sample_rate;
+
+		int i = 0;
+		int best_sample_rate = 0;
+		for (const int* sample_rate = static_cast<const int*>(sample_rates); sample_rate && *sample_rate != 0 && i < num; sample_rate++, i++)
 		{
-			if (!best_samplerate || abs(48000 - *samplerate) < abs(48000 - best_samplerate))
+			if (!best_sample_rate || abs(default_sample_rate - *sample_rate) < abs(default_sample_rate - best_sample_rate))
 			{
-				best_samplerate = *samplerate;
+				best_sample_rate = *sample_rate;
 			}
 		}
-		return best_samplerate;
+		return best_sample_rate;
 	}
 
 	AVChannelLayout get_preferred_channel_layout(int channels)
@@ -397,12 +425,25 @@ namespace utils
 	{
 		if (!codec) return nullptr;
 
+		const void* ch_layouts = nullptr;
+		int num = 0;
+
+		if (const int err = avcodec_get_supported_config(nullptr, codec, AVCodecConfig::AV_CODEC_CONFIG_CHANNEL_LAYOUT, 0, &ch_layouts, &num))
+		{
+			media_log.error("select_channel_layout: avcodec_get_supported_config error: %d='%s'", err, av_error_to_string(err));
+			return nullptr;
+		}
+
+		if (!ch_layouts)
+			return nullptr;
+
 		const AVChannelLayout preferred_ch_layout = get_preferred_channel_layout(channels);
 		const AVChannelLayout* found_ch_layout = nullptr;
 
-		for (const AVChannelLayout* ch_layout = codec->ch_layouts;
-			 ch_layout && memcmp(ch_layout, &empty_ch_layout, sizeof(AVChannelLayout)) != 0;
-			 ch_layout++)
+		int i = 0;
+		for (const AVChannelLayout* ch_layout = static_cast<const AVChannelLayout*>(ch_layouts);
+			 i < num && ch_layout && memcmp(ch_layout, &empty_ch_layout, sizeof(AVChannelLayout)) != 0;
+			 ch_layout++, i++)
 		{
 			media_log.notice("select_channel_layout: listing channel layout '%s' with %d channels", channel_layout_name(*ch_layout), ch_layout->nb_channels);
 

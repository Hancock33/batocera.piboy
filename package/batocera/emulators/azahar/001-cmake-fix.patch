diff --git a/externals/CMakeLists.txt b/externals/CMakeLists.txt
index e9c1d5646..041f4f229 100644
--- a/externals/CMakeLists.txt
+++ b/externals/CMakeLists.txt
@@ -64,7 +64,7 @@ target_link_libraries(catch2 INTERFACE Catch2::Catch2WithMain)
 if(USE_SYSTEM_CRYPTOPP)
     find_package(cryptopp REQUIRED)
     add_library(cryptopp INTERFACE)
-    target_link_libraries(cryptopp SYSTEM INTERFACE cryptopp::cryptopp)
+    target_link_libraries(cryptopp INTERFACE cryptopp::cryptopp)
 else()
     if (WIN32 AND NOT MSVC AND "arm64" IN_LIST ARCHITECTURE)
         # TODO: CryptoPP ARM64 ASM does not seem to support Windows unless compiled with MSVC.
@@ -89,7 +89,7 @@ target_disable_warnings(dds-ktx)
 if(USE_SYSTEM_FMT)
     add_library(fmt INTERFACE)
     find_package(fmt REQUIRED)
-    target_link_libraries(fmt SYSTEM INTERFACE fmt::fmt)
+    target_link_libraries(fmt INTERFACE fmt::fmt)
 else()
     option(FMT_INSTALL "" ON)
     add_subdirectory(fmt EXCLUDE_FROM_ALL)
@@ -101,7 +101,7 @@ if ("x86_64" IN_LIST ARCHITECTURE)
     if(USE_SYSTEM_XBYAK)
         find_package(xbyak REQUIRED)
         add_library(xbyak INTERFACE)
-        target_link_libraries(xbyak SYSTEM INTERFACE xbyak::xbyak)
+        target_link_libraries(xbyak INTERFACE xbyak::xbyak)
     else()
         add_subdirectory(xbyak EXCLUDE_FROM_ALL)
     endif()
@@ -117,7 +117,7 @@ if ("x86_64" IN_LIST ARCHITECTURE OR "arm64" IN_LIST ARCHITECTURE)
     if(USE_SYSTEM_DYNARMIC)
         find_package(dynarmic REQUIRED)
         add_library(dynarmic INTERFACE)
-        target_link_libraries(dynarmic SYSTEM INTERFACE dynarmic::dynarmic)
+        target_link_libraries(dynarmic INTERFACE dynarmic::dynarmic)
         # The dynarmic package's cmake files are helpfully completely silent
         # so we have to inform the user of its status ourselves
         if(TARGET dynarmic::dynarmic)
@@ -140,7 +140,7 @@ endif()
 if(USE_SYSTEM_INIH)
     find_package(inih REQUIRED COMPONENTS inih inir)
     add_library(inih INTERFACE)
-    target_link_libraries(inih SYSTEM INTERFACE inih::inih inih::inir)
+    target_link_libraries(inih INTERFACE inih::inih inih::inir)
 else()
     add_subdirectory(inih)
 endif()
@@ -179,7 +179,7 @@ if (USE_SYSTEM_FFMPEG_HEADERS)
         message(WARNING "System FFmpeg headers not found. Falling back on bundled headers.")
     else()
         message(STATUS "Using system FFmpeg headers.")
-        target_include_directories(library-headers SYSTEM INTERFACE ${SYSTEM_FFMPEG_INCLUDES})
+        target_include_directories(library-headers INTERFACE ${SYSTEM_FFMPEG_INCLUDES})
         set(FOUND_FFMPEG_HEADERS ON)
     endif()
 endif()
@@ -221,7 +221,7 @@ if(USE_SYSTEM_ZSTD)
     if(TARGET zstd::libzstd_shared)
         message(STATUS "Found system Zstandard")
     endif()
-    target_link_libraries(zstd SYSTEM INTERFACE zstd::libzstd_shared)
+    target_link_libraries(zstd INTERFACE zstd::libzstd_shared)
 else()
     set(ZSTD_LEGACY_SUPPORT OFF)
     set(ZSTD_BUILD_PROGRAMS OFF)
@@ -256,7 +256,7 @@ endif()
 if(USE_SYSTEM_ENET)
     find_package(libenet REQUIRED)
     add_library(enet INTERFACE)
-    target_link_libraries(enet SYSTEM INTERFACE libenet::libenet)
+    target_link_libraries(enet INTERFACE libenet::libenet)
 else()
     add_subdirectory(enet)
     target_include_directories(enet INTERFACE ./enet/include)
@@ -267,7 +267,7 @@ if (ENABLE_CUBEB)
     if(USE_SYSTEM_CUBEB)
         find_package(cubeb REQUIRED)
         add_library(cubeb INTERFACE)
-        target_link_libraries(cubeb SYSTEM INTERFACE cubeb::cubeb)
+        target_link_libraries(cubeb INTERFACE cubeb::cubeb)
         if(TARGET cubeb::cubeb)
             message(STATUS "Found system cubeb")
         endif()
@@ -305,7 +305,7 @@ if (USE_SYSTEM_JSON)
     get_target_property(NLOHMANN_PREFIX nlohmann_json::nlohmann_json INTERFACE_INCLUDE_DIRECTORIES)
     # The nlohmann-json3 package expects "#include <nlohmann/json.hpp>"
     # Citra uses "#include <json.hpp>" so we have to add this manually
-    target_include_directories(json-headers SYSTEM INTERFACE "${NLOHMANN_PREFIX}/nlohmann")
+    target_include_directories(json-headers INTERFACE "${NLOHMANN_PREFIX}/nlohmann")
 else()
     target_include_directories(json-headers INTERFACE ./json)
     target_disable_warnings(json-headers)
@@ -346,7 +346,7 @@ if(USE_SYSTEM_CPP_HTTPLIB)
         target_disable_warnings(httplib)
     else()
         if(CppHttp_FOUND)
-            target_link_libraries(httplib SYSTEM INTERFACE httplib::httplib)
+            target_link_libraries(httplib INTERFACE httplib::httplib)
         else()
             message(STATUS "Cpp-httplib not found or not suitable version! Falling back to bundled...")
             target_include_directories(httplib INTERFACE ./httplib)
@@ -369,7 +369,7 @@ if (ENABLE_WEB_SERVICE)
     if (USE_SYSTEM_CPP_JWT)
         find_package(cpp-jwt REQUIRED)
         add_library(cpp-jwt INTERFACE)
-        target_link_libraries(cpp-jwt SYSTEM INTERFACE cpp-jwt::cpp-jwt)
+        target_link_libraries(cpp-jwt INTERFACE cpp-jwt::cpp-jwt)
     else()
         add_library(cpp-jwt INTERFACE)
         target_include_directories(cpp-jwt INTERFACE ./cpp-jwt/include)
@@ -382,7 +382,7 @@ endif()
 if(USE_SYSTEM_LODEPNG)
     add_library(lodepng INTERFACE)
     find_package(lodepng REQUIRED)
-    target_link_libraries(lodepng SYSTEM INTERFACE lodepng::lodepng)
+    target_link_libraries(lodepng INTERFACE lodepng::lodepng)
 else()
     add_subdirectory(lodepng)
 endif()
@@ -399,7 +399,7 @@ if (ENABLE_OPENAL)
     if(USE_SYSTEM_OPENAL)
         add_library(OpenAL INTERFACE)
         find_package(OpenAL REQUIRED)
-        target_link_libraries(OpenAL SYSTEM INTERFACE OpenAL::OpenAL)
+        target_link_libraries(OpenAL INTERFACE OpenAL::OpenAL)
     else()
         set(ALSOFT_EMBED_HRTF_DATA OFF CACHE BOOL "")
         set(ALSOFT_EXAMPLES OFF CACHE BOOL "")
@@ -448,7 +448,7 @@ if (ENABLE_VULKAN)
         target_link_libraries(SPIRV INTERFACE glslang::SPIRV)
         # System include path is different from submodule include path
         get_target_property(GLSLANG_PREFIX glslang::SPIRV INTERFACE_INCLUDE_DIRECTORIES)
-        target_include_directories(SPIRV SYSTEM INTERFACE "${GLSLANG_PREFIX}/glslang")
+        target_include_directories(SPIRV INTERFACE "${GLSLANG_PREFIX}/glslang")
     else()
         set(SKIP_GLSLANG_INSTALL ON CACHE BOOL "")
         set(ENABLE_GLSLANG_BINARIES OFF CACHE BOOL "")
@@ -468,7 +468,7 @@ if (ENABLE_VULKAN)
         find_package(VulkanMemoryAllocator REQUIRED)
         if(TARGET GPUOpen::VulkanMemoryAllocator)
             message(STATUS "Found VulkanMemoryAllocator")
-            target_link_libraries(vma SYSTEM INTERFACE GPUOpen::VulkanMemoryAllocator)
+            target_link_libraries(vma INTERFACE GPUOpen::VulkanMemoryAllocator)
         endif()
     else()
         add_library(vma INTERFACE)
@@ -482,7 +482,7 @@ if (ENABLE_VULKAN)
         find_package(Vulkan REQUIRED)
         if(TARGET Vulkan::Headers)
             message(STATUS "Found Vulkan headers")
-            target_link_libraries(vulkan-headers SYSTEM INTERFACE Vulkan::Headers)
+            target_link_libraries(vulkan-headers INTERFACE Vulkan::Headers)
         endif()
     else()
         target_include_directories(vulkan-headers INTERFACE ./vulkan-headers/include)

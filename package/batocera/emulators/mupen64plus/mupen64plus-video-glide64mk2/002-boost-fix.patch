diff --git a/src/GlideHQ/TxCache.cpp b/src/GlideHQ/TxCache.cpp
index 46960f4..4111296 100644
--- a/src/GlideHQ/TxCache.cpp
+++ b/src/GlideHQ/TxCache.cpp
@@ -237,7 +237,7 @@ TxCache::save(const wchar_t *path, const wchar_t *filename, int config)
     /* dump cache to disk */
     char cbuf[MAX_PATH];
 
-    boost::filesystem::wpath cachepath(path);
+    boost::filesystem::path cachepath(path);
     boost::filesystem::create_directory(cachepath);
 
     /* Ugly hack to enable fopen/gzopen in Win9x */
@@ -330,7 +330,7 @@ TxCache::load(const wchar_t *path, const wchar_t *filename, int config)
   /* find it on disk */
   char cbuf[MAX_PATH];
 
-  boost::filesystem::wpath cachepath(path);
+  boost::filesystem::path cachepath(path);
 
 #ifdef BOOST_WINDOWS_API
   wchar_t curpath[MAX_PATH];
diff --git a/src/GlideHQ/TxHiResCache.cpp b/src/GlideHQ/TxHiResCache.cpp
index ac87f2f..99ae644 100644
--- a/src/GlideHQ/TxHiResCache.cpp
+++ b/src/GlideHQ/TxHiResCache.cpp
@@ -65,8 +65,8 @@ TxHiResCache::~TxHiResCache()
   if ((_options & DUMP_HIRESTEXCACHE) && !_haveCache && !_abortLoad) {
     /* dump cache to disk */
     std::wstring filename = _ident + L"_HIRESTEXTURES.dat";
-    boost::filesystem::wpath cachepath(_cachepath);
-    cachepath /= boost::filesystem::wpath(L"glidehq");
+    boost::filesystem::path cachepath(_cachepath);
+    cachepath /= boost::filesystem::path(L"glidehq");
     int config = _options & (HIRESTEXTURES_MASK|COMPRESS_HIRESTEX|COMPRESSION_MASK|TILE_HIRESTEX|FORCE16BPP_HIRESTEX|GZ_HIRESTEXCACHE|LET_TEXARTISTS_FLY);
 
     TxCache::save(cachepath.wstring().c_str(), filename.c_str(), config);
@@ -107,8 +107,8 @@ TxHiResCache::TxHiResCache(int maxwidth, int maxheight, int maxbpp, int options,
   if (_options & DUMP_HIRESTEXCACHE) {
     /* find it on disk */
     std::wstring filename = _ident + L"_HIRESTEXTURES.dat";
-    boost::filesystem::wpath cachepath(_cachepath);
-    cachepath /= boost::filesystem::wpath(L"glidehq");
+    boost::filesystem::path cachepath(_cachepath);
+    cachepath /= boost::filesystem::path(L"glidehq");
     int config = _options & (HIRESTEXTURES_MASK|COMPRESS_HIRESTEX|COMPRESSION_MASK|TILE_HIRESTEX|FORCE16BPP_HIRESTEX|GZ_HIRESTEXCACHE|LET_TEXARTISTS_FLY);
 
     _haveCache = TxCache::load(cachepath.wstring().c_str(), filename.c_str(), config);
@@ -132,7 +132,7 @@ TxHiResCache::load(boolean replace) /* 0 : reload, 1 : replace partial */
 
     if (!replace) TxCache::clear();
 
-    boost::filesystem::wpath dir_path(_datapath);
+    boost::filesystem::path dir_path(_datapath);
 
     switch (_options & HIRESTEXTURES_MASK) {
     case GHQ_HIRESTEXTURES:
@@ -149,8 +149,8 @@ TxHiResCache::load(boolean replace) /* 0 : reload, 1 : replace partial */
       INFO(80, L"  usage of only 2) and 3) highly recommended!\n");
       INFO(80, L"  folder names must be in US-ASCII characters!\n");
 
-      dir_path /= boost::filesystem::wpath(L"hires_texture");
-      dir_path /= boost::filesystem::wpath(_ident);
+      dir_path /= boost::filesystem::path(L"hires_texture");
+      dir_path /= boost::filesystem::path(_ident);
       loadHiResTextures(dir_path, replace);
       break;
     case JABO_HIRESTEXTURES:
@@ -164,7 +164,7 @@ TxHiResCache::load(boolean replace) /* 0 : reload, 1 : replace partial */
 }
 
 boolean
-TxHiResCache::loadHiResTextures(boost::filesystem::wpath dir_path, boolean replace)
+TxHiResCache::loadHiResTextures(boost::filesystem::path dir_path, boolean replace)
 {
   uint32_t last, now, diff;
   DBG_INFO(80, L"-----\n");
@@ -196,7 +196,7 @@ TxHiResCache::loadHiResTextures(boost::filesystem::wpath dir_path, boolean repla
       ERRLOG("Error while changing current directory to '%s'!", cbuf);
 #endif
 
-  /* NOTE: I could use the boost::wdirectory_iterator and boost::wpath
+  /* NOTE: I could use the boost::wdirectory_iterator and boost::path
    * to resolve UNICODE file names and paths. But then, _wfopen() is
    * required to get the file descriptor for MS Windows to pass into
    * libpng, which is incompatible with Win9x. Win9x's fopen() cannot
@@ -258,7 +258,7 @@ TxHiResCache::loadHiResTextures(boost::filesystem::wpath dir_path, boolean repla
 #define CRCFMTSIZ_LEN 13
 #define PALCRC_LEN 9
     //wcstombs(fname, it->path().leaf().c_str(), MAX_PATH);
-    strncpy(fname, it->path().leaf().string().c_str(), sizeof(fname));
+    //strncpy(fname, it->path().leaf().string().c_str(), sizeof(fname));
     fname[sizeof(fname) - 1] = '\0';
     /* XXX case sensitivity fiasco!
      * files must use _a, _rgb, _all, _allciByRGBA, _ciByRGBA, _ci
diff --git a/src/GlideHQ/TxHiResCache.h b/src/GlideHQ/TxHiResCache.h
index d2094fe..4f76d21 100644
--- a/src/GlideHQ/TxHiResCache.h
+++ b/src/GlideHQ/TxHiResCache.h
@@ -47,7 +47,7 @@ private:
   TxImage *_txImage;
   TxQuantize *_txQuantize;
   TxReSample *_txReSample;
-  boolean loadHiResTextures(boost::filesystem::wpath dir_path, boolean replace);
+  boolean loadHiResTextures(boost::filesystem::path dir_path, boolean replace);
 public:
   ~TxHiResCache();
   TxHiResCache(int maxwidth, int maxheight, int maxbpp, int options,
diff --git a/src/GlideHQ/TxTexCache.cpp b/src/GlideHQ/TxTexCache.cpp
index 2297a0f..99d1364 100644
--- a/src/GlideHQ/TxTexCache.cpp
+++ b/src/GlideHQ/TxTexCache.cpp
@@ -37,8 +37,8 @@ TxTexCache::~TxTexCache()
   if (_options & DUMP_TEXCACHE) {
     /* dump cache to disk */
     std::wstring filename = _ident + L"_MEMORYCACHE.dat";
-    boost::filesystem::wpath cachepath(_cachepath);
-    cachepath /= boost::filesystem::wpath(L"glidehq");
+    boost::filesystem::path cachepath(_cachepath);
+    cachepath /= boost::filesystem::path(L"glidehq");
     int config = _options & (FILTER_MASK|ENHANCEMENT_MASK|COMPRESS_TEX|COMPRESSION_MASK|FORCE16BPP_TEX|GZ_TEXCACHE);
 
     TxCache::save(cachepath.wstring().c_str(), filename.c_str(), config);
@@ -58,8 +58,8 @@ TxTexCache::TxTexCache(int options, int cachesize, const wchar_t *datapath, cons
   if (_options & DUMP_TEXCACHE) {
     /* find it on disk */
     std::wstring filename = _ident + L"_MEMORYCACHE.dat";
-    boost::filesystem::wpath cachepath(_cachepath);
-    cachepath /= boost::filesystem::wpath(L"glidehq");
+    boost::filesystem::path cachepath(_cachepath);
+    cachepath /= boost::filesystem::path(L"glidehq");
     int config = _options & (FILTER_MASK|ENHANCEMENT_MASK|COMPRESS_TEX|COMPRESSION_MASK|FORCE16BPP_TEX|GZ_TEXCACHE);
 
     TxCache::load(cachepath.wstring().c_str(), filename.c_str(), config);

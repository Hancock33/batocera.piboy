diff --git a/CMakeModules/FindEGL.cmake b/CMakeModules/FindEGL.cmake
index 48e51728..c1c947b1 100644
--- a/CMakeModules/FindEGL.cmake
+++ b/CMakeModules/FindEGL.cmake
@@ -86,6 +86,17 @@ find_library(EGL_LIBRARY
         ${PKG_EGL_LIBRARY_DIRS}
 )
 
+if(USE_MALI)
+pkg_check_modules(PKG_MALI QUIET mali)
+find_library(MALI_LIBRARY
+    NAMES
+        mali
+    HINTS
+        ${PKG_MALI_LIBRARY_DIRS}
+)
+endif()
+
+
 # NB: We do *not* use the version information from pkg-config, as that
 #     is the implementation version (eg: the Mesa version)
 if(EGL_INCLUDE_DIR)
@@ -117,7 +128,11 @@ endif()
 
 cmake_push_check_state(RESET)
 list(APPEND CMAKE_REQUIRED_LIBRARIES "${EGL_LIBRARY}")
+if(USE_MALI)
+list(APPEND CMAKE_REQUIRED_LIBRARIES "${MALI_LIBRARY}")
+endif()
 list(APPEND CMAKE_REQUIRED_INCLUDES "${EGL_INCLUDE_DIR}")
+list(APPEND CMAKE_REQUIRED_DEFINITIONS "-DEGL_NO_X11")
 
 check_cxx_source_compiles("
 #include <EGL/egl.h>
@@ -161,7 +176,11 @@ endif()
 mark_as_advanced(EGL_LIBRARY EGL_INCLUDE_DIR HAVE_EGL)
 
 # compatibility variables
+if (USE_MALI)
+set(EGL_LIBRARIES ${EGL_LIBRARY} ${MALI_LIBRARY})
+else()
 set(EGL_LIBRARIES ${EGL_LIBRARY})
+endif()
 set(EGL_INCLUDE_DIRS ${EGL_INCLUDE_DIR})
 set(EGL_VERSION_STRING ${EGL_VERSION})
 
diff --git a/dep/glad/CMakeLists.txt b/dep/glad/CMakeLists.txt
index 24a4fb45..59eb66e5 100644
--- a/dep/glad/CMakeLists.txt
+++ b/dep/glad/CMakeLists.txt
@@ -17,8 +17,9 @@ if(WIN32)
   target_sources(glad PRIVATE src/glad_wgl.c)
 else()
   if(USE_EGL)
+    target_compile_definitions(glad PRIVATE -DEGL_NO_X11)
     target_sources(glad PRIVATE src/glad_egl.c)
-    target_link_libraries(glad PRIVATE EGL::EGL)
+    target_link_libraries(glad PRIVATE EGL)
   endif()
   if(USE_X11)
     target_sources(glad PRIVATE src/glad_glx.c)
diff --git a/src/core/settings.cpp b/src/core/settings.cpp
index aa349319..f556d5fa 100644
--- a/src/core/settings.cpp
+++ b/src/core/settings.cpp
@@ -1323,18 +1323,18 @@ std::string EmuFolders::Textures;
 
 void EmuFolders::SetDefaults()
 {
-  Bios = Path::Combine(DataRoot, "bios");
-  Cache = Path::Combine(DataRoot, "cache");
-  Cheats = Path::Combine(DataRoot, "cheats");
-  Covers = Path::Combine(DataRoot, "covers");
-  Dumps = Path::Combine(DataRoot, "dump");
-  GameSettings = Path::Combine(DataRoot, "gamesettings");
-  InputProfiles = Path::Combine(DataRoot, "inputprofiles");
-  MemoryCards = Path::Combine(DataRoot, "memcards");
-  SaveStates = Path::Combine(DataRoot, "savestates");
-  Screenshots = Path::Combine(DataRoot, "screenshots");
-  Shaders = Path::Combine(DataRoot, "shaders");
-  Textures = Path::Combine(DataRoot, "textures");
+  Bios = "/userdata/bios";
+  Cache = "/userdata/system/cache/psx";
+  Cheats = "/userdata/cheats/psx";
+  Covers = "/userdata/system/configs/duckstation/covers";
+  Dumps = "/userdata/system/configs/duckstation/dump";
+  GameSettings = "/userdata/system/configs/duckstation/gamesettings";
+  InputProfiles = "/userdata/system/configs/duckstation/inputprofiles";
+  MemoryCards = "/userdata/saves/psx";
+  SaveStates = "/userdata/saves/psx";
+  Screenshots = "/userdata/screenshots";
+  Shaders = "/usr/bin/duckstation/resources/shaders";
+  Textures = "/userdata/system/configs/duckstation/textures";
 }
 
 static std::string LoadPathFromSettings(SettingsInterface& si, const std::string& root, const char* section,
@@ -1380,18 +1380,18 @@ void EmuFolders::LoadConfig(SettingsInterface& si)
 void EmuFolders::Save(SettingsInterface& si)
 {
   // convert back to relative
-  si.SetStringValue("BIOS", "SearchDirectory", Path::MakeRelative(Bios, DataRoot).c_str());
-  si.SetStringValue("Folders", "Cache", Path::MakeRelative(Cache, DataRoot).c_str());
-  si.SetStringValue("Folders", "Cheats", Path::MakeRelative(Cheats, DataRoot).c_str());
-  si.SetStringValue("Folders", "Covers", Path::MakeRelative(Covers, DataRoot).c_str());
-  si.SetStringValue("Folders", "Dumps", Path::MakeRelative(Dumps, DataRoot).c_str());
-  si.SetStringValue("Folders", "GameSettings", Path::MakeRelative(GameSettings, DataRoot).c_str());
-  si.SetStringValue("Folders", "InputProfiles", Path::MakeRelative(InputProfiles, DataRoot).c_str());
-  si.SetStringValue("MemoryCards", "Directory", Path::MakeRelative(MemoryCards, DataRoot).c_str());
-  si.SetStringValue("Folders", "SaveStates", Path::MakeRelative(SaveStates, DataRoot).c_str());
-  si.SetStringValue("Folders", "Screenshots", Path::MakeRelative(Screenshots, DataRoot).c_str());
-  si.SetStringValue("Folders", "Shaders", Path::MakeRelative(Shaders, DataRoot).c_str());
-  si.SetStringValue("Folders", "Textures", Path::MakeRelative(Textures, DataRoot).c_str());
+  si.SetStringValue("BIOS", "SearchDirectory", Bios.c_str());
+  si.SetStringValue("Folders", "Cache", Cache.c_str());
+  si.SetStringValue("Folders", "Cheats", Cheats.c_str());
+  si.SetStringValue("Folders", "Covers", Covers.c_str());
+  si.SetStringValue("Folders", "Dumps", Dumps.c_str());
+  si.SetStringValue("Folders", "GameSettings", GameSettings.c_str());
+  si.SetStringValue("Folders", "InputProfiles", InputProfiles.c_str());
+  si.SetStringValue("MemoryCards", "Directory", MemoryCards.c_str());
+  si.SetStringValue("Folders", "SaveStates", SaveStates.c_str());
+  si.SetStringValue("Folders", "Screenshots", Screenshots.c_str());
+  si.SetStringValue("Folders", "Shaders", Shaders.c_str());
+  si.SetStringValue("Folders", "Textures", Textures.c_str());
 }
 
 void EmuFolders::Update()

--- a/src/core/cpu_recompiler_code_generator_aarch32.cpp	2024-07-25 12:53:51.857500084 +0200
+++ b/src/core/cpu_recompiler_code_generator_aarch32.cpp	2024-07-25 13:17:48.577390739 +0200
@@ -148,7 +148,7 @@
 }
 
 void CPU::Recompiler::armEmitFarStore(vixl::aarch32::Assembler* armAsm, const vixl::aarch32::Register& reg,
-                                      const void* addr, const vixl::aarch64::Register& tempreg)
+                                      const void* addr, const vixl::aarch32::Register& tempreg)
 {
   armMoveAddressToReg(armAsm, tempreg, addr);
   armAsm->str(reg, vixl::aarch32::MemOperand(tempreg));
@@ -1931,12 +1931,12 @@
   {
     if (m_block->HasFlag(CodeCache::BlockFlags::NeedsDynamicFetchTicks))
     {
-      armEmitFarLoad(m_emit, RARG2, GetFetchMemoryAccessTimePtr());
-      m_emit->ldr(RARG1, a32::MemOperand(GetCPUPtrReg(), OFFSETOF(State, pending_ticks)));
-      m_emit->Mov(RARG3, m_block->size);
-      m_emit->mul(RARG2, RARG2, RARG3);
-      m_emit->add(RARG1, RARG1, RARG2);
-      m_emit->str(RARG1, a32::MemOperand(GetCPUPtrReg(), OFFSETOF(State, pending_ticks)));
+      armEmitFarLoad(m_emit, vixl::aarch32::Register(RARG2), GetFetchMemoryAccessTimePtr());
+      m_emit->ldr(vixl::aarch32::Register(RARG1), a32::MemOperand(GetCPUPtrReg(), OFFSETOF(State, pending_ticks)));
+      m_emit->Mov(vixl::aarch32::Register(RARG3), m_block->size);
+      m_emit->mul(vixl::aarch32::Register(RARG2), vixl::aarch32::Register(RARG2), vixl::aarch32::Register(RARG3));
+      m_emit->add(vixl::aarch32::Register(RARG1), vixl::aarch32::Register(RARG1), vixl::aarch32::Register(RARG2));
+      m_emit->str(vixl::aarch32::Register(RARG1), a32::MemOperand(GetCPUPtrReg(), OFFSETOF(State, pending_ticks)));
     }
     else
     {

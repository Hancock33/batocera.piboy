diff --git a/src/core/settings.cpp b/src/core/settings.cpp
index 173b42c3..e0adb670 100644
--- a/src/core/settings.cpp
+++ b/src/core/settings.cpp
@@ -15,6 +15,11 @@
 #include <array>
 #include <cctype>
 #include <numeric>
+static std::string bios_dir("/userdata");
+static std::string batocfg_dir("/userdata/system/configs/duckstation");
+static std::string batosave_dir("/userdata/saves/psx/duckstation");
+static std::string batoscreen_dir("/userdata/screenshots");
+
 Log_SetChannel(Settings);
 
 Settings g_settings;
@@ -1206,18 +1211,18 @@ std::string EmuFolders::Textures;
 
 void EmuFolders::SetDefaults()
 {
-  Bios = Path::Combine(DataRoot, "bios");
-  Cache = Path::Combine(DataRoot, "cache");
-  Cheats = Path::Combine(DataRoot, "cheats");
-  Covers = Path::Combine(DataRoot, "covers");
-  Dumps = Path::Combine(DataRoot, "dump");
-  GameSettings = Path::Combine(DataRoot, "gamesettings");
-  InputProfiles = Path::Combine(DataRoot, "inputprofiles");
-  MemoryCards = Path::Combine(DataRoot, "memcards");
-  SaveStates = Path::Combine(DataRoot, "savestates");
-  Screenshots = Path::Combine(DataRoot, "screenshots");
-  Shaders = Path::Combine(DataRoot, "shaders");
-  Textures = Path::Combine(DataRoot, "textures");
+  Bios = Path::Combine(bios_dir, "bios");
+  Cache = Path::Combine(batocfg_dir, "cache");
+  Cheats = Path::Combine(batocfg_dir, "cheats");
+  Covers = Path::Combine(batocfg_dir, "covers");
+  Dumps = Path::Combine(batocfg_dir, "dump");
+  GameSettings = Path::Combine(batocfg_dir, "gamesettings");
+  InputProfiles = Path::Combine(batocfg_dir, "inputprofiles");
+  MemoryCards = Path::Combine(batosave_dir, "duckstation");
+  SaveStates = Path::Combine(batosave_dir, "duckstation");
+  Screenshots = Path::Combine(batoscreen_dir, "psx");
+  Shaders = Path::Combine(batocfg_dir, "shaders");
+  Textures = Path::Combine(batocfg_dir, "textures");
 }
 
 static std::string LoadPathFromSettings(SettingsInterface& si, const std::string& root, const char* section,
@@ -1233,18 +1238,18 @@ static std::string LoadPathFromSettings(SettingsInterface& si, const std::string
 
 void EmuFolders::LoadConfig(SettingsInterface& si)
 {
-  Bios = LoadPathFromSettings(si, DataRoot, "BIOS", "SearchDirectory", "bios");
-  Cache = LoadPathFromSettings(si, DataRoot, "Folders", "Cache", "cache");
-  Cheats = LoadPathFromSettings(si, DataRoot, "Folders", "Cheats", "cheats");
-  Covers = LoadPathFromSettings(si, DataRoot, "Folders", "Covers", "covers");
-  Dumps = LoadPathFromSettings(si, DataRoot, "Folders", "Dumps", "dump");
-  GameSettings = LoadPathFromSettings(si, DataRoot, "Folders", "GameSettings", "gamesettings");
-  InputProfiles = LoadPathFromSettings(si, DataRoot, "Folders", "InputProfiles", "inputprofiles");
-  MemoryCards = LoadPathFromSettings(si, DataRoot, "MemoryCards", "Directory", "memcards");
-  SaveStates = LoadPathFromSettings(si, DataRoot, "Folders", "SaveStates", "savestates");
-  Screenshots = LoadPathFromSettings(si, DataRoot, "Folders", "Screenshots", "screenshots");
-  Shaders = LoadPathFromSettings(si, DataRoot, "Folders", "Shaders", "shaders");
-  Textures = LoadPathFromSettings(si, DataRoot, "Folders", "Textures", "textures");
+  Bios = LoadPathFromSettings(si, bios_dir, "BIOS", "SearchDirectory", "bios");
+  Cache = LoadPathFromSettings(si, batocfg_dir, "Folders", "Cache", "cache");
+  Cheats = LoadPathFromSettings(si, batocfg_dir, "Folders", "Cheats", "cheats");
+  Covers = LoadPathFromSettings(si, batocfg_dir, "Folders", "Covers", "covers");
+  Dumps = LoadPathFromSettings(si, batocfg_dir, "Folders", "Dumps", "dump");
+  GameSettings = LoadPathFromSettings(si, batocfg_dir, "Folders", "GameSettings", "gamesettings");
+  InputProfiles = LoadPathFromSettings(si, batocfg_dir, "Folders", "InputProfiles", "inputprofiles");
+  MemoryCards = LoadPathFromSettings(si, batosave_dir, "MemoryCards", "Directory", "duckstation");
+  SaveStates = LoadPathFromSettings(si, batosave_dir, "Folders", "SaveStates", "duckstation");
+  Screenshots = LoadPathFromSettings(si, batoscreen_dir, "Folders", "Screenshots", "psx");
+  Shaders = LoadPathFromSettings(si, batocfg_dir, "Folders", "Shaders", "shaders");
+  Textures = LoadPathFromSettings(si, batocfg_dir, "Folders", "Textures", "textures");
 
   Log_DevPrintf("BIOS Directory: %s", Bios.c_str());
   Log_DevPrintf("Cache Directory: %s", Cache.c_str());
@@ -1263,18 +1268,18 @@ void EmuFolders::LoadConfig(SettingsInterface& si)
 void EmuFolders::Save(SettingsInterface& si)
 {
   // convert back to relative
-  si.SetStringValue("BIOS", "SearchDirectory", Path::MakeRelative(Bios, DataRoot).c_str());
-  si.SetStringValue("Folders", "Cache", Path::MakeRelative(Cache, DataRoot).c_str());
-  si.SetStringValue("Folders", "Cheats", Path::MakeRelative(Cheats, DataRoot).c_str());
-  si.SetStringValue("Folders", "Covers", Path::MakeRelative(Covers, DataRoot).c_str());
-  si.SetStringValue("Folders", "Dumps", Path::MakeRelative(Dumps, DataRoot).c_str());
-  si.SetStringValue("Folders", "GameSettings", Path::MakeRelative(GameSettings, DataRoot).c_str());
-  si.SetStringValue("Folders", "InputProfiles", Path::MakeRelative(InputProfiles, DataRoot).c_str());
-  si.SetStringValue("MemoryCards", "Directory", Path::MakeRelative(MemoryCards, DataRoot).c_str());
-  si.SetStringValue("Folders", "SaveStates", Path::MakeRelative(SaveStates, DataRoot).c_str());
-  si.SetStringValue("Folders", "Screenshots", Path::MakeRelative(Screenshots, DataRoot).c_str());
-  si.SetStringValue("Folders", "Shaders", Path::MakeRelative(Shaders, DataRoot).c_str());
-  si.SetStringValue("Folders", "Textures", Path::MakeRelative(Textures, DataRoot).c_str());
+  si.SetStringValue("BIOS", "SearchDirectory", Path::MakeRelative(Bios, bios_dir).c_str());
+  si.SetStringValue("Folders", "Cache", Path::MakeRelative(Cache, bios_dir).c_str());
+  si.SetStringValue("Folders", "Cheats", Path::MakeRelative(Cheats, bios_dir).c_str());
+  si.SetStringValue("Folders", "Covers", Path::MakeRelative(Covers, bios_dir).c_str());
+  si.SetStringValue("Folders", "Dumps", Path::MakeRelative(Dumps, bios_dir).c_str());
+  si.SetStringValue("Folders", "GameSettings", Path::MakeRelative(GameSettings, bios_dir).c_str());
+  si.SetStringValue("Folders", "InputProfiles", Path::MakeRelative(InputProfiles, bios_dir).c_str());
+  si.SetStringValue("MemoryCards", "Directory", Path::MakeRelative(MemoryCards, batosave_dir).c_str());
+  si.SetStringValue("Folders", "SaveStates", Path::MakeRelative(SaveStates, batosave_dir).c_str());
+  si.SetStringValue("Folders", "Screenshots", Path::MakeRelative(Screenshots, batoscreen_dir).c_str());
+  si.SetStringValue("Folders", "Shaders", Path::MakeRelative(Shaders, bios_dir).c_str());
+  si.SetStringValue("Folders", "Textures", Path::MakeRelative(Textures, bios_dir).c_str());
 }
 
 void EmuFolders::Update()
diff --git a/src/duckstation-nogui/nogui_host.cpp b/src/duckstation-nogui/nogui_host.cpp
index b14408f1..7ea7d8b3 100644
--- a/src/duckstation-nogui/nogui_host.cpp
+++ b/src/duckstation-nogui/nogui_host.cpp
@@ -152,7 +152,7 @@ void NoGUIHost::SetResourcesDirectory()
 {
 #ifndef __APPLE__
   // On Windows/Linux, these are in the binary directory.
-  EmuFolders::Resources = Path::Combine(EmuFolders::AppRoot, "resources");
+  EmuFolders::Resources = "/usr/share/duckstation";
 #else
   // On macOS, this is in the bundle resources directory.
   EmuFolders::Resources = Path::Canonicalize(Path::Combine(EmuFolders::AppRoot, "../Resources"));
@@ -190,11 +190,11 @@ void NoGUIHost::SetDataDirectory()
     if (home_dir)
     {
       // ~/.local/share should exist, but just in case it doesn't and this is a fresh profile..
-      const std::string local_dir(Path::Combine(home_dir, ".local"));
-      const std::string share_dir(Path::Combine(local_dir, "share"));
+      const std::string local_dir("/userdata/system/configs");
+      const std::string share_dir("/usr/share");
       FileSystem::EnsureDirectoryExists(local_dir.c_str(), false);
       FileSystem::EnsureDirectoryExists(share_dir.c_str(), false);
-      EmuFolders::DataRoot = Path::Combine(share_dir, "duckstation");
+      EmuFolders::DataRoot = "/usr/share/duckstation";
     }
   }
 #elif defined(__APPLE__)
diff --git a/src/duckstation-qt/qthost.cpp b/src/duckstation-qt/qthost.cpp
index d3196be4..3c6daeed 100644
--- a/src/duckstation-qt/qthost.cpp
+++ b/src/duckstation-qt/qthost.cpp
@@ -228,7 +228,7 @@ void QtHost::SetResourcesDirectory()
 {
 #ifndef __APPLE__
   // On Windows/Linux, these are in the binary directory.
-  EmuFolders::Resources = Path::Combine(EmuFolders::AppRoot, "resources");
+  EmuFolders::Resources = "/usr/share/duckstation";
 #else
   // On macOS, this is in the bundle resources directory.
   EmuFolders::Resources = Path::Canonicalize(Path::Combine(EmuFolders::AppRoot, "../Resources"));
@@ -266,11 +266,11 @@ void QtHost::SetDataDirectory()
     if (home_dir)
     {
       // ~/.local/share should exist, but just in case it doesn't and this is a fresh profile..
-      const std::string local_dir(Path::Combine(home_dir, ".local"));
-      const std::string share_dir(Path::Combine(local_dir, "share"));
+      const std::string local_dir("/userdata/system/configs");
+      const std::string share_dir("/usr/share");
       FileSystem::EnsureDirectoryExists(local_dir.c_str(), false);
       FileSystem::EnsureDirectoryExists(share_dir.c_str(), false);
-      EmuFolders::DataRoot = Path::Combine(share_dir, "duckstation");
+      EmuFolders::DataRoot = "/usr/share/duckstation";
     }
   }
 #elif defined(__APPLE__)

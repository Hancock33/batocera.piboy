diff --git a/Source/Core/Core/BootManager.cpp b/Source/Core/Core/BootManager.cpp
index fc93d01a1e..915e77da77 100644
--- a/Source/Core/Core/BootManager.cpp
+++ b/Source/Core/Core/BootManager.cpp
@@ -66,6 +66,11 @@ bool BootCore(Core::System& system, std::unique_ptr<BootParameters> boot,
   if (!StartUp.SetPathsAndGameMetadata(system, *boot))
     return false;
 
+  if (std::holds_alternative<BootParameters::Disc>(boot->parameters))
+  {
+    StartUp.SetBaseSaveState(PathToFileName(std::get<BootParameters::Disc>(boot->parameters).path));
+  }
+
   // Movie settings
   auto& movie = system.GetMovie();
   if (movie.IsPlayingInput() && movie.IsConfigSaved())
diff --git a/Source/Core/Core/ConfigManager.cpp b/Source/Core/Core/ConfigManager.cpp
index 4e0b7dd3ac..305010a81e 100644
--- a/Source/Core/Core/ConfigManager.cpp
+++ b/Source/Core/Core/ConfigManager.cpp
@@ -192,6 +192,10 @@ void SConfig::SetRunningGameMetadata(const std::string& game_id)
   SetRunningGameMetadata(game_id, "", "", 0, 0, DiscIO::Region::Unknown);
 }
 
+void SConfig::SetBaseSaveState(const std::string& base_save_state) {
+  m_base_save_state = base_save_state;
+}
+
 void SConfig::SetRunningGameMetadata(const std::string& game_id, const std::string& gametdb_id,
                                      std::string triforce_id, u64 title_id, u16 revision,
                                      DiscIO::Region region)
diff --git a/Source/Core/Core/ConfigManager.h b/Source/Core/Core/ConfigManager.h
index f441cd888b..869b3fcf93 100644
--- a/Source/Core/Core/ConfigManager.h
+++ b/Source/Core/Core/ConfigManager.h
@@ -62,6 +62,9 @@ struct SConfig
 
   // TODO: remove this as soon as the ticket view hack in IOS/ES/Views is dropped.
   bool m_disc_booted_from_game_list = false;
+  
+  const std::string& GetBaseSaveState() const { return m_base_save_state; }
+  void SetBaseSaveState(const std::string& base_save_state);
 
   const std::string GetGameID() const;
   const std::string GetGameTDBID() const;
@@ -128,6 +131,7 @@ private:
   static SConfig* m_Instance;
   mutable std::recursive_mutex m_metadata_lock;
 
+  std::string m_base_save_state;
   std::string m_game_id;
   std::string m_gametdb_id;
   std::string m_triforce_id;
diff --git a/Source/Core/Core/Core.cpp b/Source/Core/Core/Core.cpp
index 3292abbff9..04fcbde503 100644
--- a/Source/Core/Core/Core.cpp
+++ b/Source/Core/Core/Core.cpp
@@ -762,10 +762,14 @@ void SaveScreenShot()
     g_frame_dumper->SaveScreenshot(*name);
 }
 
-void SaveScreenShot(std::string_view name)
+void SaveScreenShot(std::string_view name) {
+  SaveScreenShotWithPath(GenerateScreenshotFolderPath(), name);
+}
+
+void SaveScreenShotWithPath(std::string path, std::string_view name)
 {
   const Core::CPUThreadGuard guard(Core::System::GetInstance());
-  g_frame_dumper->SaveScreenshot(fmt::format("{}{}.png", GenerateScreenshotFolderPath(), name));
+  g_frame_dumper->SaveScreenshot(fmt::format("{}{}.png", path, name));
 }
 
 static bool PauseAndLock(Core::System& system, bool do_lock, bool unpause_on_unlock)
diff --git a/Source/Core/Core/Core.h b/Source/Core/Core/Core.h
index 68a402772a..70437502ee 100644
--- a/Source/Core/Core/Core.h
+++ b/Source/Core/Core/Core.h
@@ -150,6 +150,7 @@ void SetState(Core::System& system, State state, bool report_state_change = true
 State GetState(Core::System& system);
 
 void SaveScreenShot();
+void SaveScreenShotWithPath(std::string path, std::string_view name);
 void SaveScreenShot(std::string_view name);
 
 // This displays messages in a user-visible way.
diff --git a/Source/Core/Core/State.cpp b/Source/Core/Core/State.cpp
index ffd811bd6c..882ab95e27 100644
--- a/Source/Core/Core/State.cpp
+++ b/Source/Core/Core/State.cpp
@@ -289,7 +289,10 @@ static std::string SystemTimeAsDoubleToString(double time)
   return fmt::format(std::locale{""}, "{:%x %X}", *local_time);
 }
 
-static std::string MakeStateFilename(int number);
+static std::string MakeStateFilename(bool useId, int number);
+static std::string MakeStateFilename_partdirectory(int number);
+static std::string MakeStateFilename_partfileName(int number);
+static std::string MakeStateFilename_partfileID(int number);
 
 static std::vector<SlotWithTimestamp> GetUsedSlotsWithTimestamp()
 {
@@ -297,7 +300,7 @@ static std::vector<SlotWithTimestamp> GetUsedSlotsWithTimestamp()
   StateHeader header;
   for (int i = 1; i <= (int)NUM_STATES; i++)
   {
-    std::string filename = MakeStateFilename(i);
+    std::string filename = MakeStateFilename(true, i);
     if (File::Exists(filename))
     {
       if (ReadHeader(filename, header))
@@ -628,7 +631,7 @@ bool ReadHeader(const std::string& filename, StateHeader& header)
 
 std::string GetInfoStringOfSlot(int slot, bool translate)
 {
-  std::string filename = MakeStateFilename(slot);
+  std::string filename = MakeStateFilename(true, slot);
   if (!File::Exists(filename))
     return translate ? Common::GetStringT("Empty") : "Empty";
 
@@ -642,7 +645,7 @@ std::string GetInfoStringOfSlot(int slot, bool translate)
 u64 GetUnixTimeOfSlot(int slot)
 {
   State::StateHeader header;
-  if (!ReadHeader(MakeStateFilename(slot), header))
+  if (!ReadHeader(MakeStateFilename(true, slot), header))
     return 0;
 
   constexpr u64 MS_PER_SEC = 1000;
@@ -947,20 +950,49 @@ void Shutdown()
   s_undo_load_buffer.reset();
 }
 
-static std::string MakeStateFilename(int number)
+static std::string MakeStateFilename(bool useId, int number)
 {
-  return fmt::format("{}{}.s{:02d}", File::GetUserPath(D_STATESAVES_IDX),
-                     SConfig::GetInstance().GetGameID(), number);
+  // if the useId flag is set : if the file with name exits, returns it, otherwise, if the file with id exists, returns it, otherwise, return the file with name
+  // => priority with the file with name.
+  // if the game is not loaded from a file (disk), use the gameId
+  std::string filePartName = MakeStateFilename_partfileName(number);
+  std::string fileWithName = fmt::format("{}{}", MakeStateFilename_partdirectory(number), filePartName);
+  if (File::Exists(fileWithName) && filePartName != "")
+    return fileWithName;
+  std::string fileWithId = fmt::format("{}{}", MakeStateFilename_partdirectory(number), MakeStateFilename_partfileID(number));
+  if (File::Exists(fileWithId) && useId)
+    return fileWithId;
+  if(filePartName == "") return fileWithId;
+  return fileWithName;
+}
+
+static std::string MakeStateFilename_partdirectory(int number)
+{
+  return File::GetUserPath(D_STATESAVES_IDX);
+}
+
+static std::string MakeStateFilename_partfileID(int number)
+{
+  return fmt::format("{}.s{:02d}", SConfig::GetInstance().GetGameID(), number);
+}
+
+static std::string MakeStateFilename_partfileName(int number)
+{
+  std::string basesavestate = SConfig::GetInstance().GetBaseSaveState();
+  if(basesavestate == "") return "";
+  return fmt::format("{}.s{:02d}", basesavestate, number);
 }
 
 void Save(Core::System& system, int slot, bool wait)
 {
-  SaveAs(system, MakeStateFilename(slot), wait);
+  std::string savePath = MakeStateFilename(false, slot);
+  SaveAs(system, savePath, wait);
+  Core::SaveScreenShotWithPath(MakeStateFilename_partdirectory(slot), PathToFileName(savePath));
 }
 
 void Load(Core::System& system, int slot)
 {
-  LoadAs(system, MakeStateFilename(slot));
+  LoadAs(system, MakeStateFilename(true, slot));
 }
 
 void LoadLastSaved(Core::System& system, int i)

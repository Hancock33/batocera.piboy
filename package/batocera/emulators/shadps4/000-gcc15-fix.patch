diff --git a/src/core/devices/random_device.cpp b/src/core/devices/random_device.cpp
index 50934e3b..eefa74b4 100644
--- a/src/core/devices/random_device.cpp
+++ b/src/core/devices/random_device.cpp
@@ -8,7 +8,7 @@
 namespace Core::Devices {
 
 std::shared_ptr<BaseDevice> RandomDevice::Create(u32 handle, const char*, int, u16) {
-    std::srand(std::time(nullptr));
+    std::srand(time(nullptr));
     return std::shared_ptr<BaseDevice>(
         reinterpret_cast<Devices::BaseDevice*>(new RandomDevice(handle)));
 }
@@ -75,4 +75,4 @@ s64 RandomDevice::pwrite(const void* buf, size_t nbytes, u64 offset) {
     return 0;
 }
 
-} // namespace Core::Devices
\ No newline at end of file
+} // namespace Core::Devices
diff --git a/src/core/devices/srandom_device.cpp b/src/core/devices/srandom_device.cpp
index ab78ddbe..35987e15 100644
--- a/src/core/devices/srandom_device.cpp
+++ b/src/core/devices/srandom_device.cpp
@@ -8,7 +8,7 @@
 namespace Core::Devices {
 
 std::shared_ptr<BaseDevice> SRandomDevice::Create(u32 handle, const char*, int, u16) {
-    std::srand(std::time(nullptr));
+    std::srand(time(nullptr));
     return std::shared_ptr<BaseDevice>(
         reinterpret_cast<Devices::BaseDevice*>(new SRandomDevice(handle)));
 }
@@ -76,4 +76,4 @@ s64 SRandomDevice::pwrite(const void* buf, size_t nbytes, u64 offset) {
     return 0;
 }
 
-} // namespace Core::Devices
\ No newline at end of file
+} // namespace Core::Devices
diff --git a/src/core/devices/urandom_device.cpp b/src/core/devices/urandom_device.cpp
index c001aab8..8fb852f7 100644
--- a/src/core/devices/urandom_device.cpp
+++ b/src/core/devices/urandom_device.cpp
@@ -8,7 +8,7 @@
 namespace Core::Devices {
 
 std::shared_ptr<BaseDevice> URandomDevice::Create(u32 handle, const char*, int, u16) {
-    std::srand(std::time(nullptr));
+    std::srand(time(nullptr));
     return std::shared_ptr<BaseDevice>(
         reinterpret_cast<Devices::BaseDevice*>(new URandomDevice(handle)));
 }
@@ -76,4 +76,4 @@ s64 URandomDevice::pwrite(const void* buf, size_t nbytes, u64 offset) {
     return 0;
 }
 
-} // namespace Core::Devices
\ No newline at end of file
+} // namespace Core::Devices
diff --git a/src/core/devtools/widget/frame_dump.cpp b/src/core/devtools/widget/frame_dump.cpp
index 646ccb6d..6e8f3964 100644
--- a/src/core/devtools/widget/frame_dump.cpp
+++ b/src/core/devtools/widget/frame_dump.cpp
@@ -117,7 +117,7 @@ void FrameDumpViewer::Draw() {
         SameLine();
         BeginDisabled(selected_cmd == -1);
         if (SmallButton("Dump cmd")) {
-            auto now_time = fmt::localtime(std::time(nullptr));
+            auto now_time = fmt::localtime(time(nullptr));
             const auto fname = fmt::format("{:%F %H-%M-%S} {}_{}_{}.bin", now_time,
                                            magic_enum::enum_name(selected_queue_type),
                                            selected_submit_num, selected_queue_num2);
@@ -203,4 +203,4 @@ void FrameDumpViewer::Draw() {
 
 } // namespace Core::Devtools::Widget
 
-#undef C_V
\ No newline at end of file
+#undef C_V

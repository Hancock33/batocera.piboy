diff --git a/src/lindbergh/config.c b/src/lindbergh/config.c
index b98d63d..e9443e1 100644
--- a/src/lindbergh/config.c
+++ b/src/lindbergh/config.c
@@ -1452,34 +1452,43 @@ int readConfig(FILE *configFile, EmulatorConfig *config)
 KeyMapping getDefaultKeymap()
 {
     KeyMapping defaultKeyMapping;
-    defaultKeyMapping.test = 28;
-    defaultKeyMapping.player1.start = 10;
-    defaultKeyMapping.player1.service = 39;
-    defaultKeyMapping.player1.coin = 14;
-    defaultKeyMapping.player1.up = 111;
-    defaultKeyMapping.player1.down = 116;
-    defaultKeyMapping.player1.left = 113;
-    defaultKeyMapping.player1.right = 114;
-    defaultKeyMapping.player1.button1 = 24;
-    defaultKeyMapping.player1.button2 = 25;
-    defaultKeyMapping.player1.button3 = 26;
+
+    // Test key
+    defaultKeyMapping.test = 28; // T
+
+    // Player 1 controls
+    defaultKeyMapping.player1.start = 10; // 1
+    defaultKeyMapping.player1.service = 39; // S
+    defaultKeyMapping.player1.coin = 14; // 5
+    defaultKeyMapping.player1.up = 111; // Up arrow
+    defaultKeyMapping.player1.down = 116; // Down arrow
+    defaultKeyMapping.player1.left = 113; // Left arrow
+    defaultKeyMapping.player1.right = 114; // Right arrow
+    defaultKeyMapping.player1.button1 = 24; // Q
+    defaultKeyMapping.player1.button2 = 25; // W
+    defaultKeyMapping.player1.button3 = 26; // E
     defaultKeyMapping.player1.button4 = 27; // R
     defaultKeyMapping.player1.button5 = 40; // D
-    defaultKeyMapping.player1.button6 = 41;
-    defaultKeyMapping.player1.button7 = 42;
-    defaultKeyMapping.player1.button8 = 43;
-    defaultKeyMapping.player2.start = 60;
-    defaultKeyMapping.player2.service = 61;
-    defaultKeyMapping.player2.coin = 15;
-    defaultKeyMapping.player2.up = 54;
-    defaultKeyMapping.player2.down = 53;
-    defaultKeyMapping.player2.left = 55;
-    defaultKeyMapping.player2.right = 56;
-    defaultKeyMapping.player2.button1 = 52;
-    defaultKeyMapping.player2.button2 = 57;
-    defaultKeyMapping.player2.button3 = 58;
+    defaultKeyMapping.player1.button6 = 41; // F
+    defaultKeyMapping.player1.button7 = 42; // G
+    defaultKeyMapping.player1.button8 = 43; // H
+
+    // Player 2 controls
+    defaultKeyMapping.player2.start = 60; // .
+    defaultKeyMapping.player2.service = 61; // /
+    defaultKeyMapping.player2.coin = 15; // 6
+    defaultKeyMapping.player2.up = 54; // C
+    defaultKeyMapping.player2.down = 53; // X
+    defaultKeyMapping.player2.left = 55; // V
+    defaultKeyMapping.player2.right = 56; // B
+    defaultKeyMapping.player2.button1 = 52; // Z
+    defaultKeyMapping.player2.button2 = 57; // N
+    defaultKeyMapping.player2.button3 = 58; // M
     defaultKeyMapping.player2.button4 = 59; // ,
-    defaultKeyMapping.player2.button5 = 37; // CTRL
+    defaultKeyMapping.player2.button5 = 37; // Left Ctrl
+    defaultKeyMapping.player2.button6 = 65; // Space bar
+    defaultKeyMapping.player2.button7 = 38; // A
+
     return defaultKeyMapping;
 }
 
diff --git a/src/lindbergh/glxhooks.c b/src/lindbergh/glxhooks.c
index aaeff97..be4397a 100644
--- a/src/lindbergh/glxhooks.c
+++ b/src/lindbergh/glxhooks.c
@@ -40,6 +40,9 @@ void glXSwapBuffers(Display *dpy, GLXDrawable drawable)
 
     EmulatorConfig *config = getConfig();
 
+    // SDL2 controller polling for X11 rendered games
+    pollEvents();
+
     if (config->borderEnabled)
         drawGameBorder(config->width, config->height, config->whiteBorderPercentage, config->blackBorderPercentage);
 
diff --git a/src/lindbergh/input.c b/src/lindbergh/input.c
index 9aa8530..cab18db 100644
--- a/src/lindbergh/input.c
+++ b/src/lindbergh/input.c
@@ -16,16 +16,41 @@
 #include <math.h>
 #include <pthread.h>
 #include <stdbool.h>
+#include "log.h"
 
 GameType gameType = SHOOTING;
 int jvsAnalogueInBits = 10;
 extern int phX, phY, phW, phH;
 
+// SDL2 controllers
+extern SDL_GameController **controllers;
+int numControllers;
+const int16_t DEADZONE = 8000; // Standard SDL2 deadzone value
+const float AXIS_MAX = 32767.0f; // Maximum value for SDL2 axis
+
 int initInput()
 {
     gameType = getConfig()->gameType;
     jvsAnalogueInBits = getJVSIO()->capabilities.analogueInBits;
 
+    if (SDL_Init(SDL_INIT_GAMECONTROLLER) != 0) {
+        log_warn("SDL_Init failed: %s\n", SDL_GetError());
+        return -1;
+    }
+
+    // Get the number of available controllers
+    numControllers = SDL_NumJoysticks();
+
+    // Allocate memory for the controllers array
+    controllers = (SDL_GameController **)malloc(numControllers * sizeof(SDL_GameController *));
+
+    // Open each controller
+    for (int i = 0; i < numControllers; i++) {
+        controllers[i] = SDL_GameControllerOpen(i);
+        if (!controllers[i]) {
+            log_warn("Failed to open controller %d: %s\n", i, SDL_GetError());
+        }
+    }
     /* Center Steering wheel in racing games (need to add a check for when using real analog devices)*/
     if (gameType == DRIVING)
     {
@@ -447,6 +472,133 @@ void sdlEventDriving(SDL_Event *event)
             setSwitch(PLAYER_2, BUTTON_UP, event->type == SDL_KEYDOWN);
     }
     break;
+
+    // SDL2 Controllers
+    case SDL_CONTROLLERBUTTONDOWN:
+    case SDL_CONTROLLERBUTTONUP:
+    {
+        bool isPress = (event->type == SDL_CONTROLLERBUTTONDOWN);
+
+        switch (event->cbutton.button)
+        {
+            case SDL_CONTROLLER_BUTTON_A:
+                if (getConfig()->crc32 == INITIALD_4_REVA ||
+                    getConfig()->crc32 == INITIALD_4_REVB || 
+                    getConfig()->crc32 == INITIALD_4_REVC || 
+                    getConfig()->crc32 == INITIALD_4_REVD || 
+                    getConfig()->crc32 == INITIALD_4_REVG || 
+                    getConfig()->crc32 == INITIALD_4_EXP_REVB || 
+                    getConfig()->crc32 == INITIALD_4_EXP_REVC || 
+                    getConfig()->crc32 == INITIALD_4_EXP_REVD || 
+                    getConfig()->crc32 == INITIALD_5_JAP_REVA || 
+                    getConfig()->crc32 == INITIALD_5_JAP_REVF || 
+                    getConfig()->crc32 == INITIALD_5_EXP || 
+                    getConfig()->crc32 == INITIALD_5_EXP_20A) {
+                    setSwitch(PLAYER_1, BUTTON_1, isPress); // View Change Initial D
+                }
+                else
+                {
+                    setSwitch(PLAYER_1, BUTTON_DOWN, isPress); // View Change others
+                }
+                break;
+            case SDL_CONTROLLER_BUTTON_B:
+                if (getConfig()->crc32 == HUMMER || getConfig()->crc32 == HUMMER_SDLX || getConfig()->crc32 == HUMMER_EXTREME || getConfig()->crc32 == HUMMER_EXTREME_MDX)
+                {
+                    setSwitch(PLAYER_2, BUTTON_DOWN, isPress); // Hummer Boost
+                }
+                else if (getConfig()->crc32 == SEGA_RACE_TV)
+                {
+                    setSwitch(PLAYER_2, BUTTON_1, isPress); // SegaTV Boost
+                }
+                else if (getConfig()->crc32 == R_TUNED)
+                {
+                    setSwitch(PLAYER_1, BUTTON_RIGHT, isPress); // R-Tuned Boost right
+                }
+                else
+                {
+                    setSwitch(PLAYER_1, BUTTON_2, isPress);
+                }
+                break;
+            case SDL_CONTROLLER_BUTTON_X:
+                if (getConfig()->crc32 == R_TUNED)
+                {
+                    setSwitch(PLAYER_2, BUTTON_1, isPress); // R-Tuned Boost left
+                }
+                else
+                {
+                    setSwitch(PLAYER_1, BUTTON_3, isPress);
+                }                
+                break;
+            case SDL_CONTROLLER_BUTTON_Y:
+                setSwitch(PLAYER_1, BUTTON_4, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_UP:
+                setSwitch(PLAYER_1, BUTTON_UP, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_DOWN:
+                setSwitch(PLAYER_1, BUTTON_DOWN, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_LEFT:
+                setSwitch(PLAYER_1, BUTTON_LEFT, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_RIGHT:
+                setSwitch(PLAYER_1, BUTTON_RIGHT, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_START:
+                setSwitch(PLAYER_1, BUTTON_START, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_GUIDE:
+                setSwitch(PLAYER_1, BUTTON_SERVICE, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_BACK:
+                incrementCoin(PLAYER_1, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_MISC1:
+                setSwitch(SYSTEM, BUTTON_TEST, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_LEFTSHOULDER:
+                setSwitch(PLAYER_2, BUTTON_DOWN, isPress);  // Gear Down
+                break;
+            case SDL_CONTROLLER_BUTTON_RIGHTSHOULDER:
+                setSwitch(PLAYER_2, BUTTON_UP, isPress); // Gear Down Up
+                break;
+        }
+    }
+    break;
+
+    case SDL_CONTROLLERAXISMOTION:
+    {
+        float normalizedValue;
+        // Left stick X axis
+        if (event->caxis.axis == SDL_CONTROLLER_AXIS_LEFTX) {
+            if (abs(event->caxis.value) > DEADZONE) {
+                normalizedValue = event->caxis.value / AXIS_MAX;
+                setAnalogue(ANALOGUE_1, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+            } else {
+                setAnalogue(ANALOGUE_1, pow(2, jvsAnalogueInBits) / 2); // Center when in deadzone
+            }
+        }
+        // Left trigger (we use for Brake)
+        else if (event->caxis.axis == SDL_CONTROLLER_AXIS_TRIGGERLEFT) {
+            if (abs(event->caxis.value) > DEADZONE) {
+                normalizedValue = event->caxis.value / AXIS_MAX;
+                setAnalogue(ANALOGUE_3, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+            } else {
+                setAnalogue(ANALOGUE_3, 0); // Release when in deadzone
+            }
+        }
+        // Right trigger (we use for Gas)
+        else if (event->caxis.axis == SDL_CONTROLLER_AXIS_TRIGGERRIGHT) {
+            if (abs(event->caxis.value) > DEADZONE) {
+                normalizedValue = event->caxis.value / AXIS_MAX;
+                setAnalogue(ANALOGUE_2, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+            } else {
+                setAnalogue(ANALOGUE_2, 0); // Release when in deadzone
+            }
+        }
+    }
+    break;
+
     default:
         break;
     }
@@ -582,6 +734,7 @@ void sdlEventShooting(SDL_Event *event)
         }
     }
     break;
+
     case SDL_MOUSEBUTTONDOWN:
     case SDL_MOUSEBUTTONUP:
     {
@@ -604,6 +757,85 @@ void sdlEventShooting(SDL_Event *event)
         }
     }
     break;
+
+    // SDL2 Controllers
+    case SDL_CONTROLLERBUTTONDOWN:
+    case SDL_CONTROLLERBUTTONUP:
+    {
+        bool isPress = (event->type == SDL_CONTROLLERBUTTONDOWN);
+
+        switch (event->cbutton.button)
+        {
+            case SDL_CONTROLLER_BUTTON_A:
+                setSwitch(PLAYER_1, BUTTON_1, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_B:
+                setSwitch(PLAYER_1, BUTTON_2, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_X:
+                setSwitch(PLAYER_1, BUTTON_3, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_Y:
+                setSwitch(PLAYER_1, BUTTON_4, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_UP:
+                setSwitch(PLAYER_1, BUTTON_UP, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_DOWN:
+                setSwitch(PLAYER_1, BUTTON_DOWN, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_LEFT:
+                setSwitch(PLAYER_1, BUTTON_LEFT, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_RIGHT:
+                setSwitch(PLAYER_1, BUTTON_RIGHT, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_START:
+                setSwitch(PLAYER_1, BUTTON_START, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_GUIDE:
+                setSwitch(PLAYER_1, BUTTON_SERVICE, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_BACK:
+                incrementCoin(PLAYER_1, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_MISC1:
+                setSwitch(SYSTEM, BUTTON_TEST, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_LEFTSHOULDER:
+                setSwitch(PLAYER_1, BUTTON_5, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_RIGHTSHOULDER:
+                setSwitch(PLAYER_1, BUTTON_6, isPress);
+                break;
+        }
+    }
+    break;
+
+    case SDL_CONTROLLERAXISMOTION:
+    {
+        float normalizedValue;
+        // Left stick X axis
+        if (event->caxis.axis == SDL_CONTROLLER_AXIS_LEFTX) {
+            if (abs(event->caxis.value) > DEADZONE) {
+                normalizedValue = event->caxis.value / AXIS_MAX;
+                setAnalogue(ANALOGUE_1, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+            } else {
+                setAnalogue(ANALOGUE_1, pow(2, jvsAnalogueInBits) / 2); // Center when in deadzone
+            }
+        }
+        // Left stick X axis
+        if (event->caxis.axis == SDL_CONTROLLER_AXIS_LEFTY) {
+            if (abs(event->caxis.value) > DEADZONE) {
+                normalizedValue = event->caxis.value / AXIS_MAX;
+                setAnalogue(ANALOGUE_2, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+            } else {
+                setAnalogue(ANALOGUE_2, pow(2, jvsAnalogueInBits) / 2); // Center when in deadzone
+            }
+        }
+    }
+    break;
+
     default:
         break;
     }
@@ -659,6 +891,85 @@ void sdlEventABC(SDL_Event *event)
             setSwitch(PLAYER_1, BUTTON_RIGHT, event->type == SDL_KEYDOWN);
     }
     break;
+
+    // SDL2 Controllers
+    case SDL_CONTROLLERBUTTONDOWN:
+    case SDL_CONTROLLERBUTTONUP:
+    {
+        bool isPress = (event->type == SDL_CONTROLLERBUTTONDOWN);
+
+        switch (event->cbutton.button)
+        {
+            case SDL_CONTROLLER_BUTTON_A:
+                setSwitch(PLAYER_1, BUTTON_1, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_B:
+                setSwitch(PLAYER_1, BUTTON_2, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_X:
+                setSwitch(PLAYER_1, BUTTON_3, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_Y:
+                setSwitch(PLAYER_1, BUTTON_4, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_UP:
+                setSwitch(PLAYER_1, BUTTON_UP, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_DOWN:
+                setSwitch(PLAYER_1, BUTTON_DOWN, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_LEFT:
+                setSwitch(PLAYER_1, BUTTON_LEFT, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_RIGHT:
+                setSwitch(PLAYER_1, BUTTON_RIGHT, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_START:
+                setSwitch(PLAYER_1, BUTTON_START, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_GUIDE:
+                setSwitch(PLAYER_1, BUTTON_SERVICE, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_BACK:
+                incrementCoin(PLAYER_1, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_MISC1:
+                setSwitch(SYSTEM, BUTTON_TEST, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_LEFTSHOULDER:
+                setSwitch(PLAYER_1, BUTTON_5, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_RIGHTSHOULDER:
+                setSwitch(PLAYER_1, BUTTON_6, isPress);
+                break;
+        }
+    }
+    break;
+
+    case SDL_CONTROLLERAXISMOTION:
+    {
+        float normalizedValue;
+        // Left stick X axis
+        if (event->caxis.axis == SDL_CONTROLLER_AXIS_LEFTX) {
+            if (abs(event->caxis.value) > DEADZONE) {
+                normalizedValue = event->caxis.value / AXIS_MAX;
+                setAnalogue(ANALOGUE_1, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+            } else {
+                setAnalogue(ANALOGUE_1, pow(2, jvsAnalogueInBits) / 2); // Center when in deadzone
+            }
+        }
+        // Left stick Y axis
+        if (event->caxis.axis == SDL_CONTROLLER_AXIS_LEFTY) {
+            if (abs(event->caxis.value) > DEADZONE) {
+                normalizedValue = event->caxis.value / AXIS_MAX;
+                setAnalogue(ANALOGUE_2, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+            } else {
+                setAnalogue(ANALOGUE_2, pow(2, jvsAnalogueInBits) / 2); // Center when in deadzone
+            }
+        }
+    }
+    break;
+
     default:
         break;
     }
@@ -680,13 +991,15 @@ void sdlEventHarley(SDL_Event *event)
         else if (event->key.keysym.sym == SDLK_1)
             setSwitch(PLAYER_1, BUTTON_START, event->type == SDL_KEYDOWN);
         else if (event->key.keysym.sym == SDLK_UP)
-            setAnalogue(ANALOGUE_1, event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) - 1 : 0);
+            setAnalogue(ANALOGUE_2, event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) - 1 : 0);
         else if (event->key.keysym.sym == SDLK_DOWN)
-            setAnalogue(ANALOGUE_4, event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) - 1 : 0);
+            setAnalogue(ANALOGUE_3, event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) - 1 : 0);
         else if (event->key.keysym.sym == SDLK_LEFT)
-            setAnalogue(ANALOGUE_2, event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) * 0.2 : pow(2, jvsAnalogueInBits) * 0.5);
+            setAnalogue(ANALOGUE_1,
+                        event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) * 0.2 : pow(2, jvsAnalogueInBits) * 0.5);
         else if (event->key.keysym.sym == SDLK_RIGHT)
-            setAnalogue(ANALOGUE_2, event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) * 0.8 : pow(2, jvsAnalogueInBits) * 0.5);
+            setAnalogue(ANALOGUE_1,
+                        event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) * 0.8 : pow(2, jvsAnalogueInBits) * 0.5);
         else if (event->key.keysym.sym == SDLK_q)
             setSwitch(PLAYER_1, BUTTON_1, event->type == SDL_KEYDOWN);
         else if (event->key.keysym.sym == SDLK_w)
@@ -717,6 +1030,88 @@ void sdlEventHarley(SDL_Event *event)
             setSwitch(PLAYER_2, BUTTON_UP, event->type == SDL_KEYDOWN);
     }
     break;
+
+    // SDL2 Controllers
+    case SDL_CONTROLLERBUTTONDOWN:
+    case SDL_CONTROLLERBUTTONUP:
+    {
+        bool isPress = (event->type == SDL_CONTROLLERBUTTONDOWN);
+
+        switch (event->cbutton.button)
+        {
+            case SDL_CONTROLLER_BUTTON_A:
+                setSwitch(PLAYER_1, BUTTON_2, isPress); // View
+                break;
+            case SDL_CONTROLLER_BUTTON_B:
+                setSwitch(PLAYER_1, BUTTON_1, isPress); // Change Music           
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_UP:
+                setSwitch(PLAYER_1, BUTTON_UP, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_DOWN:
+                setSwitch(PLAYER_1, BUTTON_DOWN, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_LEFT:
+                setSwitch(PLAYER_1, BUTTON_LEFT, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_RIGHT:
+                setSwitch(PLAYER_1, BUTTON_RIGHT, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_START:
+                setSwitch(PLAYER_1, BUTTON_START, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_GUIDE:
+                setSwitch(PLAYER_1, BUTTON_SERVICE, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_BACK:
+                incrementCoin(PLAYER_1, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_MISC1:
+                setSwitch(SYSTEM, BUTTON_TEST, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_LEFTSHOULDER:
+                setSwitch(PLAYER_1, BUTTON_4, isPress);  // Gear Down
+                break;
+            case SDL_CONTROLLER_BUTTON_RIGHTSHOULDER:
+                setSwitch(PLAYER_1, BUTTON_3, isPress); // Gear Down Up
+                break;
+        }
+    }
+    break;
+
+    case SDL_CONTROLLERAXISMOTION:
+    {
+        float normalizedValue;
+        // Left stick X axis (Handle)
+        if (event->caxis.axis == SDL_CONTROLLER_AXIS_LEFTX) {
+            if (abs(event->caxis.value) > DEADZONE) {
+                normalizedValue = event->caxis.value / AXIS_MAX;
+                setAnalogue(ANALOGUE_2, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+            } else {
+                setAnalogue(ANALOGUE_2, pow(2, jvsAnalogueInBits) / 2); // Center when in deadzone
+            }
+        }
+        // Left trigger (we use for Brake)
+        else if (event->caxis.axis == SDL_CONTROLLER_AXIS_TRIGGERLEFT) {
+            if (abs(event->caxis.value) > DEADZONE) {
+                normalizedValue = event->caxis.value / AXIS_MAX;
+                setAnalogue(ANALOGUE_4, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+            } else {
+                setAnalogue(ANALOGUE_4, 0); // Release when in deadzone
+            }
+        }
+        // Right trigger (we use for Gas)
+        else if (event->caxis.axis == SDL_CONTROLLER_AXIS_TRIGGERRIGHT) {
+            if (abs(event->caxis.value) > DEADZONE) {
+                normalizedValue = event->caxis.value / AXIS_MAX;
+                setAnalogue(ANALOGUE_1, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+            } else {
+                setAnalogue(ANALOGUE_1, 0); // Release when in deadzone
+            }
+        }
+    }
+    break;
+
     default:
         break;
     }
@@ -808,6 +1203,61 @@ void sdlEventMahjong(SDL_Event *event)
             setSwitch(PLAYER_2, BUTTON_7, event->type == SDL_KEYDOWN);
     }
     break;
+
+    // SDL2 Controllers
+    case SDL_CONTROLLERBUTTONDOWN:
+    case SDL_CONTROLLERBUTTONUP:
+    {
+        bool isPress = (event->type == SDL_CONTROLLERBUTTONDOWN);
+
+        switch (event->cbutton.button)
+        {
+            case SDL_CONTROLLER_BUTTON_A:
+                setSwitch(PLAYER_1, BUTTON_1, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_B:
+                setSwitch(PLAYER_1, BUTTON_2, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_X:
+                setSwitch(PLAYER_1, BUTTON_3, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_Y:
+                setSwitch(PLAYER_1, BUTTON_4, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_UP:
+                setSwitch(PLAYER_1, BUTTON_UP, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_DOWN:
+                setSwitch(PLAYER_1, BUTTON_DOWN, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_LEFT:
+                setSwitch(PLAYER_1, BUTTON_LEFT, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_RIGHT:
+                setSwitch(PLAYER_1, BUTTON_RIGHT, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_START:
+                setSwitch(PLAYER_1, BUTTON_START, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_GUIDE:
+                setSwitch(PLAYER_1, BUTTON_SERVICE, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_BACK:
+                incrementCoin(PLAYER_1, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_MISC1:
+                setSwitch(SYSTEM, BUTTON_TEST, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_LEFTSHOULDER:
+                setSwitch(PLAYER_1, BUTTON_5, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_RIGHTSHOULDER:
+                setSwitch(PLAYER_1, BUTTON_6, isPress);
+                break;
+        }
+    }
+    break;
+
     default:
         break;
     }
@@ -844,4 +1294,4 @@ void handleSdlEvents(SDL_Event *event)
         // return XNextEventShooting(display, event_return, returnValue);
         break;
     }
-}
\ No newline at end of file
+}
diff --git a/src/lindbergh/lindbergh.c b/src/lindbergh/lindbergh.c
index 29b1989..a333c16 100644
--- a/src/lindbergh/lindbergh.c
+++ b/src/lindbergh/lindbergh.c
@@ -11,7 +11,7 @@
 #define LD_LIBRARY_PATH "LD_LIBRARY_PATH"
 #define LD_PRELOAD "LD_PRELOAD"
 #define PRELOAD_FILE_NAME "lindbergh.so"
-#define TEAM "bobbydilley, retrofan, dkeruza-neo, doozer, francesco, rolel, caviar-x"
+#define TEAM "bobbydilley, retrofan, dkeruza-neo, doozer, francesco, rolel, caviar-x, dmanlfc"
 
 uint32_t elf_crc = 0;
 
diff --git a/src/lindbergh/sdlcalls.c b/src/lindbergh/sdlcalls.c
index 1e26432..6defeb1 100644
--- a/src/lindbergh/sdlcalls.c
+++ b/src/lindbergh/sdlcalls.c
@@ -30,6 +30,9 @@ Window x11Window;
 char SDLgameTitle[256] = {0};
 extern fps_limit fpsLimit;
 
+extern SDL_GameController **controllers;
+extern int numControllers;
+
 void GLAPIENTRY openglDebugCallback2(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length,
                                      const GLchar *message, const void *userParam)
 {
@@ -254,6 +257,17 @@ void initSDL(int *argcp, char **argv)
 void sdlQuit()
 {
     SDL_DestroyWindow(SDLwindow);
+    
+    // Close each controller
+    for (int i = 0; i < numControllers; i++) {
+        if (controllers[i]) {
+            SDL_GameControllerClose(controllers[i]);
+        }
+    }
+
+    // Free the allocated memory
+    free(controllers);
+    
     SDL_Quit();
     exit(0);
 }
@@ -275,6 +289,11 @@ void pollEvents()
         case SDL_MOUSEMOTION:
             handleSdlEvents(&event);
             break;
+        case SDL_CONTROLLERBUTTONDOWN:
+        case SDL_CONTROLLERBUTTONUP:
+        case SDL_CONTROLLERAXISMOTION:
+            handleSdlEvents(&event);
+            break;
         case SDL_WINDOWEVENT:
             if (event.window.event == SDL_WINDOWEVENT_CLOSE)
             {

diff --git a/src/lindbergh/evdevinput.c b/src/lindbergh/evdevinput.c
index b106b8c..988f06f 100644
--- a/src/lindbergh/evdevinput.c
+++ b/src/lindbergh/evdevinput.c
@@ -1106,21 +1106,33 @@ void *controllerThread(void *_args)
                 if (args->controller->absTriggers[event.code].enabled)
                 {
                     int channel = args->controller->absTriggers[event.code].channel;
-                    // Deadzone handling
-                    if (scaled < analogue_deadzones[channel].start_max)
+
+		    if (args->controller->absTriggers[event.code].isAnalogue) {
+		      // Deadzone handling
+		      if (scaled < analogue_deadzones[channel].start_max)
                         scaled = 0.0;
-                    if (scaled > analogue_deadzones[channel].middle_min && scaled < analogue_deadzones[channel].middle_max)
+		      if (scaled > analogue_deadzones[channel].middle_min && scaled < analogue_deadzones[channel].middle_max)
                         scaled = 0.5;
-                    if (scaled > analogue_deadzones[channel].end_min)
+		      if (scaled > analogue_deadzones[channel].end_min)
                         scaled = 1.0;
-                    setAnalogue(channel, scaled * (pow(2, jvsBits) - 1));
+		      setAnalogue(channel, scaled * (pow(2, jvsBits) - 1));
+		    } else {
+		      setSwitch(args->controller->absTriggers[event.code].player,
+				args->controller->absTriggers[event.code].channel, scaled < 0.8 ? 0 : 1);
+		    }
                 }
 
                 if(event.value <= ((args->controller->absMin[event.code] + args->controller->absMax[event.code]) / 2)) {
                   if (args->controller->absTriggers[event.code].minEnabled)
                     {
                       int channel = args->controller->absTriggers[event.code].minChannel;
-                      setAnalogue(channel, scaled < 0.2 ? pow(2, jvsBits) * 0.2 : pow(2, jvsBits) * 0.5);
+
+		      if (args->controller->absTriggers[event.code].isAnalogue) {
+			setAnalogue(channel, scaled < 0.2 ? 0.0 : pow(2, jvsBits) * 1.0);
+		      } else {
+			setSwitch(args->controller->absTriggers[event.code].minPlayer,
+				  args->controller->absTriggers[event.code].minChannel, scaled < 0.2 ? 1 : 0);
+		      }
                     }
                 }
 
@@ -1128,7 +1140,13 @@ void *controllerThread(void *_args)
                   if (args->controller->absTriggers[event.code].maxEnabled)
                     {
                        int channel = args->controller->absTriggers[event.code].maxChannel;
-                       setAnalogue(channel, scaled > 0.8 ? pow(2, jvsBits) * 0.8 : pow(2, jvsBits) * 0.5);
+
+		       if (args->controller->absTriggers[event.code].isAnalogue) {
+			 setAnalogue(channel, scaled > 0.8 ? pow(2, jvsBits) : 0.0);
+		       } else {
+			setSwitch(args->controller->absTriggers[event.code].maxPlayer,
+				  args->controller->absTriggers[event.code].maxChannel, scaled > 0.8 ? 1 : 0);
+		      }
                     }
                 }
 		if (args->controller->absTriggers[event.code].shakeEnabled)
@@ -1296,6 +1314,7 @@ ControllerStatus startControllerThreads(Controllers *controllers)
             controllers->controller[i].absTriggers[j].maxEnabled = 0;
             controllers->controller[i].absTriggers[j].shakeEnabled = 0;
             controllers->controller[i].absTriggers[j].isNeg = 0;
+	    controllers->controller[i].absTriggers[j].isAnalogue = 1;
         }
 
         for (int j = 0; j < KEY_MAX; j++)
@@ -1349,6 +1368,8 @@ ControllerStatus startControllerThreads(Controllers *controllers)
                     controllers->controller[i].absTriggers[controllers->controller[i].inputs[j].evCode].player =
                         input.player;
                     controllers->controller[i].absTriggers[controllers->controller[i].inputs[j].evCode].isNeg = negabs;
+		    if (strstr(input.name, "ANALOGUE") == NULL)
+		      controllers->controller[i].absTriggers[controllers->controller[i].inputs[j].evCode].isAnalogue = 0;
                 }
                 break;
 
@@ -1362,6 +1383,8 @@ ControllerStatus startControllerThreads(Controllers *controllers)
                     controllers->controller[i].absTriggers[controllers->controller[i].inputs[j].evCode].maxPlayer =
                         input.player;
                     controllers->controller[i].absTriggers[controllers->controller[i].inputs[j].evCode].isNeg = negabs;
+		    if (strstr(input.name, "ANALOGUE") == NULL)
+		      controllers->controller[i].absTriggers[controllers->controller[i].inputs[j].evCode].isAnalogue = 0;
                 }
                 break;
 
@@ -1375,6 +1398,8 @@ ControllerStatus startControllerThreads(Controllers *controllers)
                     controllers->controller[i].absTriggers[controllers->controller[i].inputs[j].evCode].minPlayer =
                         input.player;
                     controllers->controller[i].absTriggers[controllers->controller[i].inputs[j].evCode].isNeg = negabs;
+		    if (strstr(input.name, "ANALOGUE") == NULL)
+		      controllers->controller[i].absTriggers[controllers->controller[i].inputs[j].evCode].isAnalogue = 0;
                 }
                 break;
 

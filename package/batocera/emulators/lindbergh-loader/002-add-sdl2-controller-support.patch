From e1ee5bf1a2bbebbbea865f4f9f830a33e6f5d50e Mon Sep 17 00:00:00 2001
From: Daniel Martin <dmanlfc@gmail.com>
Date: Sat, 11 Jan 2025 21:33:16 +1000
Subject: [PATCH] add sdl2 controller support - best for driving & fighting
 games

---
 docs/guide.md              |  29 +-
 docs/lindbergh.conf        |   9 +-
 src/lindbergh/config.c     |  59 ++--
 src/lindbergh/config.h     |   2 +-
 src/lindbergh/evdevinput.c |   4 +-
 src/lindbergh/glxhooks.c   |   3 +
 src/lindbergh/input.c      | 574 +++++++++++++++++++++++++++++++++----
 src/lindbergh/lindbergh.c  |   2 +-
 src/lindbergh/sdlcalls.c   |  19 ++
 9 files changed, 606 insertions(+), 95 deletions(-)

diff --git a/docs/guide.md b/docs/guide.md
index 04ff8f8..770e425 100644
--- a/docs/guide.md
+++ b/docs/guide.md
@@ -102,19 +102,40 @@ You will see the value `AUTO` by default for some of the config options. This is
 
 ### Controller Setup
 
-There are 2 modes for the controller setup in the emulator, these are set using the `INPUT_MODE` flag in the configuration file.
+There are 3 modes for the controller setup in the emulator, these are set using the `INPUT_MODE` flag in the configuration file.
 
 #### Input Mode 0
 
-In this input mode, both input mode 1 and input mode 2 are active.
+In this input mode, SDL / keyboard and SDL controller inputs are active.
+SDL controllers are automatically configured to support modern controller devices like Xbox & Playstation controllers.
+The implementation is considered plug & play and does not require configuration file changes.
+
+This is the recommended input setting for fighting & driving games.
+
+SDL Controller driving games layout:
+
+South button (A or X) = Change View
+East button (B or O) = Boost
+L1 = Gear Down
+R1 = Gear Up
+L2 = Brake
+R2 = Acceleration
+Select = Coin
+Start = Start
+
+Left analogue stick & directional hat buttons work as expected.
 
 #### Input Mode 1
 
-In the first input mode, the keys on the keyboard are used to control the game play. If playing a light gun game, the mouse pointer in the window is used as the player 1 light gun. There are no configurable options in this mode.
+In this input mode, evdev and the keyboard are used to control the game play.
+You can configure additional devices such as multiple light guns, controllers and steering wheels.
+Controllers need to be configured (as per below)
 
 #### Input Mode 2
 
-In the second input mode, inputs are taken directly from the evdev library in linux and so you can configure additional devices such as light guns, controllers and steering wheels.
+In the final input mode, inputs are taken directly from the evdev linux library only without keyboard input.
+
+#### Evdev controller options
 
 To list the available inputs you should type:
 
diff --git a/docs/lindbergh.conf b/docs/lindbergh.conf
index 5e04619..a714649 100644
--- a/docs/lindbergh.conf
+++ b/docs/lindbergh.conf
@@ -14,10 +14,11 @@ HEIGHT AUTO
 # FULLSCREEN 0
 
 # Sets the Input Mode
-# Mode 0: will use both SDL/X11 and EVDEV inputs (default)
-# Mode 1: will use SDL/X11 inputs only
-# Mode 2: will use EVDEV raw inputs only, which should be configured at the bottom of the settings file
-# INPUT_MODE 0
+# Mode 0: will use Keyboard/Mouse & SDL Games Controllers
+# Mode 1: will use Keyboard/Mouse & EVDEV Controllers
+# Mode 2: will use EVDEV raw inputs only
+# Note: EVDEV should be configured at the bottom of the settings file
+INPUT_MODE 0
 
 # Set to 1 if you want to disable SDL (Fixes SRTV boost bar)
 # NO_SDL 0
diff --git a/src/lindbergh/config.c b/src/lindbergh/config.c
index b1d8d08..e2b49c3 100644
--- a/src/lindbergh/config.c
+++ b/src/lindbergh/config.c
@@ -1497,34 +1497,43 @@ int readConfig(FILE *configFile, EmulatorConfig *config)
 KeyMapping getDefaultKeymap()
 {
     KeyMapping defaultKeyMapping;
-    defaultKeyMapping.test = 28;
-    defaultKeyMapping.player1.start = 10;
-    defaultKeyMapping.player1.service = 39;
-    defaultKeyMapping.player1.coin = 14;
-    defaultKeyMapping.player1.up = 111;
-    defaultKeyMapping.player1.down = 116;
-    defaultKeyMapping.player1.left = 113;
-    defaultKeyMapping.player1.right = 114;
-    defaultKeyMapping.player1.button1 = 24;
-    defaultKeyMapping.player1.button2 = 25;
-    defaultKeyMapping.player1.button3 = 26;
+
+    // Test key
+    defaultKeyMapping.test = 28; // T
+
+    // Player 1 controls
+    defaultKeyMapping.player1.start = 10; // 1
+    defaultKeyMapping.player1.service = 39; // S
+    defaultKeyMapping.player1.coin = 14; // 5
+    defaultKeyMapping.player1.up = 111; // Up arrow
+    defaultKeyMapping.player1.down = 116; // Down arrow
+    defaultKeyMapping.player1.left = 113; // Left arrow
+    defaultKeyMapping.player1.right = 114; // Right arrow
+    defaultKeyMapping.player1.button1 = 24; // Q
+    defaultKeyMapping.player1.button2 = 25; // W
+    defaultKeyMapping.player1.button3 = 26; // E
     defaultKeyMapping.player1.button4 = 27; // R
     defaultKeyMapping.player1.button5 = 40; // D
-    defaultKeyMapping.player1.button6 = 41;
-    defaultKeyMapping.player1.button7 = 42;
-    defaultKeyMapping.player1.button8 = 43;
-    defaultKeyMapping.player2.start = 60;
-    defaultKeyMapping.player2.service = 61;
-    defaultKeyMapping.player2.coin = 15;
-    defaultKeyMapping.player2.up = 54;
-    defaultKeyMapping.player2.down = 53;
-    defaultKeyMapping.player2.left = 55;
-    defaultKeyMapping.player2.right = 56;
-    defaultKeyMapping.player2.button1 = 52;
-    defaultKeyMapping.player2.button2 = 57;
-    defaultKeyMapping.player2.button3 = 58;
+    defaultKeyMapping.player1.button6 = 41; // F
+    defaultKeyMapping.player1.button7 = 42; // G
+    defaultKeyMapping.player1.button8 = 43; // H
+
+    // Player 2 controls
+    defaultKeyMapping.player2.start = 60; // .
+    defaultKeyMapping.player2.service = 61; // /
+    defaultKeyMapping.player2.coin = 15; // 6
+    defaultKeyMapping.player2.up = 54; // C
+    defaultKeyMapping.player2.down = 53; // X
+    defaultKeyMapping.player2.left = 55; // V
+    defaultKeyMapping.player2.right = 56; // B
+    defaultKeyMapping.player2.button1 = 52; // Z
+    defaultKeyMapping.player2.button2 = 57; // N
+    defaultKeyMapping.player2.button3 = 58; // M
     defaultKeyMapping.player2.button4 = 59; // ,
-    defaultKeyMapping.player2.button5 = 37; // CTRL
+    defaultKeyMapping.player2.button5 = 37; // Left Ctrl
+    defaultKeyMapping.player2.button6 = 65; // Space bar
+    defaultKeyMapping.player2.button7 = 38; // A
+
     return defaultKeyMapping;
 }
 
diff --git a/src/lindbergh/config.h b/src/lindbergh/config.h
index 9ce7933..574bf34 100644
--- a/src/lindbergh/config.h
+++ b/src/lindbergh/config.h
@@ -279,7 +279,7 @@ typedef struct
     char or2Netmask[16];
     float cpuFreqGhz;
     ArcadeInputs arcadeInputs;
-    int inputMode;  // 0 = both, 1 = SDL/X11 only, 2 = EVDEV only
+    int inputMode;  // 0 = Keyboard with SDL Controllers, 1 = Keyboard with EVDEV, 2 = EVDEV only
     int skipOutrunCabinetCheck;
     float whiteBorderPercentage;
     float blackBorderPercentage;
diff --git a/src/lindbergh/evdevinput.c b/src/lindbergh/evdevinput.c
index 4dfa26d..e9bc252 100644
--- a/src/lindbergh/evdevinput.c
+++ b/src/lindbergh/evdevinput.c
@@ -1313,8 +1313,8 @@ ControllerStatus getArcadeInputByName(char *name, ArcadeInput *input)
 
 ControllerStatus startControllerThreads(Controllers *controllers)
 {
-    // Don't start EVDEV threads if SDL/X11-only mode is enabled
-    if (getConfig()->inputMode == 1) {
+    // Don't start EVDEV threads if SDL only mode is enabled
+    if (getConfig()->inputMode == 0) {
         return CONTROLLER_STATUS_SUCCESS;
     }
 
diff --git a/src/lindbergh/glxhooks.c b/src/lindbergh/glxhooks.c
index c78ba3f..3c6cdbc 100644
--- a/src/lindbergh/glxhooks.c
+++ b/src/lindbergh/glxhooks.c
@@ -41,6 +41,9 @@ void glXSwapBuffers(Display *dpy, GLXDrawable drawable)
 
     EmulatorConfig *config = getConfig();
 
+    // SDL2 controller polling for X11 rendered games
+    pollEvents();
+
     if (config->borderEnabled)
         drawGameBorder(config->width, config->height, config->whiteBorderPercentage, config->blackBorderPercentage);
 
diff --git a/src/lindbergh/input.c b/src/lindbergh/input.c
index f1ae296..6d638d8 100644
--- a/src/lindbergh/input.c
+++ b/src/lindbergh/input.c
@@ -20,6 +20,7 @@
 #include <math.h>
 #include <pthread.h>
 #include <stdbool.h>
+#include "log.h"
 
 GameType gameType = SHOOTING;
 int jvsAnalogueInBits = 10;
@@ -31,11 +32,35 @@ extern void *customCursor;
 extern void *phTouchCursor;
 extern bool phShowCursorInGame;
 
+// SDL2 controllers
+extern SDL_GameController **controllers;
+int numControllers;
+const int16_t DEADZONE = 8000; // Standard SDL2 deadzone value
+const float AXIS_MAX = 32767.0f; // Maximum value for SDL2 axis
+
 int initInput()
 {
     gameType = getConfig()->gameType;
     jvsAnalogueInBits = getJVSIO()->capabilities.analogueInBits;
 
+    if (SDL_Init(SDL_INIT_GAMECONTROLLER) != 0) {
+        log_warn("SDL_Init failed: %s\n", SDL_GetError());
+        return -1;
+    }
+
+    // Get the number of available controllers
+    numControllers = SDL_NumJoysticks();
+
+    // Allocate memory for the controllers array
+    controllers = (SDL_GameController **)malloc(numControllers * sizeof(SDL_GameController *));
+
+    // Open each controller
+    for (int i = 0; i < numControllers; i++) {
+        controllers[i] = SDL_GameControllerOpen(i);
+        if (!controllers[i]) {
+            log_warn("Failed to open controller %d: %s\n", i, SDL_GetError());
+        }
+    }
     /* Center Steering wheel in racing games (need to add a check for when using real analog devices)*/
     if (gameType == DRIVING)
     {
@@ -545,26 +570,158 @@ void sdlEventDriving(SDL_Event *event)
             setSwitch(PLAYER_1, BUTTON_4, event->type == SDL_KEYDOWN);
         else if (event->key.keysym.sym == SDLK_z)
             setSwitch(PLAYER_1, BUTTON_DOWN, event->type == SDL_KEYDOWN); // Hummer - SegaTV view change
-
         else if (event->key.keysym.sym == SDLK_x)
             setSwitch(PLAYER_1, BUTTON_UP, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_c)
             setSwitch(PLAYER_1, BUTTON_LEFT, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_v)
             setSwitch(PLAYER_1, BUTTON_RIGHT, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_a)
             setSwitch(PLAYER_2, BUTTON_1, event->type == SDL_KEYDOWN); // SegaTV boost
-
         else if (event->key.keysym.sym == SDLK_LCTRL)
             setSwitch(PLAYER_2, BUTTON_DOWN, event->type == SDL_KEYDOWN); // Hummer boost
-
         else if (event->key.keysym.sym == SDLK_SPACE)
             setSwitch(PLAYER_2, BUTTON_UP, event->type == SDL_KEYDOWN);
     }
     break;
+
+    // SDL2 Controllers
+    case SDL_CONTROLLERBUTTONDOWN:
+    case SDL_CONTROLLERBUTTONUP:
+    case SDL_CONTROLLERAXISMOTION:
+    {
+        if (getConfig()->inputMode == 0) // Only handle controller events if inputMode is 0
+        {
+            bool isPress = (event->type == SDL_CONTROLLERBUTTONDOWN);
+
+            switch (event->type)
+            {
+            case SDL_CONTROLLERBUTTONDOWN:
+            case SDL_CONTROLLERBUTTONUP:
+                switch (event->cbutton.button)
+                {
+                case SDL_CONTROLLER_BUTTON_A:
+                    if (getConfig()->crc32 == INITIALD_4_REVA ||
+                        getConfig()->crc32 == INITIALD_4_REVB || 
+                        getConfig()->crc32 == INITIALD_4_REVC || 
+                        getConfig()->crc32 == INITIALD_4_REVD || 
+                        getConfig()->crc32 == INITIALD_4_REVG || 
+                        getConfig()->crc32 == INITIALD_4_EXP_REVB || 
+                        getConfig()->crc32 == INITIALD_4_EXP_REVC || 
+                        getConfig()->crc32 == INITIALD_4_EXP_REVD || 
+                        getConfig()->crc32 == INITIALD_5_JAP_REVA || 
+                        getConfig()->crc32 == INITIALD_5_JAP_REVF || 
+                        getConfig()->crc32 == INITIALD_5_EXP    || 
+                        getConfig()->crc32 == INITIALD_5_EXP_20 || 
+                        getConfig()->crc32 == INITIALD_5_EXP_20A) {
+                            setSwitch(PLAYER_1, BUTTON_1, isPress); // View Change Initial D
+                    }
+                    else
+                    {
+                        setSwitch(PLAYER_1, BUTTON_DOWN, isPress); // View Change others
+                    }
+                    break;
+                case SDL_CONTROLLER_BUTTON_B:
+                    if (getConfig()->crc32 == HUMMER || getConfig()->crc32 == HUMMER_SDLX || getConfig()->crc32 == HUMMER_EXTREME || getConfig()->crc32 == HUMMER_EXTREME_MDX)
+                    {
+                        setSwitch(PLAYER_2, BUTTON_DOWN, isPress); // Hummer Boost
+                    }
+                    else if (getConfig()->crc32 == SEGA_RACE_TV)
+                    {
+                        setSwitch(PLAYER_2, BUTTON_1, isPress); // SegaTV Boost
+                    }
+                    else if (getConfig()->crc32 == R_TUNED)
+                    {
+                        setSwitch(PLAYER_1, BUTTON_RIGHT, isPress); // R-Tuned Boost right
+                    }
+                    else
+                    {
+                        setSwitch(PLAYER_1, BUTTON_2, isPress);
+                    }
+                    break;
+                case SDL_CONTROLLER_BUTTON_X:
+                    if (getConfig()->crc32 == R_TUNED)
+                    {
+                        setSwitch(PLAYER_2, BUTTON_1, isPress); // R-Tuned Boost left
+                    }
+                    else
+                    {
+                        setSwitch(PLAYER_1, BUTTON_3, isPress);
+                    }                
+                    break;
+                case SDL_CONTROLLER_BUTTON_Y:
+                    setSwitch(PLAYER_1, BUTTON_4, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_UP:
+                    setSwitch(PLAYER_1, BUTTON_UP, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_DOWN:
+                    setSwitch(PLAYER_1, BUTTON_DOWN, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_LEFT:
+                    setSwitch(PLAYER_1, BUTTON_LEFT, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_RIGHT:
+                    setSwitch(PLAYER_1, BUTTON_RIGHT, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_START:
+                    setSwitch(PLAYER_1, BUTTON_START, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_GUIDE:
+                    setSwitch(PLAYER_1, BUTTON_SERVICE, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_BACK:
+                    incrementCoin(PLAYER_1, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_MISC1:
+                    setSwitch(SYSTEM, BUTTON_TEST, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_LEFTSHOULDER:
+                    setSwitch(PLAYER_2, BUTTON_DOWN, isPress);  // Gear Down
+                    break;
+                case SDL_CONTROLLER_BUTTON_RIGHTSHOULDER:
+                    setSwitch(PLAYER_2, BUTTON_UP, isPress); // Gear Down Up
+                    break;
+                }
+                break;
+
+            case SDL_CONTROLLERAXISMOTION:
+            {
+                float normalizedValue;
+                // Left stick X axis
+                if (event->caxis.axis == SDL_CONTROLLER_AXIS_LEFTX) {
+                    if (abs(event->caxis.value) > DEADZONE) {
+                        normalizedValue = event->caxis.value / AXIS_MAX;
+                        setAnalogue(ANALOGUE_1, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+                    } else {
+                        setAnalogue(ANALOGUE_1, pow(2, jvsAnalogueInBits) / 2); // Center when in deadzone
+                    }
+                }
+                // Left trigger (we use for Brake)
+                else if (event->caxis.axis == SDL_CONTROLLER_AXIS_TRIGGERLEFT) {
+                    if (abs(event->caxis.value) > DEADZONE) {
+                        normalizedValue = event->caxis.value / AXIS_MAX;
+                        setAnalogue(ANALOGUE_3, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+                    } else {
+                        setAnalogue(ANALOGUE_3, 0); // Release when in deadzone
+                    }
+                }
+                // Right trigger (we use for Gas)
+                else if (event->caxis.axis == SDL_CONTROLLER_AXIS_TRIGGERRIGHT) {
+                    if (abs(event->caxis.value) > DEADZONE) {
+                        normalizedValue = event->caxis.value / AXIS_MAX;
+                        setAnalogue(ANALOGUE_2, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+                    } else {
+                        setAnalogue(ANALOGUE_2, 0); // Release when in deadzone
+                    }
+                }
+            }
+            break;
+            }
+        }
+    }
+    break;
+
     default:
         break;
     }
@@ -593,7 +750,6 @@ void sdlEventShooting(SDL_Event *event)
             setSwitch(PLAYER_1, BUTTON_2, event->type == SDL_KEYDOWN);
         else if (event->key.keysym.sym == SDLK_e)
             setSwitch(PLAYER_1, BUTTON_3, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_r)
         {
             setSwitch(PLAYER_1, BUTTON_4, event->type == SDL_KEYDOWN);
@@ -604,22 +760,16 @@ void sdlEventShooting(SDL_Event *event)
         }
         else if (event->key.keysym.sym == SDLK_UP)
             setSwitch(PLAYER_1, BUTTON_UP, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_DOWN)
             setSwitch(PLAYER_1, BUTTON_DOWN, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_LEFT)
             setSwitch(PLAYER_1, BUTTON_LEFT, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_RIGHT)
             setSwitch(PLAYER_1, BUTTON_RIGHT, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_2)
             setSwitch(PLAYER_2, BUTTON_START, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_z)
             setSwitch(PLAYER_2, BUTTON_1, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_x)
             setSwitch(PLAYER_2, BUTTON_2, event->type == SDL_KEYDOWN);
 
@@ -631,17 +781,15 @@ void sdlEventShooting(SDL_Event *event)
 
         else if (event->key.keysym.sym == SDLK_u)
             setSwitch(PLAYER_2, BUTTON_UP, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_i)
             setSwitch(PLAYER_2, BUTTON_DOWN, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_o)
             setSwitch(PLAYER_2, BUTTON_LEFT, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_p)
             setSwitch(PLAYER_2, BUTTON_RIGHT, event->type == SDL_KEYDOWN);
     }
     break;
+
     case SDL_MOUSEMOTION:
     {
         if (getConfig()->crc32 == LETS_GO_JUNGLE || getConfig()->crc32 == LETS_GO_JUNGLE_REVA)
@@ -667,7 +815,6 @@ void sdlEventShooting(SDL_Event *event)
         }
         else
         {
-
             setAnalogue(ANALOGUE_1, ((double)event->motion.x / (double)getConfig()->width) * pow(2, jvsAnalogueInBits));
             setAnalogue(ANALOGUE_2,
                         ((double)event->motion.y / (double)getConfig()->height) * pow(2, jvsAnalogueInBits));
@@ -690,18 +837,17 @@ void sdlEventShooting(SDL_Event *event)
         // Check if mouse movement exceeds shake threshold
         if (abs(dx) > shakeThresholdPixels || abs(dy) > shakeThresholdPixels)
         {
-
             setAnalogue(ANALOGUE_5, 0);
             setAnalogue(ANALOGUE_6, 0);
         }
         else
         {
-
             setAnalogue(ANALOGUE_5, pow(2, jvsAnalogueInBits) / 2);
             setAnalogue(ANALOGUE_6, pow(2, jvsAnalogueInBits) / 2);
         }
     }
     break;
+
     case SDL_MOUSEBUTTONDOWN:
     case SDL_MOUSEBUTTONUP:
     {
@@ -734,6 +880,95 @@ void sdlEventShooting(SDL_Event *event)
         }
     }
     break;
+
+    // SDL2 Controllers
+    case SDL_CONTROLLERBUTTONDOWN:
+    case SDL_CONTROLLERBUTTONUP:
+    case SDL_CONTROLLERAXISMOTION:
+    {
+        if (getConfig()->inputMode == 0) // Only handle controller events if inputMode is 0
+        {
+            bool isPress = (event->type == SDL_CONTROLLERBUTTONDOWN);
+
+            switch (event->type)
+            {
+            case SDL_CONTROLLERBUTTONDOWN:
+            case SDL_CONTROLLERBUTTONUP:
+                switch (event->cbutton.button)
+                {
+                case SDL_CONTROLLER_BUTTON_A:
+                    setSwitch(PLAYER_1, BUTTON_1, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_B:
+                    setSwitch(PLAYER_1, BUTTON_2, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_X:
+                    setSwitch(PLAYER_1, BUTTON_3, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_Y:
+                    setSwitch(PLAYER_1, BUTTON_4, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_UP:
+                    setSwitch(PLAYER_1, BUTTON_UP, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_DOWN:
+                    setSwitch(PLAYER_1, BUTTON_DOWN, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_LEFT:
+                    setSwitch(PLAYER_1, BUTTON_LEFT, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_RIGHT:
+                    setSwitch(PLAYER_1, BUTTON_RIGHT, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_START:
+                    setSwitch(PLAYER_1, BUTTON_START, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_GUIDE:
+                    setSwitch(PLAYER_1, BUTTON_SERVICE, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_BACK:
+                    incrementCoin(PLAYER_1, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_MISC1:
+                    setSwitch(SYSTEM, BUTTON_TEST, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_LEFTSHOULDER:
+                    setSwitch(PLAYER_1, BUTTON_5, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_RIGHTSHOULDER:
+                    setSwitch(PLAYER_1, BUTTON_6, isPress);
+                    break;
+                }
+                break;
+
+            case SDL_CONTROLLERAXISMOTION:
+            {
+                float normalizedValue;
+                // Left stick X axis
+                if (event->caxis.axis == SDL_CONTROLLER_AXIS_LEFTX) {
+                    if (abs(event->caxis.value) > DEADZONE) {
+                        normalizedValue = event->caxis.value / AXIS_MAX;
+                        setAnalogue(ANALOGUE_1, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+                    } else {
+                        setAnalogue(ANALOGUE_1, pow(2, jvsAnalogueInBits) / 2); // Center when in deadzone
+                    }
+                }
+                // Left stick Y axis
+                if (event->caxis.axis == SDL_CONTROLLER_AXIS_LEFTY) {
+                    if (abs(event->caxis.value) > DEADZONE) {
+                        normalizedValue = event->caxis.value / AXIS_MAX;
+                        setAnalogue(ANALOGUE_2, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+                    } else {
+                        setAnalogue(ANALOGUE_2, pow(2, jvsAnalogueInBits) / 2); // Center when in deadzone
+                    }
+                }
+            }
+            break;
+            }
+        }
+    }
+    break;
+
     default:
         break;
     }
@@ -778,17 +1013,119 @@ void sdlEventABC(SDL_Event *event)
             setAnalogue(ANALOGUE_3, event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) * 0.8 : pow(2, jvsAnalogueInBits) * 0.5);
         else if (event->key.keysym.sym == SDLK_z)
             setSwitch(PLAYER_1, BUTTON_DOWN, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_x)
             setSwitch(PLAYER_1, BUTTON_UP, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_c)
             setSwitch(PLAYER_1, BUTTON_LEFT, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_v)
             setSwitch(PLAYER_1, BUTTON_RIGHT, event->type == SDL_KEYDOWN);
     }
     break;
+
+    // SDL2 Controllers
+    case SDL_CONTROLLERBUTTONDOWN:
+    case SDL_CONTROLLERBUTTONUP:
+    case SDL_CONTROLLERAXISMOTION:
+    {
+        if (getConfig()->inputMode == 0) // Only handle controller events if inputMode is 0
+        {
+            bool isPress = (event->type == SDL_CONTROLLERBUTTONDOWN);
+
+            switch (event->type)
+            {
+            case SDL_CONTROLLERBUTTONDOWN:
+            case SDL_CONTROLLERBUTTONUP:
+                switch (event->cbutton.button)
+                {
+                case SDL_CONTROLLER_BUTTON_A:
+                    setSwitch(PLAYER_1, BUTTON_1, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_B:
+                    setSwitch(PLAYER_1, BUTTON_2, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_X:
+                    setSwitch(PLAYER_1, BUTTON_3, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_Y:
+                    setSwitch(PLAYER_1, BUTTON_4, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_UP:
+                    setSwitch(PLAYER_1, BUTTON_UP, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_DOWN:
+                    setSwitch(PLAYER_1, BUTTON_DOWN, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_LEFT:
+                    setSwitch(PLAYER_1, BUTTON_LEFT, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_RIGHT:
+                    setSwitch(PLAYER_1, BUTTON_RIGHT, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_START:
+                    setSwitch(PLAYER_1, BUTTON_START, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_GUIDE:
+                    setSwitch(PLAYER_1, BUTTON_SERVICE, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_BACK:
+                    incrementCoin(PLAYER_1, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_MISC1:
+                    setSwitch(SYSTEM, BUTTON_TEST, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_LEFTSHOULDER:
+                    setSwitch(PLAYER_1, BUTTON_5, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_RIGHTSHOULDER:
+                    setSwitch(PLAYER_1, BUTTON_6, isPress);
+                    break;
+                }
+                break;
+
+            case SDL_CONTROLLERAXISMOTION:
+            {
+                float normalizedValue;
+                // Left stick X axis
+                if (event->caxis.axis == SDL_CONTROLLER_AXIS_LEFTX) {
+                    if (abs(event->caxis.value) > DEADZONE) {
+                        normalizedValue = event->caxis.value / AXIS_MAX;
+                        setAnalogue(ANALOGUE_1, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+                    } else {
+                        setAnalogue(ANALOGUE_1, pow(2, jvsAnalogueInBits) / 2); // Center when in deadzone
+                    }
+                }
+                // Left stick Y axis
+                if (event->caxis.axis == SDL_CONTROLLER_AXIS_LEFTY) {
+                    if (abs(event->caxis.value) > DEADZONE) {
+                        normalizedValue = event->caxis.value / AXIS_MAX;
+                        setAnalogue(ANALOGUE_2, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+                    } else {
+                        setAnalogue(ANALOGUE_2, pow(2, jvsAnalogueInBits) / 2); // Center when in deadzone
+                    }
+                }
+                // Increase Speed
+                if (event->caxis.axis == SDL_CONTROLLER_AXIS_TRIGGERRIGHT) {
+                    if (abs(event->caxis.value) > DEADZONE) {
+                        normalizedValue = event->caxis.value / AXIS_MAX;
+                        setAnalogue(ANALOGUE_3, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+                    } else {
+                        setAnalogue(ANALOGUE_3, pow(2, jvsAnalogueInBits) * 0.5); // Neutral when released
+                    }
+                }
+                // Decrease Speed
+                if (event->caxis.axis == SDL_CONTROLLER_AXIS_TRIGGERLEFT) {
+                    if (abs(event->caxis.value) > DEADZONE) {
+                        normalizedValue = event->caxis.value / AXIS_MAX;
+                        setAnalogue(ANALOGUE_3, (1.0f - normalizedValue) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+                    }
+                }
+            }
+            break;
+            }
+        }
+    }
+    break;
+
     default:
         break;
     }
@@ -810,13 +1147,15 @@ void sdlEventHarley(SDL_Event *event)
         else if (event->key.keysym.sym == SDLK_1)
             setSwitch(PLAYER_1, BUTTON_START, event->type == SDL_KEYDOWN);
         else if (event->key.keysym.sym == SDLK_UP)
-            setAnalogue(ANALOGUE_1, event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) - 1 : 0);
+            setAnalogue(ANALOGUE_2, event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) - 1 : 0);
         else if (event->key.keysym.sym == SDLK_DOWN)
-            setAnalogue(ANALOGUE_4, event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) - 1 : 0);
+            setAnalogue(ANALOGUE_3, event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) - 1 : 0);
         else if (event->key.keysym.sym == SDLK_LEFT)
-            setAnalogue(ANALOGUE_2, event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) * 0.2 : pow(2, jvsAnalogueInBits) * 0.5);
+            setAnalogue(ANALOGUE_1,
+                        event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) * 0.2 : pow(2, jvsAnalogueInBits) * 0.5);
         else if (event->key.keysym.sym == SDLK_RIGHT)
-            setAnalogue(ANALOGUE_2, event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) * 0.8 : pow(2, jvsAnalogueInBits) * 0.5);
+            setAnalogue(ANALOGUE_1,
+                        event->type == SDL_KEYDOWN ? pow(2, jvsAnalogueInBits) * 0.8 : pow(2, jvsAnalogueInBits) * 0.5);
         else if (event->key.keysym.sym == SDLK_q)
             setSwitch(PLAYER_1, BUTTON_1, event->type == SDL_KEYDOWN);
         else if (event->key.keysym.sym == SDLK_w)
@@ -827,26 +1166,112 @@ void sdlEventHarley(SDL_Event *event)
             setSwitch(PLAYER_1, BUTTON_4, event->type == SDL_KEYDOWN);
         else if (event->key.keysym.sym == SDLK_z)
             setSwitch(PLAYER_1, BUTTON_DOWN, event->type == SDL_KEYDOWN); // Hummer - SegaTV view change
-
         else if (event->key.keysym.sym == SDLK_x)
             setSwitch(PLAYER_1, BUTTON_UP, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_c)
             setSwitch(PLAYER_1, BUTTON_LEFT, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_v)
             setSwitch(PLAYER_1, BUTTON_RIGHT, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_a)
             setSwitch(PLAYER_2, BUTTON_1, event->type == SDL_KEYDOWN); // SegaTV boost
-
         else if (event->key.keysym.sym == SDLK_LCTRL)
             setSwitch(PLAYER_2, BUTTON_DOWN, event->type == SDL_KEYDOWN); // Hummer boost
-
         else if (event->key.keysym.sym == SDLK_SPACE)
             setSwitch(PLAYER_2, BUTTON_UP, event->type == SDL_KEYDOWN);
     }
     break;
+
+    // SDL2 Controllers
+    case SDL_CONTROLLERBUTTONDOWN:
+    case SDL_CONTROLLERBUTTONUP:
+    case SDL_CONTROLLERAXISMOTION:
+    {
+        if (getConfig()->inputMode == 0) // Only handle controller events if inputMode is 0
+        {
+            bool isPress = (event->type == SDL_CONTROLLERBUTTONDOWN);
+
+            switch (event->type)
+            {
+            case SDL_CONTROLLERBUTTONDOWN:
+            case SDL_CONTROLLERBUTTONUP:
+                switch (event->cbutton.button)
+                {
+                case SDL_CONTROLLER_BUTTON_A:
+                    setSwitch(PLAYER_1, BUTTON_2, isPress); // View
+                    break;
+                case SDL_CONTROLLER_BUTTON_B:
+                    setSwitch(PLAYER_1, BUTTON_1, isPress); // Change Music
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_UP:
+                    setSwitch(PLAYER_1, BUTTON_UP, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_DOWN:
+                    setSwitch(PLAYER_1, BUTTON_DOWN, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_LEFT:
+                    setSwitch(PLAYER_1, BUTTON_LEFT, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_DPAD_RIGHT:
+                    setSwitch(PLAYER_1, BUTTON_RIGHT, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_START:
+                    setSwitch(PLAYER_1, BUTTON_START, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_GUIDE:
+                    setSwitch(PLAYER_1, BUTTON_SERVICE, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_BACK:
+                    incrementCoin(PLAYER_1, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_MISC1:
+                    setSwitch(SYSTEM, BUTTON_TEST, isPress);
+                    break;
+                case SDL_CONTROLLER_BUTTON_LEFTSHOULDER:
+                    setSwitch(PLAYER_1, BUTTON_4, isPress);  // Gear Down
+                    break;
+                case SDL_CONTROLLER_BUTTON_RIGHTSHOULDER:
+                    setSwitch(PLAYER_1, BUTTON_3, isPress); // Gear Down Up
+                    break;
+                }
+                break;
+
+            case SDL_CONTROLLERAXISMOTION:
+            {
+                float normalizedValue;
+                // Left stick X axis (Handle)
+                if (event->caxis.axis == SDL_CONTROLLER_AXIS_LEFTX) {
+                    if (abs(event->caxis.value) > DEADZONE) {
+                        normalizedValue = event->caxis.value / AXIS_MAX;
+                        setAnalogue(ANALOGUE_2, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+                    } else {
+                        setAnalogue(ANALOGUE_2, pow(2, jvsAnalogueInBits) / 2); // Center when in deadzone
+                    }
+                }
+                // Left trigger (we use for Brake)
+                else if (event->caxis.axis == SDL_CONTROLLER_AXIS_TRIGGERLEFT) {
+                    if (abs(event->caxis.value) > DEADZONE) {
+                        normalizedValue = event->caxis.value / AXIS_MAX;
+                        setAnalogue(ANALOGUE_4, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+                    } else {
+                        setAnalogue(ANALOGUE_4, 0); // Release when in deadzone
+                    }
+                }
+                // Right trigger (we use for Gas)
+                else if (event->caxis.axis == SDL_CONTROLLER_AXIS_TRIGGERRIGHT) {
+                    if (abs(event->caxis.value) > DEADZONE) {
+                        normalizedValue = event->caxis.value / AXIS_MAX;
+                        setAnalogue(ANALOGUE_1, (normalizedValue + 1.0f) * (pow(2, jvsAnalogueInBits) - 1) / 2);
+                    } else {
+                        setAnalogue(ANALOGUE_1, 0); // Release when in deadzone
+                    }
+                }
+            }
+            break;
+            }
+        }
+    }
+    break;
+
     default:
         break;
     }
@@ -861,83 +1286,116 @@ void sdlEventMahjong(SDL_Event *event)
     {
         if (event->key.keysym.sym == SDLK_t)
             setSwitch(SYSTEM, BUTTON_TEST, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_s)
             setSwitch(PLAYER_1, BUTTON_SERVICE, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_5)
             incrementCoin(PLAYER_1, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_1)
             setSwitch(PLAYER_1, BUTTON_START, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_a)
             setSwitch(PLAYER_1, BUTTON_RIGHT, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_b)
             setSwitch(PLAYER_1, BUTTON_LEFT, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_c)
             setSwitch(PLAYER_1, BUTTON_UP, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_d)
             setSwitch(PLAYER_1, BUTTON_DOWN, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_e)
             setSwitch(PLAYER_1, BUTTON_1, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_f)
             setSwitch(PLAYER_1, BUTTON_2, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_g)
             setSwitch(PLAYER_1, BUTTON_3, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_h)
             setSwitch(PLAYER_1, BUTTON_4, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_i)
             setSwitch(PLAYER_1, BUTTON_5, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_j)
             setSwitch(PLAYER_1, BUTTON_6, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_k)
             setSwitch(PLAYER_1, BUTTON_7, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_l)
             setSwitch(PLAYER_2, BUTTON_RIGHT, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_m)
             setSwitch(PLAYER_2, BUTTON_LEFT, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_n)
             setSwitch(PLAYER_2, BUTTON_UP, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_o)
             setSwitch(PLAYER_2, BUTTON_DOWN, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_p)
             setSwitch(PLAYER_2, BUTTON_1, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_q)
             setSwitch(PLAYER_2, BUTTON_2, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_r)
             setSwitch(PLAYER_2, BUTTON_3, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_u)
             setSwitch(PLAYER_2, BUTTON_4, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_v)
             setSwitch(PLAYER_2, BUTTON_5, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_w)
             setSwitch(PLAYER_2, BUTTON_6, event->type == SDL_KEYDOWN);
-
         else if (event->key.keysym.sym == SDLK_x)
             setSwitch(PLAYER_2, BUTTON_7, event->type == SDL_KEYDOWN);
     }
     break;
+
+    // SDL2 Controllers
+    case SDL_CONTROLLERBUTTONDOWN:
+    case SDL_CONTROLLERBUTTONUP:
+    {
+        if (getConfig()->inputMode == 0) // Only handle controller events if inputMode is 0
+        {
+            bool isPress = (event->type == SDL_CONTROLLERBUTTONDOWN);
+
+            switch (event->cbutton.button)
+            {
+            case SDL_CONTROLLER_BUTTON_A:
+                setSwitch(PLAYER_1, BUTTON_1, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_B:
+                setSwitch(PLAYER_1, BUTTON_2, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_X:
+                setSwitch(PLAYER_1, BUTTON_3, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_Y:
+                setSwitch(PLAYER_1, BUTTON_4, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_UP:
+                setSwitch(PLAYER_1, BUTTON_UP, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_DOWN:
+                setSwitch(PLAYER_1, BUTTON_DOWN, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_LEFT:
+                setSwitch(PLAYER_1, BUTTON_LEFT, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_DPAD_RIGHT:
+                setSwitch(PLAYER_1, BUTTON_RIGHT, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_START:
+                setSwitch(PLAYER_1, BUTTON_START, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_GUIDE:
+                setSwitch(PLAYER_1, BUTTON_SERVICE, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_BACK:
+                incrementCoin(PLAYER_1, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_MISC1:
+                setSwitch(SYSTEM, BUTTON_TEST, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_LEFTSHOULDER:
+                setSwitch(PLAYER_1, BUTTON_5, isPress);
+                break;
+            case SDL_CONTROLLER_BUTTON_RIGHTSHOULDER:
+                setSwitch(PLAYER_1, BUTTON_6, isPress);
+                break;
+            }
+        }
+    }
+    break;
+
     default:
         break;
     }
diff --git a/src/lindbergh/lindbergh.c b/src/lindbergh/lindbergh.c
index 91732e6..d4c03e5 100644
--- a/src/lindbergh/lindbergh.c
+++ b/src/lindbergh/lindbergh.c
@@ -16,7 +16,7 @@
 #define LD_LIBRARY_PATH "LD_LIBRARY_PATH"
 #define LD_PRELOAD "LD_PRELOAD"
 #define PRELOAD_FILE_NAME "lindbergh.so"
-#define TEAM "bobbydilley, retrofan, dkeruza-neo, doozer, francesco, rolel, caviar-x"
+#define TEAM "bobbydilley, retrofan, dkeruza-neo, doozer, francesco, rolel, caviar-x, dmanlfc"
 #define LINDBERGH_CONFIG_PATH "LINDBERGH_CONFIG_PATH"
 #define LINDBERGH_LOADER_CURRENT_DIR "LINDBERGH_LOADER_CURRENT_DIR"
 
diff --git a/src/lindbergh/sdlcalls.c b/src/lindbergh/sdlcalls.c
index 946e1c0..cd67569 100644
--- a/src/lindbergh/sdlcalls.c
+++ b/src/lindbergh/sdlcalls.c
@@ -30,6 +30,8 @@ extern void *customCursor;
 extern void *phTouchCursor;
 
 int glutInitialized = 0;
+extern SDL_GameController **controllers;
+extern int numControllers;
 
 void GLAPIENTRY openglDebugCallback2(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length,
                                      const GLchar *message, const void *userParam)
@@ -173,6 +175,17 @@ void initSDL(int *argcp, char **argv)
 void sdlQuit()
 {
     SDL_DestroyWindow(SDLwindow);
+    
+    // Close each controller
+    for (int i = 0; i < numControllers; i++) {
+        if (controllers[i]) {
+            SDL_GameControllerClose(controllers[i]);
+        }
+    }
+
+    // Free the allocated memory
+    free(controllers);
+    
     SDL_Quit();
     exit(0);
 }
@@ -187,19 +200,25 @@ void pollEvents()
         case SDL_QUIT:
             sdlQuit();
             break;
+
         case SDL_KEYDOWN:
         case SDL_KEYUP:
         case SDL_MOUSEBUTTONDOWN:
         case SDL_MOUSEBUTTONUP:
         case SDL_MOUSEMOTION:
+        case SDL_CONTROLLERBUTTONDOWN:
+        case SDL_CONTROLLERBUTTONUP:
+        case SDL_CONTROLLERAXISMOTION:
             handleSdlEvents(&event);
             break;
+
         case SDL_WINDOWEVENT:
             if (event.window.event == SDL_WINDOWEVENT_CLOSE)
             {
                 SDL_Quit();
             }
             break;
+
         default:
             break;
         }

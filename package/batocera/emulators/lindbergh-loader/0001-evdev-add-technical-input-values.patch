diff --git a/src/lindbergh/evdevinput.c b/src/lindbergh/evdevinput.c
index 6301fd4..637475a 100644
--- a/src/lindbergh/evdevinput.c
+++ b/src/lindbergh/evdevinput.c
@@ -922,14 +922,18 @@ static ControllerStatus listControllers(Controllers *controllers)
                     strcat(controllerInput->inputName, "_");
                     strcat(controllerInput->inputName, codename(EV_KEY, code));
                     normaliseName(controllerInput->inputName);
+                    if(snprintf(controllerInput->inputTechName, SIZE, "%s:KEY:%i", controllers->controller[i].path, code) >= 1024) {
+                      // hum ok, truncated value
+                    }
+		    strcpy(controllerInput->inputTechNegName, "-"); // unassignable value (not "" while some conf are empty)
                 }
             }
         }
 
         if (test_bit(EV_ABS, bit[0]))
         {
-            ioctl(controller, EVIOCGBIT(EV_ABS, KEY_MAX), bit[EV_ABS]);
-            for (int code = 0; code < KEY_MAX; code++)
+            ioctl(controller, EVIOCGBIT(EV_ABS, ABS_MAX), bit[EV_ABS]);
+            for (int code = 0; code < ABS_MAX; code++)
             {
                 if (test_bit(code, bit[EV_ABS]))
                 {
@@ -943,6 +947,12 @@ static ControllerStatus listControllers(Controllers *controllers)
                     strcat(controllerInput->inputName, "_");
                     strcat(controllerInput->inputName, codename(EV_ABS, code));
                     normaliseName(controllerInput->inputName);
+                    if(snprintf(controllerInput->inputTechName, SIZE, "%s:ABS:%i", controllers->controller[i].path, code) >= 1024) {
+                      // hum ok, truncated value
+                    }
+                    if(snprintf(controllerInput->inputTechNegName, SIZE, "%s:ABS_NEG:%i", controllers->controller[i].path, code) >= 1024) {
+                      // hum ok, truncated value
+                    }
 
                     ControllerInput *minControllerInput =
                         &controllers->controller[i].inputs[controllers->controller[i].inputCount++];
@@ -951,6 +961,12 @@ static ControllerStatus listControllers(Controllers *controllers)
                     minControllerInput->specialFunction = ANALOGUE_TO_DIGITAL_MIN;
                     strcpy(minControllerInput->inputName, controllerInput->inputName);
                     strcat(minControllerInput->inputName, "_MIN");
+                    if(snprintf(minControllerInput->inputTechName, SIZE, "%s:ABS:%i:MIN", controllers->controller[i].path, code) >= 1024) {
+                      // hum ok, truncated value
+                    }
+                    if(snprintf(minControllerInput->inputTechNegName, SIZE, "%s:ABS_NEG:%i:MIN", controllers->controller[i].path, code) >= 1024) {
+                      // hum ok, truncated value
+                    }
 
                     ControllerInput *maxControllerInput =
                         &controllers->controller[i].inputs[controllers->controller[i].inputCount++];
@@ -959,6 +975,12 @@ static ControllerStatus listControllers(Controllers *controllers)
                     maxControllerInput->specialFunction = ANALOGUE_TO_DIGITAL_MAX;
                     strcpy(maxControllerInput->inputName, controllerInput->inputName);
                     strcat(maxControllerInput->inputName, "_MAX");
+                    if(snprintf(maxControllerInput->inputTechName, SIZE, "%s:ABS:%i:MAX", controllers->controller[i].path, code) >= 1024) {
+                      // hum ok, truncated value
+                    }
+                    if(snprintf(maxControllerInput->inputTechNegName, SIZE, "%s:ABS_NEG:%i:MAX", controllers->controller[i].path, code) >= 1024) {
+                      // hum ok, truncated value
+                    }
 
                     struct input_absinfo absoluteFeatures;
                     ioctl(controller, EVIOCGABS(code), &absoluteFeatures);
@@ -1066,6 +1088,10 @@ void *controllerThread(void *_args)
                     ((double)event.value - (double)args->controller->absMin[event.code]) /
                     ((double)args->controller->absMax[event.code] - (double)args->controller->absMin[event.code]);
 
+                if(args->controller->absTriggers[event.code].isNeg == 1) {
+                  scaled = 1.0 - scaled;
+                }
+
                 if (args->controller->absTriggers[event.code].enabled)
                 {
                     int channel = args->controller->absTriggers[event.code].channel;
@@ -1076,20 +1102,23 @@ void *controllerThread(void *_args)
                         scaled = 0.5;
                     if (scaled > analogue_deadzones[channel].end_min)
                         scaled = 1.0;
-
                     setAnalogue(channel, scaled * (pow(2, jvsBits) - 1));
                 }
 
-                if (args->controller->absTriggers[event.code].minEnabled)
-                {
-                    setSwitch(args->controller->absTriggers[event.code].minPlayer,
-                              args->controller->absTriggers[event.code].minChannel, scaled < 0.2);
+                if(event.value <= ((args->controller->absMin[event.code] + args->controller->absMax[event.code]) / 2)) {
+                  if (args->controller->absTriggers[event.code].minEnabled)
+                    {
+                      int channel = args->controller->absTriggers[event.code].minChannel;
+                      setAnalogue(channel, scaled < 0.2 ? pow(2, jvsBits) * 0.2 : pow(2, jvsBits) * 0.5);
+                    }
                 }
 
-                if (args->controller->absTriggers[event.code].maxEnabled)
-                {
-                    setSwitch(args->controller->absTriggers[event.code].maxPlayer,
-                              args->controller->absTriggers[event.code].maxChannel, scaled > 0.8);
+                if(event.value >= ((args->controller->absMin[event.code] + args->controller->absMax[event.code]) / 2)) {
+                  if (args->controller->absTriggers[event.code].maxEnabled)
+                    {
+                       int channel = args->controller->absTriggers[event.code].maxChannel;
+                       setAnalogue(channel, scaled > 0.8 ? pow(2, jvsBits) * 0.8 : pow(2, jvsBits) * 0.5);
+                    }
                 }
             }
             break;
@@ -1243,6 +1272,7 @@ ControllerStatus startControllerThreads(Controllers *controllers)
             controllers->controller[i].absTriggers[j].enabled = 0;
             controllers->controller[i].absTriggers[j].minEnabled = 0;
             controllers->controller[i].absTriggers[j].maxEnabled = 0;
+            controllers->controller[i].absTriggers[j].isNeg = 0;
         }
 
         for (int j = 0; j < KEY_MAX; j++)
@@ -1257,6 +1287,20 @@ ControllerStatus startControllerThreads(Controllers *controllers)
             char *mapping = getMapping(controllers->controller[i].inputs[j].inputName);
             if (mapping == NULL)
                 continue;
+            int negabs = 0;
+
+            if (mapping == NULL) {
+                // give a 2nd chance with a techninal mapping
+                mapping = getMapping(controllers->controller[i].inputs[j].inputTechName);
+                if (mapping == NULL) {
+                    // give a 3rd change with negativ technical mapping
+                    mapping = getMapping(controllers->controller[i].inputs[j].inputTechNegName);
+                    negabs = 1;
+                    if (mapping == NULL) {
+                        continue;
+                    }
+                }
+            }
 
             ArcadeInput input = {0};
             ControllerStatus status = getArcadeInputByName(mapping, &input);
@@ -1281,6 +1325,7 @@ ControllerStatus startControllerThreads(Controllers *controllers)
                            input.name);
                     controllers->controller[i].absTriggers[controllers->controller[i].inputs[j].evCode].player =
                         input.player;
+                    controllers->controller[i].absTriggers[controllers->controller[i].inputs[j].evCode].isNeg = negabs;
                 }
                 break;
 
@@ -1293,6 +1338,7 @@ ControllerStatus startControllerThreads(Controllers *controllers)
                            input.name);
                     controllers->controller[i].absTriggers[controllers->controller[i].inputs[j].evCode].maxPlayer =
                         input.player;
+                    controllers->controller[i].absTriggers[controllers->controller[i].inputs[j].evCode].isNeg = negabs;
                 }
                 break;
 
@@ -1305,6 +1351,7 @@ ControllerStatus startControllerThreads(Controllers *controllers)
                            input.name);
                     controllers->controller[i].absTriggers[controllers->controller[i].inputs[j].evCode].minPlayer =
                         input.player;
+                    controllers->controller[i].absTriggers[controllers->controller[i].inputs[j].evCode].isNeg = negabs;
                 }
                 break;
 
diff --git a/src/lindbergh/evdevinput.h b/src/lindbergh/evdevinput.h
index bcf30ee..4e0d032 100644
--- a/src/lindbergh/evdevinput.h
+++ b/src/lindbergh/evdevinput.h
@@ -31,6 +31,8 @@ typedef struct
     int maxEnabled;
 
     int isAnalogue;
+    int isNeg; // reversed axis
+    
     int isCoin;
 } ArcadeInput;
 
@@ -50,6 +52,8 @@ typedef enum {
 typedef struct
 {
     char inputName[SIZE];
+    char inputTechName[SIZE];
+    char inputTechNegName[SIZE];
     int evType;
     int evCode;
     SpecialFunction specialFunction;

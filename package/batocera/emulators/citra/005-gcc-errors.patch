diff --git a/src/common/ring_buffer.h b/src/common/ring_buffer.h
index 428d309..75ca9d3 100644
--- a/src/common/ring_buffer.h
+++ b/src/common/ring_buffer.h
@@ -13,6 +13,8 @@
 #include <vector>
 #include "common/common_types.h"
 
+#include <limits>
+
 namespace Common {
 
 /// SPSC ring buffer
diff --git a/src/core/hle/service/gsp/gsp_gpu.cpp b/src/core/hle/service/gsp/gsp_gpu.cpp
index 33558fe..c6616a8 100644
--- a/src/core/hle/service/gsp/gsp_gpu.cpp
+++ b/src/core/hle/service/gsp/gsp_gpu.cpp
@@ -273,34 +273,81 @@ void GSP_GPU::ReadHWRegs(Kernel::HLERequestContext& ctx) {
     rb.PushStaticBuffer(std::move(buffer), 0);
 }
 
+//ResultCode SetBufferSwap(u32 screen_id, const FrameBufferInfo& info) {
+//    u32 base_address = 0x400000;
+//    PAddr phys_address_left = VirtualToPhysicalAddress(info.address_left);
+//    PAddr phys_address_right = VirtualToPhysicalAddress(info.address_right);
+//    if (info.active_fb == 0) {
+//        WriteSingleHWReg(base_address + 4 * static_cast<u32>(GPU_REG_INDEX(
+//                                                framebuffer_config[screen_id].address_left1)),
+//                         phys_address_left);
+//        WriteSingleHWReg(base_address + 4 * static_cast<u32>(GPU_REG_INDEX(
+//                                                framebuffer_config[screen_id].address_right1)),
+//                         phys_address_right);
+//    } else {
+//        WriteSingleHWReg(base_address + 4 * static_cast<u32>(GPU_REG_INDEX(
+//                                                framebuffer_config[screen_id].address_left2)),
+//                         phys_address_left);
+//        WriteSingleHWReg(base_address + 4 * static_cast<u32>(GPU_REG_INDEX(
+//                                                framebuffer_config[screen_id].address_right2)),
+//                         phys_address_right);
+//    }
+//    WriteSingleHWReg(base_address +
+//                         4 * static_cast<u32>(GPU_REG_INDEX(framebuffer_config[screen_id].stride)),
+//                     info.stride);
+//    WriteSingleHWReg(base_address + 4 * static_cast<u32>(GPU_REG_INDEX(
+//                                            framebuffer_config[screen_id].color_format)),
+//                     info.format);
+//    WriteSingleHWReg(
+//        base_address + 4 * static_cast<u32>(GPU_REG_INDEX(framebuffer_config[screen_id].active_fb)),
+//        info.shown_fb);
+//
+//    if (Pica::g_debug_context)
+//        Pica::g_debug_context->OnEvent(Pica::DebugContext::Event::BufferSwapped, nullptr);
+//
+//    if (screen_id == 0) {
+//        MicroProfileFlip();
+//        Core::System::GetInstance().perf_stats->EndGameFrame();
+//    }
+//
+//    return RESULT_SUCCESS;
+//}
+
+  #define GPU_FRAMEBUFFER_REG_INDEX(screen_id, field_name)                                           \
+    ((offsetof(GPU::Regs, framebuffer_config) +                                                    \
+      sizeof(GPU::Regs::FramebufferConfig) * (screen_id) +                                         \
+      offsetof(GPU::Regs::FramebufferConfig, field_name)) /                                        \
+     sizeof(u32))
+
+  
 ResultCode SetBufferSwap(u32 screen_id, const FrameBufferInfo& info) {
     u32 base_address = 0x400000;
     PAddr phys_address_left = VirtualToPhysicalAddress(info.address_left);
     PAddr phys_address_right = VirtualToPhysicalAddress(info.address_right);
     if (info.active_fb == 0) {
-        WriteSingleHWReg(base_address + 4 * static_cast<u32>(GPU_REG_INDEX(
-                                                framebuffer_config[screen_id].address_left1)),
+        WriteSingleHWReg(base_address + 4 * static_cast<u32>(GPU_FRAMEBUFFER_REG_INDEX(
+                                                screen_id, address_left1)),
                          phys_address_left);
-        WriteSingleHWReg(base_address + 4 * static_cast<u32>(GPU_REG_INDEX(
-                                                framebuffer_config[screen_id].address_right1)),
+        WriteSingleHWReg(base_address + 4 * static_cast<u32>(GPU_FRAMEBUFFER_REG_INDEX(
+                                                screen_id, address_right1)),
                          phys_address_right);
     } else {
-        WriteSingleHWReg(base_address + 4 * static_cast<u32>(GPU_REG_INDEX(
-                                                framebuffer_config[screen_id].address_left2)),
+        WriteSingleHWReg(base_address + 4 * static_cast<u32>(GPU_FRAMEBUFFER_REG_INDEX(
+                                                screen_id, address_left2)),
                          phys_address_left);
-        WriteSingleHWReg(base_address + 4 * static_cast<u32>(GPU_REG_INDEX(
-                                                framebuffer_config[screen_id].address_right2)),
+        WriteSingleHWReg(base_address + 4 * static_cast<u32>(GPU_FRAMEBUFFER_REG_INDEX(
+                                                screen_id, address_right2)),
                          phys_address_right);
     }
     WriteSingleHWReg(base_address +
-                         4 * static_cast<u32>(GPU_REG_INDEX(framebuffer_config[screen_id].stride)),
+                         4 * static_cast<u32>(GPU_FRAMEBUFFER_REG_INDEX(screen_id, stride)),
                      info.stride);
-    WriteSingleHWReg(base_address + 4 * static_cast<u32>(GPU_REG_INDEX(
-                                            framebuffer_config[screen_id].color_format)),
+    WriteSingleHWReg(base_address +
+                         4 * static_cast<u32>(GPU_FRAMEBUFFER_REG_INDEX(screen_id, color_format)),
                      info.format);
-    WriteSingleHWReg(
-        base_address + 4 * static_cast<u32>(GPU_REG_INDEX(framebuffer_config[screen_id].active_fb)),
-        info.shown_fb);
+    WriteSingleHWReg(base_address +
+                         4 * static_cast<u32>(GPU_FRAMEBUFFER_REG_INDEX(screen_id, active_fb)),
+                     info.shown_fb);
 
     if (Pica::g_debug_context)
         Pica::g_debug_context->OnEvent(Pica::DebugContext::Event::BufferSwapped, nullptr);

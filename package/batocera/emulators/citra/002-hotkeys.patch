diff --git a/src/citra/citra.cpp b/src/citra/citra.cpp
index b3b95bd..088427b 100644
--- a/src/citra/citra.cpp
+++ b/src/citra/citra.cpp
@@ -50,6 +50,8 @@ __declspec(dllexport) unsigned long NvOptimusEnablement = 0x00000001;
 }
 #endif
 
+int batocera_hotkey_exit = 0;
+
 static void PrintHelp(const char* argv0) {
     std::cout << "Usage: " << argv0
               << " [options] <filename>\n"
@@ -345,7 +347,7 @@ int main(int argc, char** argv) {
         Core::Movie::GetInstance().StartRecording(movie_record);
     }
 
-    while (emu_window->IsOpen()) {
+    while (emu_window->IsOpen() && batocera_hotkey_exit == 0) {
         system.RunLoop();
     }
 
diff --git a/src/core/frontend/input.h b/src/core/frontend/input.h
index dc32551..b4151e8 100644
--- a/src/core/frontend/input.h
+++ b/src/core/frontend/input.h
@@ -23,6 +23,9 @@ public:
     virtual StatusType GetStatus() const {
         return {};
     }
+    virtual int GetValue() const {
+      return -1;
+    }
 };
 
 /// An abstract class template for a factory that can create input devices.
diff --git a/src/input_common/sdl/sdl.cpp b/src/input_common/sdl/sdl.cpp
index 7c1ecc2..d502512 100644
--- a/src/input_common/sdl/sdl.cpp
+++ b/src/input_common/sdl/sdl.cpp
@@ -22,6 +22,13 @@
 #include "common/threadsafe_queue.h"
 #include "input_common/main.h"
 #include "input_common/sdl/sdl.h"
+#include "core/settings.h"
+
+extern int batocera_hotkey_exit;
+int batocera_hotkey_start_number = -1;
+int batocera_hotkey_start_state  = 0;
+int batocera_hotkey_home_number  = -1;
+int batocera_hotkey_home_state   = 0;
 
 namespace InputCommon {
 
@@ -239,6 +246,12 @@ void HandleGameControllerEvent(const SDL_Event& event) {
         auto joystick = GetSDLJoystickBySDLID(event.jbutton.which);
         if (joystick) {
             joystick->SetButton(event.jbutton.button, false);
+	    if(batocera_hotkey_start_number == event.jbutton.button) {
+	      batocera_hotkey_start_state = 0;
+	    }
+	    if(batocera_hotkey_home_number == event.jbutton.button) {
+	      batocera_hotkey_home_state = 0;
+	    }
         }
         break;
     }
@@ -246,6 +259,15 @@ void HandleGameControllerEvent(const SDL_Event& event) {
         auto joystick = GetSDLJoystickBySDLID(event.jbutton.which);
         if (joystick) {
             joystick->SetButton(event.jbutton.button, true);
+	    if(batocera_hotkey_start_number == event.jbutton.button) {
+	      batocera_hotkey_start_state = 1;
+	    }
+	    if(batocera_hotkey_home_number == event.jbutton.button) {
+	      batocera_hotkey_home_state = 1;
+	    }
+	    if(batocera_hotkey_start_state == 1 && batocera_hotkey_home_state == 1) {
+	      batocera_hotkey_exit = 1;
+	    }
         }
         break;
     }
@@ -310,6 +332,10 @@ public:
         return joystick->GetButton(button);
     }
 
+    int GetValue() const override {
+      return button;
+    }
+
 private:
     std::shared_ptr<SDLJoystick> joystick;
     int button;
@@ -468,6 +494,14 @@ void Init() {
     RegisterFactory<AnalogDevice>("sdl", std::make_shared<SDLAnalogFactory>());
     polling = false;
     initialized = true;
+
+    // init batocera hotkey events
+    std::array<std::unique_ptr<Input::ButtonDevice>, Settings::NativeButton::NumButtons> buttons;
+    std::transform(Settings::values.buttons.begin() + Settings::NativeButton::BUTTON_HID_BEGIN,
+                   Settings::values.buttons.begin() + Settings::NativeButton::NumButtons,
+                   buttons.begin(), Input::CreateDevice<Input::ButtonDevice>);
+    batocera_hotkey_start_number = buttons[Settings::NativeButton::Start - Settings::NativeButton::BUTTON_HID_BEGIN]->GetValue();
+    batocera_hotkey_home_number  = buttons[Settings::NativeButton::Home  - Settings::NativeButton::BUTTON_HID_BEGIN]->GetValue();
 }
 
 void Shutdown() {

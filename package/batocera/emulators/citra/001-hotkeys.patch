diff --git a/src/citra_qt/bootmanager.cpp b/src/citra_qt/bootmanager.cpp
index b13169bcd..9bbf42dcd 100644
--- a/src/citra_qt/bootmanager.cpp
+++ b/src/citra_qt/bootmanager.cpp
@@ -42,6 +42,8 @@
 
 static Frontend::WindowSystemType GetWindowSystemType();
 
+extern int batocera_hotkey_exit;
+
 EmuThread::EmuThread(Frontend::GraphicsContext& core_context) : core_context(core_context) {}
 
 EmuThread::~EmuThread() = default;
@@ -119,8 +121,11 @@ void EmuThread::run() {
             std::unique_lock lock{running_mutex};
             running_cv.wait(lock, [this] { return IsRunning() || exec_step || stop_run; });
         }
+        if(batocera_hotkey_exit == 1){
+            GMainWindow().closeWindow();
+        }
     }
-
+    
     // Shutdown the core emulation
     system.Shutdown();
 
diff --git a/src/citra_qt/main.cpp b/src/citra_qt/main.cpp
index 1617968cc..d99faef61 100644
--- a/src/citra_qt/main.cpp
+++ b/src/citra_qt/main.cpp
@@ -2788,3 +2788,8 @@ int main(int argc, char* argv[]) {
     detached_tasks.WaitForAllTasks();
     return result;
 }
+
+void GMainWindow::closeWindow() {
+    ShutdownGame();
+    close();
+}
diff --git a/src/citra_qt/main.h b/src/citra_qt/main.h
index 6ee7dc562..6e2a17a27 100644
--- a/src/citra_qt/main.h
+++ b/src/citra_qt/main.h
@@ -84,6 +84,7 @@ public:
 
     bool DropAction(QDropEvent* event);
     void AcceptDropEvent(QDropEvent* event);
+    void closeWindow();
 
 public slots:
     void OnAppFocusStateChanged(Qt::ApplicationState state);
diff --git a/src/core/frontend/input.h b/src/core/frontend/input.h
index a1cc8d66a..b6a2029ba 100644
--- a/src/core/frontend/input.h
+++ b/src/core/frontend/input.h
@@ -23,6 +23,9 @@ public:
     virtual StatusType GetStatus() const {
         return {};
     }
+    virtual int GetValue() const {
+      return -1;
+    }
 };
 
 /// An abstract class template for a factory that can create input devices.
diff --git a/src/input_common/sdl/sdl_impl.cpp b/src/input_common/sdl/sdl_impl.cpp
index 4f7a78461..f67349714 100644
--- a/src/input_common/sdl/sdl_impl.cpp
+++ b/src/input_common/sdl/sdl_impl.cpp
@@ -22,6 +22,13 @@
 #include "common/threadsafe_queue.h"
 #include "core/frontend/input.h"
 #include "input_common/sdl/sdl_impl.h"
+#include "common/settings.h"
+
+int batocera_hotkey_exit = 0;
+int batocera_hotkey_start_number = -1;
+int batocera_hotkey_start_state  = 0;
+int batocera_hotkey_home_number  = -1;
+int batocera_hotkey_home_state   = 0;
 
 // These structures are not actually defined in the headers, so we need to define them here to use
 // them.
@@ -566,12 +573,27 @@ void SDLState::HandleGameControllerEvent(const SDL_Event& event) {
     case SDL_JOYBUTTONUP: {
         if (auto joystick = GetSDLJoystickBySDLID(event.jbutton.which)) {
             joystick->SetButton(event.jbutton.button, false);
+            if(batocera_hotkey_start_number == event.jbutton.button) {
+      	        batocera_hotkey_start_state = 0;
+      	    }
+      	    if(batocera_hotkey_home_number == event.jbutton.button) {
+      	        batocera_hotkey_home_state = 0;
+      	    }
         }
         break;
     }
     case SDL_JOYBUTTONDOWN: {
         if (auto joystick = GetSDLJoystickBySDLID(event.jbutton.which)) {
             joystick->SetButton(event.jbutton.button, true);
+            if(batocera_hotkey_start_number == event.jbutton.button) {
+      	        batocera_hotkey_start_state = 1;
+      	    }
+      	    if(batocera_hotkey_home_number == event.jbutton.button) {
+      	        batocera_hotkey_home_state = 1;
+      	    }
+      	    if(batocera_hotkey_start_state == 1 && batocera_hotkey_home_state == 1) {
+      	        batocera_hotkey_exit = 1;
+      	    }
         }
         break;
     }
@@ -644,6 +666,10 @@ public:
         return joystick->GetButton(button);
     }
 
+    int GetValue() const override {
+        return button;
+    }
+
 private:
     std::shared_ptr<SDLJoystick> joystick;
     int button;
@@ -885,6 +911,14 @@ SDLState::SDLState() {
         }
         InitJoystick(i);
     }
+
+    // init batocera hotkey events
+    std::array<std::unique_ptr<Input::ButtonDevice>, Settings::NativeButton::NumButtons> buttons;
+    std::transform(Settings::values.current_input_profile.buttons.begin() + Settings::NativeButton::BUTTON_HID_BEGIN,
+                   Settings::values.current_input_profile.buttons.begin() + Settings::NativeButton::NumButtons,
+                   buttons.begin(), Input::CreateDevice<Input::ButtonDevice>);
+    batocera_hotkey_start_number = buttons[Settings::NativeButton::Start - Settings::NativeButton::BUTTON_HID_BEGIN]->GetValue();
+    batocera_hotkey_home_number  = buttons[Settings::NativeButton::Home  - Settings::NativeButton::BUTTON_HID_BEGIN]->GetValue();
 }
 
 SDLState::~SDLState() {

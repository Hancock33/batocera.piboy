diff --git a/engine/openbor.c b/engine/openbor.c
index 92c0fd20..bc4981ef 100644
--- a/engine/openbor.c
+++ b/engine/openbor.c
@@ -2621,7 +2621,7 @@ void clearsettings()
     savedata.logo = 1;
     savedata.uselog = 1;
     savedata.debuginfo = 0;
-    savedata.fullscreen = 0;
+    savedata.fullscreen = 1;
     savedata.fpslimit = 1; // default to vsync
 
 	#if WII
@@ -2655,6 +2655,9 @@ void clearsettings()
 
 void savesettings()
 {
+    //batocera: disable per game settings
+    saveasdefault(); return;
+
 #ifndef DC
     FILE *handle = NULL;
     char path[MAX_BUFFER_LEN] = {""};
@@ -2672,8 +2675,198 @@ void savesettings()
 #endif
 }
 
+#if SDL
+extern char savesDir[MAX_FILENAME_LEN];
+extern char screenShotsDir[MAX_FILENAME_LEN];
+#endif
+
+// batocera - save to an ini file
+void saveToIni()
+{
+	FILE *handle = NULL;
+	char path[MAX_BUFFER_LEN] = { "" };
+
+#if LINUX
+	strcpy(path, "/userdata/system/configs/openbor/config7530.ini");
+	handle = fopen(path, "wb");
+#endif
+
+	if (handle == NULL)
+		return;
+	
+	fprintf(handle, "compatibleversion=%u\n", savedata.compatibleversion);
+    fprintf(handle, "gamma=%i\n", savedata.gamma);
+	fprintf(handle, "brightness=%i\n", savedata.brightness);
+	fprintf(handle, "soundvol=%i\n", savedata.soundvol);
+	fprintf(handle, "usemusic=%i\n", savedata.usemusic);
+	fprintf(handle, "musicvol=%i\n", savedata.musicvol);
+	fprintf(handle, "effectvol=%i\n", savedata.effectvol);
+	fprintf(handle, "usejoy=%i\n", savedata.usejoy);
+	fprintf(handle, "mode=%i\n", savedata.mode);
+	fprintf(handle, "windowpos=%i\n", savedata.windowpos);
+	fprintf(handle, "showtitles=%i\n", savedata.showtitles);
+	fprintf(handle, "videoNTSC=%i\n", savedata.videoNTSC);
+    fprintf(handle, "swfilter=%i\n", savedata.swfilter);
+    fprintf(handle, "logo=%i\n", savedata.logo);
+	fprintf(handle, "uselog=%i\n", savedata.uselog);
+	fprintf(handle, "debuginfo=%i\n", savedata.debuginfo);
+	fprintf(handle, "fullscreen=%i\n", savedata.fullscreen);
+	fprintf(handle, "stretch=%i\n", savedata.stretch);
+    fprintf(handle, "fpslimit=%i\n", savedata.fpslimit);
+    
+#if SDL
+	fprintf(handle, "usegl=%i\n", savedata.usegl);
+	fprintf(handle, "hwscale=%f\n", savedata.hwscale);
+	fprintf(handle, "hwfilter=%i\n", savedata.hwfilter);
+
+#ifndef ANDROID
+	if (strcmp(savesDir, "Saves") != 0)
+		fprintf(handle, "savesDir=%s\n", savesDir);
+	
+	if (strcmp(screenShotsDir, "ScreenShots") != 0)
+		fprintf(handle, "screenShotsDir=%s\n", screenShotsDir);
+#endif
+
+#endif
+	
+	char tmp[255];
+	
+	for (int i = 0; i < MAX_PLAYERS; i++)
+	{
+		for (int j = 0; j < MAX_BTN_NUM; j++)
+		{
+			sprintf(tmp, "keys.%i.%i=%i\n", i, j, savedata.keys[i][j]);
+			fprintf(handle, tmp);
+		}
+	}
+
+	for (int i = 0; i < MAX_PLAYERS; i++)
+	{
+		sprintf(tmp, "joyrumble.%i=%i\n", i, savedata.joyrumble[i]);
+		fprintf(handle, tmp);
+	}
+
+	fclose(handle);
+}
+
+// batocera: load the ini file
+bool loadfromIni()
+{
+	FILE *handle = NULL;
+	char path[MAX_BUFFER_LEN] = { "" };
+
+#if !WIN
+	strcpy(path, "/userdata/system/configs/openbor/config7530.ini");
+	handle = fopen(path, "rb");
+#endif
+
+	if (handle == NULL)
+	{
+		strcat(path, "./config.ini");
+		handle = fopen(path, "rb");
+	}
+	
+	if (handle != NULL)
+	{
+		char line[1024] = "";
+		clearsettings();
+		
+		while (fgets(line, 1024, handle))
+		{
+			strtok(line, "\n");
+
+			char* pch = strstr(line, "=");
+			if (pch != NULL)
+			{
+				char key[1024] = "";
+				char value[1024] = "";
+
+				strncpy(key, line, pch - line);
+				strcpy(value, pch + 1);
+
+				if (strcmp(key, "compatibleversion") == 0)
+					savedata.compatibleversion = atoi(value);
+                if (strcmp(key, "gamma") == 0)
+					savedata.gamma = atoi(value);
+				if (strcmp(key, "brightness") == 0)
+					savedata.brightness = atoi(value);
+				if (strcmp(key, "soundvol") == 0)
+					savedata.soundvol = atoi(value);
+				if (strcmp(key, "usemusic") == 0)
+					savedata.usemusic = atoi(value);
+				if (strcmp(key, "musicvol") == 0)
+					savedata.musicvol = atoi(value);
+				if (strcmp(key, "effectvol") == 0)
+					savedata.effectvol = atoi(value);
+				if (strcmp(key, "usejoy") == 0)
+					savedata.usejoy = atoi(value);
+				if (strcmp(key, "mode") == 0)
+					savedata.mode = atoi(value);
+				if (strcmp(key, "windowpos") == 0)
+					savedata.windowpos = atoi(value);
+				if (strcmp(key, "showtitles") == 0)
+					savedata.showtitles = atoi(value);
+				if (strcmp(key, "videoNTSC") == 0)
+					savedata.videoNTSC = atoi(value);
+				if (strcmp(key, "swfilter") == 0)
+					savedata.swfilter = atoi(value);
+				if (strcmp(key, "logo") == 0)
+					savedata.logo = atoi(value);
+				if (strcmp(key, "uselog") == 0)
+					savedata.uselog = atoi(value);
+				if (strcmp(key, "debuginfo") == 0)
+					savedata.debuginfo = atoi(value);
+				if (strcmp(key, "debuginfo") == 0)
+					savedata.debuginfo = atoi(value);
+				if (strcmp(key, "fullscreen") == 0)
+					savedata.fullscreen = atoi(value);
+				if (strcmp(key, "stretch") == 0)
+					savedata.stretch = atoi(value);
+				if (strcmp(key, "fpslimit") == 0)
+					savedata.fpslimit = atoi(value);
+#if SDL
+				if (strcmp(key, "usegl") == 0)
+					savedata.usegl = atoi(value);
+				if (strcmp(key, "hwscale") == 0)
+					savedata.hwscale = atof(value);
+				if (strcmp(key, "hwfilter") == 0)
+					savedata.hwfilter = atoi(value);
+
+				if (strcmp(key, "savesDir") == 0)
+					strcpy(savesDir, value);
+				if (strcmp(key, "screenShotsDir") == 0)
+					strcpy(screenShotsDir, value);					
+#endif
+
+				char tmp[255];
+				for (int i = 0; i < MAX_PLAYERS; i++)
+				{
+					sprintf(tmp, "joyrumble.%i", i);
+					if (strcmp(key, tmp) == 0)
+						savedata.joyrumble[i] = atoi(value);
+
+					for (int j = 0; j < MAX_BTN_NUM; j++)
+					{
+						sprintf(tmp, "keys.%i.%i", i, j);
+						if (strcmp(key, tmp) == 0)
+							savedata.keys[i][j] = atoi(value);
+					}
+				}
+			}
+		}
+
+		fclose(handle);
+		return true;
+	}
+
+	return false;
+}
+
 void saveasdefault()
 {
+    // batocera: save ini file
+    saveToIni(); return;
+
 #ifndef DC
     FILE *handle = NULL;
     char path[MAX_BUFFER_LEN] = {""};
@@ -2692,6 +2885,9 @@ void saveasdefault()
 
 void loadsettings()
 {
+    // batocera: disable per game settings
+    loadfromdefault(); return;
+
 #ifndef DC
     FILE *handle = NULL;
     char path[MAX_BUFFER_LEN] = {""};
@@ -2723,6 +2919,9 @@ void loadsettings()
 
 void loadfromdefault()
 {
+    // batocera
+    if (loadfromIni()) return;
+
 #ifndef DC
     FILE *handle = NULL;
     char path[MAX_BUFFER_LEN] = {""};

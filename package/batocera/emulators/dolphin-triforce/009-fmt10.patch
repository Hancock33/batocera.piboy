diff --git a/Source/Core/Common/HRWrap.h b/Source/Core/Common/HRWrap.h
index e1a82f51fd..9fefc353bd 100644
--- a/Source/Core/Common/HRWrap.h
+++ b/Source/Core/Common/HRWrap.h
@@ -6,6 +6,7 @@
 #include <fmt/format.h>
 #include <string>
 #include <winerror.h>
+#include <winrt/base.h>
 
 #include "Common/CommonTypes.h"
 
@@ -33,3 +34,14 @@ struct fmt::formatter<Common::HRWrap>
                           static_cast<u32>(hr.m_hr));
   }
 };
+
+template <>
+struct fmt::formatter<winrt::hresult>
+{
+  constexpr auto parse(fmt::format_parse_context& ctx) { return ctx.begin(); }
+  template <typename FormatContext>
+  auto format(const winrt::hresult& hr, FormatContext& ctx) const
+  {
+    return fmt::format_to(ctx.out(), "{} ({:#010x})", Common::GetHResultMessage(hr), hr.value);
+  }
+};
diff --git a/Source/Core/Common/Swap.h b/Source/Core/Common/Swap.h
index 531d4b4cd0..965d1aabc2 100644
--- a/Source/Core/Common/Swap.h
+++ b/Source/Core/Common/Swap.h
@@ -16,6 +16,8 @@
 #include <endian.h>
 #endif
 
+#include <fmt/format.h>
+
 #include "Common/CommonTypes.h"
 
 namespace Common
@@ -183,3 +185,15 @@ private:
   value_type raw;
 };
 }  // Namespace Common
+
+template <typename value_type>
+struct fmt::formatter<Common::BigEndianValue<value_type>>
+{
+  fmt::formatter<value_type> m_formatter;
+  constexpr auto parse(format_parse_context& ctx) { return m_formatter.parse(ctx); }
+  template <typename FormatContext>
+  auto format(const Common::BigEndianValue<value_type>& value, FormatContext& ctx) const
+  {
+    return m_formatter.format(value.operator value_type(), ctx);
+  }
+};
diff --git a/Source/Core/InputCommon/ControllerInterface/WGInput/WGInput.cpp b/Source/Core/InputCommon/ControllerInterface/WGInput/WGInput.cpp
index fc6441bb8d..b31c5f1f8e 100644
--- a/Source/Core/InputCommon/ControllerInterface/WGInput/WGInput.cpp
+++ b/Source/Core/InputCommon/ControllerInterface/WGInput/WGInput.cpp
@@ -23,6 +23,7 @@
 
 #include <fmt/format.h>
 
+#include "Common/HRWrap.h"
 #include "Common/Logging/Log.h"
 #include "Common/StringUtil.h"
 #include "InputCommon/ControllerInterface/ControllerInterface.h"
@@ -506,7 +507,7 @@ private:
     catch (winrt::hresult_error error)
     {
       ERROR_LOG_FMT(CONTROLLERINTERFACE,
-                    "WGInput: IRawGameController::GetCurrentReading failed: {:x}", error.code());
+                    "WGInput: IRawGameController::GetCurrentReading failed: {}", error.code());
     }
 
     // IGamepad:
@@ -518,7 +519,7 @@ private:
       }
       catch (winrt::hresult_error error)
       {
-        ERROR_LOG_FMT(CONTROLLERINTERFACE, "WGInput: IGamepad::GetCurrentReading failed: {:x}",
+        ERROR_LOG_FMT(CONTROLLERINTERFACE, "WGInput: IGamepad::GetCurrentReading failed: {}",
                       error.code());
       }
     }
diff --git a/Source/Core/VideoCommon/BPMemory.h b/Source/Core/VideoCommon/BPMemory.h
index 974e00dfa3..db3e32763e 100644
--- a/Source/Core/VideoCommon/BPMemory.h
+++ b/Source/Core/VideoCommon/BPMemory.h
@@ -1863,7 +1863,7 @@ enum class ColorChannel : u32
 template <>
 struct fmt::formatter<ColorChannel> : EnumFormatter<ColorChannel::Alpha>
 {
-  formatter() : EnumFormatter({"Red", "Green", "Blue", "Alpha"}) {}
+  constexpr formatter() : EnumFormatter({"Red", "Green", "Blue", "Alpha"}) {}
 };
 
 enum class KonstSel : u32

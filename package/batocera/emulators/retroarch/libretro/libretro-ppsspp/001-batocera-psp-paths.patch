diff --git a/Core/System.cpp b/Core/System.cpp
index 8e800b747..973e8ff90 100644
--- a/Core/System.cpp
+++ b/Core/System.cpp
@@ -659,63 +659,58 @@ std::string PSP_GetLoading() {
 }
 
 Path GetSysDirectory(PSPDirectories directoryType) {
-	const Path &memStickDirectory = g_Config.memStickDirectory;
-	Path pspDirectory;
-	if (!strcasecmp(memStickDirectory.GetFilename().c_str(), "PSP")) {
-		// Let's strip this off, to easily allow choosing a root directory named "PSP" on Android.
-		pspDirectory = memStickDirectory;
-	} else {
-		pspDirectory = memStickDirectory / "PSP";
-	}
-
-	switch (directoryType) {
-	case DIRECTORY_PSP:
-		return pspDirectory;
-	case DIRECTORY_CHEATS:
-		return pspDirectory / "Cheats";
-	case DIRECTORY_GAME:
-		return pspDirectory / "GAME";
-	case DIRECTORY_SAVEDATA:
-		return pspDirectory / "SAVEDATA";
-	case DIRECTORY_SCREENSHOT:
-		return pspDirectory / "SCREENSHOT";
-	case DIRECTORY_SYSTEM:
-		return pspDirectory / "SYSTEM";
-	case DIRECTORY_PAUTH:
-		return memStickDirectory / "PAUTH";  // This one's at the root...
-	case DIRECTORY_EXDATA:
-		return memStickDirectory / "EXDATA";  // This one's traditionally at the root...
-	case DIRECTORY_DUMP:
-		return pspDirectory / "SYSTEM/DUMP";
-	case DIRECTORY_SAVESTATE:
-		return pspDirectory / "PPSSPP_STATE";
-	case DIRECTORY_CACHE:
-		return pspDirectory / "SYSTEM/CACHE";
-	case DIRECTORY_TEXTURES:
-		return pspDirectory / "TEXTURES";
-	case DIRECTORY_PLUGINS:
-		return pspDirectory / "PLUGINS";
-	case DIRECTORY_APP_CACHE:
-		if (!g_Config.appCacheDirectory.empty()) {
-			return g_Config.appCacheDirectory;
-		}
-		return pspDirectory / "SYSTEM/CACHE";
-	case DIRECTORY_VIDEO:
-		return pspDirectory / "VIDEO";
-	case DIRECTORY_AUDIO:
-		return pspDirectory / "AUDIO";
-	case DIRECTORY_CUSTOM_SHADERS:
-		return pspDirectory / "shaders";
-	case DIRECTORY_CUSTOM_THEMES:
-		return pspDirectory / "themes";
-
-	case DIRECTORY_MEMSTICK_ROOT:
-		return g_Config.memStickDirectory;
-	// Just return the memory stick root if we run into some sort of problem.
-	default:
-		ERROR_LOG(FILESYS, "Unknown directory type.");
-		return g_Config.memStickDirectory;
-	}
+	// Batocera config directories
+        Path memStickDirectory = Path("/userdata/saves/psp/");
+        Path pspDirectory = Path("/userdata/system/configs/ppsspp/PSP/");
+
+        switch (directoryType) {
+        case DIRECTORY_PSP:
+                return pspDirectory;
+        case DIRECTORY_CHEATS:
+                return Path("/userdata/cheats/psp/");
+        case DIRECTORY_GAME:
+                return pspDirectory / "GAME";
+        case DIRECTORY_SAVEDATA:
+                return memStickDirectory / "SAVEDATA";
+        case DIRECTORY_SCREENSHOT:
+                return Path("/userdata/screenshots/");
+        case DIRECTORY_SYSTEM:
+                return pspDirectory / "SYSTEM";
+        case DIRECTORY_PAUTH:
+                return memStickDirectory / "PAUTH";  // This one's at the root...
+        case DIRECTORY_EXDATA:
+                return memStickDirectory / "EXDATA";  // This one's traditionally at the root...
+        case DIRECTORY_DUMP:
+                return pspDirectory / "SYSTEM/DUMP";
+        case DIRECTORY_SAVESTATE:
+                return memStickDirectory;
+        case DIRECTORY_CACHE:
+                return Path("/userdata/system/cache/ppsspp/");
+        case DIRECTORY_TEXTURES:
+                return pspDirectory / "TEXTURES";
+        case DIRECTORY_PLUGINS:
+                return pspDirectory / "PLUGINS";
+        case DIRECTORY_APP_CACHE:
+                if (!g_Config.appCacheDirectory.empty()) {
+                        return g_Config.appCacheDirectory;
+                }
+                return Path("/userdata/system/cache/ppsspp/");
+        case DIRECTORY_VIDEO:
+                return pspDirectory / "VIDEO";
+        case DIRECTORY_AUDIO:
+                return Path("/userdata/music/");
+        case DIRECTORY_CUSTOM_SHADERS:
+                return pspDirectory / "shaders";
+        case DIRECTORY_CUSTOM_THEMES:
+                return pspDirectory / "themes";
+
+        case DIRECTORY_MEMSTICK_ROOT:
+                return memStickDirectory;
+        // Just return the memory stick root if we run into some sort of problem.
+        default:
+                ERROR_LOG(FILESYS, "Unknown directory type.");
+                return pspDirectory;
+        }	
 }
 
 bool CreateSysDirectories() {

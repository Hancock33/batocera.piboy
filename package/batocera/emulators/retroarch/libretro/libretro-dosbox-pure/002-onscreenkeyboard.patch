diff --git a/core_options.h b/core_options.h
index a00b36a..243b09a 100644
--- a/core_options.h
+++ b/core_options.h
@@ -151,11 +151,20 @@ static retro_core_option_v2_definition option_defs[] =
 	{
 		"dosbox_pure_on_screen_keyboard",
 		"Enable On Screen Keyboard", NULL,
-		"Enable the On Screen Keyboard feature which can be activated with the L3 button on the controller.", NULL,
+		"Enable the On Screen Keyboard feature, by default this can be activated with the L3 button on the controller.", NULL,
 		"Input",
 		{ { "true", "On" }, { "false", "Off" } },
 		"true"
 	},
+	{
+		"dosbox_pure_selectbtn_screen_keyboard",
+		"Use the Select Button for On Screen Keyboard", NULL,
+		"Use the Select Button on the controller to activate the screen keyboard instead of the L3 button.", NULL,
+		"Input",
+		{ { "true", "On" }, { "false", "Off" } },
+		"true"
+	},
+
 	{
 		"dosbox_pure_mouse_wheel",
 		"Bind Mouse Wheel To Key", NULL,
diff --git a/dosbox_pure_libretro.cpp b/dosbox_pure_libretro.cpp
index 1452b77..3ba98a3 100644
--- a/dosbox_pure_libretro.cpp
+++ b/dosbox_pure_libretro.cpp
@@ -127,6 +127,7 @@ static DBP_Port_Device dbp_port_devices[DBP_MAX_PORTS];
 static bool dbp_input_binds_modified;
 static bool dbp_bind_unused;
 static bool dbp_on_screen_keyboard;
+static bool dbp_selectbtn_screen_keyboard;
 static bool dbp_mouse_input;
 static bool dbp_optionsupdatecallback;
 static bool dbp_last_hideadvanced;
@@ -3161,7 +3162,11 @@ static void refresh_input_binds(bool set_controller_info = false, unsigned refre
 
 		if (dbp_on_screen_keyboard && port == 0)
 		{
-			dbp_input_binds.push_back({ port, RETRO_DEVICE_JOYPAD, 0, RETRO_DEVICE_ID_JOYPAD_L3, "On Screen Keyboard", DBPET_ONSCREENKEYBOARD });
+			if(dbp_selectbtn_screen_keyboard == 0) {
+			    dbp_input_binds.push_back({ port, RETRO_DEVICE_JOYPAD, 0, RETRO_DEVICE_ID_JOYPAD_L3, "On Screen Keyboard", DBPET_ONSCREENKEYBOARD });
+			} else {
+			    dbp_input_binds.push_back({ port, RETRO_DEVICE_JOYPAD, 0, RETRO_DEVICE_ID_JOYPAD_SELECT, "On Screen Keyboard", DBPET_ONSCREENKEYBOARD });
+			}	
 		}
 
 		if (mapping)
@@ -3707,11 +3712,13 @@ static bool check_variables(bool is_startup = false)
 
 	bool bind_unused = (retro_get_variable("dosbox_pure_bind_unused", "true")[0] != 'f');
 	bool on_screen_keyboard = (retro_get_variable("dosbox_pure_on_screen_keyboard", "true")[0] != 'f');
+	bool selectbtn_screen_keyboard = (retro_get_variable("dosbox_pure_selectbtn_screen_keyboard", "true")[0] != 'f');
 	bool mouse_input = (retro_get_variable("dosbox_pure_mouse_input", "true")[0] != 'f');
-	if (bind_unused != dbp_bind_unused || on_screen_keyboard != dbp_on_screen_keyboard || mouse_input != dbp_mouse_input || bind_mousewheel != dbp_bind_mousewheel)
+	if (bind_unused != dbp_bind_unused || on_screen_keyboard != dbp_on_screen_keyboard || selectbtn_screen_keyboard != dbp_selectbtn_screen_keyboard || mouse_input != dbp_mouse_input || bind_mousewheel != dbp_bind_mousewheel)
 	{
 		dbp_bind_unused = bind_unused;
 		dbp_on_screen_keyboard = on_screen_keyboard;
+		dbp_selectbtn_screen_keyboard = selectbtn_screen_keyboard;
 		dbp_mouse_input = mouse_input;
 		dbp_bind_mousewheel = bind_mousewheel;
 		if (dbp_state > DBPSTATE_SHUTDOWN) refresh_input_binds();

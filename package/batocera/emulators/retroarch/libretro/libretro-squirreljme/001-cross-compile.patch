diff --git a/nanocoat/CMakeLists.txt b/nanocoat/CMakeLists.txt
index 2ea1d8178e..18dd0f09fb 100644
--- a/nanocoat/CMakeLists.txt
+++ b/nanocoat/CMakeLists.txt
@@ -41,12 +41,6 @@ Virtual Machine for embedded and Internet of Things devices."
 		LANGUAGES C)
 endif()
 
-# CMake Utilities, compiled and used during build
-squirreljme_include("utils.cmake")
-
-# Platform information
-squirreljme_include("platform.cmake")
-
 # Fixes and otherwise for compatibility
 squirreljme_include("fixes.cmake")
 
@@ -56,6 +50,12 @@ squirreljme_include("win32.cmake")
 # Hardening options
 squirreljme_include("hardening.cmake")
 
+# CMake Utilities, compiled and used during build
+squirreljme_include("utils.cmake")
+
+# Platform information
+squirreljme_include("platform.cmake")
+
 # Is the system JNI available?
 squirreljme_include("jni.cmake")
 
diff --git a/nanocoat/cmake/fixes.cmake b/nanocoat/cmake/fixes.cmake
index bddd09f089..128821ccf8 100644
--- a/nanocoat/cmake/fixes.cmake
+++ b/nanocoat/cmake/fixes.cmake
@@ -13,14 +13,43 @@
 # Cross-compiling the build?
 if(NOT "${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "${CMAKE_SYSTEM_NAME}" OR
 	NOT "${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "${CMAKE_SYSTEM_PROCESSOR}")
+	set(SQUIRRELJME_CROSS_BUILD ON)
 	message(STATUS "Performing cross-build as "
 		"${CMAKE_HOST_SYSTEM_NAME}/"
 		"${CMAKE_HOST_SYSTEM_PROCESSOR} is not "
 		"${CMAKE_SYSTEM_NAME}/${CMAKE_SYSTEM_PROCESSOR}.")
 endif()
 
+# It's a UNIX system! I know this!
+if(APPLE OR BSD OR LINUX OR
+	CMAKE_SYSTEM_NAME STREQUAL "Linux" OR
+	CMAKE_SYSTEM_NAME STREQUAL "Solaris" OR
+	CMAKE_SYSTEM_NAME STREQUAL "Darwin" OR
+	CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" OR
+	CMAKE_SYSTEM_NAME STREQUAL "OpenBSD" OR
+	CMAKE_SYSTEM_NAME STREQUAL "NetBSD")
+	set(SQUIRRELJME_IS_UNIX ON)
+else()
+	set(SQUIRRELJME_IS_UNIX OFF)
+endif()
+
+# It's a Windows system? Must be another flavor of UNIX!
+if(WIN32 OR CMAKE_SYSTEM_NAME STREQUAL "Windows")
+	set(SQUIRRELJME_IS_WINDOWS ON)
+else()
+	set(SQUIRRELJME_IS_WINDOWS OFF)
+endif()
+
+# Is this RetroArch? Any kind of RetroArch build?
+if(RETROARCH OR ENV{RETROARCH} OR
+	LIBRETRO_STATIC OR ENV{LIBRETRO_STATIC} OR
+	LIBRETRO_SUFFIX OR ENV{LIBRETRO_SUFFIX} OR
+	ENV{LIBRETRO})
+	set(LIBRETRO ON)
+endif()
+
 # LibRetro build for emscripten can never be static
-if(SQUIRRELJME_IS_LIBRETRO)
+if(LIBRETRO)
 	if(EMSCRIPTEN)
 		unset(LIBRETRO_REALLY_STATIC)
 		unset(LIBRETRO_REALLY_STATIC CACHE)
diff --git a/nanocoat/cmake/hardening.cmake b/nanocoat/cmake/hardening.cmake
index a1af7c057c..a5b5f025ac 100644
--- a/nanocoat/cmake/hardening.cmake
+++ b/nanocoat/cmake/hardening.cmake
@@ -8,7 +8,7 @@
 # DESCRIPTION: Various hardening options.
 
 # For RetroArch disable specific features so they cannot be used
-if(SQUIRRELJME_IS_LIBRETRO)
+if(LIBRETRO)
 	# Disable dynamic library support, we do not want to allow loading
 	# native libraries of any kind
 	add_compile_definitions(SJME_CONFIG_HAS_NO_DYLIB_SUPPORT=1)
diff --git a/nanocoat/cmake/platform.cmake b/nanocoat/cmake/platform.cmake
index 74cfa4605b..ef100e61ab 100644
--- a/nanocoat/cmake/platform.cmake
+++ b/nanocoat/cmake/platform.cmake
@@ -10,14 +10,10 @@
 # Determine the host platform, if not set
 if(NOT DEFINED SQUIRRELJME_HOST_PLATFORM)
 	squirreljme_util(platformExePath platform)
-	execute_process(COMMAND "${platformExePath}" "-p"
+	execute_process(COMMAND "${platformExePath}"
 		OUTPUT_VARIABLE SQUIRRELJME_HOST_PLATFORM
 		ERROR_VARIABLE platformExeIgnore
 		TIMEOUT 16)
-	execute_process(COMMAND "${platformExePath}" "-a"
-		OUTPUT_VARIABLE SQUIRRELJME_HOST_ARCH
-		ERROR_VARIABLE platformExeIgnore
-		TIMEOUT 16)
 endif()
 
 # Determine the platform we are targeting
@@ -25,7 +21,7 @@ endif()
 if(NOT DEFINED SQUIRRELJME_PLATFORM)
 	if("${CMAKE_SYSTEM_NAME}" STREQUAL "BeOS")
 		set(SQUIRRELJME_PLATFORM "beos")
-	elseif(BSD OR CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" OR
+	elseif(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" OR
 		CMAKE_SYSTEM_NAME STREQUAL "OpenBSD" OR
 		CMAKE_SYSTEM_NAME STREQUAL "NetBSD")
 		set(SQUIRRELJME_PLATFORM "bsd")
@@ -34,8 +30,6 @@ if(NOT DEFINED SQUIRRELJME_PLATFORM)
 		set(SQUIRRELJME_PLATFORM "cygwin")
 	elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "DOS")
 		set(SQUIRRELJME_PLATFORM "dos")
-	elseif(EMSCRIPTEN OR "${CMAKE_SYSTEM_NAME}" STREQUAL "Emscripten")
-		set(SQUIRRELJME_PLATFORM "emscripten")
 	elseif(LINUX OR "${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
 		set(SQUIRRELJME_PLATFORM "linux")
 	elseif(APPLE OR "${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
@@ -49,78 +43,13 @@ if(NOT DEFINED SQUIRRELJME_PLATFORM)
 	endif()
 endif()
 
-# Target architecture
-if(NOT DEFINED SQUIRRELJME_ARCH)
-	if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "AMD64" OR
-		"${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "EM64T" OR
-		"${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64" OR
-		"${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86-64" OR
-		"${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "amd64")
-		set(SQUIRRELJME_ARCH "amd64")
-	elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "arm64" OR
-		"${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "aarch64" OR
-		"${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "aarch64_be")
-		set(SQUIRRELJME_ARCH "arm64")
-	elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "IA64")
-		set(SQUIRRELJME_ARCH "ia64")
-	elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "ppc" OR
-		"${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "powerpc")
-		set(SQUIRRELJME_ARCH "powerpc")
-	elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "ppc64" OR
-		"${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "powerpc64")
-		set(SQUIRRELJME_ARCH "powerpc64")
-	elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "i386" OR
-		"${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "i486" OR
-		"${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "i586" OR
-		"${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "i686" OR
-		"${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "X86" OR
-		"${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86" OR
-		"${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "ia32")
-		set(SQUIRRELJME_ARCH "ia32")
-	else()
-		set(SQUIRRELJME_ARCH "${SQUIRRELJME_HOST_ARCH}")
-	endif()
-endif()
-
-if (NOT "${SQUIRRELJME_HOST_PLATFORM}" STREQUAL "${SQUIRRELJME_PLATFORM}" OR
-	NOT "${SQUIRRELJME_HOST_ARCH}" STREQUAL "${SQUIRRELJME_ARCH}")
+if (NOT "${SQUIRRELJME_HOST_PLATFORM}" STREQUAL "${SQUIRRELJME_PLATFORM}")
 	set(SQUIRRELJME_CROSS_COMPILE YES)
 else()
 	set(SQUIRRELJME_CROSS_COMPILE NO)
 endif()
 
-# It's a UNIX system! I know this!
-if(SQUIRRELJME_PLATFORM STREQUAL "bsd" OR
-	SQUIRRELJME_PLATFORM STREQUAL "linux" OR
-	SQUIRRELJME_PLATFORM STREQUAL "macosx")
-	set(SQUIRRELJME_IS_UNIX YES)
-else()
-	set(SQUIRRELJME_IS_UNIX NO)
-endif()
-
-# It's a Windows system? Must be another flavor of UNIX!
-if(SQUIRRELJME_HOST_PLATFORM STREQUAL "win16" OR
-	SQUIRRELJME_HOST_PLATFORM STREQUAL "win32" OR
-	SQUIRRELJME_HOST_PLATFORM STREQUAL "wince")
-	set(SQUIRRELJME_IS_WINDOWS YES)
-else()
-	set(SQUIRRELJME_IS_WINDOWS NO)
-endif()
-
-# Is this RetroArch? Any kind of RetroArch build?
-if(RETROARCH OR ENV{RETROARCH} OR
-	LIBRETRO_STATIC OR ENV{LIBRETRO_STATIC} OR
-	LIBRETRO_SUFFIX OR ENV{LIBRETRO_SUFFIX} OR
-	ENV{LIBRETRO})
-	set(SQUIRRELJME_IS_LIBRETRO YES)
-else()
-	set(SQUIRRELJME_IS_LIBRETRO NO)
-endif()
-
 # Debug
-message(STATUS "Host: ${SQUIRRELJME_HOST_PLATFORM}/${SQUIRRELJME_HOST_ARCH}")
-message(STATUS "Target: ${SQUIRRELJME_PLATFORM}/${SQUIRRELJME_ARCH}")
+message(STATUS "Host Platform: ${SQUIRRELJME_HOST_PLATFORM}")
+message(STATUS "Target Platform: ${SQUIRRELJME_PLATFORM}")
 message(STATUS "Cross Compiled? ${SQUIRRELJME_CROSS_COMPILE}")
-message(STATUS "Is UNIX? ${SQUIRRELJME_IS_UNIX}")
-message(STATUS "Is Windows? ${SQUIRRELJME_IS_WINDOWS}")
-message(STATUS "Is libretro? ${SQUIRRELJME_IS_LIBRETRO}")
diff --git a/nanocoat/cmake/utils.cmake b/nanocoat/cmake/utils.cmake
index 2a1cbea6fd..345f847f65 100644
--- a/nanocoat/cmake/utils.cmake
+++ b/nanocoat/cmake/utils.cmake
@@ -52,7 +52,7 @@ if(NOT EXISTS "${SQUIRRELJME_UTIL_DIR}" OR
 
 	# Emscripten breaks here, so do not use it with nested CMake
 	# Also nested CMake breaks here as well
-	if(EMSCRIPTEN OR SQUIRRELJME_CROSS_COMPILE)
+	if(EMSCRIPTEN OR SQUIRRELJME_CROSS_BUILD)
 		set(cmakeUtilConfigResult 1)
 	else()
 		# Note
diff --git a/nanocoat/cmake/utils/platform.c b/nanocoat/cmake/utils/platform.c
index 18fc395010..43bf2f12e6 100644
--- a/nanocoat/cmake/utils/platform.c
+++ b/nanocoat/cmake/utils/platform.c
@@ -9,7 +9,6 @@
 
 #include <stdio.h>
 #include <stdlib.h>
-#include <string.h>
 
 #include "../../include/sjme/config.h"
 
@@ -24,61 +23,34 @@
 int main(int argc, char** argv)
 {
 	const char* platform;
-	
-	if (argc > 1 && strcmp("-p", argv[1]) == 0)
-	{
+
 #if defined(SJME_CONFIG_HAS_NINTENDO_3DS)
-		platform = "3ds";
+	platform = "3ds";
 #elif defined(SJME_CONFIG_HAS_BEOS)
-		platform = "beos";
+	platform = "beos";
 #elif defined(SJME_CONFIG_HAS_BSD)
-		platform = "bsd";
+	platform = "bsd";
 #elif defined(SJME_CONFIG_HAS_DOS)
-		platform = "dos";
+	platform = "dos";
 #elif defined(SJME_CONFIG_HAS_CYGWIN)
-		platform = "cygwin";
+	platform = "cygwin";
 #elif defined(SJME_CONFIG_HAS_LINUX)
-		platform = "linux";
+	platform = "linux";
 #elif defined(SJME_CONFIG_HAS_MACOS_CLASSIC)
-		platform = "macos";
+	platform = "macos";
 #elif defined(SJME_CONFIG_HAS_MACOS)
-		platform = "macosx";
+	platform = "macosx";
 #elif defined(SJME_CONFIG_HAS_PALMOS)
-		platform = "palmos";
+	platform = "palmos";
 #elif defined(SJME_CONFIG_HAS_WINDOWS_16)
-		platform = "win16";
+	platform = "win16";
 #elif defined(SJME_CONFIG_HAS_WINDOWS_32)
-		platform = "win32";
+	platform = "win32";
 #elif defined(SJME_CONFIG_HAS_WINDOWS_CE)
-		platform = "wince";
-#else
-		platform = "unknown";
-#endif
-	}
-	
-	else if (argc > 1 && strcmp("-a", argv[1]) == 0)
-	{
-#if defined(SJME_CONFIG_HAS_ARCH_AMD64)
-		platform = "amd64";
-#elif defined(SJME_CONFIG_HAS_ARCH_ARM64)
-		platform = "arm64";
-#elif define(SJME_CONFIG_HAS_ARCH_IA32)
-		platform = "ia32";
-#elif define(SJME_CONFIG_HAS_ARCH_IA64)
-		platform = "ia64";
-#elif defined(SJME_CONFIG_HAS_ARCH_POWERPC) && \
-	SJME_CONFIG_HAS_ARCH_POWERPC == 32
-		platform = "powerpc";
-#elif defined(SJME_CONFIG_HAS_ARCH_POWERPC) && \
-	SJME_CONFIG_HAS_ARCH_POWERPC == 64
-		platform = "powerpc64";
+	platform = "wince";
 #else
-		platform = "unknown";
+	platform = "unknown";
 #endif
-	}
-	
-	else
-		platform = "unknown";
 	
 	fprintf(stdout, "%s", platform);
 	fflush(stdout);
diff --git a/nanocoat/frontend/CMakeLists.txt b/nanocoat/frontend/CMakeLists.txt
index fc44c4f5db..1886f691ba 100644
--- a/nanocoat/frontend/CMakeLists.txt
+++ b/nanocoat/frontend/CMakeLists.txt
@@ -7,7 +7,7 @@
 # ---------------------------------------------------------------------------
 
 # SquirrelJME Java SE Emulator Front-End
-if(NOT EMSCRIPTEN AND NOT SQUIRRELJME_CROSS_COMPILE)
+if(NOT EMSCRIPTEN AND NOT SQUIRRELJME_CROSS_BUILD)
 	squirreljme_include("jni.cmake")
 
 	if(JNI_FOUND)
diff --git a/nanocoat/frontend/libretro/CMakeLists.txt b/nanocoat/frontend/libretro/CMakeLists.txt
index fe9dc7be3f..47ea7636c0 100644
--- a/nanocoat/frontend/libretro/CMakeLists.txt
+++ b/nanocoat/frontend/libretro/CMakeLists.txt
@@ -88,7 +88,7 @@ target_include_directories(squirreljme_libretro PUBLIC
 find_program(retroArchExe "retroarch")
 if(retroArchExe AND NOT libRetroIsStatic AND
 	NOT EMSCRIPTEN AND
-	NOT SQUIRRELJME_CROSS_COMPILE)
+	NOT SQUIRRELJME_CROSS_BUILD)
 	# Add target to run accordingly
 	add_custom_target(LibRetroRun
 		COMMAND "${retroArchExe}"
diff --git a/nanocoat/include/sjme/config.h b/nanocoat/include/sjme/config.h
index ccac87dbef..d2246f7db5 100644
--- a/nanocoat/include/sjme/config.h
+++ b/nanocoat/include/sjme/config.h
@@ -108,41 +108,6 @@ extern "C" {
 	#endif
 #endif
 
-#if defined(__amd64__) || defined(__amd64__) || defined(__x86_64__) || \
-	defined(__x86_64) || defined(_M_X64) || defined(_M_AMD64)
-	/** Has AMD64. */
-	#define SJME_CONFIG_HAS_ARCH_AMD64
-#elif defined(_M_ARM64) || defined(_M_ARM64EC) || defined(__aarch64__)
-	/** Has ARM64. */
-	#define SJME_CONFIG_HAS_ARCH_ARM64 
-#elif defined(__ia64__) || defined(_IA64) || \
-	defined(__IA64__) || defined(__ia64) || defined(_M_IA64) || \
-	defined(__itanium__)
-	/** Has Itanium. */
-	#define SJME_CONFIG_HAS_ARCH_IA64
-#elif defined(__powerpc64__) || defined(__ppc64__) || defined(__PPC64__) || \
-	defined(_ARCH_PPC64)
-	/** Has PowerPC. */
-	#define SJME_CONFIG_HAS_ARCH_POWERPC 32
-	
-	/** Has PowerPC 64-bit. */
-	#define SJME_CONFIG_HAS_ARCH_POWERPC_64
-#elif defined(_M_PPC) || defined(__powerpc) || defined(__powerpc__) || \
-	defined(__POWERPC__) || defined(__ppc__) || \
-	defined(__PPC__) || defined(_ARCH_PPC)
-	/** Has PowerPC. */
-	#define SJME_CONFIG_HAS_ARCH_POWERPC 32
-	
-	/** Has PowerPC 32-bit. */
-	#define SJME_CONFIG_HAS_ARCH_POWERPC_32
-#elif defined(_M_I86) || defined(_M_IX86) || defined(__X86__) || \
-	defined(_X86_) || defined(__I86__) || defined(__i386) || \
-	defined(__i386__) || defined(__i486__) || defined(__i586__) || \
-	defined(__i686__)
-	/** Has Intel 32-bit (x86). */
-	#define SJME_CONFIG_HAS_ARCH_IA32
-#endif
-
 /* Attempt detection of pointer sizes based on architecture? */
 #if (defined(__SIZEOF_POINTER__) && __SIZEOF_POINTER__ == 4) || \
 	defined(_ILP32) || defined(__ILP32__)
@@ -154,10 +119,13 @@ extern "C" {
 	#define SJME_CONFIG_HAS_POINTER 64
 #else
 	/* 64-bit seeming architecture, common 64-bit ones? */
-	#if defined(SJME_CONFIG_HAS_ARCH_AMD64) || \
-        defined(SJME_CONFIG_HAS_ARCH_ARM64) || \
-		defined(SJME_CONFIG_HAS_ARCH_IA64) || \
-		defined(SJME_CONFIG_HAS_ARCH_POWERPC_64) || \
+	#if defined(__amd64__) || defined(__amd64__) || defined(__x86_64__) || \
+		defined(__x86_64) || defined(_M_X64) || defined(_M_AMD64) || \
+        defined(_M_ARM64) || defined(_M_ARM64EC) || \
+        defined(__aarch64__) || defined(__ia64__) || defined(_IA64) || \
+        defined(__IA64__) || defined(__ia64) || defined(_M_IA64) || \
+        defined(__itanium__) || defined(__powerpc64__) || \
+		defined(__ppc64__) || defined(__PPC64__) || defined(_ARCH_PPC64) || \
         defined(_WIN64)
 		/** Pointer size. */
 		#define SJME_CONFIG_HAS_POINTER 64

From b3b4c7d9e0d01a7acac0515a9c0af44b05fab64c Mon Sep 17 00:00:00 2001
From: Stuart Kenny <stuartkenny@gmail.com>
Date: Fri, 19 Aug 2022 16:49:56 +0100
Subject: [PATCH] Set frame timing based off m_frame_period.

---
 src/osd/libretro/libretro-internal/libretro.cpp | 10 ++++++++++
 src/osd/libretro/window.cpp                     |  2 +-
 2 files changed, 11 insertions(+), 1 deletion(-)

diff --git a/src/osd/libretro/libretro-internal/libretro.cpp b/src/osd/libretro/libretro-internal/libretro.cpp
index a86444ab8468..018bc2537cdc 100755
--- a/src/osd/libretro/libretro-internal/libretro.cpp
+++ b/src/osd/libretro/libretro-internal/libretro.cpp
@@ -7,6 +7,7 @@
 #include "osdepend.h"
 
 #include "emu.h"
+#include "screen.h"
 #include "emuopts.h"
 #include "render.h"
 #include "ui/uimain.h"
@@ -731,6 +732,15 @@ void retro_run (void)
    else
       video_cb(NULL, fb_width, fb_height, fb_pitch << LOG_PIXEL_BYTES);
 #endif
+   const screen_device *primary_screen = screen_device_enumerator(mame_machine_manager::instance()->machine()->root_device()).first();
+   float current_screen_refresh = primary_screen->frame_period().as_hz();
+   if (current_screen_refresh != retro_fps) {
+      retro_fps = current_screen_refresh;
+      struct retro_system_av_info av_info;
+      retro_get_system_av_info(&av_info);
+
+      environ_cb(RETRO_ENVIRONMENT_SET_SYSTEM_AV_INFO, &av_info);
+   }
 }
 
 bool retro_load_game(const struct retro_game_info *info)
diff --git a/src/osd/libretro/window.cpp b/src/osd/libretro/window.cpp
index 207031efd010..cd09ce7c5fdd 100644
--- a/src/osd/libretro/window.cpp
+++ b/src/osd/libretro/window.cpp
@@ -399,7 +399,7 @@ int retro_window_info::window_init()
     const screen_device *primary_screen = screen_device_enumerator(machine().root_device()).first();
 
     if (primary_screen != nullptr){
-        retro_fps = ATTOSECONDS_TO_HZ(primary_screen->refresh_attoseconds());
+        retro_fps = primary_screen->frame_period().as_hz();
 	}
 
 	if(alternate_renderer==false){

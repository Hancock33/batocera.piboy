diff --git a/Src/Graphics/New3D/R3DShaderTriangles.h b/Src/Graphics/New3D/R3DShaderTriangles.h
index 574782b..7721bd1 100644
--- a/Src/Graphics/New3D/R3DShaderTriangles.h
+++ b/Src/Graphics/New3D/R3DShaderTriangles.h
@@ -3,7 +3,7 @@
 
 static const char *vertexShaderR3D = R"glsl(
 
-#version 120
+#version 130
 
 // uniforms
 uniform float	modelScale;
@@ -61,7 +61,7 @@ void main(void)
 
 static const char *fragmentShaderR3D = R"glsl(
 
-#version 120
+#version 130
 #extension GL_ARB_shader_texture_lod : require
 
 uniform sampler2D tex1;			// base tex
@@ -224,14 +224,14 @@ vec4 GetTextureValue()
 
 	if (microTexture) {
 		vec2 scale			= (baseTexSize / 128.0) * microTextureScale;
-		vec4 tex2Data		= textureR3D( tex2, ivec2(0), vec2(128.0), fsTexCoord * scale);
-
-		float lod			= mip_map_level(fsTexCoord * scale * vec2(128.0));
-
-		float blendFactor	= max(lod - 1.5, 0.0);			// bias -1.5
-		blendFactor			= min(blendFactor, 1.0);		// clamp to max value 1
-		blendFactor			= (blendFactor + 1.0) / 2.0;	// 0.5 - 1 range
-
+		vec4 tex2Data		= textureR3D( tex2, ivec2(0), vec2(128.0), fsTexCoord * scale);
+
+		float lod			= mip_map_level(fsTexCoord * scale * vec2(128.0));
+
+		float blendFactor	= max(lod - 1.5, 0.0);			// bias -1.5
+		blendFactor			= min(blendFactor, 1.0);		// clamp to max value 1
+		blendFactor			= (blendFactor + 1.0) / 2.0;	// 0.5 - 1 range
+
 		tex1Data			= mix(tex2Data, tex1Data, blendFactor);
 	}
 
@@ -425,4 +425,4 @@ void main()
 }
 )glsl";
 
-#endif
\ No newline at end of file
+#endif

diff --git a/.gitmodules b/.gitmodules
index 83486ef..3f979d9 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -87,9 +87,9 @@
 [submodule "external/tracy"]
 	path = external/tracy
 	url = https://github.com/wolfpld/tracy.git
-[submodule "external/nativefiledialog-extended"]
-	path = external/nativefiledialog-extended
-	url = https://github.com/btzy/nativefiledialog-extended.git
+[submodule "external/nativefiledialog-cmake"]
+        path = external/nativefiledialog-cmake
+	url = https://github.com/Vita3K/nativefiledialog-cmake
 [submodule "external/cubeb"]
 	path = external/cubeb
 	url = https://github.com/mozilla/cubeb.git
diff --git a/external/CMakeLists.txt b/external/CMakeLists.txt
index 6c0b6e4..c827796 100644
--- a/external/CMakeLists.txt
+++ b/external/CMakeLists.txt
@@ -436,11 +436,17 @@ target_compile_definitions(tracy PUBLIC $<$<CONFIG:Debug,RelWithDebInfo>:TRACY_E
 #
 # target_compile_definitions(tracy PUBLIC TRACY_ENABLE)
 
-# Use XDG desktop portals on Linux
-set(NFD_PORTAL ON)
+# Batocera - bring back nativefiledialog
+find_package(PkgConfig REQUIRED)
+pkg_check_modules(GTK3 REQUIRED gtk+-3.0)
 
-# nativefiledialog-extended
-add_subdirectory(nativefiledialog-extended)
+include_directories(${GTK3_INCLUDE_DIRS})
+link_directories(${GTK3_LIBRARY_DIRS})
 
-# Create alias to prevent the need of multiple changes in case the target name changes
-add_library(NFDe::NFDe ALIAS nfd)
+add_definitions(${GTK3_CFLAGS_OTHER})
+
+add_library(nativefiledialog STATIC nativefiledialog-cmake/src/nfd_gtk.c nativefiledialog-cmake/src/nfd_common.c)
+target_include_directories(nativefiledialog PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/nativefiledialog-cmake/src/include")
+target_link_libraries(nativefiledialog ${GTK3_LIBRARIES})
+
+set_property(TARGET nativefiledialog PROPERTY FOLDER externals)
diff --git a/vita3k/CMakeLists.txt b/vita3k/CMakeLists.txt
index e254b48..2bc8e9b 100644
--- a/vita3k/CMakeLists.txt
+++ b/vita3k/CMakeLists.txt
@@ -103,7 +103,6 @@ add_subdirectory(features)
 add_subdirectory(glutil)
 add_subdirectory(gui)
 add_subdirectory(gxm)
-add_subdirectory(host)
 add_subdirectory(ime)
 add_subdirectory(lang)
 add_subdirectory(net)
diff --git a/vita3k/dir_doc.cpp b/vita3k/dir_doc.cpp
index b66bbd9..28d5a6f 100644
--- a/vita3k/dir_doc.cpp
+++ b/vita3k/dir_doc.cpp
@@ -115,12 +115,6 @@
  * @brief Vita's GXM low-level graphics API translation layer
  */
 
-/**
- * @dir vita3k/host
- *
- * @brief Host operating system abstraction layer
- */
-
 /**
  * @dir vita3k/io
  *
diff --git a/vita3k/gui/CMakeLists.txt b/vita3k/gui/CMakeLists.txt
index f9553f1..023ab76 100644
--- a/vita3k/gui/CMakeLists.txt
+++ b/vita3k/gui/CMakeLists.txt
@@ -51,5 +51,5 @@ add_library(
 
 target_include_directories(gui PUBLIC include ${CMAKE_SOURCE_DIR}/vita3k)
 target_link_libraries(gui PUBLIC app compat config dialog emuenv ime imgui lang regmgr np)
-target_link_libraries(gui PRIVATE audio cppcommon ctrl kernel miniz psvpfsparser pugixml::pugixml stb renderer packages sdl2 touch vkutil host::dialog concurrentqueue)
+target_link_libraries(gui PRIVATE audio cppcommon ctrl kernel miniz psvpfsparser pugixml::pugixml stb renderer packages sdl2 touch vkutil nativefiledialog concurrentqueue)
 target_link_libraries(gui PUBLIC tracy)
diff --git a/vita3k/gui/src/archive_install_dialog.cpp b/vita3k/gui/src/archive_install_dialog.cpp
index 1df4649..5b2f5b5 100644
--- a/vita3k/gui/src/archive_install_dialog.cpp
+++ b/vita3k/gui/src/archive_install_dialog.cpp
@@ -20,7 +20,7 @@
 
 #include <dialog/state.h>
 #include <gui/functions.h>
-#include <host/dialog/filesystem.h>
+#include <nfd.h>
 #include <packages/sfo.h>
 
 #include <util/string_utils.h>
@@ -48,7 +48,7 @@ void draw_archive_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
     static std::string title;
     static std::map<fs::path, std::vector<ContentInfo>> contents_archives;
     static std::vector<fs::path> invalid_archives;
-    static std::filesystem::path archive_path = "";
+    static nfdchar_t *archive_path;
     static float global_progress = 0.f;
     static size_t archives_count = 0;
 
@@ -122,24 +122,16 @@ void draw_archive_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
     } else {
         switch (state) {
         case State::UNDEFINED: {
-            host::dialog::filesystem::Result result = host::dialog::filesystem::Result::CANCEL;
+            nfdresult_t result = NFD_CANCEL;
             if (type == Type::FILE) {
-                // Set file filters for the file picking dialog
-                std::vector<host::dialog::filesystem::FileFilter> file_filters = {
-                    { "PlayStation Vita commercial software package (NoNpDrm/FAGDec) / PlayStation Vita homebrew software package", { "zip", "vpk" } },
-                    { "PlayStation Vita commercial software package (NoNpDrm/FAGDec)", { "zip" } },
-                    { "PlayStation Vita homebrew software package", { "vpk" } },
-                };
-                // Call file picking dialog from the native file browser
-                result = host::dialog::filesystem::open_file(archive_path, file_filters);
+                result = NFD_OpenDialog("zip,vpk", nullptr, &archive_path);
             } else {
-                result = host::dialog::filesystem::pick_folder(archive_path);
+                result = NFD_PickFolder(nullptr, &archive_path);
             }
-            if (result == host::dialog::filesystem::Result::SUCCESS) {
+            if (result == NFD_OKAY) {
                 state = State::INSTALL;
             } else {
-                if (result == host::dialog::filesystem::Result::ERROR)
-                    LOG_CRITICAL("Error initializing file dialog: {}", host::dialog::filesystem::get_error());
+                LOG_CRITICAL("Error initializing file dialog: {}", NFD_GetError());
                 type = Type::UNDEFINED;
             }
             break;
@@ -158,7 +150,7 @@ void draw_archive_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
                     } else
                         invalid_archives.push_back(archive_path);
                 };
-                const auto contents_path = fs::path(archive_path.native());
+                const auto contents_path = fs::path(string_utils::utf_to_wide(archive_path));
                 if (type == Type::DIRECTORY) {
                     const auto archives_path = get_path_of_archives(contents_path);
                     archives_count = archives_path.size();
@@ -292,7 +284,7 @@ void draw_archive_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
                     for (const auto &archive : invalid_archives)
                         fs::remove(archive);
                 }
-                archive_path = "";
+                archive_path = nullptr;
                 gui.file_menu.archive_install_dialog = false;
                 delete_archive_file = false;
                 contents_archives.clear();
diff --git a/vita3k/gui/src/firmware_install_dialog.cpp b/vita3k/gui/src/firmware_install_dialog.cpp
index 19cf7a3..4fe34ee 100644
--- a/vita3k/gui/src/firmware_install_dialog.cpp
+++ b/vita3k/gui/src/firmware_install_dialog.cpp
@@ -20,9 +20,10 @@
 #include <config/state.h>
 #include <dialog/state.h>
 #include <gui/functions.h>
-#include <host/dialog/filesystem.h>
+#include <nfd.h>
 #include <packages/functions.h>
 #include <util/log.h>
+ #include <util/string_utils.h>
 
 #include <thread>
 
@@ -31,9 +32,9 @@ namespace gui {
 void draw_firmware_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
     static std::string fw_version;
     static bool delete_pup_file;
-    static std::filesystem::path pup_path = "";
+    static nfdchar_t *pup_path;
 
-    host::dialog::filesystem::Result result = host::dialog::filesystem::Result::CANCEL;
+    nfdresult_t result = NFD_CANCEL;
 
     static std::mutex install_mutex;
     static bool draw_file_dialog = true;
@@ -56,22 +57,22 @@ void draw_firmware_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
     ImGui::SetNextWindowPos(ImVec2(emuenv.logical_viewport_pos.x + (display_size.x / 2.f) - (WINDOW_SIZE.x / 2), emuenv.logical_viewport_pos.y + (display_size.y / 2.f) - (WINDOW_SIZE.y / 2.f)), ImGuiCond_Always);
     ImGui::SetNextWindowSize(WINDOW_SIZE);
     if (draw_file_dialog) {
-        result = host::dialog::filesystem::open_file(pup_path, { { "PlayStation Vita Firmware Package", { "PUP" } } });
+	result = NFD_OpenDialog("PUP", nullptr, &pup_path);
         draw_file_dialog = false;
         finished_installing = false;
 
-        if (result == host::dialog::filesystem::Result::SUCCESS) {
+        if (result == NFD_OKAY) {
             std::thread installation([&emuenv]() {
-                fw_version = install_pup(emuenv.pref_path, fs::path(pup_path.native()), progress_callback);
+                install_pup(emuenv.pref_path.wstring(), pup_path, progress_callback);
                 std::lock_guard<std::mutex> lock(install_mutex);
                 finished_installing = true;
             });
             installation.detach();
-        } else if (result == host::dialog::filesystem::Result::CANCEL) {
+        } else if (result == NFD_CANCEL) {
             gui.file_menu.firmware_install_dialog = false;
             draw_file_dialog = true;
         } else {
-            LOG_ERROR("Error initializing file dialog: {}", host::dialog::filesystem::get_error());
+            LOG_ERROR("Error initializing file dialog: {}", NFD_GetError());
             gui.file_menu.firmware_install_dialog = false;
             draw_file_dialog = true;
         }
@@ -125,14 +126,14 @@ void draw_firmware_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
             ImGui::SetCursorPos(ImVec2(POS_BUTTON, ImGui::GetWindowSize().y - BUTTON_SIZE.y - (20.f * SCALE.y)));
             if (ImGui::Button(common["ok"].c_str(), BUTTON_SIZE)) {
                 if (delete_pup_file) {
-                    fs::remove(fs::path(pup_path.native()));
+                    fs::remove(fs::path(string_utils::utf_to_wide(pup_path)));
                     delete_pup_file = false;
                 }
                 get_modules_list(gui, emuenv);
                 if (emuenv.cfg.initial_setup)
                     init_theme(gui, emuenv, gui.users[emuenv.cfg.user_id].theme_id);
                 fw_version.clear();
-                pup_path = "";
+                pup_path = nullptr;
                 gui.file_menu.firmware_install_dialog = false;
                 draw_file_dialog = true;
             }
diff --git a/vita3k/gui/src/initial_setup.cpp b/vita3k/gui/src/initial_setup.cpp
index 368397a..ab491d9 100644
--- a/vita3k/gui/src/initial_setup.cpp
+++ b/vita3k/gui/src/initial_setup.cpp
@@ -21,8 +21,9 @@
 #include <config/state.h>
 #include <dialog/state.h>
 #include <gui/functions.h>
-#include <host/dialog/filesystem.h>
+#include <nfd.h>
 #include <lang/functions.h>
+#include <util/string_utils.h>
 
 namespace gui {
 
@@ -153,14 +154,15 @@ void draw_initial_setup(GuiState &gui, EmuEnvState &emuenv) {
         TextCentered(emuenv.cfg.pref_path.c_str(), 0);
         ImGui::SetCursorPos(!is_default_path ? ImVec2((WINDOW_SIZE.x / 2.f) - BIG_BUTTON_SIZE.x - (20.f * SCALE.x), BIG_BUTTON_POS.y) : BIG_BUTTON_POS);
         if (ImGui::Button(lang["change_emu_path"].c_str(), BIG_BUTTON_SIZE)) {
-            std::filesystem::path emulator_path = "";
-            host::dialog::filesystem::Result result = host::dialog::filesystem::pick_folder(emulator_path);
+            nfdchar_t *emulator_path = nullptr;
+            nfdresult_t result = NFD_PickFolder(nullptr, &emulator_path);
 
-            if ((result == host::dialog::filesystem::Result::SUCCESS) && (emulator_path.native() != emuenv.pref_path.native())) {
-                emuenv.pref_path = fs::path(emulator_path.native()) / "";
-                emuenv.cfg.set_pref_path(emuenv.pref_path);
-            } else if (result == host::dialog::filesystem::Result::ERROR) {
-                LOG_CRITICAL("Error initializing file dialog: {}", host::dialog::filesystem::get_error());
+           if ((result == NFD_OKAY) && (string_utils::utf_to_wide(emulator_path) != emuenv.pref_path)) {
+                emuenv.pref_path = string_utils::utf_to_wide(emulator_path) + L'/';
+                emuenv.cfg.pref_path = emulator_path;
+            }
+            else {
+                LOG_CRITICAL("Error initializing file dialog: {}", NFD_GetError());
             }
         }
         if (!is_default_path) {
diff --git a/vita3k/gui/src/license_install_dialog.cpp b/vita3k/gui/src/license_install_dialog.cpp
index b275779..8e3e4d5 100644
--- a/vita3k/gui/src/license_install_dialog.cpp
+++ b/vita3k/gui/src/license_install_dialog.cpp
@@ -18,9 +18,10 @@
 #include "private.h"
 
 #include <dialog/state.h>
-#include <host/dialog/filesystem.h>
+#include <nfd.h>
 #include <misc/cpp/imgui_stdlib.h>
 #include <packages/license.h>
+#include <util/string_utils.h>
 
 namespace gui {
 
@@ -46,7 +47,7 @@ void draw_license_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
     static State state = State::UNDEFINED;
 
     static std::string title, zRIF;
-    static std::filesystem::path license_path = "";
+    static nfdchar_t *license_path;
     static bool delete_license_file;
 
     ImGui::SetNextWindowPos(ImVec2(0.f, 0.f), ImGuiCond_Always);
@@ -79,17 +80,15 @@ void draw_license_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
         break;
     }
     case State::LICENSE: {
-        host::dialog::filesystem::Result result = host::dialog::filesystem::Result::CANCEL;
-        result = host::dialog::filesystem::open_file(license_path, { { "PlayStation Vita software license file", { "bin", "rif" } } });
-        if (result == host::dialog::filesystem::Result::SUCCESS) {
-            if (copy_license(emuenv, fs::path(license_path.native())))
-                state = State::SUCCESS;
+        nfdresult_t result = NFD_CANCEL;
+        result = NFD_OpenDialog("bin,rif", nullptr, &license_path);
+        if (result == NFD_OKAY) {
+            if (copy_license(emuenv, license_path))
+		state = State::SUCCESS;
             else
                 state = State::FAIL;
         } else {
-            if (result == host::dialog::filesystem::Result::ERROR)
-                LOG_CRITICAL("Error initializing file dialog: {}", host::dialog::filesystem::get_error());
-
+            LOG_CRITICAL("Error initializing file dialog: {}", NFD_GetError());
             state = State::UNDEFINED;
         }
         break;
@@ -124,15 +123,16 @@ void draw_license_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
         ImGui::Spacing();
         ImGui::Separator();
         ImGui::Spacing();
-        if (license_path != "")
+        if (license_path)
             ImGui::Checkbox(license["delete_bin_rif"].c_str(), &delete_license_file);
         ImGui::SetCursorPos(ImVec2(POS_BUTTON, ImGui::GetWindowSize().y - BUTTON_SIZE.y - (20.f * SCALE.y)));
         if (ImGui::Button(common["ok"].c_str(), BUTTON_SIZE)) {
             if (delete_license_file) {
-                fs::remove(fs::path(license_path.native()));
+
+                fs::remove(fs::path(string_utils::utf_to_wide(std::string(license_path))));
                 delete_license_file = false;
             }
-            license_path = "";
+            license_path = nullptr;
             gui.file_menu.license_install_dialog = false;
             state = State::UNDEFINED;
         }
@@ -145,7 +145,7 @@ void draw_license_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
         ImGui::SetCursorPos(ImVec2(POS_BUTTON, ImGui::GetWindowSize().y - BUTTON_SIZE.y - (20.f * SCALE.y)));
         if (ImGui::Button(common["ok"].c_str(), BUTTON_SIZE)) {
             gui.file_menu.license_install_dialog = false;
-            license_path = "";
+            license_path = nullptr;
             state = State::UNDEFINED;
         }
     }
diff --git a/vita3k/gui/src/pkg_install_dialog.cpp b/vita3k/gui/src/pkg_install_dialog.cpp
index eb2fb5f..8cace46 100644
--- a/vita3k/gui/src/pkg_install_dialog.cpp
+++ b/vita3k/gui/src/pkg_install_dialog.cpp
@@ -19,26 +19,26 @@
 
 #include <dialog/state.h>
 #include <gui/functions.h>
-#include <host/dialog/filesystem.h>
+#include <nfd.h>
 #include <misc/cpp/imgui_stdlib.h>
 #include <packages/pkg.h>
 #include <packages/sfo.h>
 #include <rif2zrif.h>
 #include <util/log.h>
+#include <util/string_utils.h>
 
 #include <thread>
 
 namespace gui {
 
 void draw_pkg_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
-    host::dialog::filesystem::Result result = host::dialog::filesystem::Result::CANCEL;
+    nfdresult_t result = NFD_CANCEL;
     static std::atomic<float> progress(0);
     static std::mutex install_mutex;
     static const auto progress_callback = [&](float updated_progress) {
         progress = updated_progress;
     };
-    static std::filesystem::path pkg_path = "";
-    static std::filesystem::path license_path = "";
+    static nfdchar_t *pkg_path, *license_path;
     static std::string title, zRIF;
     static bool draw_file_dialog = true;
     static bool delete_pkg_file, delete_license_file;
@@ -56,10 +56,10 @@ void draw_pkg_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
     std::lock_guard<std::mutex> lock(install_mutex);
 
     if (draw_file_dialog) {
-        result = host::dialog::filesystem::open_file(pkg_path, { { "PlayStation Store Downloaded Package", { "pkg" } } });
+        result = NFD_OpenDialog("pkg", nullptr, &pkg_path);
         draw_file_dialog = false;
-        if (result == host::dialog::filesystem::Result::SUCCESS) {
-            fs::ifstream infile(pkg_path.native(), std::ios::binary);
+        if (result == NFD_OKAY) {
+            fs::ifstream infile(std::string(pkg_path), std::ios::binary);
             PkgHeader pkg_header{};
             infile.read(reinterpret_cast<char *>(&pkg_header), sizeof(PkgHeader));
             std::string title_id_str(pkg_header.content_id);
@@ -74,11 +74,11 @@ void draw_pkg_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
             } else {
                 ImGui::OpenPopup("install");
             }
-        } else if (result == host::dialog::filesystem::Result::CANCEL) {
+        } else if (result == NFD_CANCEL) {
             gui.file_menu.pkg_install_dialog = false;
             draw_file_dialog = true;
         } else {
-            LOG_ERROR("Error initializing file dialog: {}", host::dialog::filesystem::get_error());
+            LOG_ERROR("Error initializing file dialog: {}", NFD_GetError());
             gui.file_menu.pkg_install_dialog = false;
             draw_file_dialog = true;
         }
@@ -123,14 +123,13 @@ void draw_pkg_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
             break;
         }
         case State::LICENSE: {
-            result = host::dialog::filesystem::open_file(license_path, { { "PlayStation Vita software license file", { "bin", "rif" } } });
-            if (result == host::dialog::filesystem::Result::SUCCESS) {
-                fs::ifstream binfile(license_path.native(), std::ios::in | std::ios::binary | std::ios::ate);
+            result = NFD_OpenDialog("bin,rif", nullptr, &license_path);
+            if (result == NFD_OKAY) {
+                fs::ifstream binfile(string_utils::utf_to_wide(std::string(license_path)), std::ios::in | std::ios::binary | std::ios::ate);
                 zRIF = rif2zrif(binfile);
                 state = State::INSTALL;
             } else {
-                if (result == host::dialog::filesystem::Result::ERROR)
-                    LOG_CRITICAL("Error initializing file dialog: {}", host::dialog::filesystem::get_error());
+                LOG_CRITICAL("Error initializing file dialog: {}", NFD_GetError());
                 state = State::UNDEFINED;
             }
             break;
@@ -156,7 +155,7 @@ void draw_pkg_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
         }
         case State::INSTALL: {
             std::thread installation([&emuenv]() {
-                if (install_pkg(pkg_path.native(), emuenv, zRIF, progress_callback)) {
+                if (install_pkg(std::string(pkg_path), emuenv, zRIF, progress_callback)) {
                     std::lock_guard<std::mutex> lock(install_mutex);
                     state = State::SUCCESS;
                 } else {
@@ -178,17 +177,17 @@ void draw_pkg_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
             ImGui::Separator();
             ImGui::Spacing();
             ImGui::Checkbox(lang["delete_pkg"].c_str(), &delete_pkg_file);
-            if (license_path != "")
+            if (license_path)
                 ImGui::Checkbox(lang["delete_bin_rif"].c_str(), &delete_license_file);
             ImGui::Spacing();
             ImGui::SetCursorPos(ImVec2(POS_BUTTON, ImGui::GetWindowSize().y - BUTTON_SIZE.y - (20.f * SCALE.y)));
             if (ImGui::Button(common["ok"].c_str(), BUTTON_SIZE)) {
                 if (delete_pkg_file) {
-                    fs::remove(fs::path(pkg_path.native()));
+                    fs::remove(fs::path(string_utils::utf_to_wide(std::string(pkg_path))));
                     delete_pkg_file = false;
                 }
                 if (delete_license_file) {
-                    fs::remove(fs::path(license_path.native()));
+                    fs::remove(fs::path(string_utils::utf_to_wide(std::string(license_path))));
                     delete_license_file = false;
                 }
                 if ((emuenv.app_info.app_category.find("gd") != std::string::npos) || (emuenv.app_info.app_category.find("gp") != std::string::npos)) {
@@ -197,8 +196,8 @@ void draw_pkg_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
                     select_app(gui, emuenv.app_info.app_title_id);
                 }
                 update_notice_info(gui, emuenv, "content");
-                pkg_path = "";
-                license_path = "";
+                pkg_path = nullptr;
+                license_path = nullptr;
                 gui.file_menu.pkg_install_dialog = false;
                 draw_file_dialog = true;
                 state = State::UNDEFINED;
@@ -212,9 +211,9 @@ void draw_pkg_install_dialog(GuiState &gui, EmuEnvState &emuenv) {
             ImGui::SetCursorPos(ImVec2(POS_BUTTON, ImGui::GetWindowSize().y - BUTTON_SIZE.y - (20.f * SCALE.y)));
             if (ImGui::Button(common["ok"].c_str(), BUTTON_SIZE)) {
                 gui.file_menu.pkg_install_dialog = false;
-                pkg_path = "";
+                pkg_path = nullptr;
                 draw_file_dialog = true;
-                license_path = "";
+                license_path = nullptr;
                 state = State::UNDEFINED;
             }
             break;
diff --git a/vita3k/gui/src/settings.cpp b/vita3k/gui/src/settings.cpp
index 0ea263c..789df9f 100644
--- a/vita3k/gui/src/settings.cpp
+++ b/vita3k/gui/src/settings.cpp
@@ -21,7 +21,7 @@
 #include <config/state.h>
 #include <dialog/state.h>
 #include <gui/functions.h>
-#include <host/dialog/filesystem.h>
+#include <nfd.h>
 #include <ime/functions.h>
 #include <io/VitaIoDevice.h>
 #include <io/state.h>
@@ -652,16 +652,15 @@ void draw_settings(GuiState &gui, EmuEnvState &emuenv) {
                         sub_menu = SubMenu::UNDEFINED;
                     }
                 } else if (sub_menu == SubMenu::IMAGE) {
-                    std::filesystem::path image_path = "";
-                    host::dialog::filesystem::Result result = host::dialog::filesystem::open_file(image_path, { { "Image file", { "bmp", "gif", "jpg", "png", "tif" } } });
+                    nfdchar_t *image_path;
+                    nfdresult_t result = NFD_OpenDialog("bmp,gif,jpg,png,tif", nullptr, &image_path);
 
-                    if ((result == host::dialog::filesystem::Result::SUCCESS) && init_user_start_background(gui, fs_utils::path_to_utf8(image_path.native()))) {
-                        gui.users[emuenv.io.user_id].start_path = fs_utils::path_to_utf8(image_path.native());
+                    if ((result == NFD_OKAY) && init_user_start_background(gui, image_path)) {
+                        gui.users[emuenv.io.user_id].start_path = image_path;
                         gui.users[emuenv.io.user_id].start_type = "image";
                         save_user(gui, emuenv, emuenv.io.user_id);
-                    }
-                    if (result == host::dialog::filesystem::Result::ERROR) {
-                        LOG_CRITICAL("Error initializing file dialog: {}", host::dialog::filesystem::get_error());
+                    } else {
+                        LOG_CRITICAL("Error initializing file dialog: {}", NFD_GetError());
                     }
                     sub_menu = SubMenu::UNDEFINED;
                 } else if (sub_menu == SubMenu::DEFAULT) {
@@ -717,18 +716,16 @@ void draw_settings(GuiState &gui, EmuEnvState &emuenv) {
                 ImGui::NextColumn();
             }
             if (ImGui::Selectable(theme_background.home_screen_backgrounds["add_background"].c_str(), false, ImGuiSelectableFlags_None, SIZE_PACKAGE)) {
-                std::filesystem::path background_path = "";
-                host::dialog::filesystem::Result result = host::dialog::filesystem::open_file(background_path, { { "Image file", { "bmp", "gif", "jpg", "png", "tif" } } });
-                auto background_path_string = fs_utils::path_to_utf8(background_path.native());
-                if ((result == host::dialog::filesystem::Result::SUCCESS) && (!gui.user_backgrounds.contains(background_path_string))) {
-                    if (init_user_background(gui, emuenv, background_path_string)) {
-                        gui.users[emuenv.io.user_id].backgrounds.push_back(background_path_string);
+                nfdchar_t *background_path;
+                nfdresult_t result = NFD_OpenDialog("bmp,gif,jpg,png,tif", nullptr, &background_path);
+                if ((result == NFD_OKAY) && (gui.user_backgrounds.find(background_path) == gui.user_backgrounds.end())) {
+                    if (init_user_background(gui, emuenv, background_path)) {
+                        gui.users[emuenv.io.user_id].backgrounds.push_back(background_path);
                         gui.users[emuenv.io.user_id].use_theme_bg = false;
                         save_user(gui, emuenv, emuenv.io.user_id);
                     }
-                }
-                if (result == host::dialog::filesystem::Result::ERROR) {
-                    LOG_CRITICAL("Error initializing file dialog: {}", host::dialog::filesystem::get_error());
+                } else {
+                    LOG_CRITICAL("Error initializing file dialog: {}", NFD_GetError());
                 }
             }
             ImGui::PopStyleVar();
diff --git a/vita3k/gui/src/settings_dialog.cpp b/vita3k/gui/src/settings_dialog.cpp
index 638cc39..d71bad8 100644
--- a/vita3k/gui/src/settings_dialog.cpp
+++ b/vita3k/gui/src/settings_dialog.cpp
@@ -24,7 +24,7 @@
 #include <config/state.h>
 #include <dialog/state.h>
 #include <display/state.h>
-#include <host/dialog/filesystem.h>
+#include <nfd.h>
 #include <io/state.h>
 #include <kernel/state.h>
 #include <lang/functions.h>
@@ -39,6 +39,7 @@
 #include <string>
 #include <util/fs.h>
 #include <util/log.h>
+#include <util/string_utils.h>
 
 #include <SDL.h>
 
@@ -106,20 +107,18 @@ static void reset_emulator(GuiState &gui, EmuEnvState &emuenv) {
 }
 
 static void change_emulator_path(GuiState &gui, EmuEnvState &emuenv) {
-    std::filesystem::path emulator_path = "";
-    host::dialog::filesystem::Result result = host::dialog::filesystem::pick_folder(emulator_path);
+    nfdchar_t *emulator_path = nullptr;
+    nfdresult_t result = NFD_PickFolder(nullptr, &emulator_path);
 
-    if (result == host::dialog::filesystem::Result::SUCCESS && emulator_path.native() != emuenv.pref_path.native()) {
+    if (result == NFD_OKAY && string_utils::utf_to_wide(emulator_path) != emuenv.pref_path) {
         // Refresh the working paths
-        emuenv.pref_path = fs::path(emulator_path.native()) / "";
+        emuenv.pref_path = string_utils::utf_to_wide(emulator_path) + L'/';
 
         // TODO: Move app old to new path
         reset_emulator(gui, emuenv);
         LOG_INFO("Successfully moved Vita3K path to: {}", emuenv.pref_path);
-    }
-
-    if (result == host::dialog::filesystem::Result::ERROR) {
-        LOG_CRITICAL("Error initializing file dialog: {}", host::dialog::filesystem::get_error());
+    } else {
+        LOG_CRITICAL("Error initializing file dialog: {}", NFD_GetError());
     }
 }
 
diff --git a/vita3k/gui/src/user_management.cpp b/vita3k/gui/src/user_management.cpp
index cd472f1..91fbf3d 100644
--- a/vita3k/gui/src/user_management.cpp
+++ b/vita3k/gui/src/user_management.cpp
@@ -23,7 +23,7 @@
 #include <config/state.h>
 #include <dialog/state.h>
 #include <gui/functions.h>
-#include <host/dialog/filesystem.h>
+#include <nfd.h>
 #include <io/state.h>
 #include <np/common.h>
 
@@ -667,14 +667,13 @@ void draw_user_management(GuiState &gui, EmuEnvState &emuenv) {
         const ImVec2 CHANGE_AVATAR_BTN_SIZE(LARGE_AVATAR_SIZE.x, 36.f * SCALE.y);
         ImGui::SetCursorPos(ImVec2(AVATAR_POS.x + (LARGE_AVATAR_SIZE.x / 2.f) - (CHANGE_AVATAR_BTN_SIZE.x / 2.f), AVATAR_POS.y + LARGE_AVATAR_SIZE.y + (5.f * SCALE.y)));
         if (ImGui::Button(lang["choose_avatar"].c_str(), CHANGE_AVATAR_BTN_SIZE)) {
-            std::filesystem::path avatar_path = "";
-            host::dialog::filesystem::Result result = host::dialog::filesystem::open_file(avatar_path, { { "Image file", { "bmp", "gif", "jpg", "png", "tif" } } });
+            nfdchar_t *avatar_path;
+            nfdresult_t result = NFD_OpenDialog("bmp,gif,jpg,png,tif", nullptr, &avatar_path);
 
-            if ((result == host::dialog::filesystem::Result::SUCCESS) && init_avatar(gui, emuenv, "temp", avatar_path.string()))
-                temp.avatar = avatar_path.string();
-
-            if (result == host::dialog::filesystem::Result::ERROR)
-                LOG_CRITICAL("Error initializing file dialog: {}", host::dialog::filesystem::get_error());
+            if ((result == NFD_OKAY) && init_avatar(gui, emuenv, "temp", avatar_path))
+                temp.avatar = avatar_path;
+            else
+                LOG_CRITICAL("Error initializing file dialog: {}", NFD_GetError());
         }
         ImGui::SetWindowFontScale(0.8f);
         const auto INPUT_NAME_SIZE = 330.f * SCALE.x;
diff --git a/vita3k/host/dialog/CMakeLists.txt b/vita3k/host/dialog/CMakeLists.txt
index d577a15..e69de29 100644
--- a/vita3k/host/dialog/CMakeLists.txt
+++ b/vita3k/host/dialog/CMakeLists.txt
@@ -1,11 +0,0 @@
-add_library(host_dialog STATIC
-    src/filesystem.cpp
-)
-
-# Create alias for more friendly naming and avoid conflicts
-# in global CMake scope
-add_library(host::dialog ALIAS host_dialog)
-
-target_include_directories(host_dialog PUBLIC include)
-
-target_link_libraries(host_dialog PRIVATE NFDe::NFDe)
diff --git a/vita3k/host/dialog/src/filesystem.cpp b/vita3k/host/dialog/src/filesystem.cpp
index 43bf670..f4030fc 100644
--- a/vita3k/host/dialog/src/filesystem.cpp
+++ b/vita3k/host/dialog/src/filesystem.cpp
@@ -31,7 +31,7 @@
  * for a comma-separated list of file extensions to filter (ex. `"txt,md"`).
  */
 
-#include <host/dialog/filesystem.h>
+#include <nfd.h>
 
 #include <nfd.hpp>
 

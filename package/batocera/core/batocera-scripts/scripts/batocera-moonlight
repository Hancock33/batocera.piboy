#!/bin/bash
# Updated for the new JSON theGamesDB API
# More options available here: https://github.com/irtimmer/moonlight-embedded/tree/master/docs
SEPARATOR=";"
moonlight_config_dir=/userdata/system/configs/moonlight
moonlight_romsdir=/userdata/roms/moonlight
moonlight_ip=
moonlight_screen="720"
moonlight_fps="60"
moonlight_mapping="$moonlight_config_dir/mapping.conf"
moonlight_keydir="$moonlight_config_dir/keydir"
moonlight_gamesnames="$moonlight_config_dir/gamelist.txt"
thegamesdb_batocera_key="b699c2e6f9f85730fc2e4aa831b24172e68701352310f4e4d301d9342ae39636"

listGames() {
  batocera-moonlight list 2>/dev/null | grep '^[0-9][0-9.]' | cut -d '.' -f 2, | sed 's/^ \(.*\)$/\1/'
}

createRomLinks () {
  rm -f $moonlight_gamesnames
  rm -rf $moonlight_romsdir/* $moonlight_romsdir/.* 2>/dev/null

  listGames | while read line
  do
    filename=$(echo $line | sed 's/[^ A-Za-z0-9._-]/-/g')
    echo "Game found: ${filename}"
    echo "$filename$SEPARATOR$line" >> $moonlight_gamesnames
    touch "$moonlight_romsdir/${filename}.moonlight"
  done
}

findRealGameName () {
  grep "$*" $moonlight_gamesnames | cut -d "$SEPARATOR" -f 2
}

scrape () {
  GDBURL="https://api.thegamesdb.net/v1/Games/ByGameName?platform=pc&apikey=${thegamesdb_batocera_key}&fields=overview,players,rating,release_date,developers,publishers,genres&include=boxart&name="
  GAMELIST=/userdata/roms/moonlight/gamelist.xml
  IMGPATH=/userdata/roms/moonlight/downloaded_images
  fn=$(date +"%s")
  GENREURL="https://api.thegamesdb.net/v1/Genres?apikey=${thegamesdb_batocera_key}"
  GENRELIST="/tmp/genrelist_$fn"
  DEVURL="https://api.thegamesdb.net/v1/Developers?apikey=${thegamesdb_batocera_key}"
  DEVLIST="/tmp/devlist_$fn"
  PUBURL="https://api.thegamesdb.net/v1/Publishers?apikey=${thegamesdb_batocera_key}"
  PUBLIST="/tmp/publist_$fn"

  # Test if $GDBURL is online, and stop if it's offline
  dbdns=$(echo $GDBURL | awk -F/ '{print $3}')
  ping -c 1 $dbdns > /dev/null 2>&1
  if [ $? -ne '0' ]
  then
    echo "Error: $dbdns is not online. Can't scrape" >&2
    exit
  fi

  # download updated DBs
  wget "$GENREURL" -O "$GENRELIST" >/dev/null 2>&1
  wget "$DEVURL" -O "$DEVLIST" >/dev/null 2>&1
  wget "$PUBURL" -O "$PUBLIST" >/dev/null 2>&1

  # Make sure the $IMGPATH exists
  [ ! -d $IMGPATH ] && mkdir -p $IMGPATH

  # This is what we were waiting for : generate the gamelist.xml
  echo '<?xml version="1.0"?>' > $GAMELIST
  echo '<gameList>' >> $GAMELIST

  while read line
  do
    # Get the real game name, not the moonlight link + prepare xml game data
    moonlightfilename=$(echo $line | cut -d ';' -f 1)
    jsonfilename=/tmp/${moonlightfilename}.json
    gamename=$(echo $line | cut -d ';' -f 2)
    echo "Scraping $gamename"

    # download JSON game data from TheGamesDB.net
    wget "$GDBURL$gamename" -O "$jsonfilename" >/dev/null 2>&1

    # Time to get values for gamelist.xml
    id=$(cat "$jsonfilename" | PYTHONIOENCODING=utf8 python2 -c "import sys, json; print json.load(sys.stdin)['data']['games'][0]['id']")
    source="theGamesDB.net"
    path="./${moonlightfilename}.moonlight"
    desc=$(cat "$jsonfilename" | PYTHONIOENCODING=utf8 python2 -c "import sys, json; print json.load(sys.stdin)['data']['games'][0]['overview']")

    # A few steps to get the cover art url
    imgbase=$(cat "$jsonfilename" | PYTHONIOENCODING=utf8 python2 -c "import sys, json; print json.load(sys.stdin)['include']['boxart']['base_url']['medium']")
    imgurl=$(cat "$jsonfilename" | PYTHONIOENCODING=utf8 python2 -c "import sys, json; print json.load(sys.stdin)['include']['boxart']['data']['$id'][0]['filename']")
    extension=$(echo $imgurl | awk -F . '{print $NF}')
    img=$IMGPATH/${gamename}.${extension}
    wget $imgbase/$imgurl -O "$img" >/dev/null 2>&1

    rating=$(cat "$jsonfilename" | PYTHONIOENCODING=utf8 python2 -c "import sys, json; print json.load(sys.stdin)['data']['games'][0]['rating']")
    releasedate=$(cat "$jsonfilename" | PYTHONIOENCODING=utf8 python2 -c "import sys, json; print json.load(sys.stdin)['data']['games'][0]['release_date']" | sed 's/^\([0-9]\{4\}\)-\([0-9]\{2\}\)\-\([0-9]\{2\}\)/\1\2\3T000000/')
    developerid=$(cat "$jsonfilename" | PYTHONIOENCODING=utf8 python2 -c "import sys, json; print json.load(sys.stdin)['data']['games'][0]['developers'][0]")
    developer=$(cat "$DEVLIST" | PYTHONIOENCODING=utf8 python2 -c "import sys, json; print json.load(sys.stdin)['data']['developers']['$developerid']['name']")
    publisherid=$(cat "$jsonfilename" | PYTHONIOENCODING=utf8 python2 -c "import sys, json; print json.load(sys.stdin)['data']['games'][0]['publishers'][0]")
    publisher=$(cat "$PUBLIST" | PYTHONIOENCODING=utf8 python2 -c "import sys, json; print json.load(sys.stdin)['data']['publishers']['$publisherid']['name']")
    genreid=$(cat "$jsonfilename" | PYTHONIOENCODING=utf8 python2 -c "import sys, json; print json.load(sys.stdin)['data']['games'][0]['genres'][0]")
    genre=$(cat "$GENRELIST" | PYTHONIOENCODING=utf8 python2 -c "import sys, json; print json.load(sys.stdin)['data']['genres']['$genreid']['name']")
    players=$(cat "$jsonfilename" | PYTHONIOENCODING=utf8 python2 -c "import sys, json; print json.load(sys.stdin)['data']['games'][0]['players']")

    # Write the actual XML data
    cat << EOF >> $GAMELIST
  <game id="$id" source="$source">
    <path>$path</path>
    <name>$gamename</name>
    <desc>$desc</desc>
    <image>./downloaded_images/${gamename}.${extension}</image>
    <rating>$rating</rating>
    <releasedate>$releasedate</releasedate>
    <developer>$developer</developer>
    <publisher>$publisher</publisher>
    <genre>$genre</genre>
    <players>$players</players>
  </game>

EOF
     rm "$jsonfilename"
  done <<< $(cat $moonlight_gamesnames | sed "s/\t/;/g")
  echo '</gameList>' >> $GAMELIST

  rm -f "$GENRELIST" "$DEVLIST" "$PUBLIST"

}

mkdir -p $moonlight_keydir;
if ! [ -z "$2" ]; then
    moonlight_ip="$2"
    ping -c 1 "$moonlight_ip" > /dev/null 2>&1
    if [ $? -ne '0' ]; then
       echo "Error: Can't ping $moonlight_ip, trying autodetect." >&2
       moonlight_ip=
    fi
fi
case $1 in
    init)
        echo "Fetching games ..."
        createRomLinks
        echo "Scraping games ..."
        scrape
        exit
        ;;
    scrape)
        echo "Scraping games ..."
        scrape
        exit
        ;;
    map)
        cmd="moonlight map ${moonlight_mapping} -keydir ${moonlight_keydir}" ;;

    pair)
        cmd="moonlight pair -keydir ${moonlight_keydir} ${moonlight_ip}" ;;

    list)
        cmd="moonlight list -keydir ${moonlight_keydir} ${moonlight_ip}" ;;

    app)
        shift
        game=`findRealGameName $*`
        cmd="moonlight stream -remote -keydir ${moonlight_keydir} -${moonlight_screen} -fps ${moonlight_fps} -mapping ${moonlight_mapping} -app \"$game\" ${moonlight_ip}" ;;

    clean)
        cmd="rm -rf $moonlight_config_dir/keydir" && echo "You can now pair again your batocera.linux with a PC" ;;
        
    *)
        cmd="moonlight stream -remote -keydir ${moonlight_keydir} -${moonlight_screen} -fps ${moonlight_fps} -mapping ${moonlight_mapping} ${moonlight_ip}" ;;

esac

$cmd

#!/bin/bash 
#
# Download and install EmulationStation themes for Batocera
#
# @lbrpdx on Batocera Forums and Discord
#
# Usage:
# batocera-es-theme 'list' or 'install <theme>' 
# 
# If you don't provide a <theme>, the list of themes available online will be returned back to you
#
CONFIGDIR="/userdata/themes/"
THEMESLIST="https://batocera-linux.xorhub.com/upgrades/themes.txt"
LOCALTHEMESLIST="/userdata/system/themes.txt"
# themes.txt must be a plain file with the format 'theme_name https://githubURL' (spaces or tabs)
# Example of a themes.txt file: 
#  fundamental	https://github.com/jdorigao/es-theme-fundamental
#  Zoid		https://github.com/RetroPie/es-theme-zoid

###############################
#
function usage() {
	echo "$0 - downloads and installs EmulationStation themes for Batocera"
	echo " "
	echo "It accepts two modes: 'list' and 'install <theme>'"
	echo "- 'list' for the list of themes available online, and if they are"
	echo "   [A]vailable to install, [I]nstalled or [?]unknown."
	echo "- 'install <theme>' to install the theme, from its theme name."
	echo " "
	echo "If you have a local $LOCALTHEMESLIST file,"
	echo "it will override the one hosted on Batocera website."
	exit 1
}

###############################
#
function check_url() {
	[[ "$1" =~ ^(https?|ftp)://.*$ ]] && echo "[A]" || echo "[?]"
}

###############################
#
function git_name() {
	echo "$1" | sed "s,.*/\(.*\),\1,"
}

###############################
#
function list_themes() {
	fn=$(date +"%s")
	tmp="/tmp/themes_$fn"
	echo "* Batocera themes *"
	if [ -f $LOCALTHEMESLIST ]; then
		cp -f "$LOCALTHEMESLIST" "$tmp"
	else
		curl -sfL "$THEMESLIST" -o "$tmp" || exit 1
	fi
	while IFS=$' \t' read name url ; do
		[ x"$name" == "x" ] && continue 
		ia=$(check_url "$url")
		gitname=$(git_name "$url")
		[ -d "$CONFIGDIR"/"$gitname" ] && ia="[I]"
		echo "$ia $name - $url"
	done < "$tmp"
	rm "$tmp"
}

###############################
#
function install_theme() {
	theme="$1"
	success_installed=0
	fn=$(date +"%s")
	tmp="/tmp/themes_$fn"
	if [ -f $LOCALTHEMESLIST ]; then
		cp -f "$LOCALTHEMESLIST" "$tmp"
	else
		curl -sfL "$THEMESLIST" -o "$tmp" || exit 1
	fi
	while IFS=$' \t' read name url ; do
		[ x"$name" != x"$theme" ] && continue 
		ia=$(check_url "$url")
		if [ x"$ia" != x"[A]" ]; then
			echo "Error - invalid theme URL $url"
			exit 1
		else
			gitname=$(git_name "$url")
			cd "$CONFIGDIR"
			echo "Downloading from $url"
			curl -sfL "$url/archive/master.zip" -o "$gitname.zip"
			if [ -f "$gitname.zip" ]; then 
				[ -d "$CONFIGDIR"/"$gitname" ] && rm -rf "$CONFIGDIR"/"$gitname" 
				unzip "$gitname.zip"
				mv "$gitname-master" "$gitname"
				rm "$gitname.zip"
				success_installed=1
			else
				echo "Error - $theme zip file could not be downloaded from $url"
				exit 1
			fi
		fi
	done < "$tmp"
	rm "$tmp"
	if [ "$success_installed" == 1 ]; then
		echo "Theme $theme is now installed"
		exit 0
	else
		echo "Error - theme $theme could not be found"
		exit 1
	fi
}

#### Main loop
#
command="$1"
theme="$2"

if ! [ -d "$CONFIGDIR" ]; then
	echo "Error - theme directory $CONFIGDIR is not valid."
	exit 1
fi 
if [ x"$command" == "xlist" ]; then
	list_themes
elif [ x"$command" == "xinstall" ]; then
	[ x"$theme" != "x" ] && install_theme $theme || usage
else 
	usage	
fi


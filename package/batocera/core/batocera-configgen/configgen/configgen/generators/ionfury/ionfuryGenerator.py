import batoceraFiles
import Command
from configparser import ConfigParser
import controllersConfig
from generators.Generator import Generator
import os

# Untangling certain file paths in the eduke32 code is difficult; a symlink gets things in the right place
IONFURY_SYMLINK_TARGET = f"{batoceraFiles.HOME}/.config/fury"
IONFURY_CONFIG_DIR = f"{batoceraFiles.CONF}/ionfury"
IONFURY_SAVES_DIR = f"{batoceraFiles.SAVES}/ionfury"
IONFURY_SCREENSHOTS_DIR = f"{batoceraFiles.SCREENSHOTS}/ionfury"
IONFURY_CONFIG_FILE = f"{IONFURY_CONFIG_DIR}/ionfury.cfg"
# A script file with console commands that are always ran when the game starts
IONFURY_SCRIPT_FILE = f"{IONFURY_CONFIG_DIR}/autoexec.cfg"


class IonFuryGenerator(Generator):
    def generate(self, system, rom, playersControllers, guns, gameResolution):
        for path in [IONFURY_CONFIG_DIR, IONFURY_SAVES_DIR, IONFURY_SCREENSHOTS_DIR]:
            if not os.path.exists(path):
                os.mkdir(path)
        if not os.path.exists(IONFURY_SYMLINK_TARGET):
            os.symlink(IONFURY_SAVES_DIR, IONFURY_SYMLINK_TARGET)
        if not os.path.exists(IONFURY_CONFIG_FILE):
            with open(IONFURY_CONFIG_FILE, "x"):
                pass
        parser = ConfigParser(interpolation=None)
        # Override optionxform to stop implicit case conversions
        parser.optionxform = str
        # Configuration options found here: https://wiki.eduke32.com/wiki/Configuration_file_options
        # NB: Not all configuration options listed actually work e.g. showFPS, etc.
        # NB: In eduke32 configs, booleans must be integers
        with open(IONFURY_CONFIG_FILE, "r") as config:
            parser.read_file(config)
        if not parser.has_section("Screen Setup"):
            parser.add_section("Screen Setup")
        parser.set("Screen Setup", "ScreenWidth", str(gameResolution["width"]))
        parser.set("Screen Setup", "ScreenHeight", str(gameResolution["height"]))
        # The game should always be fullscreen
        parser.set("Screen Setup", "ScreenMode", "1")
        with open(IONFURY_CONFIG_FILE, "w") as config:
            parser.write(config)
        with open(IONFURY_SCRIPT_FILE, "w") as script:
            script.write(
                f'// This file is automatically generated by ionfuryGenerator.py\n'
                f'bind "F12" "screenshot"\n'
                f'screenshot_dir "{batoceraFiles.SCREENSHOTS}"\n'
                f'r_showfps "{1 if system.getOptBoolean("showFPS") else 0}"\n'
                f'echo BATOCERA\n'  # Easy check when debugging
            )
        return Command.Command(
            array=[
                "ionfury",
                "-g", rom,
                "-j", os.path.dirname(rom),
                "-cfg", IONFURY_CONFIG_FILE,
                "-nologo" if system.getOptBoolean("nologo") else ""
            ],
            env={
                'SDL_GAMECONTROLLERCONFIG': controllersConfig.generateSdlGameControllerConfig(playersControllers)
            }
        )

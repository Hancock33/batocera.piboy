from __future__ import annotations

from importlib import import_module
from typing import TYPE_CHECKING, Final

if TYPE_CHECKING:
    from .Generator import Generator


_GENERATOR_MAP: Final[dict[str, tuple[str, str]]] = {
    'abuse': ('abuse.abuseGenerator', 'AbuseGenerator'),
    'alephone': ('alephone.alephoneGenerator', 'AlephoneGenerator'),
    'amiberry': ('amiberry.amiberryGenerator', 'AmiberryGenerator'),
    'applewin': ('applewin.applewinGenerator', 'AppleWinGenerator'),
    'avp': ('avp.avpGenerator', 'AvpGenerator'),
    'awgl': ('awgl.awglGenerator', 'AwglGenerator'),
    'bbja': ('bbja.bbjaGenerator', 'BbjaGenerator'),
    'bermuda': ('bermuda.bermudaGenerator', 'BermudaGenerator'),
    'bigpemu': ('bigpemu.bigpemuGenerator', 'BigPEmuGenerator'),
    'blues': ('blues.bluesGenerator', 'BluesGenerator'),
    'bstone': ('bstone.bstoneGenerator', 'BstoneGenerator'),
    'cannonball': ('cannonball.cannonballGenerator', 'CannonballGenerator'),
    'catacombgl': ('catacombgl.catacombglGenerator', 'CatacombGLGenerator'),
    'cdogs': ('cdogs.cdogsGenerator', 'CdogsGenerator'),
    'cemu': ('cemu.cemuGenerator', 'CemuGenerator'),
    'cgenius': ('cgenius.cgeniusGenerator', 'CGeniusGenerator'),
    'citra': ('citra.citraGenerator', 'CitraGenerator'),
    'devilutionx': ('devilutionx.devilutionxGenerator', 'DevilutionXGenerator'),
    'dolphin': ('dolphin.dolphinGenerator', 'DolphinGenerator'),
    'dolphin_triforce': ('dolphin_triforce.dolphinTriforceGenerator', 'DolphinTriforceGenerator'),
    'doom3': ('doom3.doom3Generator', 'Doom3Generator'),
    'doomretro': ('doomretro.doomretroGenerator', 'DoomretroGenerator'),
    'dosbox': ('dosbox.dosboxGenerator', 'DosBoxGenerator'),
    'dosbox_staging': ('dosboxstaging.dosboxstagingGenerator', 'DosBoxStagingGenerator'),
    'dosboxx': ('dosboxx.dosboxxGenerator', 'DosBoxxGenerator'),
    'drastic': ('drastic.drasticGenerator', 'DrasticGenerator'),
    'droidports': ('droidports.droidportsGenerator', 'DroidportsGenerator'),
    'duckstation': ('duckstation.duckstationGenerator', 'DuckstationGenerator'),
    'duckstation_legacy': ('duckstation_legacy.duckstationLegacyGenerator', 'DuckstationLegacyGenerator'),
    'dxx-rebirth': ('dxx_rebirth.dxx_rebirthGenerator', 'DXX_RebirthGenerator'),
    'easyrpg': ('easyrpg.easyrpgGenerator', 'EasyRPGGenerator'),
    'ecwolf': ('ecwolf.ecwolfGenerator', 'ECWolfGenerator'),
    'eduke32': ('eduke32.eduke32Generator', 'Eduke32Generator'),
    'etekwar': ('etekwar.etekwarGenerator', 'EtekwarGenerator'),
    'etlegacy': ('etlegacy.etlegacyGenerator', 'ETLegacyGenerator'),
    'f2bgl': ('f2bgl.f2bglGenerator', 'F2bglGenerator'),
    'fallout1-ce': ('fallout1.fallout1Generator', 'Fallout1Generator'),
    'fallout2-ce': ('fallout2.fallout2Generator', 'Fallout2Generator'),
    'fba2x': ('fba2x.fba2xGenerator', 'Fba2xGenerator'),
    'flatpak': ('flatpak.flatpakGenerator', 'FlatpakGenerator'),
    'flycast': ('flycast.flycastGenerator', 'FlycastGenerator'),
    'fpinball': ('fpinball.fpinballGenerator', 'FpinballGenerator'),
    'freedroid': ('freedroid.freedroidGenerator', 'FreedroidGenerator'),
    'fsuae': ('fsuae.fsuaeGenerator', 'FsuaeGenerator'),
    'gsplus': ('gsplus.gsplusGenerator', 'GSplusGenerator'),
    'gzdoom': ('gzdoom.gzdoomGenerator', 'GzdoomGenerator'),
    'hatari': ('hatari.hatariGenerator', 'HatariGenerator'),
    'hcl': ('hcl.hclGenerator', 'HclGenerator'),
    'hode': ('hode.hodeGenerator', 'HodeGenerator'),
    'hurrican': ('hurrican.hurricanGenerator', 'HurricanGenerator'),
    'hypseus-singe': ('hypseus_singe.hypseusSingeGenerator', 'HypseusSingeGenerator'),
    'ikemen': ('ikemen.ikemenGenerator', 'IkemenGenerator'),
    'ionfury': ('ionfury.ionfuryGenerator', 'IonfuryGenerator'),
    'jazz2-native': ('jazz2_native.jazz2_nativeGenerator', 'Jazz2_NativeGenerator'),
    'kodi': ('kodi.kodiGenerator', 'KodiGenerator'),
    'lexaloffle': ('lexaloffle.lexaloffleGenerator', 'LexaloffleGenerator'),
    'libretro': ('libretro.libretroGenerator', 'LibretroGenerator'),
    'lightspark': ('lightspark.lightsparkGenerator', 'LightsparkGenerator'),
    'lindbergh-loader': ('lindbergh.lindberghGenerator', 'LindberghGenerator')
    'mame': ('mame.mameGenerator', 'MameGenerator'),
    'melonds': ('melonds.melondsGenerator', 'MelonDSGenerator'),
    'model2emu': ('model2emu.model2emuGenerator', 'Model2EmuGenerator'),
    'moonlight': ('moonlight.moonlightGenerator', 'MoonlightGenerator'),
    'mugen': ('mugen.mugenGenerator', 'MugenGenerator'),
    'mupen64plus': ('mupen.mupenGenerator', 'MupenGenerator'),
    'nblood': ('nblood.nbloodGenerator', 'NbloodGenerator'),
    'nukem2': ('nukem2.nukem2Generator', 'Nukem2Generator'),
    'odcommander': ('odcommander.odcommanderGenerator', 'OdcommanderGenerator'),
    'omf2097': ('omf2097.omf2097Generator', 'Omf2097Generator'),
    'openbor': ('openbor.openborGenerator', 'OpenborGenerator'),
    'openclaw': ('openclaw.openclawGenerator', 'OpenclawGenerator'),
    'openjazz': ('openjazz.openjazzGenerator', 'OpenJazzGenerator'),
    'openjkja': ('openjkja.openjkjaGenerator', 'OpenjkjaGenerator'),
    'openjkjo': ('openjkjo.openjkjoGenerator', 'OpenjkjoGenerator'),
    'openlara': ('openlara.openlaraGenerator', 'OpenlaraGenerator'),
    'openmsx': ('openmsx.openmsxGenerator', 'OpenmsxGenerator'),
    'opentyrian': ('opentyrian.opentyrianGenerator', 'OpentyrianGenerator'),
    'pcexhumed': ('pcexhumed.pcexhumedGenerator', 'PcexhumedGenerator'),
    'pcsx2': ('pcsx2.pcsx2Generator', 'Pcsx2Generator'),
    'play': ('play.playGenerator', 'PlayGenerator'),
    'ppsspp': ('ppsspp.ppssppGenerator', 'PPSSPPGenerator'),
    'pre2': ('pre2.pre2Generator', 'Pre2Generator'),
    'prototype': ('prototype.prototypeGenerator', 'PrototypeGenerator'),
    'pygame': ('pygame.pygameGenerator', 'PygameGenerator'),
    'pyxel': ('pyxel.pyxelGenerator', 'PyxelGenerator'),
    'quake3': ('quake3.quake3Generator', 'Quake3Generator'),
    'quakespasm': ('quakespasm.quakespasmGenerator', 'QuakespasmGenerator'),
    'raptor': ('raptor.raptorGenerator', 'RaptorGenerator'),
    'raze': ('raze.razeGenerator', 'RazeGenerator'),
    'rednukem': ('rednukem.rednukemGenerator', 'RednukemGenerator'),
    'redream': ('redream.redreamGenerator', 'RedreamGenerator'),
    'rott': ('rott.rottGenerator', 'RottGenerator'),
    'rpcs3': ('rpcs3.rpcs3Generator', 'Rpcs3Generator'),
    'rtcw': ('rtcw.rtcwGenerator', 'RtcwGenerator'),
    'ruffle': ('ruffle.ruffleGenerator', 'RuffleGenerator'),
    'ryujinx': ('ryujinx.ryujinxGenerator', 'RyujinxGenerator'),
    'samcoupe': ('samcoupe.samcoupeGenerator', 'SamcoupeGenerator'),
    'scummvm': ('scummvm.scummvmGenerator', 'ScummVMGenerator'),
    'sdlpop': ('sdlpop.sdlpopGenerator', 'SdlPopGenerator'),
    'serioussam': ('serioussam.serioussamGenerator', 'SerioussamGenerator'),
    'sh': ('sh.shGenerator', 'ShGenerator'),
    'shadps4': ('shadps4.shadps4Generator', 'shadPS4Generator'),
    'sm64': ('sm64.sm64Generator', 'Sm64Generator'),
    'solarus': ('solarus.solarusGenerator', 'SolarusGenerator'),
    'sonic2013': ('sonicretro.sonicretroGenerator', 'SonicRetroGenerator'),
    'sonic3-air': ('sonic3_air.sonic3_airGenerator', 'Sonic3AIRGenerator'),
    'soniccd': ('sonicretro.sonicretroGenerator', 'SonicRetroGenerator'),
    'sonicmania': ('sonicmania.sonicmaniaGenerator', 'SonicManiaGenerator'),
    'sonicnexus': ('sonicnexus.sonicnexusGenerator', 'SonicNexusGenerator'),
    'sorr': ('sorr.sorrGenerator', 'SorrGenerator'),
    'spacecadetpinball': ('spacecadetpinball.spacecadetpinballGenerator', 'SpacecadetpinballGenerator'),
    'srb2': ('srb2.srb2Generator', 'Srb2Generator'),
    'srb2kart': ('srb2kart.srb2kartGenerator', 'Srb2kartGenerator'),
    'stalker': ('stalker.stalkerGenerator', 'StalkerGenerator'),
    'steam': ('steam.steamGenerator', 'SteamGenerator'),
    'stella': ('stella.stellaGenerator', 'StellaGenerator'),
    'stk': ('stk.stkGenerator', 'StkGenerator'),
    'stuntcar': ('stuntcar.stuntcarGenerator', 'StuntcarGenerator'),
    'supermodel': ('supermodel.supermodelGenerator', 'SupermodelGenerator'),
    'supertux2': ('supertux2.supertux2Generator', 'Supertux2Generator'),
    'suyu': ('suyu.suyuGenerator', 'SuyuGenerator'),
    'theforceengine': ('theforceengine.theforceengineGenerator', 'TheForceEngineGenerator'),
    'themehospital': ('themehospital.themehospitalGenerator', 'ThemehospitalGenerator'),
    'thextech': ('thextech.thextechGenerator', 'TheXTechGenerator'),
    'tsugaru': ('tsugaru.tsugaruGenerator', 'TsugaruGenerator'),
    'uqm': ('uqm.uqmGenerator', 'UqmGenerator'),
    'vanillara': ('vanillara.vanillaraGenerator', 'VanillaraGenerator'),
    'vanillatd': ('vanillatd.vanillatdGenerator', 'VanillatdGenerator'),
    'vcmi': ('vcmi.vcmiGenerator', 'VcmiGenerator'),
    'vice': ('vice.viceGenerator', 'ViceGenerator'),
    'virtualjaguar': ('virtualjaguar.virtualjaguarGenerator', 'VirtualjaguarGenerator'),
    'vita3k': ('vita3k.vita3kGenerator', 'Vita3kGenerator'),
    'vkquake': ('vkquake.vkquakeGenerator', 'VkquakeGenerator'),
    'voidsw': ('voidsw.voidswGenerator', 'VoidswGenerator'),
    'vpinball': ('vpinball.vpinballGenerator', 'VPinballGenerator'),
    'wine': ('wine.wineGenerator', 'WineGenerator'),
    'witchaven': ('witchaven.witchavenGenerator', 'WitchavenGenerator'),
    'x16emu': ('x16emu.x16emuGenerator', 'X16emuGenerator'),
    'xash3d_fwgs': ('xash3d_fwgs.xash3dFwgsGenerator', 'Xash3dFwgsGenerator'),
    'xboxcloud': ('xboxcloud.xboxcloudGenerator', 'XboxcloudGenerator'),
    'xemu': ('xemu.xemuGenerator', 'XemuGenerator'),
    'xenia': ('xenia.xeniaGenerator', 'XeniaGenerator'),
    'xenia-canary': ('xenia.xeniaGenerator', 'XeniaGenerator'),
    'yabasanshiro': ('yabasanshiro.yabasanshiroGenerator', 'YabasanshiroGenerator'),
    'yquake2': ('yquake2.yquake2Generator', 'Yquake2Generator'),
}

def get_generator(emulator: str) -> Generator:
    if emulator in _GENERATOR_MAP:
        module_path, cls_name = _GENERATOR_MAP[emulator]
    else:
        module_path = f'{emulator}.{emulator}Generator'
        cls_name = f'{emulator[0].upper()}{emulator[1:]}Generator'

    try:
        module = import_module(f'..{module_path}', package=__name__)
        generator_cls: type[Generator] = getattr(module, cls_name)
    except ImportError as e:
        if e.name is not None and e.name.startswith(__name__.split('.')[0]):
            raise Exception(f'no generator found for emulator {emulator}') from e
        else:
            raise
    except AttributeError as e:
        raise Exception(f'no generator found for emulator {emulator}') from e

    return generator_cls()

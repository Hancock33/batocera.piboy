from __future__ import annotations

import shlex
from pathlib import Path
from typing import TYPE_CHECKING, Final

from ... import Command
from ...batoceraPaths import BATOCERA_SHARE_DIR, CONFIGS, LOGS, mkdir_if_not_exists
from ...controller import generate_sdl_game_controller_config
from ..Generator import Generator

if TYPE_CHECKING:
    from ...types import HotkeysContext

_CONFIG_DIR: Final = CONFIGS / "gzdoom"
_INI_FILE: Final = _CONFIG_DIR / "gzdoom.ini"
_FM_BANKS_DIR: Final = _CONFIG_DIR / "fm_banks"
_SOUND_FONTS_DIR: Final = _CONFIG_DIR / "soundfonts"

def set_joystick_setting(ini_file: Path, set_gz_joystick: str) -> None:
    with ini_file.open("r") as file:
        lines = file.readlines()

    joystick_line_found = False
    for i, line in enumerate(lines):
        if "use_joystick" in line:
            lines[i] = f"use_joystick={set_gz_joystick}\n"
            joystick_line_found = True
            break

    if not joystick_line_found:
        if "[GlobalSettings]" not in lines:
            lines.append("[GlobalSettings]\n")
            lines.append(f"use_joystick={set_gz_joystick}\n")
        else:
            for i, line in enumerate(lines):
                if line.strip() == "[GlobalSettings]":
                    lines.insert(i + 1, f"use_joystick={set_gz_joystick}\n")

    with ini_file.open("w") as file:
        file.writelines(lines)

class GzdoomGenerator(Generator):

    def getHotkeysContext(self) -> HotkeysContext:
        return {
            "name": "gzdoom",
            "keys": { "exit": ["KEY_LEFTALT", "KEY_F4"], "save_store": "KEY_F6", "restore_store": "KEY_F9" }
        }

    def generate(self, system, rom, playersControllers, metadata, guns, wheels, gameResolution):
        rom_path = Path(rom)

        # check the path is added to the ini file
        fm_banks = f"Path={_FM_BANKS_DIR}\n"
        sound_fonts = f"Path={_SOUND_FONTS_DIR}\n"

        # check directories exist
        mkdir_if_not_exists(_CONFIG_DIR)
        mkdir_if_not_exists(_SOUND_FONTS_DIR)
        mkdir_if_not_exists(_FM_BANKS_DIR)

        if system.isOptSet("gz_api"):
            gzdoom_api = system.config["gz_api"]
        else:
            gzdoom_api = "0"

        extra_config = 'bind ] weapnext\n'

        f=open('/usr/share/batocera/batocera.arch')
        arch=f.readline().strip('\n')
        if 'x86_64' in arch:
                extra_config += (
                    # Use the Vulkan render:
                    'vid_rendermode 4\n'
                    'vid_preferbackend 1\n'
                )
        else:
            extra_config += (
                # Use the GLES render:
                'vid_rendermode 4\n'
                'vid_preferbackend 3\n'
                # This setting greatly improves performance:
                'gles_use_mapped_buffer true\n'
                )

        iwad = ''
        pwad = ''

        rom_extension = rom.suffix.lower()
        if rom_extension == ".gzdoom":
            with open(rom, "r") as f:
                iwad_command = f.read().strip()
            args = shlex.split(iwad_command)
        elif  rom_extension == ".uwad":
            f=open(rom)
            content=f.readlines()
            for line in content:
                if 'IWAD=/' in line:
                    iwad += line.replace('IWAD=', '').replace('\n', ' ')
                elif 'PWAD=/' in line:
                    pwad += line.replace('PWAD=', '').replace('\n', ' ')
            iwad_command = '-iwad ' + iwad + '-file ' + pwad
            args = shlex.split(iwad_command)
        else:
            iwad_command = '-iwad ' + rom.name
            args = shlex.split(iwad_command)

        # A script file with console commands that are always ran when a game starts
        script_file = _CONFIG_DIR / "gzdoom.cfg"
        with script_file.open("w") as script:
            script.write(
                "# This file is automatically generated by gzdoomGenerator.py\n"
                # In the code, logfile does not appear to be created unless done so explicitly
                f"logfile {LOGS / 'gzdoom.log'}\n"
                f"vid_fps {'true' if system.getOptBoolean('showFPS') else 'false'}\n"
                f"{extra_config}"
                "echo BATOCERA\n"  # easy check that script ran in console
            )

        return Command.Command(
            array=[
                '/usr/share/gzdoom/gzdoom',
                *args,
                '-exec', script_file,
                '-fullscreen',
                '-width', str(gameResolution['width']),
                '-height', str(gameResolution['height']),
            ],
            env={
                'DOOMWADDIR': '/userdata/roms/ports/doom',
                'SDL_GAMECONTROLLERCONFIG': generate_sdl_game_controller_config(playersControllers)
            }
        )

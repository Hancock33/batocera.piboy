diff -urpN busybox-1.16.1/include/platform.h busybox-1.16.1-dnsd/include/platform.h
--- busybox-1.16.1/include/platform.h	2010-03-28 19:43:35.000000000 +0200
+++ busybox-1.16.1-dnsd/include/platform.h	2010-04-14 19:06:10.000000000 +0200
@@ -291,10 +291,12 @@ typedef unsigned smalluint;
 #if 1 /* if needed: !defined(arch1) && !defined(arch2) */
 # define ALIGN1 __attribute__((aligned(1)))
 # define ALIGN2 __attribute__((aligned(2)))
+# define ALIGN4 __attribute__((aligned(4)))
 #else
 /* Arches which MUST have 2 or 4 byte alignment for everything are here */
 # define ALIGN1
 # define ALIGN2
+# define ALIGN4
 #endif
 
 
diff -urpN busybox-1.16.1/networking/dnsd.c busybox-1.16.1-dnsd/networking/dnsd.c
--- busybox-1.16.1/networking/dnsd.c	2010-03-28 19:43:36.000000000 +0200
+++ busybox-1.16.1-dnsd/networking/dnsd.c	2010-04-26 14:20:25.000000000 +0200
@@ -44,10 +44,15 @@ struct dns_head {
 	uint16_t nauth;
 	uint16_t nadd;
 };
+/* Structure used to access type and class fields.
+ * They are totally unaligned, but gcc 4.3.4 thinks that pointer of type uint16_t*
+ * is 16-bit aligned and replaces 16-bit memcpy (in move_from_unaligned16 macro)
+ * with aligned halfword access on arm920t!
+ * Oh well. Slapping PACKED everywhere seems to help: */
 struct dns_prop {
-	uint16_t type;
-	uint16_t class;
-};
+	uint16_t type PACKED;
+	uint16_t class PACKED;
+} PACKED;
 /* element of known name, ip address and reversed ip address */
 struct dns_entry {
 	struct dns_entry *next;
@@ -459,7 +464,8 @@ int dnsd_main(int argc UNUSED_PARAM, cha
 	unsigned lsa_size;
 	int udps, opts;
 	uint16_t port = 53;
-	uint8_t buf[MAX_PACK_LEN + 1];
+	/* Ensure buf is 32bit aligned (we need 16bit, but 32bit can't hurt) */
+	uint8_t buf[MAX_PACK_LEN + 1] ALIGN4;
 
 	opts = getopt32(argv, "vi:c:t:p:d", &listen_interface, &fileconf, &sttl, &sport);
 	//if (opts & 0x1) // -v

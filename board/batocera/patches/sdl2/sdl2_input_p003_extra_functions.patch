diff --git a/include/SDL_joystick.h b/include/SDL_joystick.h
index 8be4b73..7d4e09f 100644
--- a/include/SDL_joystick.h
+++ b/include/SDL_joystick.h
@@ -319,6 +319,11 @@ extern DECLSPEC int SDLCALL SDL_JoystickDetachVirtual(int device_index);
  */
 extern DECLSPEC SDL_bool SDLCALL SDL_JoystickIsVirtual(int device_index);
 
+extern DECLSPEC const char *SDLCALL SDL_JoystickDevicePathById(int device_instance_id);
+extern DECLSPEC int SDLCALL SDL_JoystickButtonEventCodeById(int device_instance_id, int button);
+extern DECLSPEC int SDLCALL SDL_JoystickAxisEventCodeById(int device_instance_id, int axis);
+extern DECLSPEC int SDLCALL SDL_JoystickHatEventCodeById(int device_instance_id, int hat);
+
 /**
  * Set values on an opened, virtual-joystick's axis.
  *
diff --git a/src/dynapi/SDL_dynapi_overrides.h b/src/dynapi/SDL_dynapi_overrides.h
index 1e7d8bb..c54e2fa 100644
--- a/src/dynapi/SDL_dynapi_overrides.h
+++ b/src/dynapi/SDL_dynapi_overrides.h
@@ -209,6 +209,12 @@
 #define SDL_JoystickUpdate SDL_JoystickUpdate_REAL
 #define SDL_JoystickEventState SDL_JoystickEventState_REAL
 #define SDL_JoystickGetAxis SDL_JoystickGetAxis_REAL
+
+#define SDL_JoystickDevicePathById SDL_JoystickDevicePathById_REAL
+#define SDL_JoystickButtonEventCodeById SDL_JoystickButtonEventCodeById_REAL
+#define SDL_JoystickAxisEventCodeById SDL_JoystickAxisEventCodeById_REAL
+#define SDL_JoystickHatEventCodeById SDL_JoystickHatEventCodeById_REAL
+
 #define SDL_JoystickGetHat SDL_JoystickGetHat_REAL
 #define SDL_JoystickGetBall SDL_JoystickGetBall_REAL
 #define SDL_JoystickGetButton SDL_JoystickGetButton_REAL
diff --git a/src/dynapi/SDL_dynapi_procs.h b/src/dynapi/SDL_dynapi_procs.h
index 9fe7649..b7d8b78 100644
--- a/src/dynapi/SDL_dynapi_procs.h
+++ b/src/dynapi/SDL_dynapi_procs.h
@@ -240,6 +240,12 @@ SDL_DYNAPI_PROC(int,SDL_JoystickNumButtons,(SDL_Joystick *a),(a),return)
 SDL_DYNAPI_PROC(void,SDL_JoystickUpdate,(void),(),)
 SDL_DYNAPI_PROC(int,SDL_JoystickEventState,(int a),(a),return)
 SDL_DYNAPI_PROC(Sint16,SDL_JoystickGetAxis,(SDL_Joystick *a, int b),(a,b),return)
+
+SDL_DYNAPI_PROC(const char*,SDL_JoystickDevicePathById,(int a),(a),return)
+SDL_DYNAPI_PROC(int,SDL_JoystickButtonEventCodeById,(int a, int b),(a,b),return)
+SDL_DYNAPI_PROC(int,SDL_JoystickAxisEventCodeById,(int a, int b),(a,b),return)
+SDL_DYNAPI_PROC(int,SDL_JoystickHatEventCodeById,(int a, int b),(a,b),return)
+
 SDL_DYNAPI_PROC(Uint8,SDL_JoystickGetHat,(SDL_Joystick *a, int b),(a,b),return)
 SDL_DYNAPI_PROC(int,SDL_JoystickGetBall,(SDL_Joystick *a, int b, int *c, int *d),(a,b,c,d),return)
 SDL_DYNAPI_PROC(Uint8,SDL_JoystickGetButton,(SDL_Joystick *a, int b),(a,b),return)
diff --git a/src/joystick/SDL_joystick.c b/src/joystick/SDL_joystick.c
index 4b4017c..d8de838 100644
--- a/src/joystick/SDL_joystick.c
+++ b/src/joystick/SDL_joystick.c
@@ -2729,6 +2729,27 @@ SDL_JoystickGUID SDL_JoystickGetGUIDFromString(const char *pchGUID)
     return guid;
 }
 
+const char *
+SDL_JoystickDevicePathById(int device_instance_id)
+{
+  return SDL_SYS_JoystickDevicePathById( device_instance_id );
+}
+
+int SDL_JoystickButtonEventCodeById(int device_instance_id, int button)
+{
+  return SDL_SYS_JoystickButtonEventCodeById( device_instance_id, button );
+}
+
+int SDL_JoystickAxisEventCodeById(int device_instance_id, int axis)
+{
+  return SDL_SYS_JoystickAxisEventCodeById( device_instance_id, axis );
+}
+
+int SDL_JoystickHatEventCodeById(int device_instance_id, int hat)
+{
+  return SDL_SYS_JoystickHatEventCodeById( device_instance_id, hat );
+}
+
 /* update the power level for this joystick */
 void SDL_PrivateJoystickBatteryLevel(SDL_Joystick *joystick, SDL_JoystickPowerLevel ePowerLevel)
 {
diff --git a/src/joystick/SDL_sysjoystick.h b/src/joystick/SDL_sysjoystick.h
index 7bb6926..91ba45d 100644
--- a/src/joystick/SDL_sysjoystick.h
+++ b/src/joystick/SDL_sysjoystick.h
@@ -218,6 +218,11 @@ extern SDL_JoystickDriver SDL_OS2_JoystickDriver;
 extern SDL_JoystickDriver SDL_PSP_JoystickDriver;
 extern SDL_JoystickDriver SDL_VITA_JoystickDriver;
 
+extern const char *SDL_SYS_JoystickDevicePathById(int device_instance_id);
+extern int SDL_SYS_JoystickButtonEventCodeById(int device_instance_id, int button);
+extern int SDL_SYS_JoystickAxisEventCodeById(int device_instance_id, int axis);
+extern int SDL_SYS_JoystickHatEventCodeById(int device_instance_id, int hat);
+
 #endif /* SDL_sysjoystick_h_ */
 
 /* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/joystick/linux/SDL_sysjoystick.c b/src/joystick/linux/SDL_sysjoystick.c
index af9d10c..c105316 100644
--- a/src/joystick/linux/SDL_sysjoystick.c
+++ b/src/joystick/linux/SDL_sysjoystick.c
@@ -852,6 +852,16 @@ ConfigJoystick(SDL_Joystick *joystick, int fd)
     unsigned long ffbit[NBITS(FF_MAX)] = { 0 };
     SDL_bool use_deadzones = SDL_GetHintBoolean(SDL_HINT_LINUX_JOYSTICK_DEADZONES, SDL_FALSE);
 
+    for(i=0; i<KEY_MAX; i++) {
+      joystick->hwdata->key_map[i] = -1;
+    }
+    for(i=0; i<ABS_MAX; i++) {
+      joystick->hwdata->abs_map[i] = -1;
+    }
+    for(i=0; i<ABS_MAX; i++) {
+      joystick->hwdata->hat_map[i] = -1;
+    }
+
     /* See if this device uses the new unified event API */
     if ((ioctl(fd, EVIOCGBIT(EV_KEY, sizeof(keybit)), keybit) >= 0) &&
         (ioctl(fd, EVIOCGBIT(EV_ABS, sizeof(absbit)), absbit) >= 0) &&
@@ -1655,6 +1665,56 @@ SDL_JoystickDriver SDL_LINUX_JoystickDriver =
     LINUX_JoystickGetGamepadMapping
 };
 
+const char *
+SDL_SYS_JoystickDevicePathById(int device_instance_id)
+{
+  SDL_joylist_item* joystick = JoystickByDevIndex(SDL_JoystickGetDeviceIndexFromInstanceID(device_instance_id));
+  if(joystick == NULL) return "";
+  return joystick->hwdata->fname;
+}
+
+int SDL_SYS_JoystickButtonEventCodeById(int device_instance_id, int button)
+{
+  int i;
+  SDL_joylist_item* joystick = JoystickByDevIndex(SDL_JoystickGetDeviceIndexFromInstanceID(device_instance_id));
+  if(joystick == NULL) return -1;
+
+  for(i=0; i<KEY_MAX; i++) {
+    if(((int)joystick->hwdata->key_map[i]) == button) {
+      return i;
+    }
+  }
+  return -1;
+}
+
+int SDL_SYS_JoystickAxisEventCodeById(int device_instance_id, int axis)
+{
+  int i;
+  SDL_joylist_item* joystick = JoystickByDevIndex(SDL_JoystickGetDeviceIndexFromInstanceID(device_instance_id));
+  if(joystick == NULL) return -1;
+
+  for(i=0; i<ABS_MAX; i++) {
+    if(((int)joystick->hwdata->abs_map[i]) == axis) {
+      return i;
+    }
+  }
+  return -1;
+}
+
+int SDL_SYS_JoystickHatEventCodeById(int device_instance_id, int hat)
+{
+  int i;
+  SDL_joylist_item* joystick = JoystickByDevIndex(SDL_JoystickGetDeviceIndexFromInstanceID(device_instance_id));
+  if(joystick == NULL) return -1;
+
+  for(i=0; i<ABS_MAX; i++) {
+    if(((int)joystick->hwdata->hat_map[i]) == hat) {
+      return i;
+    }
+  }
+  return -1;
+}
+
 #endif /* SDL_JOYSTICK_LINUX */
 
 /* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/joystick/linux/SDL_sysjoystick_c.h b/src/joystick/linux/SDL_sysjoystick_c.h
index 898f183..51d3c58 100644
--- a/src/joystick/linux/SDL_sysjoystick_c.h
+++ b/src/joystick/linux/SDL_sysjoystick_c.h
@@ -53,6 +53,7 @@ struct joystick_hwdata
     /* Support for the Linux 2.4 unified input interface */
     Uint8 key_map[KEY_MAX];
     Uint8 abs_map[ABS_MAX];
+    Uint8 hat_map[ABS_MAX];
     SDL_bool has_key[KEY_MAX];
     SDL_bool has_abs[ABS_MAX];
 

--- a/gensignkey.c	2020-08-19 17:36:02.315194836 +0200
+++ b/gensignkey.c	2020-08-19 17:35:48.038922483 +0200
@@ -149,31 +149,31 @@
 	key = NULL;
 	buf_setpos(buf, 0);
 
-	fn_temp = m_malloc(strlen(filename) + 30);
-	snprintf(fn_temp, strlen(filename)+30, "%s.tmp%d", filename, getpid());
+	//fn_temp = m_malloc(strlen(filename) + 30);
+	//snprintf(fn_temp, strlen(filename)+30, "%s.tmp%d", filename, getpid());
 	ret = buf_writefile(buf, fn_temp, 0);
 
-	if (ret == DROPBEAR_FAILURE) {
-		goto out;
-	}
-
-	if (link(fn_temp, filename) < 0) {
-		/* If generating keys on connection (skipexist) it's OK to get EEXIST 
-		- we probably just lost a race with another connection to generate the key */
-		if (!(skip_exist && errno == EEXIST)) {
-			if (errno == EPERM || errno == EACCES) {
-				/* Non-atomic fallback when hard-links not allowed or unsupported */
-				buf_setpos(buf, 0);
-				ret = buf_writefile(buf, filename, skip_exist);
-			} else {
-				dropbear_log(LOG_ERR, "Failed moving key file to %s: %s", filename,
-					strerror(errno));
-				ret = DROPBEAR_FAILURE;
-			}
-
-			goto out;
-		}
-	}
+	//if (ret == DROPBEAR_FAILURE) {
+	//	goto out;
+	//}
+
+	//if (link(fn_temp, filename) < 0) {
+	//	/* If generating keys on connection (skipexist) it's OK to get EEXIST 
+	//	- we probably just lost a race with another connection to generate the key */
+	//	if (!(skip_exist && errno == EEXIST)) {
+	//		if (errno == EPERM || errno == EACCES) {
+	//			/* Non-atomic fallback when hard-links not allowed or unsupported */
+	//			buf_setpos(buf, 0);
+	//			ret = buf_writefile(buf, filename, skip_exist);
+	//		} else {
+	//			dropbear_log(LOG_ERR, "Failed moving key file to %s: %s", filename,
+	//				strerror(errno));
+	//			ret = DROPBEAR_FAILURE;
+	//		}
+
+	//		goto out;
+	//	}
+	//}
 
 	/* ensure directory update is flushed to disk, otherwise we can end up
 	with zero-byte hostkey files if the power goes off */
@@ -185,10 +185,10 @@
 		buf_free(buf);
 	}
 	
-	if (fn_temp) {
-		unlink(fn_temp);
-		m_free(fn_temp);
-	}
+	//if (fn_temp) {
+	//	unlink(fn_temp);
+	//	m_free(fn_temp);
+	//}
 
 	return ret;
 }

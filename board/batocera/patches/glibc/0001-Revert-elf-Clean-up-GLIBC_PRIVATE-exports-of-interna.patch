diff --git a/dlfcn/dlerror.c b/dlfcn/dlerror.c
index 1c7d7a8a01..74bfbb419e 100644
--- a/dlfcn/dlerror.c
+++ b/dlfcn/dlerror.c
@@ -196,3 +196,4 @@ _dlerror_run (void (*operate) (void *), void *args)
       return 1;
     }
 }
+libc_hidden_def (_dlerror_run)
diff --git a/elf/Makefile b/elf/Makefile
index c00e2ccfc5..d468905633 100644
--- a/elf/Makefile
+++ b/elf/Makefile
@@ -280,6 +280,7 @@ tests-static-internal := \
   tst-stackguard1-static \
   tst-tls1-static \
   tst-tls1-static-non-pie \
+  tst-libc_dlvsym-static
   # tests-static-internal
 
 CRT-tst-tls1-static-non-pie := $(csu-objpfx)crt1.o
@@ -421,6 +422,7 @@ tests += \
   tst-initorder \
   tst-initorder2 \
   tst-latepthread \
+  tst-libc_dlvsym-dso \
   tst-main1 \
   tst-next-ver \
   tst-nodelete-dlclose \
@@ -495,6 +497,7 @@ tests-internal += \
   tst-dlmopen2 \
   tst-ptrguard1 \
   tst-stackguard1 \
+  tst-libc_dlvsym \
   tst-tls-surplus \
   tst-tls3 \
   tst-tls6 \
@@ -972,7 +975,7 @@ modules-names += \
 
 # Most modules build with _ISOMAC defined, but those filtered out
 # depend on internal headers.
-modules-names-tests = $(filter-out ifuncmod% tst-tlsmod%,\
+modules-names-tests = $(filter-out ifuncmod% tst-libc_dlvsym-dso tst-tlsmod%,\
 				   $(modules-names))
 
 # For +depfiles in Makerules.
@@ -2487,6 +2490,14 @@ LDLIBS-tst-absolute-zero-lib.so = tst-absolute-zero-lib.lds
 $(objpfx)tst-absolute-zero-lib.so: $(LDLIBS-tst-absolute-zero-lib.so)
 $(objpfx)tst-absolute-zero: $(objpfx)tst-absolute-zero-lib.so
 
+# Both the main program and the DSO for tst-libc_dlvsym need to link
+# against libdl.
+$(objpfx)tst-libc_dlvsym-dso.so: $(libsupport)
+$(objpfx)tst-libc_dlvsym.out: $(objpfx)tst-libc_dlvsym-dso.so
+tst-libc_dlvsym-static-ENV = \
+  LD_LIBRARY_PATH=$(ld-library-path):$(common-objpfx)dlfcn
+$(objpfx)tst-libc_dlvsym-static.out: $(objpfx)tst-libc_dlvsym-dso.so
+
 $(objpfx)tst-big-note: $(objpfx)tst-big-note-lib.so
 # Avoid creating an ABI tag note, which may come before the
 # artificial, large note in tst-big-note-lib.o and invalidate the
diff --git a/elf/Versions b/elf/Versions
index 4614acea3e..f56eb2628e 100644
--- a/elf/Versions
+++ b/elf/Versions
@@ -30,6 +30,9 @@ libc {
   }
   GLIBC_PRIVATE {
     # functions used in other libraries
+    _dl_addr;
+    _dl_sym; _dl_vsym;
+    __libc_dlclose; __libc_dlopen_mode; __libc_dlsym; __libc_dlvsym;
     __libc_early_init;
   }
 }
diff --git a/elf/dl-addr.c b/elf/dl-addr.c
index 44f0103687..0e45bbdb36 100644
--- a/elf/dl-addr.c
+++ b/elf/dl-addr.c
@@ -136,3 +136,4 @@ _dl_addr (const void *address, Dl_info *info,
 
   return result;
 }
+libc_hidden_def (_dl_addr)
diff --git a/elf/dl-libc.c b/elf/dl-libc.c
index c12e52f330..30bcd9801a 100644
--- a/elf/dl-libc.c
+++ b/elf/dl-libc.c
@@ -161,6 +161,7 @@ __libc_dlopen_mode (const char *name, int mode)
 #endif
   return dlerror_run (do_dlopen, &args) ? NULL : (void *) args.map;
 }
+libc_hidden_def (__libc_dlopen_mode)
 
 #ifndef SHARED
 void *
@@ -190,6 +191,7 @@ __libc_dlsym (void *map, const char *name)
   return (dlerror_run (do_dlsym, &args) ? NULL
 	  : (void *) (DL_SYMBOL_ADDRESS (args.loadbase, args.ref)));
 }
+libc_hidden_def (__libc_dlsym)
 
 /* Replacement for dlvsym.  MAP must be a real map.  This function
    returns NULL without setting the dlerror value in case of static
@@ -216,6 +218,7 @@ __libc_dlvsym (void *map, const char *name, const char *version)
 	  : (void *) (DL_SYMBOL_ADDRESS (args.dlsym.loadbase,
 					 args.dlsym.ref)));
 }
+libc_hidden_def (__libc_dlvsym)
 
 int
 __libc_dlclose (void *map)
@@ -226,6 +229,7 @@ __libc_dlclose (void *map)
 #endif
   return dlerror_run (do_dlclose, map);
 }
+libc_hidden_def (__libc_dlclose)
 
 
 static bool
diff --git a/elf/dl-sym.c b/elf/dl-sym.c
index b1ed1f2006..b7008d7164 100644
--- a/elf/dl-sym.c
+++ b/elf/dl-sym.c
@@ -188,9 +188,11 @@ _dl_vsym (void *handle, const char *name, const char *version, void *who)
 
   return do_sym (handle, name, who, &vers, 0);
 }
+libc_hidden_def (_dl_vsym)
 
 void *
 _dl_sym (void *handle, const char *name, void *who)
 {
   return do_sym (handle, name, who, NULL, DL_LOOKUP_RETURN_NEWEST);
 }
+libc_hidden_def (_dl_sym)
diff --git a/include/dlfcn.h b/include/dlfcn.h
index ae25f05303..e2dc6cf9a9 100644
--- a/include/dlfcn.h
+++ b/include/dlfcn.h
@@ -49,20 +49,20 @@ extern char **__libc_argv attribute_hidden;
    better error handling semantics for the library.  */
 #define __libc_dlopen(name) \
   __libc_dlopen_mode (name, RTLD_NOW | __RTLD_DLOPEN)
-extern void *__libc_dlopen_mode  (const char *__name, int __mode)
-  attribute_hidden;
-extern void *__libc_dlsym   (void *__map, const char *__name)
-  attribute_hidden;
-extern void *__libc_dlvsym (void *map, const char *name, const char *version)
-  attribute_hidden;
-extern int   __libc_dlclose (void *__map)
-  attribute_hidden;
+extern void *__libc_dlopen_mode  (const char *__name, int __mode);
+extern void *__libc_dlsym   (void *__map, const char *__name);
+extern void *__libc_dlvsym (void *map, const char *name, const char *version);
+extern int   __libc_dlclose (void *__map);
+libc_hidden_proto (__libc_dlopen_mode)
+libc_hidden_proto (__libc_dlsym)
+libc_hidden_proto (__libc_dlvsym)
+libc_hidden_proto (__libc_dlclose)
 
 /* Locate shared object containing the given address.  */
 #ifdef ElfW
 extern int _dl_addr (const void *address, Dl_info *info,
-		     struct link_map **mapp, const ElfW(Sym) **symbolp)
-  attribute_hidden;
+		     struct link_map **mapp, const ElfW(Sym) **symbolp);
+libc_hidden_proto (_dl_addr)
 #endif
 
 struct link_map;
@@ -77,21 +77,23 @@ extern void _dl_close_worker (struct link_map *map, bool force)
 /* Look up NAME in shared object HANDLE (which may be RTLD_DEFAULT or
    RTLD_NEXT).  WHO is the calling function, for RTLD_NEXT.  Returns
    the symbol value, which may be NULL.  */
-extern void *_dl_sym (void *handle, const char *name, void *who)
-  attribute_hidden;
+extern void *_dl_sym (void *handle, const char *name, void *who);
+libc_hidden_proto (_dl_sym)
 
 /* Look up version VERSION of symbol NAME in shared object HANDLE
    (which may be RTLD_DEFAULT or RTLD_NEXT).  WHO is the calling
    function, for RTLD_NEXT.  Returns the symbol value, which may be
    NULL.  */
 extern void *_dl_vsym (void *handle, const char *name, const char *version,
-		       void *who) attribute_hidden;
+		       void *who);
+libc_hidden_proto (_dl_vsym)
 
 /* Helper function for <dlfcn.h> functions.  Runs the OPERATE function via
    _dl_catch_error.  Returns zero for success, nonzero for failure; and
    arranges for `dlerror' to return the error details.
    ARGS is passed as argument to OPERATE.  */
-extern int _dlerror_run (void (*operate) (void *), void *args) attribute_hidden;
+extern int _dlerror_run (void (*operate) (void *), void *args);
+libc_hidden_proto (_dlerror_run)
 
 /* This structure is used to make the outer (statically linked)
    implementation of dlopen and related functions to the inner libc

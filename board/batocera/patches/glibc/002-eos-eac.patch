diff --git a/Makefile b/Makefile
index 97b4328af8..6ea0396b66 100644
--- a/Makefile
+++ b/Makefile
@@ -109,6 +109,12 @@ elf/ldso_install:
 # Ignore the error if we cannot update /etc/ld.so.cache.
 ifeq (no,$(cross-compiling))
 ifeq (yes,$(build-shared))
+install: install-symbolic-link
+.PHONY: install-symbolic-link
+install-symbolic-link: subdir_install
+	$(symbolic-link-prog) $(symbolic-link-list)
+	rm -f $(symbolic-link-list)
+
 install:
 	-test ! -x $(elf-objpfx)ldconfig || LC_ALL=C \
 	  $(elf-objpfx)ldconfig $(addprefix -r ,$(install_root)) \
diff --git a/Makerules b/Makerules
index ada616891e..97e051dc55 100644
--- a/Makerules
+++ b/Makerules
@@ -939,19 +939,22 @@ install-lib.so := $(filter %.so,$(install-lib:%_pic.a=%.so))
 install-lib := $(filter-out %.so %_pic.a,$(install-lib))
 
 ifeq (yes,$(build-shared))
-# Find which .so's have a version number in their soname.
+# Find which .so's have versions.
 versioned := $(strip $(foreach so,$(install-lib.so),\
 			       $(patsubst %,$(so),$($(so)-version))))
 
 install-lib.so-versioned := $(filter $(versioned), $(install-lib.so))
 install-lib.so-unversioned := $(filter-out $(versioned), $(install-lib.so))
 
-# For libraries whose soname have version numbers, we install two files:
+# For versioned libraries, we install three files:
 #	$(inst_libdir)/libfoo.so	-- for linking, symlink or ld script
-#	$(inst_slibdir)/libfoo.so.NN	-- for loading by SONAME
+#	$(inst_slibdir)/libfoo.so.NN	-- for loading by SONAME, symlink
+#	$(inst_slibdir)/libfoo-X.Y.Z.so -- the real shared object file
+lib-version := $(firstword $($(subdir)-version) $(version))
 install-lib-nosubdir: $(install-lib.so-unversioned:%=$(inst_slibdir)/%) \
 		      $(foreach L,$(install-lib.so-versioned),\
 				$(inst_libdir)/$L \
+				$(inst_slibdir)/$(L:.so=)-$(lib-version).so \
 				$(inst_slibdir)/$L$($L-version))
 
 # Install all the unversioned shared libraries.
@@ -984,8 +987,34 @@ ln -f $(objpfx)/$(@F) $@
 endef
 endif
 
+ifeq (yes,$(build-shared))
+ifeq (no,$(cross-compiling))
+symbolic-link-prog := $(elf-objpfx)sln
+symbolic-link-list := $(elf-objpfx)symlink.list
+define make-shlib-link
+echo `$(..)scripts/rellns-sh -p $< $@` $@ >> $(symbolic-link-list)
+endef
+else # cross-compiling
+# We need a definition that can be used by elf/Makefile's install rules.
+symbolic-link-prog = $(LN_S)
+endif
+endif
+ifndef make-shlib-link
+define make-shlib-link
+rm -f $@
+$(LN_S) `$(..)scripts/rellns-sh -p $< $@` $@
+endef
+endif
+
 ifdef libc.so-version
-$(inst_slibdir)/libc.so$(libc.so-version): $(common-objpfx)libc.so $(+force)
+# For a library specified to be version N, install three files:
+# libc.so	->	libc.so.N	(e.g. libc.so.6)
+# libc.so.6	->	libc-VERSION.so	(e.g. libc-1.10.so)
+
+$(inst_slibdir)/libc.so$(libc.so-version): $(inst_slibdir)/libc-$(version).so \
+					   $(+force)
+	$(make-shlib-link)
+$(inst_slibdir)/libc-$(version).so: $(common-objpfx)libc.so $(+force)
 	$(do-install-program)
 
 install: $(inst_slibdir)/libc.so$(libc.so-version)
@@ -1054,13 +1083,38 @@ include $(o-iterator)
 
 generated += $(foreach o,$(versioned),$o$($o-version))
 
+ifeq (,$($(subdir)-version))
 define o-iterator-doit
-$(inst_slibdir)/$o$($o-version): $(objpfx)$o $(+force);
+$(inst_slibdir)/$o$($o-version): $(inst_slibdir)/$(o:.so=)-$(version).so \
+				 $(+force);
+	$$(make-shlib-link)
+endef
+object-suffixes-left := $(versioned)
+include $(o-iterator)
+
+define o-iterator-doit
+$(inst_slibdir)/$(o:.so=)-$(version).so: $(objpfx)$o $(+force);
 	$$(do-install-program)
 endef
 object-suffixes-left := $(versioned)
 include $(o-iterator)
-endif # ifneq (,$(versioned))
+else
+define o-iterator-doit
+$(inst_slibdir)/$o$($o-version): \
+  $(inst_slibdir)/$(o:.so=)-$($(subdir)-version).so $(+force);
+	$$(make-shlib-link)
+endef
+object-suffixes-left := $(versioned)
+include $(o-iterator)
+
+define o-iterator-doit
+$(inst_slibdir)/$(o:.so=)-$($(subdir)-version).so: $(objpfx)$o $(+force);
+	$$(do-install-program)
+endef
+object-suffixes-left := $(versioned)
+include $(o-iterator)
+endif
+endif
 
 define do-install-so
 $(do-install-program)
diff --git a/dlfcn/dlerror.c b/dlfcn/dlerror.c
index f931ecb1a6..2dad3b4103 100644
--- a/dlfcn/dlerror.c
+++ b/dlfcn/dlerror.c
@@ -196,3 +196,4 @@ _dlerror_run (void (*operate) (void *), void *args)
       return 1;
     }
 }
+libc_hidden_def (_dlerror_run)
diff --git a/elf/Makefile b/elf/Makefile
index 4b1d0d8741..333cd7caad 100644
--- a/elf/Makefile
+++ b/elf/Makefile
@@ -286,6 +286,7 @@ tests-static-internal := \
   tst-tls1-static \
   tst-tls1-static-non-pie \
   tst-tunables \
+  tst-libc_dlvsym-static \
   tst-tunables-enable_secure \
   # tests-static-internal
 
@@ -406,7 +407,6 @@ tests += \
   tst-big-note \
   tst-debug1 \
   tst-deep1 \
-  tst-dl-is_dso \
   tst-dlclose-lazy \
   tst-dlmodcount \
   tst-dlmopen-dlerror \
@@ -534,6 +534,7 @@ tests-internal += \
   tst-hash-collision3 \
   tst-ptrguard1 \
   tst-stackguard1 \
+  tst-libc_dlvsym \
   tst-tls-surplus \
   tst-tls3 \
   tst-tls6 \
@@ -948,6 +949,7 @@ modules-names += \
   tst-ldconfig-soname-lib-with-soname \
   tst-ldconfig-soname-lib-without-soname \
   tst-main1mod \
+  tst-libc_dlvsym-dso \
   tst-nodelete-dlclose-dso \
   tst-nodelete-dlclose-plugin \
   tst-nodelete-opened-lib \
@@ -1100,7 +1102,7 @@ modules-names += \
 
 # Most modules build with _ISOMAC defined, but those filtered out
 # depend on internal headers.
-modules-names-tests = $(filter-out ifuncmod% tst-tlsmod% \
+modules-names-tests = $(filter-out ifuncmod% libc_dlvsym tst-tlsmod% \
 				   tst-hash-collision3-mod,\
 				   $(modules-names))
 
@@ -1531,10 +1533,16 @@ $(objpfx)trusted-dirs.st: Makefile $(..)Makeconfig
 CPPFLAGS-dl-load.c += -I$(objpfx). -I$(csu-objpfx).
 
 ifeq (yes,$(build-shared))
-$(inst_rtlddir)/$(rtld-installed-name): $(objpfx)ld.so $(+force)
+$(inst_slibdir)/$(rtld-version-installed-name): $(objpfx)ld.so $(+force)
 	$(make-target-directory)
 	$(do-install-program)
 
+$(inst_rtlddir)/$(rtld-installed-name): \
+  $(inst_slibdir)/$(rtld-version-installed-name) \
+  $(inst_slibdir)/libc-$(version).so
+	$(make-target-directory)
+	$(make-shlib-link)
+
 # Creates the relative /usr/bin/ld.so symbolic link.
 $(inst_bindir)/ld.so: $(inst_rtlddir)/$(rtld-installed-name)
 	$(make-target-directory)
@@ -1543,7 +1551,7 @@ $(inst_bindir)/ld.so: $(inst_rtlddir)/$(rtld-installed-name)
 # Special target called by parent to install just the dynamic linker.
 .PHONY: ldso_install
 ldso_install: $(inst_rtlddir)/$(rtld-installed-name)
-endif # $(build-shared)
+endif
 
 
 # Workarounds for ${exec_prefix} expansion in configure variables.
@@ -2673,6 +2681,14 @@ LDLIBS-tst-absolute-zero-lib.so = tst-absolute-zero-lib.lds
 $(objpfx)tst-absolute-zero-lib.so: $(LDLIBS-tst-absolute-zero-lib.so)
 $(objpfx)tst-absolute-zero: $(objpfx)tst-absolute-zero-lib.so
 
+# Both the main program and the DSO for tst-libc_dlvsym need to link
+# against libdl.
+$(objpfx)tst-libc_dlvsym-dso.so: $(libsupport)
+$(objpfx)tst-libc_dlvsym.out: $(objpfx)tst-libc_dlvsym-dso.so
+tst-libc_dlvsym-static-ENV = \
+  LD_LIBRARY_PATH=$(ld-library-path):$(common-objpfx)dlfcn
+$(objpfx)tst-libc_dlvsym-static.out: $(objpfx)tst-libc_dlvsym-dso.so
+
 $(objpfx)tst-big-note: $(objpfx)tst-big-note-lib.so
 # Avoid creating an ABI tag note, which may come before the
 # artificial, large note in tst-big-note-lib.o and invalidate the
diff --git a/elf/Versions b/elf/Versions
index 1591031da9..eab8832d2f 100644
--- a/elf/Versions
+++ b/elf/Versions
@@ -30,6 +30,9 @@ libc {
   }
   GLIBC_PRIVATE {
     # functions used in other libraries
+    _dl_addr;
+    _dl_sym; _dl_vsym;
+    __libc_dlclose; __libc_dlopen_mode; __libc_dlsym; __libc_dlvsym;
     __libc_early_init;
   }
 }
diff --git a/elf/dl-addr.c b/elf/dl-addr.c
index a4d379d2c6..ca327e327e 100644
--- a/elf/dl-addr.c
+++ b/elf/dl-addr.c
@@ -136,3 +136,4 @@ _dl_addr (const void *address, Dl_info *info,
 
   return result;
 }
+libc_hidden_def (_dl_addr)
diff --git a/elf/dl-libc.c b/elf/dl-libc.c
index d55f94e40d..bc03b2f85d 100644
--- a/elf/dl-libc.c
+++ b/elf/dl-libc.c
@@ -161,6 +161,7 @@ __libc_dlopen_mode (const char *name, int mode)
 #endif
   return dlerror_run (do_dlopen, &args) ? NULL : (void *) args.map;
 }
+libc_hidden_def (__libc_dlopen_mode)
 
 #ifndef SHARED
 void *
diff --git a/elf/dl-sym.c b/elf/dl-sym.c
index 8c5f9004fd..49d92dd5ec 100644
--- a/elf/dl-sym.c
+++ b/elf/dl-sym.c
@@ -188,9 +188,11 @@ _dl_vsym (void *handle, const char *name, const char *version, void *who)
 
   return do_sym (handle, name, who, &vers, 0);
 }
+libc_hidden_def (_dl_vsym)
 
 void *
 _dl_sym (void *handle, const char *name, void *who)
 {
   return do_sym (handle, name, who, NULL, DL_LOOKUP_RETURN_NEWEST);
 }
+libc_hidden_def (_dl_sym)
diff --git a/elf/ldconfig.c b/elf/ldconfig.c
index 1432187e9b..df72be1377 100644
--- a/elf/ldconfig.c
+++ b/elf/ldconfig.c
@@ -43,7 +43,6 @@
 #include <endswith.h>
 #include <dl-cache.h>
 #include <dl-hwcaps.h>
-#include <dl-is_dso.h>
 
 #include <dl-procinfo.h>
 
@@ -732,7 +731,9 @@ search_dir (const struct dir_entry *entry)
 	continue;
       /* Does this file look like a shared library?  The dynamic linker
 	 is also considered as shared library.  */
-      if (!_dl_is_dso (direntry->d_name)
+      if (((strncmp (direntry->d_name, "lib", 3) != 0
+	    && strncmp (direntry->d_name, "ld-", 3) != 0)
+	   || strstr (direntry->d_name, ".so") == NULL)
 	  && (direntry->d_type == DT_REG || entry->hwcaps == NULL))
 	continue;
 
diff --git a/include/dlfcn.h b/include/dlfcn.h
index f49ee1b0c9..b15e090c24 100644
--- a/include/dlfcn.h
+++ b/include/dlfcn.h
@@ -50,20 +50,20 @@ extern char **__libc_argv attribute_hidden;
    better error handling semantics for the library.  */
 #define __libc_dlopen(name) \
   __libc_dlopen_mode (name, RTLD_NOW | __RTLD_DLOPEN)
-extern void *__libc_dlopen_mode  (const char *__name, int __mode)
-  attribute_hidden;
-extern void *__libc_dlsym   (void *__map, const char *__name)
-  attribute_hidden;
-extern void *__libc_dlvsym (void *map, const char *name, const char *version)
-  attribute_hidden;
-extern int   __libc_dlclose (void *__map)
-  attribute_hidden;
+extern void *__libc_dlopen_mode  (const char *__name, int __mode);
+extern void *__libc_dlsym   (void *__map, const char *__name);
+extern void *__libc_dlvsym (void *map, const char *name, const char *version);
+extern int   __libc_dlclose (void *__map);
+libc_hidden_proto (__libc_dlopen_mode)
+libc_hidden_proto (__libc_dlsym)
+libc_hidden_proto (__libc_dlvsym)
+libc_hidden_proto (__libc_dlclose)
 
 /* Locate shared object containing the given address.  */
 #ifdef ElfW
 extern int _dl_addr (const void *address, Dl_info *info,
-		     struct link_map **mapp, const ElfW(Sym) **symbolp)
-  attribute_hidden;
+		     struct link_map **mapp, const ElfW(Sym) **symbolp);
+libc_hidden_proto (_dl_addr)
 #endif
 
 struct link_map;
@@ -78,21 +78,23 @@ extern void _dl_close_worker (struct link_map *map, bool force)
 /* Look up NAME in shared object HANDLE (which may be RTLD_DEFAULT or
    RTLD_NEXT).  WHO is the calling function, for RTLD_NEXT.  Returns
    the symbol value, which may be NULL.  */
-extern void *_dl_sym (void *handle, const char *name, void *who)
-  attribute_hidden;
+extern void *_dl_sym (void *handle, const char *name, void *who);
+libc_hidden_proto (_dl_sym)
 
 /* Look up version VERSION of symbol NAME in shared object HANDLE
    (which may be RTLD_DEFAULT or RTLD_NEXT).  WHO is the calling
    function, for RTLD_NEXT.  Returns the symbol value, which may be
    NULL.  */
 extern void *_dl_vsym (void *handle, const char *name, const char *version,
-		       void *who) attribute_hidden;
+		       void *who);
+libc_hidden_proto (_dl_vsym)
 
 /* Helper function for <dlfcn.h> functions.  Runs the OPERATE function via
    _dl_catch_error.  Returns zero for success, nonzero for failure; and
    arranges for `dlerror' to return the error details.
    ARGS is passed as argument to OPERATE.  */
-extern int _dlerror_run (void (*operate) (void *), void *args) attribute_hidden;
+extern int _dlerror_run (void (*operate) (void *), void *args);
+libc_hidden_proto (_dlerror_run)
 
 /* This structure is used to make the outer (statically linked)
    implementation of dlopen and related functions to the inner libc
diff --git a/nptl_db/Makefile b/nptl_db/Makefile
index 39bc05750d..f30966e150 100644
--- a/nptl_db/Makefile
+++ b/nptl_db/Makefile
@@ -21,6 +21,8 @@ subdir          := nptl_db
 
 include ../Makeconfig
 
+nptl_db-version = 1.0
+
 extra-libs = libthread_db
 extra-libs-others := $(extra-libs)
 

From c3c17c90af20b59ce0eff026ff3df4e5ba586468 Mon Sep 17 00:00:00 2001
From: Hendrik Borghorst <hendrikborghorst@gmail.com>
Date: Sun, 28 Aug 2022 12:54:19 +0200
Subject: [PATCH] hid: Add force feedback support to hid-steam

This commit adds support for force feedback in the hid-steam driver. The
command (0xeb) is traced from Steam's controller support (Xbox 360
emulation).

Signed-off-by: Hendrik Borghorst <hendrikborghorst@gmail.com>
---
 drivers/hid/hid-steam.c | 79 +++++++++++++++++++++++++++++++++++++++--
 1 file changed, 77 insertions(+), 2 deletions(-)

diff --git a/drivers/hid/hid-steam.c b/drivers/hid/hid-steam.c
index 5b63ae977002..1b4df0b4ac2b 100644
--- a/drivers/hid/hid-steam.c
+++ b/drivers/hid/hid-steam.c
@@ -86,9 +86,10 @@ int lizard_reset_fn (void *data);
 #define STEAM_CMD_GET_REGISTER_DEFAULT	0x8c
 #define STEAM_CMD_SET_MODE		0x8d
 #define STEAM_CMD_DEFAULT_MOUSE		0x8e
-#define STEAM_CMD_FORCEFEEDBAK		0x8f
+#define STEAM_CMD_TOUCHPAD_HAPTIC	0x8f
 #define STEAM_CMD_REQUEST_COMM_STATUS	0xb4
 #define STEAM_CMD_GET_SERIAL		0xae
+#define STEAM_CMD_RUMBLE		0xeb
 
 /* Some useful register ids */
 #define STEAM_REG_LPAD_MODE		0x07
@@ -123,6 +124,7 @@ struct steam_device {
 	struct input_dev __rcu *input;
 	unsigned long quirks;
 	struct work_struct work_connect;
+	struct work_struct work_effect;
 	bool connected;
 	char serial_no[STEAM_SERIAL_LEN + 1];
 	struct power_supply_desc battery_desc;
@@ -132,6 +134,8 @@ struct steam_device {
 	bool steamdeck;
 	bool device_open;
 	struct task_struct *lizard_reset;
+	uint32_t rumble_weak;
+	uint32_t rumble_strong;
 };
 
 static int steam_recv_report(struct steam_device *steam,
@@ -311,7 +315,7 @@ int lizard_reset_fn (void *data) {
 		mutex_lock(&steam->mutex);
 		steam_set_lizard_mode(steam, false);
 		mutex_unlock(&steam->mutex);
-		msleep(2000);
+		msleep(1000);
 	}
 	return 0;
 }
@@ -418,6 +422,62 @@ static int steam_battery_register(struct steam_device *steam)
 	return 0;
 }
 
+static int steam_play_effect(struct input_dev *dev, void *data, struct ff_effect *effect)
+{
+	struct steam_device *steam = input_get_drvdata(dev);
+	unsigned long flags;
+	u32 strong, weak;
+
+	if (effect->u.rumble.strong_magnitude == 0 && effect->u.rumble.weak_magnitude == 0)
+		return 0;
+
+	/* Steam uses a factor of 1.33 to the values. */
+	strong = (effect->u.rumble.strong_magnitude * 100ul) / 75;
+	weak = (effect->u.rumble.weak_magnitude * 100ul) / 75;
+
+	/* Clamp values to 16 bit */
+	if (strong > 0xffff)
+		strong = 0xffff;
+
+	if (weak > 0xffff)
+		weak = 0xffff;
+
+	spin_lock_irqsave(&steam->lock, flags);
+	steam->rumble_strong = strong;
+	steam->rumble_weak = weak;
+	spin_unlock_irqrestore(&steam->lock, flags);
+
+	schedule_work(&steam->work_effect);
+	return 0;
+}
+/**
+ * Prepares the command buffer for the rumble command.
+ * It is reverse-engineered from captured traces when using Steam's
+ * controller support.
+ */
+static void prepare_effect_buffer(u8 *buf,uint16_t strong, uint16_t weak)
+{
+	buf[0] = STEAM_CMD_RUMBLE;
+	buf[1] = 9;
+	buf[2] = 1;
+	buf[3] = 0x40;
+	buf[4] = 0x1f;
+	buf[5] = strong & 0xff;
+	buf[6] = strong >> 8;
+	buf[7] = weak & 0xff;
+	buf[8] = weak >> 8;
+}
+
+static void steam_play_effect_cb(struct work_struct *work)
+{
+	struct steam_device *steam = container_of(work, struct steam_device, work_effect);
+	u8 cmd_buf[9];
+	prepare_effect_buffer(cmd_buf, steam->rumble_strong, steam->rumble_weak);
+	mutex_lock(&steam->mutex);
+	steam_send_report(steam, cmd_buf, sizeof(cmd_buf));
+	mutex_unlock(&steam->mutex);
+}
+
 static int steam_input_register(struct steam_device *steam)
 {
 	struct hid_device *hdev = steam->hdev;
@@ -547,6 +607,10 @@ static int steam_input_register(struct steam_device *steam)
 
 		input_abs_set_res(input, ABS_Z, STEAM_TRIGGER_RESOLUTION);
 		input_abs_set_res(input, ABS_RZ, STEAM_TRIGGER_RESOLUTION);
+
+
+		input_set_capability(input, EV_FF, FF_RUMBLE);
+		input_ff_create_memless(input, NULL, steam_play_effect);
 	}
 
 	ret = input_register_device(input);
@@ -753,6 +817,14 @@ static int steam_client_ll_raw_request(struct hid_device *hdev,
 {
 	struct steam_device *steam = hdev->driver_data;
 
+	if (buf[1] != STEAM_CMD_CLEAR_MAPPINGS ) {
+		pr_info("Steam cmd=%x count=%x\n", buf[1], count);
+		for (size_t i = 0; i < count; i++) {
+			pr_cont("%x,",buf[i]);
+			if ((i+1) % 8 == 0)
+				pr_cont("\n");
+		}
+	}
 	return hid_hw_raw_request(steam->hdev, reportnum, buf, count,
 			report_type, reqtype);
 }
@@ -838,6 +910,7 @@ static int steam_probe(struct hid_device *hdev,
 	mutex_init(&steam->mutex);
 	steam->quirks = id->driver_data;
 	INIT_WORK(&steam->work_connect, steam_work_connect_cb);
+	INIT_WORK(&steam->work_effect, steam_play_effect_cb);
 	INIT_LIST_HEAD(&steam->list);
 
 	steam->client_hdev = steam_create_client_hid(hdev);
@@ -894,6 +967,7 @@ static int steam_probe(struct hid_device *hdev,
 	hid_destroy_device(steam->client_hdev);
 client_hdev_fail:
 	cancel_work_sync(&steam->work_connect);
+	cancel_work_sync(&steam->work_effect);
 steam_alloc_fail:
 	hid_err(hdev, "%s: failed with error %d\n",
 			__func__, ret);
@@ -912,6 +986,7 @@ static void steam_remove(struct hid_device *hdev)
 	hid_destroy_device(steam->client_hdev);
 	steam->client_opened = false;
 	cancel_work_sync(&steam->work_connect);
+	cancel_work_sync(&steam->work_effect);
 	if (steam->quirks & STEAM_QUIRK_WIRELESS) {
 		hid_info(hdev, "Steam wireless receiver disconnected");
 	}
-- 
2.34.1


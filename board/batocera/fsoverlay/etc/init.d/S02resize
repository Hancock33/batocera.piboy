#!/bin/bash

BOOTCONF="/boot/batocera-boot.conf"

# only at start
test "$1" != "start" && exit 0
# only when resizing is wanted
grep -qE '^[ ]*autoresize[ ]*=[ ]*true[ ]*$' "${BOOTCONF}" || exit 0

# Spinner Animation
# Inspired from LibreELEC - https://libreelec.tv
function textoutput()
{
    local msg="$1"
    local cmd="$2"
    local pid count spinner
    $cmd &>/dev/null &
    pid=$!
    echo -e -n "${msg}\t" &>/dev/tty1
    spinner='|/-\'
    while kill -0 $pid 2>/dev/null; do
        echo -n "[${spinner:$count:1}]" &>/dev/tty1
        sleep 0.1
        echo -e -n "\b\b\b" &>/dev/tty1
        count=$(((count + 1) % 4))
    done
    echo "Done!" &>/dev/tty1
}

# Hide frame-buffer cursor // from LibreELEC - https://libreelec.tv
function hidecursor()
{
    echo -en "\033[?25l"
    if [ -f /sys/devices/virtual/graphics/fbcon/cursor_blink ] ; then
        echo 0 > /sys/devices/virtual/graphics/fbcon/cursor_blink
    fi
}

# --- BEGIN RESIZE ---
# /userdata partition
PART=$(batocera-part "share_internal")
# boot disk
DISK=$(batocera-part prefix "${PART}")

hidecursor

echo -e "\nPARTITION RESIZING IN PROGRESS\n" &>/dev/tty1
echo -e "Please do not reboot or turn off your device!\n\n" &>/dev/tty1

# fix any minor issues, such as gpt header not at end of disk
# textoutput "Message" "command call"
# remove the trigger
mount -o remount,rw /boot && sed -i -e s+'^[ ]*autoresize'+'#autoresize'+ "${BOOTCONF}" && mount -o remount,ro /boot
textoutput "Syncing disk data........." "sync"
textoutput "Checking disk table......." "sgdisk -e ${DISK}"
textoutput "Resizing partition........" "parted -s -m ${DISK} resizepart 2 100%"
textoutput "Checking /userdata........" "e2fsck -f -p ${PART}"
textoutput "Resizing /userdata........" "resize2fs ${PART}"
clear > /dev/tty1
exit 0

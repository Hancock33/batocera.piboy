#!/bin/bash

BOOTCONF="/boot/batocera-boot.conf"
log="/tmp/resize.log"

# only at start
test "$1" != "start" && exit 0

# true if triggers are not available or not set to do so
if ! grep -qE '^[ ]*autoresize[ ]*=[ ]*true[ ]*$' "${BOOTCONF}" && ! grep -qE '^[ ]*format-internal[ ]*=' "${BOOTCONF}"
then
    exit 0
fi

# UI Output with dialog, default colorset
function dialogoutput()
{
    local percent="$1"
    local text="Do not switch off your device!"

    dialog --backtitle "batocera.linux" --title " Resizing Partition " \
           --mixedgauge "$text" 18 50 "$percent" "${arr[@]}" &>/dev/tty1
}

# Executing parameters and watch background pid
# Changes text messages parsed to dialog --mixedgauge
function textoutput()
{
    local cmd="$3"
    local percent="$2"
    local pid ret
    $cmd >> /tmp/resize.log 2>&1 &
    ret=$?
    pid=$!
    arr[$1]=7 #msg: In Progress
    dialogoutput "$percent"
    wait $pid
    arr[$1]=$ret #msg: Depends from return value
}

# only when resizing is wanted
if grep -qE '^[ ]*autoresize[ ]*=[ ]*true[ ]*$' "${BOOTCONF}"
then
    # Preparing text arrays
    arr=(
    "Syncing disk data..........." "Pending"
    "Checking disk table........." "Pending"
    "Aligning partition.........." "Pending"
    "Resizing partition.........." "Pending"
    "Checking /userdata.........." "Pending"
    "Resizing /userdata.........." "Pending"
    "Informing the Kernel........" "Pending"
    "Syncing disk data..........." "Pending"
    )

    # --- BEGIN RESIZE ---
    # /userdata partition
    PART=$(batocera-part "share_internal")
    echo "Partition = $PART" >> $log
    # boot disk
    DISK=$(batocera-part prefix "${PART}")
    echo "Disk = $DISK" >> $log

    # only for ext4
    PARTTYPE=$(blkid "${PART}" | sed -e s+'^.* TYPE="\([^"]*\)\".*'+'\1'+)
    test "${PARTTYPE}" != "ext4" && exit 0

    # get the size of the disk in bytes
    # this may change if fdisk is updated
    disk_size_sector=$(fdisk -l $DISK | grep 'Disk /dev' | awk '{print $3}')
    echo "Disk Sector Size = $disk_size_sector" >> $log
    
    # get the sector size of the disk in bytes
    sector_size=$(fdisk -l $DISK | grep 'Logical sector size' | awk '{print $4}')
    
    # convert the disk size to bytes
    echo "Sector Size = $sector_size" >> $log
    disk_size=$((disk_size_sector * sector_size))
    echo "Disk Size in bytes = $disk_size" >> $log
    
    # calculate the size of the secondary GPT table
    # usually 16512 bytes or 33 x 512 bytes
    # we will double the size to be sure
    secondary_gpt_size=$((2 * 33 * sector_size))
    echo "GPT size = $secondary_gpt_size" >> $log
    
    # calculate the new size of the partition, taking into account the secondary GPT table
    new_partition_size=$((disk_size - secondary_gpt_size))
    echo "New partition end in bytes = $new_partition_size" >> $log
    
    # convert the new end sector to megabytes, rounding down to the nearest integer
    new_end_size=$((new_partition_size / 1000000))
    echo "New partition end in MB = $new_end_size" >> $log

    # remove the trigger
    mount -o remount,rw /boot && sed -i -e s+'^[ ]*autoresize'+'#autoresize'+ "${BOOTCONF}" && mount -o remount,ro /boot

    # textoutput "Message" "percentage" "command call" 
    for i in 1 3 5 7 9 11 13 15; do
    case $i in
        1) 
           # initial disk sync
           echo "Step $i: Sync" >> "$log"
           textoutput $i 10 "sync";;
        3) 
           # move backup GPT data structures to the end of the disk
           echo "Step $i: Moving 2nd GPT table to the end of the disk" >> "$log"
           textoutput $i 20 "sgdisk -e ${DISK}";;
        5) 
           # checking the alignment before resizing the partition
           echo "Step $i: Checking the partition alignment" >> "$log"
           textoutput $i 30 "parted -s -m ${DISK} align-check opt 2";;
        7) 
           # resize the partition
           echo "Step $i: Resizing the partition to $new_end_size MB" >> "$log"
           textoutput $i 40 "parted -s -m ${DISK} resizepart 2 ${new_end_size}";;
        9) 
           # check & resize the ext4 file system
           echo "Step $i: Checking file system" >> "$log"
           textoutput $i 60 "e2fsck -f -p ${PART}";;
        11) 
           echo "Step $i: Expanding the file system" >> "$log"
           textoutput $i 70 "resize2fs ${PART}";;
        13) 
           # update the kernel again
           echo "Step $i: Updating the kernel" >> "$log"
           textoutput $i 90 "partprobe ${DISK}";;
        15) 
           # final disk sync
           echo "Step $i: Final sync" >> "$log"
           textoutput $i 95 "sync";;
    esac
    done

else
    ###### format internal share #####
    FORMAT_INTERNAL_TYPE=$(grep -E '^[ ]*format-internal[ ]*=.*$' "${BOOTCONF}" | head -1 | sed -e s+"^[ ]*format-internal[ ]*=[ ]*\(.*\)[ ]*$"+"\1"+)
    if test -n "${FORMAT_INTERNAL_TYPE}"
    then
	# Preparing text arrays
	arr=("Formatting /userdata.........." "Pending")
	PART=$(batocera-part "share_internal")

	# remove the trigger
	mount -o remount,rw /boot && sed -i -e s+'^[ ]*format-internal'+'#format-internal'+ "${BOOTCONF}" && mount -o remount,ro /boot

	case "${FORMAT_INTERNAL_TYPE}" in
	    "btrfs")
		textoutput 1 10 "mkfs.btrfs -L SHARE -f ${PART}" # what to do in case of error ? nothing.
		;;
	    "ext4")
		textoutput 1 10 "mkfs.ext4 -L SHARE -q -F -F ${PART}" # what to do in case of error ? nothing.
		;;
	    "exfat")
		textoutput 1 10 "mkfs.exfat -n SHARE ${PART}" # what to do in case of error ? nothing.
		;;
	    *)
		# do nothing
	esac
    fi
fi

#Cleanup, restore screen, set progress of last item to 100%
dialogoutput 100
clear > /dev/tty1
exit 0

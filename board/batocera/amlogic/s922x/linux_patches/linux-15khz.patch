From 1f06b492ec601920af7f47de1849bf602524e6f8 Mon Sep 17 00:00:00 2001
From: Romain TISSERAND <romain.tisserand@gmail.com>
Date: Mon, 19 Feb 2024 10:05:56 -0400
Subject: [PATCH] linux 15khz

---
 drivers/gpu/drm/Makefile                 |   3 +-
 drivers/gpu/drm/drm_connector.c          |   6 +
 drivers/gpu/drm/drm_ioctl.c              |   4 +-
 drivers/gpu/drm/drm_modes.c              | 212 ++++++++++++++++++++++-
 drivers/gpu/drm/drm_modes_low_dotclock.c | 136 +++++++++++++++
 drivers/gpu/drm/drm_modes_low_dotclock.h |  23 +++
 drivers/gpu/drm/drm_probe_helper.c       |  44 ++++-
 drivers/gpu/drm/drm_vblank.c             |   8 +-
 include/drm/drm_connector.h              |  15 ++
 include/drm/drm_modes.h                  |   4 +
 10 files changed, 447 insertions(+), 8 deletions(-)
 create mode 100644 drivers/gpu/drm/drm_modes_low_dotclock.c
 create mode 100644 drivers/gpu/drm/drm_modes_low_dotclock.h

diff --git a/drivers/gpu/drm/Makefile b/drivers/gpu/drm/Makefile
index 8e1bde059..c4e6960d3 100644
--- a/drivers/gpu/drm/Makefile
+++ b/drivers/gpu/drm/Makefile
@@ -45,7 +45,8 @@ drm-y := \
 	drm_vblank.o \
 	drm_vblank_work.o \
 	drm_vma_manager.o \
-	drm_writeback.o
+	drm_writeback.o \
+	drm_modes_low_dotclock.o
 drm-$(CONFIG_DRM_LEGACY) += \
 	drm_agpsupport.o \
 	drm_bufs.o \
diff --git a/drivers/gpu/drm/drm_connector.c b/drivers/gpu/drm/drm_connector.c
index c3725086f..1682d1008 100644
--- a/drivers/gpu/drm/drm_connector.c
+++ b/drivers/gpu/drm/drm_connector.c
@@ -275,6 +275,7 @@ static int __drm_connector_init(struct drm_device *dev,

 	INIT_LIST_HEAD(&connector->global_connector_list_entry);
 	INIT_LIST_HEAD(&connector->probed_modes);
+	INIT_LIST_HEAD(&connector->user_modes);
 	INIT_LIST_HEAD(&connector->modes);
 	mutex_init(&connector->mutex);
 	mutex_init(&connector->edid_override_mutex);
@@ -559,6 +560,11 @@ void drm_connector_cleanup(struct drm_connector *connector)
 	list_for_each_entry_safe(mode, t, &connector->probed_modes, head)
 		drm_mode_remove(connector, mode);

+	DRM_DEBUG_KMS("[CONNECTOR:%d:%s] Cleaning up.\n",
+				      connector->base.id, connector->name);
+	list_for_each_entry_safe(mode, t, &connector->user_modes, head)
+		drm_mode_remove(connector, mode);
+
 	list_for_each_entry_safe(mode, t, &connector->modes, head)
 		drm_mode_remove(connector, mode);

diff --git a/drivers/gpu/drm/drm_ioctl.c b/drivers/gpu/drm/drm_ioctl.c
index 77590b0f3..2a5121c43 100644
--- a/drivers/gpu/drm/drm_ioctl.c
+++ b/drivers/gpu/drm/drm_ioctl.c
@@ -665,8 +665,8 @@ static const struct drm_ioctl_desc drm_ioctls[] = {
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_SETGAMMA, drm_mode_gamma_set_ioctl, DRM_MASTER),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_GETENCODER, drm_mode_getencoder, 0),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_GETCONNECTOR, drm_mode_getconnector, 0),
-	DRM_IOCTL_DEF(DRM_IOCTL_MODE_ATTACHMODE, drm_noop, DRM_MASTER),
-	DRM_IOCTL_DEF(DRM_IOCTL_MODE_DETACHMODE, drm_noop, DRM_MASTER),
+	DRM_IOCTL_DEF(DRM_IOCTL_MODE_ATTACHMODE, drm_mode_attachmode_ioctl, DRM_MASTER),
+	DRM_IOCTL_DEF(DRM_IOCTL_MODE_DETACHMODE, drm_mode_detachmode_ioctl, DRM_MASTER),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_GETPROPERTY, drm_mode_getproperty_ioctl, 0),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_SETPROPERTY, drm_connector_property_set_ioctl, DRM_MASTER),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_GETPROPBLOB, drm_mode_getblob_ioctl, 0),
diff --git a/drivers/gpu/drm/drm_modes.c b/drivers/gpu/drm/drm_modes.c
index ac9a40625..eef786b89 100644
--- a/drivers/gpu/drm/drm_modes.c
+++ b/drivers/gpu/drm/drm_modes.c
@@ -41,6 +41,7 @@
 #include <video/of_videomode.h>
 #include <video/videomode.h>

+#include <drm/drm_drv.h>
 #include <drm/drm_crtc.h>
 #include <drm/drm_device.h>
 #include <drm/drm_edid.h>
@@ -48,6 +49,7 @@
 #include <drm/drm_print.h>

 #include "drm_crtc_internal.h"
+#include "drm_modes_low_dotclock.h"

 /**
  * drm_mode_debug_printmodeline - print a mode to dmesg
@@ -593,6 +595,167 @@ struct drm_display_mode *drm_analog_tv_mode(struct drm_device *dev,
 }
 EXPORT_SYMBOL(drm_analog_tv_mode);

+/**
+ * drm_mode_attachmode - add a mode to the user mode list
+ * @dev: DRM device
+ * @connector: connector to add the mode to
+ * @mode: mode to add
+ *
+ * Add @mode to @connector's user mode list.
+ */
+void drm_mode_attachmode(struct drm_device *dev,
+				struct drm_connector *connector,
+				struct drm_display_mode *mode)
+{
+	WARN_ON(!mutex_is_locked(&connector->dev->mode_config.mutex));
+
+	list_add_tail(&mode->head, &connector->user_modes);
+	//drm_connector_list_update(connector);
+}
+EXPORT_SYMBOL(drm_mode_attachmode);
+
+int drm_mode_detachmode(struct drm_device *dev,
+			       struct drm_connector *connector,
+			       struct drm_display_mode *mode)
+{
+	int found = 0;
+	int ret = 0;
+	struct drm_display_mode *match_mode, *t;
+
+	list_for_each_entry_safe(match_mode, t, &connector->user_modes, head) {
+		if (drm_mode_equal(match_mode, mode)) {
+			list_del(&match_mode->head);
+			drm_mode_destroy(dev, match_mode);
+			found = 1;
+			break;
+		}
+	}
+
+	if (!found)
+		ret = -EINVAL;
+
+	return ret;
+}
+EXPORT_SYMBOL(drm_mode_detachmode);
+
+/**
+ * drm_mode_attachmode - Attach a user mode to a connector
+ * @dev: drm device for the ioctl
+ * @data: data pointer for the ioctl
+ * @file_priv: drm file for the ioctl call
+ *
+ * This attaches a user specified mode to an connector.
+ * Called by the user via ioctl.
+ *
+ * RETURNS:
+ * Zero on success, errno on failure.
+ */
+int drm_mode_attachmode_ioctl(struct drm_device *dev, void *data,
+			      struct drm_file *file_priv)
+{
+	struct drm_mode_mode_cmd *mode_cmd = data;
+	struct drm_connector *connector;
+	struct drm_display_mode *mode;
+	struct drm_mode_object *obj;
+	struct drm_mode_modeinfo *umode = &mode_cmd->mode;
+	enum drm_mode_status mode_status;
+	int ret;
+
+	DRM_DEBUG_KMS("Will drm_core_check_feature for connector %u\n", mode_cmd->connector_id);
+	if (!drm_core_check_feature(dev, DRIVER_MODESET))
+		return -EINVAL;
+
+	drm_modeset_lock_all(dev);
+
+	DRM_DEBUG_KMS("Modeline \"%s\": %d %d %d %d %d %d %d %d %d %d 0x%x 0x%x\n", umode->name, DIV_ROUND_CLOSEST(umode->clock * 1000, umode->htotal * umode->vtotal), umode->clock, \
+	umode->hdisplay, umode->hsync_start, umode->hsync_end, umode->htotal, \
+	umode->vdisplay, umode->vsync_start, umode->vsync_end, umode->vtotal, \
+	umode->type, umode->flags);
+
+	DRM_DEBUG_KMS("Will drm_mode_object_find for connector %u\n", mode_cmd->connector_id);
+	obj = drm_mode_object_find(dev, file_priv, mode_cmd->connector_id, DRM_MODE_OBJECT_CONNECTOR);
+	if (!obj) {
+		DRM_DEBUG_KMS("drm_mode_object_find failed\n");
+		ret = -EINVAL;
+		goto out;
+	}
+	connector = obj_to_connector(obj);
+
+	mode = drm_mode_create(dev);
+	if (!mode) {
+		DRM_DEBUG_KMS("drm_mode_create failed\n");
+		ret = -ENOMEM;
+		goto out;
+	}
+
+	DRM_DEBUG_KMS("Will drm_mode_convert_umode for connector %u\n", mode_cmd->connector_id);
+	ret = drm_mode_convert_umode(dev, mode, umode);
+	if (ret) {
+		DRM_DEBUG_KMS("Invalid mode\n");
+		drm_mode_destroy(dev, mode);
+		goto out;
+	}
+	mode_status = drm_mode_validate_driver(dev, mode);
+	if (mode_status != MODE_OK) {
+		DRM_DEBUG_KMS("Mode failed drm_mode_validate_driver\n");
+		drm_mode_destroy(dev, mode);
+		goto out;
+	}
+	drm_mode_attachmode(dev, connector, mode);
+out:
+	drm_modeset_unlock_all(dev);
+	return ret;
+}
+EXPORT_SYMBOL(drm_mode_attachmode_ioctl);
+
+/**
+ * drm_mode_detachmode - Detach a user specified mode from a connector
+ * @dev: drm device for the ioctl
+ * @data: data pointer for the ioctl
+ * @file_priv: drm file for the ioctl call
+ *
+ * Called by the user via ioctl.
+ *
+ * RETURNS:
+ * Zero on success, errno on failure.
+ */
+int drm_mode_detachmode_ioctl(struct drm_device *dev,
+			      void *data, struct drm_file *file_priv)
+{
+	struct drm_mode_object *obj;
+	struct drm_mode_mode_cmd *mode_cmd = data;
+	struct drm_connector *connector;
+	struct drm_display_mode mode;
+	struct drm_mode_modeinfo *umode = &mode_cmd->mode;
+	int ret;
+	DRM_DEBUG_KMS("Got connector id %d\n", mode_cmd->connector_id);
+	DRM_DEBUG_KMS("Checking core features\n");
+	if (!drm_core_check_feature(dev, DRIVER_MODESET))
+		return -EINVAL;
+
+	drm_modeset_lock_all(dev);
+
+	DRM_DEBUG_KMS("Finding drm mode object\n");
+	obj = drm_mode_object_find(dev, file_priv, mode_cmd->connector_id, DRM_MODE_OBJECT_CONNECTOR);
+	if (!obj) {
+		ret = -EINVAL;
+		goto out;
+	}
+	connector = obj_to_connector(obj);
+
+	ret = drm_mode_convert_umode(dev, &mode, umode);
+	if (ret) {
+		DRM_DEBUG_KMS("Invalid mode\n");
+		goto out;
+	}
+
+	ret = drm_mode_detachmode(dev, connector, &mode);
+out:
+	drm_modeset_unlock_all(dev);
+	return ret;
+}
+EXPORT_SYMBOL(drm_mode_detachmode_ioctl);
+
 /**
  * drm_cvt_mode -create a modeline based on the CVT algorithm
  * @dev: drm device
@@ -1884,7 +2047,7 @@ EXPORT_SYMBOL(drm_mode_sort);
  */
 void drm_connector_list_update(struct drm_connector *connector)
 {
-	struct drm_display_mode *pmode, *pt;
+	struct drm_display_mode *pmode, *umode, *pt;

 	WARN_ON(!mutex_is_locked(&connector->dev->mode_config.mutex));

@@ -1930,6 +2093,40 @@ void drm_connector_list_update(struct drm_connector *connector)
 			list_move_tail(&pmode->head, &connector->modes);
 		}
 	}
+
+	list_for_each_entry_safe(umode, pt, &connector->user_modes, head) {
+		struct drm_display_mode *mode;
+		bool found_it = false;
+
+		/* go through current modes checking for the new probed mode */
+		list_for_each_entry(mode, &connector->modes, head) {
+			DRM_DEBUG("Checking umode %s VS mode %s\n", umode->name, mode->name);
+			if (!drm_mode_equal(umode, mode))
+				continue;
+
+			found_it = true;
+			break;
+		}
+
+		if (!found_it) {
+			struct drm_display_mode *mode_to_add;
+			DRM_DEBUG("Adding mode \"%s\" to connector user_mode list\n", umode->name);
+			/*
+			 * Here we duplicate the mode and add it to the modes list
+			 * instead of moving the mode from connector->user_modes
+			 * to connector->mode, thus losing it for good from the
+			 * user_modes list, which is not hwat we want
+			 */
+			mode_to_add = drm_mode_duplicate(connector->dev, umode);
+			list_add_tail(&mode_to_add->head, &connector->modes);
+		}
+	}
+	list_for_each_entry(pmode, &connector->user_modes, head) {
+		DRM_DEBUG("Connector %s user_mode: %s", connector->name, pmode->name);
+	}
+	list_for_each_entry(pmode, &connector->modes, head) {
+		DRM_DEBUG("Connector %s mode: %s", connector->name, pmode->name);
+	}
 }
 EXPORT_SYMBOL(drm_connector_list_update);

@@ -2028,7 +2225,7 @@ static int drm_mode_parse_cmdline_res_mode(const char *str, unsigned int length,
 					   struct drm_cmdline_mode *mode)
 {
 	const char *str_start = str;
-	bool rb = false, cvt = false;
+	bool rb = false, cvt = false, low_dotclock = false;
 	int xres = 0, yres = 0;
 	int remaining, i;
 	char *end_ptr;
@@ -2058,6 +2255,12 @@ static int drm_mode_parse_cmdline_res_mode(const char *str, unsigned int length,
 		case 'R':
 			rb = true;
 			break;
+		case 'S':
+		case 'c':
+		case 'z':
+			low_dotclock = true;
+			DRM_DEBUG_KMS("Found one of the S/c/z low dotclock mode flag");
+			break;
 		default:
 			/*
 			 * Try to pass that to our extras parsing
@@ -2082,6 +2285,7 @@ static int drm_mode_parse_cmdline_res_mode(const char *str, unsigned int length,
 	mode->yres = yres;
 	mode->cvt = cvt;
 	mode->rb = rb;
+	mode->low_dotclock = low_dotclock;

 	return 0;
 }
@@ -2545,6 +2749,10 @@ drm_mode_create_from_cmdline_mode(struct drm_device *dev,

 	if (strlen(cmd->name))
 		mode = drm_named_mode(dev, cmd);
+	else if (cmd->low_dotclock)
+		mode = drm_mode_low_dotclock_res(dev,
+				    cmd->xres, cmd->yres,
+				    cmd->interlace);
 	else if (cmd->cvt)
 		mode = drm_cvt_mode(dev,
 				    cmd->xres, cmd->yres,
diff --git a/drivers/gpu/drm/drm_modes_low_dotclock.c b/drivers/gpu/drm/drm_modes_low_dotclock.c
new file mode 100644
index 000000000..3792e6771
--- /dev/null
+++ b/drivers/gpu/drm/drm_modes_low_dotclock.c
@@ -0,0 +1,136 @@
+/*
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include <drm/drm_modes.h>
+#include <drm/drm_print.h>
+
+
+/**
+ * Low dotclock static modelines
+ * 2 duplicate modes that vary with H freq : 320x240 and 1024x768
+ */
+static struct drm_display_mode drm_low_dotclock_modes[] = {
+	/* 320x240@60.00 15.660 kHz */
+	{ DRM_MODE("320x240", DRM_MODE_TYPE_DRIVER, 6640, 320, 336,
+			368, 424, 0, 240, 242, 245, 261, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC) },
+	/* 384x288@60.00 15 kHz */
+	{ DRM_MODE("384x288", DRM_MODE_TYPE_DRIVER, 7887, 384, 400,
+			440, 504, 0, 288, 292, 295, 313, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC) },
+	/* 640x240@60.00 15 kHz */
+	{ DRM_MODE("640x240", DRM_MODE_TYPE_DRIVER, 13220, 640, 672,
+			736, 832, 0, 240, 243, 246, 265, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC) },
+	/* 640x480@60.00 15.750 kHz */
+	{ DRM_MODE("640x480i", DRM_MODE_TYPE_DRIVER, 13104, 640, 664,
+			728, 832, 0, 480, 484, 490, 525, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC |
+                       DRM_MODE_FLAG_INTERLACE) },
+	/* 648x480@60.00 13.129 kHz */
+	{ DRM_MODE("648x480i", DRM_MODE_TYPE_DRIVER, 13129, 648, 672,
+			736, 840, 0, 480, 482, 488, 521, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC |
+                       DRM_MODE_FLAG_INTERLACE) },
+	/* 720x480@59.95 15.7369 kHz */
+	{ DRM_MODE("720x480i", DRM_MODE_TYPE_DRIVER, 14856, 720, 752,
+			824, 944, 0, 480, 484, 490, 525, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC |
+			DRM_MODE_FLAG_INTERLACE) },
+	/* 768x576 15.6250 kHz */
+	{ DRM_MODE("768x576i", DRM_MODE_TYPE_DRIVER, 15625, 768, 800,
+			872, 1000, 0, 576, 582, 588, 625, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC |
+			DRM_MODE_FLAG_INTERLACE) },
+	/* 800x576@50.00 15.725 kHz */
+	{ DRM_MODE("800x576i", DRM_MODE_TYPE_DRIVER, 16354, 800, 832,
+			912, 1040, 0, 576, 584, 590, 629, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC |
+			DRM_MODE_FLAG_INTERLACE) },
+	/* 1280x480@60.00 15.690 kHz - 25MHz dotclock for i915nouveau*/
+	{ DRM_MODE("1280x480i", DRM_MODE_TYPE_DRIVER, 25983, 1280, 1328,
+			1448, 1656, 0, 480, 483, 489, 523, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC |
+			DRM_MODE_FLAG_INTERLACE) },
+	/* 512x384@58.59 24.960 kHz */
+	{ DRM_MODE("512x384", DRM_MODE_TYPE_DRIVER, 16972, 512, 560,
+			608, 680, 0, 384, 395, 399, 426, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC) },
+	/* 800x600@60.00 24.990 kHz */
+	{ DRM_MODE("800x600i", DRM_MODE_TYPE_DRIVER, 26989, 800, 880,
+			960, 1080, 0, 600, 697, 705, 833, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC |
+			DRM_MODE_FLAG_INTERLACE) },
+	/* 1024x768@50.00 24.975 kHz */
+	{ DRM_MODE("1024x768i", DRM_MODE_TYPE_DRIVER, 34165, 1024, 1120,
+			1216, 1368, 0, 768, 864, 872, 999, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC |
+			DRM_MODE_FLAG_INTERLACE) },
+	/* 1280x240@60.00 24.900 kHz */
+	{ DRM_MODE("1280x240", DRM_MODE_TYPE_DRIVER, 39790, 1280, 1312,
+			1471, 1598, 0, 240, 314, 319, 415, 0,
+			DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC) },
+	/* 640x480@60.00 31 kHz */
+	{ DRM_MODE("1280x240", DRM_MODE_TYPE_DRIVER, 25200, 640, 656,
+	 752, 800, 0, 480, 489, 492, 525, 0,
+	 DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC) }
+};
+
+/**
+ * drm_display_mode - get a fixed modeline
+ * @dev: drm device
+ * @hdisplay: hdisplay size
+ * @vdisplay: vdisplay size
+ * @interlaced: whether to compute an interlaced mode
+ *
+ * This function returns a modeline among predefined low dotclock modes. These are fixed
+ * modelines, until automatic mode generation gets added into kernel.
+ * No need to specify 15 or 25kHz, not the vertical refresh rate as it's only 60Hz for now.
+ * This is a very basic function. Duplicate modes (320x240 and 1024x768) are not
+ * handled, the first result will be returned.
+ *
+ * Returns:
+ * A low dotclock drm modeline
+ */
+struct drm_display_mode *drm_mode_low_dotclock_res(struct drm_device *dev,
+				int hsize, int vsize, bool interlace)
+{
+	int i;
+
+	DRM_DEBUG_KMS("Entering drm_mode_low_dotclock_res for resolution %dx%d (interlace: %s)", hsize, vsize, interlace ? "true" : "false");
+	for (i = 0; i < ARRAY_SIZE(drm_low_dotclock_modes); i++) {
+		const struct drm_display_mode *ptr = &drm_low_dotclock_modes[i];
+		if (hsize != ptr->hdisplay)
+			continue;
+		if (vsize != ptr->vdisplay)
+			continue;
+		//if ((refresh != 0) && (refresh != drm_mode_vrefresh(ptr)))
+		//	continue;
+		if (((! interlace) && (ptr->flags & DRM_MODE_FLAG_INTERLACE)) \
+		    || ((interlace) && ! (ptr->flags & DRM_MODE_FLAG_INTERLACE)))
+			continue;
+		DRM_DEBUG_KMS("Found a low dotclock mode for %dx%d (interlace: %d)", hsize, vsize, interlace);
+		drm_mode_debug_printmodeline(ptr);
+		return drm_mode_duplicate(dev, ptr);
+	}
+	return NULL;
+}
+EXPORT_SYMBOL(drm_mode_low_dotclock_res);
\ No newline at end of file
diff --git a/drivers/gpu/drm/drm_modes_low_dotclock.h b/drivers/gpu/drm/drm_modes_low_dotclock.h
new file mode 100644
index 000000000..375d9862a
--- /dev/null
+++ b/drivers/gpu/drm/drm_modes_low_dotclock.h
@@ -0,0 +1,23 @@
+/*
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+struct drm_display_mode *drm_mode_low_dotclock_res(struct drm_device *dev,
+				int hsize, int vsize, bool interlace);
\ No newline at end of file
diff --git a/drivers/gpu/drm/drm_probe_helper.c b/drivers/gpu/drm/drm_probe_helper.c
index 3f479483d..4b193bb94 100644
--- a/drivers/gpu/drm/drm_probe_helper.c
+++ b/drivers/gpu/drm/drm_probe_helper.c
@@ -371,6 +371,23 @@ drm_helper_probe_detect_ctx(struct drm_connector *connector, bool force)
 	return ret;
 }

+void drm_mode_validate_user_mode(struct drm_device *dev,
+				 struct drm_connector *connector,
+				 struct drm_display_mode *mode)
+{
+	struct drm_display_mode *match_mode;
+
+	DRM_DEBUG_KMS("Starting debug %s for mode %s\n", connector->name, mode->name);
+	list_for_each_entry(match_mode, &connector->user_modes, head) {
+		DRM_DEBUG_KMS("Testing mode %s vs %s\n", mode->name, match_mode->name);
+		if (drm_mode_equal(match_mode, mode)) {
+			DRM_DEBUG_KMS("Modes match!\n");
+			mode->status = MODE_OK;
+			break;
+		}
+	}
+}
+
 /**
  * drm_helper_probe_detect - probe connector status
  * @connector: connector to probe
@@ -448,21 +465,26 @@ static int __drm_helper_update_and_validate(struct drm_connector *connector,
 		mode_flags |= DRM_MODE_FLAG_3D_MASK;

 	list_for_each_entry(mode, &connector->modes, head) {
+		DRM_DEBUG_KMS("[CONNECTOR:%d:%s] starting with mode state : %d\n", connector->base.id, connector->name, mode->status);
 		if (mode->status != MODE_OK)
 			continue;

+		DRM_DEBUG_KMS("[CONNECTOR:%d:%s] before drm_mode_validate_driver mode is : %d\n", connector->base.id, connector->name, mode->status);
 		mode->status = drm_mode_validate_driver(dev, mode);
 		if (mode->status != MODE_OK)
 			continue;

+		DRM_DEBUG_KMS("[CONNECTOR:%d:%s] before drm_mode_validate_size mode is : %d\n", connector->base.id, connector->name, mode->status);
 		mode->status = drm_mode_validate_size(mode, maxX, maxY);
 		if (mode->status != MODE_OK)
 			continue;

+		DRM_DEBUG_KMS("[CONNECTOR:%d:%s] before drm_mode_validate_flag mode is : %d\n", connector->base.id, connector->name, mode->status);
 		mode->status = drm_mode_validate_flag(mode, mode_flags);
 		if (mode->status != MODE_OK)
 			continue;

+		DRM_DEBUG_KMS("[CONNECTOR:%d:%s] before drm_mode_validate_pipeline mode is : %d\n", connector->base.id, connector->name, mode->status);
 		ret = drm_mode_validate_pipeline(mode, connector, ctx,
 						 &mode->status);
 		if (ret) {
@@ -476,9 +498,11 @@ static int __drm_helper_update_and_validate(struct drm_connector *connector,
 				return -EDEADLK;
 		}

+		DRM_DEBUG_KMS("[CONNECTOR:%d:%s] before drm_mode_validate_ycbcr420 mode is : %d\n", connector->base.id, connector->name, mode->status);
 		if (mode->status != MODE_OK)
 			continue;
 		mode->status = drm_mode_validate_ycbcr420(mode, connector);
+		DRM_DEBUG_KMS("[CONNECTOR:%d:%s] in the end mode is : %d\n", connector->base.id, connector->name, mode->status);
 	}

 	return 0;
@@ -548,6 +572,7 @@ int drm_helper_probe_single_connector_modes(struct drm_connector *connector,
 {
 	struct drm_device *dev = connector->dev;
 	struct drm_display_mode *mode;
+	struct drm_cmdline_mode *cmdline_mode;
 	int count = 0, ret;
 	enum drm_connector_status old_status;
 	struct drm_modeset_acquire_ctx ctx;
@@ -556,6 +581,8 @@ int drm_helper_probe_single_connector_modes(struct drm_connector *connector,

 	drm_modeset_acquire_init(&ctx, 0);

+	DRM_DEBUG_KMS("[CONNECTOR:%d:%s] called by %ps\n", connector->base.id,
+			connector->name, __builtin_return_address(0));
 	DRM_DEBUG_KMS("[CONNECTOR:%d:%s]\n", connector->base.id,
 			connector->name);

@@ -573,6 +600,10 @@ int drm_helper_probe_single_connector_modes(struct drm_connector *connector,

 	old_status = connector->status;

+	list_for_each_entry(mode, &connector->modes, head) {
+		drm_mode_validate_user_mode(dev, connector, mode);
+	}
+
 	if (connector->force) {
 		if (connector->force == DRM_FORCE_ON ||
 		    connector->force == DRM_FORCE_ON_DIGITAL)
@@ -630,10 +661,13 @@ int drm_helper_probe_single_connector_modes(struct drm_connector *connector,
 		goto exit;
 	}

+	cmdline_mode = &connector->cmdline_mode;
+
 	count = drm_helper_probe_get_modes(connector);

 	if (count == 0 && (connector->status == connector_status_connected ||
-			   connector->status == connector_status_unknown)) {
+			   connector->status == connector_status_unknown) &&
+			   ! cmdline_mode->low_dotclock) {
 		count = drm_add_modes_noedid(connector, 1024, 768);

 		/*
@@ -682,7 +716,13 @@ int drm_helper_probe_single_connector_modes(struct drm_connector *connector,

 	drm_mode_sort(&connector->modes);

-	DRM_DEBUG_KMS("[CONNECTOR:%d:%s] probed modes :\n", connector->base.id,
+	DRM_DEBUG_KMS("[CONNECTOR:%d:%s] final user_modes :\n", connector->base.id,
+			connector->name);
+	list_for_each_entry(mode, &connector->user_modes, head) {
+		drm_mode_set_crtcinfo(mode, CRTC_INTERLACE_HALVE_V);
+		drm_mode_debug_printmodeline(mode);
+	}
+	DRM_DEBUG_KMS("[CONNECTOR:%d:%s] final modes :\n", connector->base.id,
 			connector->name);
 	list_for_each_entry(mode, &connector->modes, head) {
 		drm_mode_set_crtcinfo(mode, CRTC_INTERLACE_HALVE_V);
diff --git a/drivers/gpu/drm/drm_vblank.c b/drivers/gpu/drm/drm_vblank.c
index 877e20675..5557a706a 100644
--- a/drivers/gpu/drm/drm_vblank.c
+++ b/drivers/gpu/drm/drm_vblank.c
@@ -285,6 +285,7 @@ static void drm_update_vblank_count(struct drm_device *dev, unsigned int pipe,
 	int count = DRM_TIMESTAMP_MAXRETRIES;
 	int framedur_ns = vblank->framedur_ns;
 	u32 max_vblank_count = drm_max_vblank_count(dev, pipe);
+	struct drm_crtc *crtc = drm_crtc_from_index(dev, pipe);

 	/*
 	 * Interrupts were disabled prior to this call, so deal with counter
@@ -303,12 +304,17 @@ static void drm_update_vblank_count(struct drm_device *dev, unsigned int pipe,
 		rc = drm_get_last_vbltimestamp(dev, pipe, &t_vblank, in_vblank_irq);
 	} while (cur_vblank != __get_vblank_counter(dev, pipe) && --count > 0);

-	if (max_vblank_count) {
+	/* We can't use the hw counter for interlace modes */
+	if (max_vblank_count && !(crtc->hwmode.flags & DRM_MODE_FLAG_INTERLACE)) {
 		/* trust the hw counter when it's around */
 		diff = (cur_vblank - vblank->last) & max_vblank_count;
 	} else if (rc && framedur_ns) {
 		u64 diff_ns = ktime_to_ns(ktime_sub(t_vblank, vblank->time));

+		/* Make sure we don't have a negative diff, if so discard it */
+		if (t_vblank < vblank->time)
+			return;
+
 		/*
 		 * Figure out how many vblanks we've missed based
 		 * on the difference in the timestamps and the
diff --git a/include/drm/drm_connector.h b/include/drm/drm_connector.h
index fe88d7fc6..0337f764c 100644
--- a/include/drm/drm_connector.h
+++ b/include/drm/drm_connector.h
@@ -1480,6 +1480,13 @@ struct drm_cmdline_mode {
 	 */
 	struct drm_connector_tv_margins tv_margins;

+	/**
+	 * @low_dotclock:
+	 *
+	 * Flag is enabled if a valid low dotclock resolution is defined.
+	 */
+	bool low_dotclock;
+
 	/**
 	 * @tv_mode: TV mode standard. See DRM_MODE_TV_MODE_*.
 	 */
@@ -1620,6 +1627,14 @@ struct drm_connector {
 	 */
 	struct list_head probed_modes;

+	/**
+	 * @user_modes:
+	 * These are modes added by probing with DDC or the BIOS, before
+	 * filtering is applied. Used by the probe helpers. Protected by
+	 * &drm_mode_config.mutex.
+	 */
+	struct list_head user_modes;
+
 	/**
 	 * @display_info: Display information is filled from EDID information
 	 * when a display is detected. For non hot-pluggable displays such as
diff --git a/include/drm/drm_modes.h b/include/drm/drm_modes.h
index c613f0abe..13f2470b8 100644
--- a/include/drm/drm_modes.h
+++ b/include/drm/drm_modes.h
@@ -460,6 +460,10 @@ int drm_mode_convert_umode(struct drm_device *dev,
 			   struct drm_display_mode *out,
 			   const struct drm_mode_modeinfo *in);
 void drm_mode_probed_add(struct drm_connector *connector, struct drm_display_mode *mode);
+int drm_mode_attachmode_ioctl(struct drm_device *dev,
+			      void *data, struct drm_file *file_priv);
+int drm_mode_detachmode_ioctl(struct drm_device *dev,
+			      void *data, struct drm_file *file_priv);
 void drm_mode_debug_printmodeline(const struct drm_display_mode *mode);
 bool drm_mode_is_420_only(const struct drm_display_info *display,
 			  const struct drm_display_mode *mode);
--
2.43.2


--- a/xbmc/utils/EGLUtils.cpp
+++ b/xbmc/utils/EGLUtils.cpp
@@ -295,20 +295,16 @@
   int guiAlgorithmDirtyRegions = CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_guiAlgorithmDirtyRegions;
   if (guiAlgorithmDirtyRegions == DIRTYREGION_SOLVER_COST_REDUCTION ||
       guiAlgorithmDirtyRegions == DIRTYREGION_SOLVER_UNION)
     surfaceType |= EGL_SWAP_BEHAVIOR_PRESERVED_BIT;
 
   CEGLAttributesVec attribs;
-  attribs.Add({{EGL_RED_SIZE, 8},
-               {EGL_GREEN_SIZE, 8},
-               {EGL_BLUE_SIZE, 8},
-               {EGL_ALPHA_SIZE, 2},
+  attribs.Add({{EGL_RED_SIZE, 3},
+               {EGL_GREEN_SIZE, 3},
+               {EGL_BLUE_SIZE, 2},
                {EGL_DEPTH_SIZE, 16},
-               {EGL_STENCIL_SIZE, 0},
-               {EGL_SAMPLE_BUFFERS, 0},
-               {EGL_SAMPLES, 0},
                {EGL_SURFACE_TYPE, surfaceType},
                {EGL_RENDERABLE_TYPE, renderableType}});
 
   EGLConfig* currentConfig(hdr ? &m_eglHDRConfig : &m_eglConfig);
 
   if (hdr)
--- a/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp
@@ -33,15 +33,15 @@
     return false;
   }
 
   auto plane = m_DRM->GetGuiPlane();
   uint32_t visualId = plane != nullptr ? plane->GetFormat() : DRM_FORMAT_XRGB2101010;
 
-  // prefer alpha visual id, fallback to non-alpha visual id
-  if (!m_eglContext.ChooseConfig(renderableType, CDRMUtils::FourCCWithAlpha(visualId)) &&
-      !m_eglContext.ChooseConfig(renderableType, CDRMUtils::FourCCWithoutAlpha(visualId)))
+  // prefer non-alpha visual id for vim4
+  if (!m_eglContext.ChooseConfig(renderableType, CDRMUtils::FourCCWithoutAlpha(visualId)) &&
+      !m_eglContext.ChooseConfig(renderableType, CDRMUtils::FourCCWithAlpha(visualId)))
   {
     // fallback to 8bit format if no EGL config was found for 10bit
     if (plane)
       plane->SetFormat(DRM_FORMAT_XRGB8888);
 
     visualId = plane != nullptr ? plane->GetFormat() : DRM_FORMAT_XRGB8888;
--- a/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
@@ -35,13 +35,13 @@
 
 using namespace KODI::WINDOWING::GBM;
 
 using namespace std::chrono_literals;
 
 CWinSystemGbmGLESContext::CWinSystemGbmGLESContext()
-: CWinSystemGbmEGLContext(EGL_PLATFORM_GBM_MESA, "EGL_MESA_platform_gbm")
+: CWinSystemGbmEGLContext(EGL_PLATFORM_GBM_KHR, "EGL_KHR_platform_gbm")
 {}
 
 void CWinSystemGbmGLESContext::Register()
 {
   CWindowSystemFactory::RegisterWindowSystem(CreateWinSystem, "gbm");
 }

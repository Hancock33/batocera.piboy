From a7d448af32422344c484d52ed41dfb4a8f5c0962 Mon Sep 17 00:00:00 2001
From: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date: Sun, 3 May 2020 21:40:27 +0200
Subject: [PATCH 085/122] phy: amlogic: meson8b-usb2: USB OTG GPIO - WiP

WiP

Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
---
 drivers/phy/amlogic/phy-meson8b-usb2.c | 43 +++++++++++++++++++++++++-
 1 file changed, 42 insertions(+), 1 deletion(-)

diff --git a/drivers/phy/amlogic/phy-meson8b-usb2.c b/drivers/phy/amlogic/phy-meson8b-usb2.c
index cf10bed40528..40c9eed079eb 100644
--- a/drivers/phy/amlogic/phy-meson8b-usb2.c
+++ b/drivers/phy/amlogic/phy-meson8b-usb2.c
@@ -7,6 +7,7 @@
 
 #include <linux/clk.h>
 #include <linux/delay.h>
+#include <linux/gpio/driver.h>
 #include <linux/io.h>
 #include <linux/module.h>
 #include <linux/of_device.h>
@@ -127,6 +128,7 @@ struct phy_meson8b_usb2_priv {
 	struct clk					*clk_usb_general;
 	struct clk					*clk_usb;
 	struct reset_control				*reset;
+	struct gpio_chip				gpiochip;
 	const struct phy_meson8b_usb2_match_data	*match;
 };
 
@@ -232,12 +234,47 @@ static const struct phy_ops phy_meson8b_usb2_ops = {
 	.owner		= THIS_MODULE,
 };
 
+static int phy_meson8b_usb2_id_gpio_get_direction(struct gpio_chip *gc,
+						  unsigned int offset)
+{
+	return GPIO_LINE_DIRECTION_IN;
+}
+
+static int phy_meson8b_usb2_id_gpio_get_value(struct gpio_chip *gc,
+					      unsigned int offset)
+{
+	struct phy_meson8b_usb2_priv *priv = gpiochip_get_data(gc);
+	unsigned int val;
+
+	regmap_read(priv->regmap, REG_ADP_BC, &val);
+
+	return (val & REG_ADP_BC_ID_DIG) ? 1 : 0;
+}
+
+static int phy_meson8b_usb2_id_gpiochip_add(struct device *dev,
+					    struct phy_meson8b_usb2_priv *priv)
+{
+	if (!device_property_read_bool(dev, "gpio-controller"))
+		return 0;
+
+	priv->gpiochip.label = dev_name(dev);
+	priv->gpiochip.parent = dev;
+	priv->gpiochip.get_direction = phy_meson8b_usb2_id_gpio_get_direction;
+	priv->gpiochip.get = phy_meson8b_usb2_id_gpio_get_value;
+	priv->gpiochip.of_gpio_n_cells = 2;
+	priv->gpiochip.base = -1;
+	priv->gpiochip.ngpio = 1;
+
+	return devm_gpiochip_add_data(dev, &priv->gpiochip, priv);
+}
+
 static int phy_meson8b_usb2_probe(struct platform_device *pdev)
 {
 	struct phy_meson8b_usb2_priv *priv;
-	struct phy *phy;
 	struct phy_provider *phy_provider;
 	void __iomem *base;
+	struct phy *phy;
+	int ret;
 
 	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
 	if (!priv)
@@ -275,6 +312,10 @@ static int phy_meson8b_usb2_probe(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
+	ret = phy_meson8b_usb2_id_gpiochip_add(&pdev->dev, priv);
+	if (ret)
+		return ret;
+
 	phy = devm_phy_create(&pdev->dev, NULL, &phy_meson8b_usb2_ops);
 	if (IS_ERR(phy)) {
 		return dev_err_probe(&pdev->dev, PTR_ERR(phy),
-- 
2.25.1


From 3fada005119eef7614d993f02b888b86192a6c60 Mon Sep 17 00:00:00 2001
From: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date: Wed, 20 Oct 2021 22:06:47 +0200
Subject: [PATCH 122/122] mmc: meson-gx: Switch register access to an MMIO
 based regmap

Commit 8a38a4d51c5055 ("mmc: meson-gx: do not use memcpy_to/fromio for
dram-access-quirk") fixes an issue when the registers are read or
written with accessors that aren't 32-bit wide. According to a comment
from the vendor driver states that only 32-bit ABP (bus) access is
supported.

Switch the driver over to an MMIO based regmap to ensure that every
access is always 32-bit wide. This also simplifies the code in some
areas as regmap has the regmap_update_bits helper.

Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
---
 drivers/mmc/host/Kconfig        |   1 +
 drivers/mmc/host/meson-gx-mmc.c | 193 +++++++++++++++-----------------
 2 files changed, 89 insertions(+), 105 deletions(-)

diff --git a/drivers/mmc/host/Kconfig b/drivers/mmc/host/Kconfig
index ccc148cdb5ee..24cb527314f6 100644
--- a/drivers/mmc/host/Kconfig
+++ b/drivers/mmc/host/Kconfig
@@ -429,6 +429,7 @@ config MMC_MESON_GX
 	tristate "Amlogic S905/GX*/AXG SD/MMC Host Controller support"
 	depends on ARCH_MESON|| COMPILE_TEST
 	depends on COMMON_CLK
+	select REGMAP_MMIO
 	help
 	  This selects support for the Amlogic SD/MMC Host Controller
 	  found on the S905/GX*/AXG family of SoCs.  This controller is
diff --git a/drivers/mmc/host/meson-gx-mmc.c b/drivers/mmc/host/meson-gx-mmc.c
index 8f36536cb1b6..d0948ba926b2 100644
--- a/drivers/mmc/host/meson-gx-mmc.c
+++ b/drivers/mmc/host/meson-gx-mmc.c
@@ -22,6 +22,7 @@
 #include <linux/io.h>
 #include <linux/clk.h>
 #include <linux/clk-provider.h>
+#include <linux/regmap.h>
 #include <linux/regulator/consumer.h>
 #include <linux/reset.h>
 #include <linux/interrupt.h>
@@ -151,7 +152,8 @@ struct meson_host {
 	struct	mmc_host	*mmc;
 	struct	mmc_command	*cmd;
 
-	void __iomem *regs;
+	struct regmap *regmap;
+
 	struct clk *core_clk;
 	struct clk *mux_clk;
 	struct clk *mmc_clk;
@@ -165,7 +167,6 @@ struct meson_host {
 
 	unsigned int bounce_buf_size;
 	void *bounce_buf;
-	void __iomem *bounce_iomem_buf;
 	dma_addr_t bounce_dma_addr;
 	struct sd_emmc_desc *descs;
 	dma_addr_t descs_dma_addr;
@@ -318,8 +319,6 @@ static void meson_mmc_post_req(struct mmc_host *mmc, struct mmc_request *mrq,
  */
 static void meson_mmc_clk_gate(struct meson_host *host)
 {
-	u32 cfg;
-
 	if (host->pins_clk_gate) {
 		pinctrl_select_state(host->pinctrl, host->pins_clk_gate);
 	} else {
@@ -327,23 +326,18 @@ static void meson_mmc_clk_gate(struct meson_host *host)
 		 * If the pinmux is not provided - default to the classic and
 		 * unsafe method
 		 */
-		cfg = readl(host->regs + SD_EMMC_CFG);
-		cfg |= CFG_STOP_CLOCK;
-		writel(cfg, host->regs + SD_EMMC_CFG);
+		regmap_update_bits(host->regmap, SD_EMMC_CFG, CFG_STOP_CLOCK,
+				   CFG_STOP_CLOCK);
 	}
 }
 
 static void meson_mmc_clk_ungate(struct meson_host *host)
 {
-	u32 cfg;
-
 	if (host->pins_clk_gate)
 		pinctrl_select_default_state(host->dev);
 
 	/* Make sure the clock is not stopped in the controller */
-	cfg = readl(host->regs + SD_EMMC_CFG);
-	cfg &= ~CFG_STOP_CLOCK;
-	writel(cfg, host->regs + SD_EMMC_CFG);
+	regmap_update_bits(host->regmap, SD_EMMC_CFG, CFG_STOP_CLOCK, 0);
 }
 
 static int meson_mmc_clk_set(struct meson_host *host, unsigned long rate,
@@ -351,7 +345,6 @@ static int meson_mmc_clk_set(struct meson_host *host, unsigned long rate,
 {
 	struct mmc_host *mmc = host->mmc;
 	int ret;
-	u32 cfg;
 
 	/* Same request - bail-out */
 	if (host->ddr == ddr && host->req_rate == rate)
@@ -367,18 +360,16 @@ static int meson_mmc_clk_set(struct meson_host *host, unsigned long rate,
 		return 0;
 
 	/* Stop the clock during rate change to avoid glitches */
-	cfg = readl(host->regs + SD_EMMC_CFG);
-	cfg |= CFG_STOP_CLOCK;
-	writel(cfg, host->regs + SD_EMMC_CFG);
+	regmap_update_bits(host->regmap, SD_EMMC_CFG, CFG_STOP_CLOCK,
+			   CFG_STOP_CLOCK);
 
 	if (ddr) {
 		/* DDR modes require higher module clock */
 		rate <<= 1;
-		cfg |= CFG_DDR;
+		regmap_update_bits(host->regmap, SD_EMMC_CFG, CFG_DDR, CFG_DDR);
 	} else {
-		cfg &= ~CFG_DDR;
+		regmap_update_bits(host->regmap, SD_EMMC_CFG, CFG_DDR, 0);
 	}
-	writel(cfg, host->regs + SD_EMMC_CFG);
 	host->ddr = ddr;
 
 	ret = clk_set_rate(host->mmc_clk, rate);
@@ -412,7 +403,7 @@ static int meson_mmc_clk_set(struct meson_host *host, unsigned long rate,
  * generating the MMC clock.  Use the clock framework to create and
  * manage these clocks.
  */
-static int meson_mmc_clk_init(struct meson_host *host)
+static int meson_mmc_clk_init(struct meson_host *host, void __iomem *regs)
 {
 	struct clk_init_data init;
 	struct clk_mux *mux;
@@ -429,7 +420,7 @@ static int meson_mmc_clk_init(struct meson_host *host)
 	clk_reg |= FIELD_PREP(CLK_CORE_PHASE_MASK, CLK_PHASE_180);
 	clk_reg |= FIELD_PREP(CLK_TX_PHASE_MASK, CLK_PHASE_0);
 	clk_reg |= FIELD_PREP(CLK_RX_PHASE_MASK, CLK_PHASE_0);
-	writel(clk_reg, host->regs + SD_EMMC_CLOCK);
+	regmap_write(host->regmap, SD_EMMC_CLOCK, clk_reg);
 
 	/* get the mux parents */
 	for (i = 0; i < MUX_CLK_NUM_PARENTS; i++) {
@@ -457,7 +448,7 @@ static int meson_mmc_clk_init(struct meson_host *host)
 	init.parent_names = mux_parent_names;
 	init.num_parents = MUX_CLK_NUM_PARENTS;
 
-	mux->reg = host->regs + SD_EMMC_CLOCK;
+	mux->reg = regs + SD_EMMC_CLOCK;
 	mux->shift = __ffs(CLK_SRC_MASK);
 	mux->mask = CLK_SRC_MASK >> mux->shift;
 	mux->hw.init = &init;
@@ -479,7 +470,7 @@ static int meson_mmc_clk_init(struct meson_host *host)
 	init.parent_names = clk_parent;
 	init.num_parents = 1;
 
-	div->reg = host->regs + SD_EMMC_CLOCK;
+	div->reg = regs + SD_EMMC_CLOCK;
 	div->shift = __ffs(CLK_DIV_MASK);
 	div->width = __builtin_popcountl(CLK_DIV_MASK);
 	div->hw.init = &init;
@@ -500,21 +491,15 @@ static int meson_mmc_clk_init(struct meson_host *host)
 
 static void meson_mmc_disable_resampling(struct meson_host *host)
 {
-	unsigned int val = readl(host->regs + host->data->adjust);
-
-	val &= ~ADJUST_ADJ_EN;
-	writel(val, host->regs + host->data->adjust);
+	regmap_update_bits(host->regmap, host->data->adjust, ADJUST_ADJ_EN, 0);
 }
 
 static void meson_mmc_reset_resampling(struct meson_host *host)
 {
-	unsigned int val;
-
 	meson_mmc_disable_resampling(host);
 
-	val = readl(host->regs + host->data->adjust);
-	val &= ~ADJUST_ADJ_DELAY_MASK;
-	writel(val, host->regs + host->data->adjust);
+	regmap_update_bits(host->regmap, host->data->adjust, ADJUST_ADJ_DELAY_MASK,
+			   0);
 }
 
 static int meson_mmc_resampling_tuning(struct mmc_host *mmc, u32 opcode)
@@ -527,19 +512,21 @@ static int meson_mmc_resampling_tuning(struct mmc_host *mmc, u32 opcode)
 	max_dly = DIV_ROUND_UP(clk_get_rate(host->mux_clk),
 			       clk_get_rate(host->mmc_clk));
 
-	val = readl(host->regs + host->data->adjust);
-	val |= ADJUST_ADJ_EN;
-	writel(val, host->regs + host->data->adjust);
+	regmap_update_bits(host->regmap, host->data->adjust, ADJUST_ADJ_EN,
+			   ADJUST_ADJ_EN);
 
-	if (mmc_doing_retune(mmc))
+	if (mmc_doing_retune(mmc)) {
+		regmap_read(host->regmap, host->data->adjust, &val);
 		dly = FIELD_GET(ADJUST_ADJ_DELAY_MASK, val) + 1;
-	else
+	} else {
 		dly = 0;
+	}
 
 	for (i = 0; i < max_dly; i++) {
-		val &= ~ADJUST_ADJ_DELAY_MASK;
-		val |= FIELD_PREP(ADJUST_ADJ_DELAY_MASK, (dly + i) % max_dly);
-		writel(val, host->regs + host->data->adjust);
+		regmap_update_bits(host->regmap, host->data->adjust,
+				   ADJUST_ADJ_DELAY_MASK,
+				   FIELD_PREP(ADJUST_ADJ_DELAY_MASK,
+					      (dly + i) % max_dly));
 
 		ret = mmc_send_tuning(mmc, opcode, NULL);
 		if (!ret) {
@@ -644,10 +631,8 @@ static void meson_mmc_set_ios(struct mmc_host *mmc, struct mmc_ios *ios)
 		bus_width = CFG_BUS_WIDTH_4;
 	}
 
-	val = readl(host->regs + SD_EMMC_CFG);
-	val &= ~CFG_BUS_WIDTH_MASK;
-	val |= FIELD_PREP(CFG_BUS_WIDTH_MASK, bus_width);
-	writel(val, host->regs + SD_EMMC_CFG);
+	regmap_update_bits(host->regmap, SD_EMMC_CFG, CFG_BUS_WIDTH_MASK,
+			   FIELD_PREP(CFG_BUS_WIDTH_MASK, bus_width));
 
 	meson_mmc_check_resampling(host, ios);
 	err = meson_mmc_prepare_ios_clock(host, ios);
@@ -671,7 +656,7 @@ static void meson_mmc_set_blksz(struct mmc_host *mmc, unsigned int blksz)
 	struct meson_host *host = mmc_priv(mmc);
 	u32 cfg, blksz_old;
 
-	cfg = readl(host->regs + SD_EMMC_CFG);
+	regmap_read(host->regmap, SD_EMMC_CFG, &cfg);
 	blksz_old = FIELD_GET(CFG_BLK_LEN_MASK, cfg);
 
 	if (!is_power_of_2(blksz))
@@ -686,9 +671,8 @@ static void meson_mmc_set_blksz(struct mmc_host *mmc, unsigned int blksz)
 	dev_dbg(host->dev, "%s: update blk_len %d -> %d\n", __func__,
 		blksz_old, blksz);
 
-	cfg &= ~CFG_BLK_LEN_MASK;
-	cfg |= FIELD_PREP(CFG_BLK_LEN_MASK, blksz);
-	writel(cfg, host->regs + SD_EMMC_CFG);
+	regmap_update_bits(host->regmap, SD_EMMC_CFG, CFG_BLK_LEN_MASK,
+			   FIELD_PREP(CFG_BLK_LEN_MASK, blksz));
 }
 
 static void meson_mmc_set_response_bits(struct mmc_command *cmd, u32 *cmd_cfg)
@@ -714,7 +698,6 @@ static void meson_mmc_desc_chain_transfer(struct mmc_host *mmc, u32 cmd_cfg)
 	struct sd_emmc_desc *desc = host->descs;
 	struct mmc_data *data = host->cmd->data;
 	struct scatterlist *sg;
-	u32 start;
 	int i;
 
 	if (data->flags & MMC_DATA_WRITE)
@@ -742,8 +725,8 @@ static void meson_mmc_desc_chain_transfer(struct mmc_host *mmc, u32 cmd_cfg)
 	desc[data->sg_count - 1].cmd_cfg |= CMD_CFG_END_OF_CHAIN;
 
 	dma_wmb(); /* ensure descriptor is written before kicked */
-	start = host->descs_dma_addr | START_DESC_BUSY;
-	writel(start, host->regs + SD_EMMC_START);
+	regmap_write(host->regmap, SD_EMMC_START,
+		     host->descs_dma_addr | START_DESC_BUSY);
 }
 
 /* local sg copy for dram_access_quirk */
@@ -764,28 +747,19 @@ static void meson_mmc_copy_buffer(struct meson_host *host, struct mmc_data *data
 	sg_miter_start(&miter, sgl, nents, sg_flags);
 
 	while ((offset < buflen) && sg_miter_next(&miter)) {
-		unsigned int buf_offset = 0;
-		unsigned int len, left;
 		u32 *buf = miter.addr;
+		unsigned int len;
 
 		len = min(miter.length, buflen - offset);
-		left = len;
 
-		if (to_buffer) {
-			do {
-				writel(*buf++, host->bounce_iomem_buf + offset + buf_offset);
-
-				buf_offset += 4;
-				left -= 4;
-			} while (left);
-		} else {
-			do {
-				*buf++ = readl(host->bounce_iomem_buf + offset + buf_offset);
-
-				buf_offset += 4;
-				left -= 4;
-			} while (left);
-		}
+		if (to_buffer)
+			regmap_bulk_write(host->regmap,
+					  SD_EMMC_SRAM_DATA_BUF_OFF + offset,
+					  buf, len);
+		else
+			regmap_bulk_read(host->regmap,
+					 SD_EMMC_SRAM_DATA_BUF_OFF + offset,
+					 buf, len);
 
 		offset += len;
 	}
@@ -852,11 +826,11 @@ static void meson_mmc_start_cmd(struct mmc_host *mmc, struct mmc_command *cmd)
 
 	/* Last descriptor */
 	cmd_cfg |= CMD_CFG_END_OF_CHAIN;
-	writel(cmd_cfg, host->regs + SD_EMMC_CMD_CFG);
-	writel(cmd_data, host->regs + SD_EMMC_CMD_DAT);
-	writel(0, host->regs + SD_EMMC_CMD_RSP);
+	regmap_write(host->regmap, SD_EMMC_CMD_CFG, cmd_cfg);
+	regmap_write(host->regmap, SD_EMMC_CMD_DAT, cmd_data);
+	regmap_write(host->regmap, SD_EMMC_CMD_RSP, 0);
 	wmb(); /* ensure descriptor is written before kicked */
-	writel(cmd->arg, host->regs + SD_EMMC_CMD_ARG);
+	regmap_write(host->regmap, SD_EMMC_CMD_ARG, cmd->arg);
 }
 
 static int meson_mmc_validate_dram_access(struct mmc_host *mmc, struct mmc_data *data)
@@ -906,7 +880,7 @@ static void meson_mmc_request(struct mmc_host *mmc, struct mmc_request *mrq)
 		meson_mmc_pre_req(mmc, mrq);
 
 	/* Stop execution */
-	writel(0, host->regs + SD_EMMC_START);
+	regmap_write(host->regmap, SD_EMMC_START, 0);
 
 	meson_mmc_start_cmd(mmc, mrq->sbc ?: mrq->cmd);
 
@@ -919,12 +893,12 @@ static void meson_mmc_read_resp(struct mmc_host *mmc, struct mmc_command *cmd)
 	struct meson_host *host = mmc_priv(mmc);
 
 	if (cmd->flags & MMC_RSP_136) {
-		cmd->resp[0] = readl(host->regs + SD_EMMC_CMD_RSP3);
-		cmd->resp[1] = readl(host->regs + SD_EMMC_CMD_RSP2);
-		cmd->resp[2] = readl(host->regs + SD_EMMC_CMD_RSP1);
-		cmd->resp[3] = readl(host->regs + SD_EMMC_CMD_RSP);
+		regmap_read(host->regmap, SD_EMMC_CMD_RSP3, &cmd->resp[0]);
+		regmap_read(host->regmap, SD_EMMC_CMD_RSP2, &cmd->resp[1]);
+		regmap_read(host->regmap, SD_EMMC_CMD_RSP1, &cmd->resp[2]);
+		regmap_read(host->regmap, SD_EMMC_CMD_RSP, &cmd->resp[3]);
 	} else if (cmd->flags & MMC_RSP_PRESENT) {
-		cmd->resp[0] = readl(host->regs + SD_EMMC_CMD_RSP);
+		regmap_read(host->regmap, SD_EMMC_CMD_RSP, &cmd->resp[0]);
 	}
 }
 
@@ -936,8 +910,8 @@ static irqreturn_t meson_mmc_irq(int irq, void *dev_id)
 	u32 irq_en, status, raw_status;
 	irqreturn_t ret = IRQ_NONE;
 
-	irq_en = readl(host->regs + SD_EMMC_IRQ_EN);
-	raw_status = readl(host->regs + SD_EMMC_STATUS);
+	regmap_read(host->regmap, SD_EMMC_IRQ_EN, &irq_en);
+	regmap_read(host->regmap, SD_EMMC_STATUS, &raw_status);
 	status = raw_status & irq_en;
 
 	if (!status) {
@@ -951,7 +925,7 @@ static irqreturn_t meson_mmc_irq(int irq, void *dev_id)
 		return IRQ_NONE;
 
 	/* ack all raised interrupts */
-	writel(status, host->regs + SD_EMMC_STATUS);
+	regmap_write(host->regmap, SD_EMMC_STATUS, status);
 
 	cmd = host->cmd;
 	data = cmd->data;
@@ -988,13 +962,10 @@ static irqreturn_t meson_mmc_irq(int irq, void *dev_id)
 	}
 
 out:
-	if (cmd->error) {
+	if (cmd->error)
 		/* Stop desc in case of errors */
-		u32 start = readl(host->regs + SD_EMMC_START);
-
-		start &= ~START_DESC_BUSY;
-		writel(start, host->regs + SD_EMMC_START);
-	}
+		regmap_update_bits(host->regmap, SD_EMMC_START,
+				   START_DESC_BUSY, 0);
 
 	if (ret == IRQ_HANDLED)
 		meson_mmc_request_done(host->mmc, cmd->mrq);
@@ -1014,9 +985,9 @@ static int meson_mmc_wait_desc_stop(struct meson_host *host)
 	 * IRQs after we have called mmc_request_done() which is bad.
 	 */
 
-	return readl_poll_timeout(host->regs + SD_EMMC_STATUS, status,
-				  !(status & (STATUS_BUSY | STATUS_DESC_BUSY)),
-				  100, 5000);
+	return regmap_read_poll_timeout(host->regmap, SD_EMMC_STATUS, status,
+					!(status & (STATUS_BUSY | STATUS_DESC_BUSY)),
+					100, 5000);
 }
 
 static irqreturn_t meson_mmc_irq_thread(int irq, void *dev_id)
@@ -1082,7 +1053,7 @@ static void meson_mmc_cfg_init(struct meson_host *host)
 	/* abort chain on R/W errors */
 	cfg |= CFG_ERR_ABORT;
 
-	writel(cfg, host->regs + SD_EMMC_CFG);
+	regmap_write(host->regmap, SD_EMMC_CFG, cfg);
 }
 
 static int meson_mmc_card_busy(struct mmc_host *mmc)
@@ -1090,7 +1061,7 @@ static int meson_mmc_card_busy(struct mmc_host *mmc)
 	struct meson_host *host = mmc_priv(mmc);
 	u32 regval;
 
-	regval = readl(host->regs + SD_EMMC_STATUS);
+	regmap_read(host->regmap, SD_EMMC_STATUS, &regval);
 
 	/* We are only interrested in lines 0 to 3, so mask the other ones */
 	return !(FIELD_GET(STATUS_DATI, regval) & 0xf);
@@ -1131,11 +1102,19 @@ static const struct mmc_host_ops meson_mmc_ops = {
 	.start_signal_voltage_switch = meson_mmc_voltage_switch,
 };
 
+static const struct regmap_config meson_gx_mmc_regmap_config = {
+	.reg_bits = 16,
+	.val_bits = 32,
+	.reg_stride = 4,
+	.max_register = 0x7ff,
+};
+
 static int meson_mmc_probe(struct platform_device *pdev)
 {
 	struct resource *res;
 	struct meson_host *host;
 	struct mmc_host *mmc;
+	void __iomem *regs;
 	int ret;
 
 	mmc = mmc_alloc_host(sizeof(struct meson_host), &pdev->dev);
@@ -1175,9 +1154,9 @@ static int meson_mmc_probe(struct platform_device *pdev)
 		return dev_err_probe(&pdev->dev, ret, "device reset failed\n");
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	host->regs = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(host->regs)) {
-		ret = PTR_ERR(host->regs);
+	regs = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(regs)) {
+		ret = PTR_ERR(regs);
 		goto free_host;
 	}
 
@@ -1207,11 +1186,16 @@ static int meson_mmc_probe(struct platform_device *pdev)
 		goto free_host;
 	}
 
+	host->regmap = devm_regmap_init_mmio(&pdev->dev, regs,
+					     &meson_gx_mmc_regmap_config);
+	if (IS_ERR(host->regmap))
+		return PTR_ERR(host->regmap);
+
 	ret = clk_prepare_enable(host->core_clk);
 	if (ret)
 		goto free_host;
 
-	ret = meson_mmc_clk_init(host);
+	ret = meson_mmc_clk_init(host, regs);
 	if (ret)
 		goto err_core_clk;
 
@@ -1219,14 +1203,14 @@ static int meson_mmc_probe(struct platform_device *pdev)
 	meson_mmc_cfg_init(host);
 
 	/* Stop execution */
-	writel(0, host->regs + SD_EMMC_START);
+	regmap_write(host->regmap, SD_EMMC_START, 0);
 
 	/* clear, ack and enable interrupts */
-	writel(0, host->regs + SD_EMMC_IRQ_EN);
-	writel(IRQ_CRC_ERR | IRQ_TIMEOUTS | IRQ_END_OF_CHAIN,
-	       host->regs + SD_EMMC_STATUS);
-	writel(IRQ_CRC_ERR | IRQ_TIMEOUTS | IRQ_END_OF_CHAIN,
-	       host->regs + SD_EMMC_IRQ_EN);
+	regmap_write(host->regmap, SD_EMMC_IRQ_EN, 0);
+	regmap_write(host->regmap, SD_EMMC_STATUS,
+		     IRQ_CRC_ERR | IRQ_TIMEOUTS | IRQ_END_OF_CHAIN);
+	regmap_write(host->regmap, SD_EMMC_IRQ_EN,
+		     IRQ_CRC_ERR | IRQ_TIMEOUTS | IRQ_END_OF_CHAIN);
 
 	ret = request_threaded_irq(host->irq, meson_mmc_irq,
 				   meson_mmc_irq_thread, IRQF_ONESHOT,
@@ -1264,7 +1248,6 @@ static int meson_mmc_probe(struct platform_device *pdev)
 		 * instead of the DDR memory
 		 */
 		host->bounce_buf_size = SD_EMMC_SRAM_DATA_BUF_LEN;
-		host->bounce_iomem_buf = host->regs + SD_EMMC_SRAM_DATA_BUF_OFF;
 		host->bounce_dma_addr = res->start + SD_EMMC_SRAM_DATA_BUF_OFF;
 	} else {
 		/* data bounce buffer */
@@ -1314,7 +1297,7 @@ static int meson_mmc_remove(struct platform_device *pdev)
 	mmc_remove_host(host->mmc);
 
 	/* disable interrupts */
-	writel(0, host->regs + SD_EMMC_IRQ_EN);
+	regmap_write(host->regmap, SD_EMMC_IRQ_EN, 0);
 	free_irq(host->irq, host);
 
 	dma_free_coherent(host->dev, SD_EMMC_DESC_BUF_LEN,
-- 
2.25.1


diff --git a/core/crypto/sha256-internal.c b/core/crypto/sha256-internal.c
index 4d61cb1..51d1602 100644
--- a/core/crypto/sha256-internal.c
+++ b/core/crypto/sha256-internal.c
@@ -23,20 +23,20 @@
  * @mac: Buffer for the hash
  * Returns: 0 on success, -1 of failure
  */
-int sha256_vector(size_t num_elem, const u8 *addr[], const size_t *len,
+int sha256_vector2(size_t num_elem, const u8 *addr[], const size_t *len,
 		  u8 *mac)
 {
-	struct sha256_state ctx;
+	struct sha256_state2 ctx;
 	size_t i;
 
 	if (TEST_FAIL())
 		return -1;
 
-	sha256_init(&ctx);
+	sha256_init2(&ctx);
 	for (i = 0; i < num_elem; i++)
-		if (sha256_process(&ctx, addr[i], len[i]))
+		if (sha256_process2(&ctx, addr[i], len[i]))
 			return -1;
-	if (sha256_done(&ctx, mac))
+	if (sha256_done2(&ctx, mac))
 		return -1;
 	return 0;
 }
@@ -82,7 +82,7 @@ static const unsigned long K[64] = {
 #endif
 
 /* compress 512-bits */
-static int sha256_compress(struct sha256_state *md, unsigned char *buf)
+static int sha256_compress2(struct sha256_state2 *md, unsigned char *buf)
 {
 	u32 S[8], W[64], t0, t1;
 	u32 t;
@@ -125,7 +125,7 @@ static int sha256_compress(struct sha256_state *md, unsigned char *buf)
 
 
 /* Initialize the hash state */
-void sha256_init(struct sha256_state *md)
+void sha256_init2(struct sha256_state2 *md)
 {
 	md->curlen = 0;
 	md->length = 0;
@@ -146,7 +146,7 @@ void sha256_init(struct sha256_state *md)
    @param inlen  The length of the data (octets)
    @return CRYPT_OK if successful
 */
-int sha256_process(struct sha256_state *md, const unsigned char *in,
+int sha256_process2(struct sha256_state2 *md, const unsigned char *in,
 		   unsigned long inlen)
 {
 	unsigned long n;
@@ -156,7 +156,7 @@ int sha256_process(struct sha256_state *md, const unsigned char *in,
 
 	while (inlen > 0) {
 		if (md->curlen == 0 && inlen >= SHA256_BLOCK_SIZE) {
-			if (sha256_compress(md, (unsigned char *) in) < 0)
+			if (sha256_compress2(md, (unsigned char *) in) < 0)
 				return -1;
 			md->length += SHA256_BLOCK_SIZE * 8;
 			in += SHA256_BLOCK_SIZE;
@@ -168,7 +168,7 @@ int sha256_process(struct sha256_state *md, const unsigned char *in,
 			in += n;
 			inlen -= n;
 			if (md->curlen == SHA256_BLOCK_SIZE) {
-				if (sha256_compress(md, md->buf) < 0)
+				if (sha256_compress2(md, md->buf) < 0)
 					return -1;
 				md->length += 8 * SHA256_BLOCK_SIZE;
 				md->curlen = 0;
@@ -186,7 +186,7 @@ int sha256_process(struct sha256_state *md, const unsigned char *in,
    @param out [out] The destination of the hash (32 bytes)
    @return CRYPT_OK if successful
 */
-int sha256_done(struct sha256_state *md, unsigned char *out)
+int sha256_done2(struct sha256_state2 *md, unsigned char *out)
 {
 	int i;
 
@@ -207,7 +207,7 @@ int sha256_done(struct sha256_state *md, unsigned char *out)
 		while (md->curlen < SHA256_BLOCK_SIZE) {
 			md->buf[md->curlen++] = (unsigned char) 0;
 		}
-		sha256_compress(md, md->buf);
+		sha256_compress2(md, md->buf);
 		md->curlen = 0;
 	}
 
@@ -218,7 +218,7 @@ int sha256_done(struct sha256_state *md, unsigned char *out)
 
 	/* store length */
 	WPA_PUT_BE64(md->buf + 56, md->length);
-	sha256_compress(md, md->buf);
+	sha256_compress2(md, md->buf);
 
 	/* copy output */
 	for (i = 0; i < 8; i++)
diff --git a/core/crypto/sha256.c b/core/crypto/sha256.c
index ea5d9e3..9381bce 100644
--- a/core/crypto/sha256.c
+++ b/core/crypto/sha256.c
@@ -12,6 +12,7 @@
 //#include "crypto.h"
 #include "wlancrypto_wrap.h"
 
+int sha256_vector2(size_t num_elem, const u8 *addr[], const size_t *len, u8 *mac);
 
 /**
  * hmac_sha256_vector - HMAC-SHA256 over data vector (RFC 2104)
@@ -41,7 +42,7 @@ int hmac_sha256_vector(const u8 *key, size_t key_len, size_t num_elem,
 
         /* if key is longer than 64 bytes reset it to key = SHA256(key) */
         if (key_len > 64) {
-		if (sha256_vector(1, &key, &key_len, tk) < 0)
+		if (sha256_vector2(1, &key, &key_len, tk) < 0)
 			return -1;
 		key = tk;
 		key_len = 32;
@@ -70,7 +71,7 @@ int hmac_sha256_vector(const u8 *key, size_t key_len, size_t num_elem,
 		_addr[i + 1] = addr[i];
 		_len[i + 1] = len[i];
 	}
-	if (sha256_vector(1 + num_elem, _addr, _len, mac) < 0)
+	if (sha256_vector2(1 + num_elem, _addr, _len, mac) < 0)
 		return -1;
 
 	os_memset(k_pad, 0, sizeof(k_pad));
@@ -84,7 +85,7 @@ int hmac_sha256_vector(const u8 *key, size_t key_len, size_t num_elem,
 	_len[0] = 64;
 	_addr[1] = mac;
 	_len[1] = SHA256_MAC_LEN;
-	return sha256_vector(2, _addr, _len, mac);
+	return sha256_vector2(2, _addr, _len, mac);
 }
 
 
diff --git a/core/crypto/sha256_i.h b/core/crypto/sha256_i.h
index a502d2b..1940144 100644
--- a/core/crypto/sha256_i.h
+++ b/core/crypto/sha256_i.h
@@ -11,15 +11,15 @@
 
 #define SHA256_BLOCK_SIZE 64
 
-struct sha256_state {
+struct sha256_state2 {
 	u64 length;
 	u32 state[8], curlen;
 	u8 buf[SHA256_BLOCK_SIZE];
 };
 
-void sha256_init(struct sha256_state *md);
-int sha256_process(struct sha256_state *md, const unsigned char *in,
+void sha256_init2(struct sha256_state2 *md);
+int sha256_process2(struct sha256_state2 *md, const unsigned char *in,
 		   unsigned long inlen);
-int sha256_done(struct sha256_state *md, unsigned char *out);
+int sha256_done2(struct sha256_state2 *md, unsigned char *out);
 
 #endif /* SHA256_I_H */
diff --git a/core/rtw_swcrypto.c b/core/rtw_swcrypto.c
index 2f1c343..a0d102f 100644
--- a/core/rtw_swcrypto.c
+++ b/core/rtw_swcrypto.c
@@ -274,7 +274,7 @@ void _tdls_generate_tpk(void *sta, const u8 *own_addr, const u8 *bssid)
 		nonce[1] = SNonce;
 	}
 
-	sha256_vector(2, nonce, len, key_input);
+	sha256_vector2(2, nonce, len, key_input);
 
 	/*
 	 * TPK = KDF-Hash-Length(TPK-Key-Input, "TDLS PMK",

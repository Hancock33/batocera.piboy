diff --git a/drivers/gpio/Kconfig b/drivers/gpio/Kconfig
index c7da18ad2fb9..0287f3469b95 100644
--- a/drivers/gpio/Kconfig
+++ b/drivers/gpio/Kconfig
@@ -9,6 +9,13 @@ config XPI_GAMECON
 	  Select this configuration to enable XPI Gamecon module to allow
 	  safe shutdown and volume controls.
 
+config XPI_GAMECON_XRS
+	tristate "XPI XRS Gamecon module"
+	depends on ARM64
+	help
+	  Select this configuration to enable XPI XRS Gamecon module to allow
+	  safe shutdown and volume controls.
+
 config MK_ARCADE_RPI
        tristate "RPi Arcade Joystick"
        depends on ARM64
diff --git a/drivers/gpio/Makefile b/drivers/gpio/Makefile
index 2f257c961822..d7fb3ef12d24 100644
--- a/drivers/gpio/Makefile
+++ b/drivers/gpio/Makefile
@@ -13,6 +13,7 @@ obj-$(CONFIG_GPIO_SYSFS)	+= gpiolib-sysfs.o
 obj-$(CONFIG_GPIO_ACPI)		+= gpiolib-acpi.o
 obj-$(CONFIG_GPIOLIB)		+= gpiolib-swnode.o
 obj-$(CONFIG_XPI_GAMECON)   += xpi_gamecon.o
+obj-$(CONFIG_XPI_GAMECON_XRS) += xpi_gamecon_xrs.o
 
 # Device drivers. Generally keep list sorted alphabetically
 obj-$(CONFIG_GPIO_REGMAP)	+= gpio-regmap.o
diff --git a/drivers/gpio/xpi_gamecon_xrs.c b/drivers/gpio/xpi_gamecon_xrs.c
new file mode 100644
index 000000000000..917b9710548e
--- /dev/null
+++ b/drivers/gpio/xpi_gamecon_xrs.c
@@ -0,0 +1,758 @@
+#include <linux/platform_device.h>
+#include <linux/power_supply.h>
+#include <linux/err.h>
+#include <linux/errno.h>
+#include <linux/init.h>
+#include <linux/delay.h>
+#include <linux/input.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_fdt.h>
+#include <linux/of_irq.h>
+#include <linux/of_platform.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+
+#include <asm/io.h>
+
+MODULE_AUTHOR("Nathan Scherdin");
+MODULE_DESCRIPTION("Experimental Pi Controls driver");
+MODULE_LICENSE("GPL");
+
+#define EXPI_MANUFACTURER	"Experimental Pi"
+#define EXPI_DRIVER_NAME	"Experimental Pi Driver"
+
+struct expi {
+	struct	power_supply		*psy;
+	struct	power_supply_desc	psy_desc;
+	int	status;
+	bool	cable_plugged;
+};
+
+static const enum power_supply_property expi_props[] = {
+	POWER_SUPPLY_PROP_STATUS,
+	POWER_SUPPLY_PROP_VOLTAGE_NOW,
+	POWER_SUPPLY_PROP_CURRENT_NOW,
+	POWER_SUPPLY_PROP_CAPACITY,
+	POWER_SUPPLY_PROP_MODEL_NAME,
+};
+
+static struct gc *gc_base;
+static const int gc_gpio_clk = 26;
+static const int gc_gpio_data = 27;
+static const int gc_clk_bit = 1<<26;
+static const int gc_data_bit = 1<<27;
+
+static unsigned long lastgood=0;
+static unsigned long lasterror=0;
+
+static uint8_t index;
+
+static uint8_t running=0;
+
+union {
+	struct {
+		int flags_val;
+		int fan_val;
+		int red_val;
+		int green_val;
+	};
+	int data[4];
+}volatile values;
+
+volatile int version_val = 0;
+volatile int cur_val = 0;
+volatile int batt_val = 0;
+volatile int percent_val = 0;
+volatile int stat_val = 0;
+volatile int vol_val = 0;
+
+struct kobject *kobj_ref;
+
+#define GC_LENGTH 14
+
+#define GPIO_SET *(gpio+7)
+#define GPIO_CLR *(gpio+10)
+#define GPIO_STATUS (*(gpio+13))
+
+#define GC_REFRESH_TIME	(HZ/120)
+
+#define BITRATE 7
+
+static volatile unsigned *gpio;
+
+static const short gc_btn[] = {
+				BTN_A,	//A
+				BTN_B,				//B
+				BTN_X,				//X
+				BTN_Y,				//Y
+				BTN_TL,				//Left Button
+				BTN_TR,				//Right Button
+				BTN_TL2,			//Left Trigger
+				BTN_TR2,			//Right Trigger
+				BTN_THUMBL,			//Left Thumb
+				BTN_THUMBR,			//Right Thumb
+				BTN_SELECT,			//Select
+				BTN_START,			//Start
+				BTN_MODE,		    //Mode
+                -1			        //Terminating entry
+			};
+int gc_btn_size = sizeof(gc_btn)/sizeof(gc_btn[0]);
+
+struct gc {
+	struct input_dev *dev;
+	struct input_dev *volume_dev;
+	struct input_dev *power_dev;
+	struct timer_list timer;
+	int used;
+	struct mutex mutex;
+};
+
+static ssize_t version_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf){ return sprintf(buf, "%d", version_val); }
+static ssize_t version_store(struct kobject *kobj, struct kobj_attribute *attr,const char *buf, size_t count) { sscanf(buf,"%d",&version_val); return count; }
+
+static ssize_t flags_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf){ return sprintf(buf, "%d", values.flags_val); }
+static ssize_t flags_store(struct kobject *kobj, struct kobj_attribute *attr,const char *buf, size_t count) { sscanf(buf,"%d",&values.flags_val); return count; }
+
+static ssize_t red_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf){ return sprintf(buf, "%d", values.red_val); }
+static ssize_t red_store(struct kobject *kobj, struct kobj_attribute *attr,const char *buf, size_t count) { sscanf(buf,"%d",&values.red_val); return count; }
+
+static ssize_t green_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf){ return sprintf(buf, "%d", values.green_val); }
+static ssize_t green_store(struct kobject *kobj, struct kobj_attribute *attr,const char *buf, size_t count) { sscanf(buf,"%d",&values.green_val); return count; }
+
+static ssize_t fan_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf){ return sprintf(buf, "%d", values.fan_val); }
+static ssize_t fan_store(struct kobject *kobj, struct kobj_attribute *attr,const char *buf, size_t count) { sscanf(buf,"%d",&values.fan_val); return count; }
+
+static ssize_t cur_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf){ return sprintf(buf, "%d", cur_val); }
+static ssize_t cur_store(struct kobject *kobj, struct kobj_attribute *attr,const char *buf, size_t count) { sscanf(buf,"%d",&cur_val); return count; }
+
+static ssize_t batt_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf){ return sprintf(buf, "%d", batt_val); }
+static ssize_t batt_store(struct kobject *kobj, struct kobj_attribute *attr,const char *buf, size_t count) { sscanf(buf,"%d",&batt_val); return count; }
+
+static ssize_t percent_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf){ return sprintf(buf, "%d", percent_val); }
+static ssize_t percent_store(struct kobject *kobj, struct kobj_attribute *attr,const char *buf, size_t count) { sscanf(buf,"%d",&percent_val); return count; }
+
+static ssize_t stat_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf){ return sprintf(buf, "%d", stat_val); }
+static ssize_t stat_store(struct kobject *kobj, struct kobj_attribute *attr,const char *buf, size_t count) { sscanf(buf,"%d",&stat_val); return count; }
+
+static ssize_t vol_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf){ return sprintf(buf, "%d", vol_val); }
+static ssize_t vol_store(struct kobject *kobj, struct kobj_attribute *attr,const char *buf, size_t count) { sscanf(buf,"%d",&vol_val); return count; }
+
+struct kobj_attribute version = __ATTR(version, 0440, version_show, version_store);
+struct kobj_attribute flags = __ATTR(flags, 0660, flags_show, flags_store);
+struct kobj_attribute red = __ATTR(red, 0660, red_show, red_store);
+struct kobj_attribute green = __ATTR(green, 0660, green_show, green_store);
+struct kobj_attribute fan = __ATTR(fan, 0660, fan_show, fan_store);
+struct kobj_attribute cur = __ATTR(amps, 0660, cur_show, cur_store);
+struct kobj_attribute batt = __ATTR(battery, 0660, batt_show, batt_store);
+struct kobj_attribute per = __ATTR(percent, 0660, percent_show, percent_store);
+struct kobj_attribute stat = __ATTR(status, 0660, stat_show, stat_store);
+struct kobj_attribute vol = __ATTR(volume, 0660, vol_show, vol_store);
+
+static int expi_get_property(struct power_supply *psy, enum power_supply_property psp, union power_supply_propval *val)
+{
+	int status;
+	struct expi *adc_bat = (struct expi *)power_supply_get_drvdata(psy);
+	if (!adc_bat) {
+		dev_err(&psy->dev, "no battery infos ?!\n");
+		return -EINVAL;
+	}
+
+	status = adc_bat->status;
+	adc_bat->cable_plugged = stat_val&0x80 ? 1 : 0;;
+
+	if (!adc_bat->cable_plugged)
+		adc_bat->status =  POWER_SUPPLY_STATUS_DISCHARGING;
+	else if (percent_val==100)
+		adc_bat->status = POWER_SUPPLY_STATUS_NOT_CHARGING;
+	else
+		adc_bat->status = POWER_SUPPLY_STATUS_CHARGING;
+
+	if (status != adc_bat->status)
+		power_supply_changed(adc_bat->psy);
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_STATUS:
+		val->intval = adc_bat->status;
+		break;
+	case POWER_SUPPLY_PROP_VOLTAGE_NOW:
+		val->intval = batt_val;		//original; value in mv
+		break;
+	case POWER_SUPPLY_PROP_CURRENT_NOW:
+		val->intval = cur_val*10;	//original value in 10mA increments
+		break;
+	case POWER_SUPPLY_PROP_CAPACITY:
+		val->intval = percent_val;
+		break;
+	case POWER_SUPPLY_PROP_MODEL_NAME:
+		val->strval = EXPI_MANUFACTURER;
+		break;
+	default:
+		return -EINVAL;
+	}
+	return 0;
+}
+
+void gpio_func(int pin, int state)
+{
+	volatile unsigned *tgpio = gpio;
+	tgpio += (pin/10);
+	if(state){*tgpio &= ~(0x7<<(pin%10)*3);	}
+	else{*tgpio |= (0x1<<(pin%10)*3);}
+}
+
+uint16_t check_crc16(uint8_t data[])
+{
+	int len = GC_LENGTH-2;
+	uint16_t crc=0;
+	uint16_t ccrc = (data[GC_LENGTH-1]<<8) | data[GC_LENGTH-2];
+	int i,j;
+
+	for(i = 0;i<len;i++){
+		crc = (uint16_t)(crc ^ ((uint16_t)data[i] << 8));
+		for (j=0; j<8; j++){
+			if ((crc & 0x8000)!=0) crc = (uint16_t)((crc << 1) ^ 0x1021);
+			else crc <<= 1;
+		}
+	}
+
+	return crc==ccrc ? 0 : 1;
+}
+
+uint16_t crc=0;
+void calc_crc16(uint8_t *data, uint8_t len)
+{
+	int i,j;
+
+	crc=0;
+
+	for(i = 0;i<len;i++){
+		crc = (uint16_t)(crc ^ ((uint16_t)data[i] << 8));
+		for (j=0; j<8; j++){
+			if ((crc & 0x8000)!=0) crc = (uint16_t)((crc << 1) ^ 0x1021);
+			else crc <<= 1;
+		}
+	}
+	data[len] = crc>>8;
+	data[len+1] = crc&0xFF;
+}
+
+static void gc_timer(struct timer_list *t)
+{
+	struct gc *gc = from_timer(gc, t, timer);
+
+	unsigned char data[32];
+	struct input_dev *dev = gc->dev;
+	struct input_dev *volume_dev = gc->volume_dev;
+	struct input_dev *power_dev = gc->power_dev;
+
+	int byteindex;
+	long bitindex;
+
+	if(running)
+		mod_timer(&gc->timer, jiffies + GC_REFRESH_TIME);
+
+	gpio_func(gc_gpio_data,1);	//input
+
+	for(byteindex=0;byteindex<GC_LENGTH;byteindex++){
+		data[byteindex]=0;
+		for(bitindex=0;bitindex<8;bitindex++){
+			data[byteindex]<<=1;
+
+			//set clock pin
+			GPIO_SET |= gc_clk_bit;
+			udelay(BITRATE);
+			GPIO_CLR |= gc_clk_bit;
+			udelay(BITRATE);
+			data[byteindex] |= GPIO_STATUS & gc_data_bit ? 1 : 0;
+		}
+	}
+
+	gpio_func(gc_gpio_data,0);	//output
+
+	GPIO_SET |= gc_clk_bit;
+	udelay(BITRATE);
+	GPIO_CLR |= gc_clk_bit;
+	udelay(BITRATE);
+
+	if(data[0] && !check_crc16(data)){
+		version_val = ((data[0]&0xC0)<<2) | (data[0]&0x3F);
+
+		data[GC_LENGTH+0] = 0xC0 | (index&0x3);
+		data[GC_LENGTH+1] = values.data[index&0x3];
+		calc_crc16(&data[GC_LENGTH],2);
+		index++;
+
+		for(byteindex=GC_LENGTH;byteindex<GC_LENGTH+4;byteindex++){
+			for(bitindex=0;bitindex<8;bitindex++){
+				if(data[byteindex]&(0x80>>bitindex))
+					GPIO_SET |= gc_data_bit;
+				else
+					GPIO_CLR |= gc_data_bit;
+				//set clock pin
+				GPIO_SET |= gc_clk_bit;
+				udelay(BITRATE);
+				GPIO_CLR |= gc_clk_bit;
+				udelay(BITRATE);
+			}
+		}
+
+		lastgood++;
+
+		input_report_abs(dev, ABS_X, (int16_t)data[1]);		//X Axis
+		input_report_abs(dev, ABS_Y, (int16_t)data[2]);		//Y Axis
+		input_report_abs(dev, ABS_RX, (int16_t)data[3]);	//RX Axis
+		input_report_abs(dev, ABS_RY, (int16_t)data[4]);	//RY Axis
+		input_report_abs(dev, ABS_HAT0X, !(data[5]&0x08)-!(data[5]&0x04));	//HAT X
+		input_report_abs(dev, ABS_HAT0Y, !(data[5]&0x02)-!(data[5]&0x01));	//HAT Y
+
+		input_report_key(dev, BTN_A, !(data[5]&0x10));	    //A
+		input_report_key(dev, BTN_B, !(data[5]&0x20));   	//B
+		input_report_key(dev, BTN_X, !(data[5]&0x40));	    //X
+		input_report_key(dev, BTN_Y, !(data[5]&0x80));   	//Y
+		input_report_key(dev, BTN_TL, !(data[6]&0x01));	    //Left Button
+		input_report_key(dev, BTN_TR, !(data[6]&0x02));  	//Right Button
+		input_report_key(dev, BTN_TL2, !(data[6]&0x04));	//Left Trigger
+		input_report_key(dev, BTN_TR2, !(data[6]&0x08));	//Right Trigger
+		input_report_key(dev, BTN_THUMBL, !(data[6]&0x10));	//Left Thumb
+		input_report_key(dev, BTN_THUMBR, !(data[6]&0x20));	//Right Thumb
+		input_report_key(dev, BTN_SELECT, !(data[6]&0x40));	//Select
+		input_report_key(dev, BTN_START, !(data[6]&0x80));	//Start
+
+		/* Volume Wheel */
+		input_report_abs(volume_dev, ABS_VOLUME, data[6]);
+		input_sync(volume_dev);
+
+		/* Power Switch */
+		input_report_key(power_dev, KEY_POWER, !(data[5]&0x40));
+		input_sync(power_dev);
+		input_sync(dev);
+
+		batt_val = (int)(data[9]*5)+2950;		    //Battery Voltage
+		cur_val = (int)((signed char)data[10])*50;	//Current
+		percent_val = data[11];                     //battery percentage
+		stat_val = data[7];					        //VBus,Shutdown
+		vol_val = data[8];					        //Volume
+
+		lasterror = 0;
+	}
+	else{
+		lasterror++;
+		printk(KERN_INFO "XPi Gamecon CRC Error: %4.4lu %4.4lu",lastgood,lasterror);
+		lastgood=0;
+	}
+
+	gpio_func(gc_gpio_data,1);	//input
+}
+
+static int gc_setup_pad(struct gc *gc)
+{
+	struct input_dev *input_dev;
+	int i;
+	int err;
+
+	gc->dev = input_dev = input_allocate_device();
+	if (!input_dev) {
+		printk(KERN_INFO "Not enough memory for input device\n");
+		return -ENOMEM;
+	}
+
+	input_dev->name = "Experimental Pi Controller";
+	input_dev->phys = "input0";
+	input_dev->id.bustype = BUS_PARPORT;
+	input_dev->id.vendor = 0x0001;
+	input_dev->id.product = 1;
+	input_dev->id.version = 0x0100;
+
+	input_set_drvdata(input_dev, gc);
+
+	input_dev->evbit[0] = BIT_MASK(EV_KEY) | BIT_MASK(EV_ABS);
+
+	input_set_abs_params(input_dev, ABS_X, 0, 255, 0, 0);
+	input_set_abs_params(input_dev, ABS_Y, 0, 255, 0, 0);
+	input_set_abs_params(input_dev, ABS_RX, 0, 255, 0, 0);
+	input_set_abs_params(input_dev, ABS_RY, 0, 255, 0, 0);
+	input_set_abs_params(input_dev, ABS_HAT0X, -1, 1, 0, 0);
+	input_set_abs_params(input_dev, ABS_HAT0Y, -1, 1, 0, 0);
+
+	for (i = 0; i < gc_btn_size; i++){
+		__set_bit(gc_btn[i], input_dev->keybit);
+	}
+
+	err = input_register_device(input_dev);
+	if (err)
+		goto err_free_dev;
+
+	/* set data pin to input */
+	gpio_func(gc_gpio_clk,0);	//output
+	gpio_func(gc_gpio_data,1);	//input
+
+	printk(KERN_INFO "GPIO%i and GPIO%i configured for Experimental Pi controller pins\n",gc_gpio_clk,gc_gpio_data);
+	printk(KERN_INFO "Experimental Pi Controls module loaded");
+
+	return 0;
+
+err_free_dev:
+	input_free_device(gc->dev);
+	gc->dev = NULL;
+	return err;
+}
+
+/* volume device
+ */
+static int __init gc_setup_volume(struct gc *gc)
+{
+	struct input_dev *input_dev;
+	int err;
+
+	gc->volume_dev = input_dev = input_allocate_device();
+	if (!input_dev) {
+		printk(KERN_INFO "Not enough memory for volume input device\n");
+		return -ENOMEM;
+	}
+
+	input_dev->name = "PiBoy Volume wheel";
+	input_dev->phys = "input1";
+	input_dev->id.bustype = BUS_PARPORT;
+	input_dev->id.vendor = 0x0001;
+	input_dev->id.product = 1;
+	input_dev->id.version = 0x0100;
+
+	input_set_drvdata(input_dev, gc);
+
+	__set_bit(EV_ABS, input_dev->evbit);
+	__set_bit(ABS_VOLUME, input_dev->absbit);
+
+	input_set_abs_params(input_dev, ABS_VOLUME, 0, 100, 0, 0);
+
+	err = input_register_device(input_dev);
+	if (err)
+		goto err_free_dev;
+
+	return 0;
+
+err_free_dev:
+	input_free_device(gc->volume_dev);
+	gc->volume_dev = NULL;
+	return err;
+}
+
+/* power device
+ */
+static int __init gc_setup_power(struct gc *gc)
+{
+	struct input_dev *input_dev;
+	int err;
+
+	gc->power_dev = input_dev = input_allocate_device();
+	if (!input_dev) {
+		printk(KERN_INFO "Not enough memory for power input device\n");
+		return -ENOMEM;
+	}
+
+	input_dev->name = "PiBoy Power switch";
+	input_dev->phys = "input2";
+	input_dev->id.bustype = BUS_PARPORT;
+	input_dev->id.vendor = 0x0001;
+	input_dev->id.product = 1;
+	input_dev->id.version = 0x0100;
+
+	input_set_drvdata(input_dev, gc);
+
+	__set_bit(EV_KEY, input_dev->evbit);
+	__set_bit(KEY_POWER, input_dev->keybit);
+
+	err = input_register_device(input_dev);
+	if (err)
+		goto err_free_dev;
+
+	return 0;
+
+err_free_dev:
+	input_free_device(gc->power_dev);
+	gc->power_dev = NULL;
+	return err;
+}
+
+static struct gc *gc_probe(void)
+{
+	struct gc *gc;
+	int err;
+
+	gc = kzalloc(sizeof(struct gc), GFP_KERNEL);
+	if (!gc) {
+		printk(KERN_INFO "Not enough memory\n");
+		err = -ENOMEM;
+		goto err_out;
+	}
+
+	mutex_init(&gc->mutex);
+
+	timer_setup(&gc->timer, gc_timer, 0);
+
+	err = gc_setup_pad(gc);
+	if (err) goto err_unreg_devs;
+	err = gc_setup_volume(gc);
+	if (err) goto err_unreg_devs;
+	err = gc_setup_power(gc);
+	if (err) goto err_unreg_devs;
+	return gc;
+
+ err_unreg_devs:
+	if (gc->dev) input_unregister_device(gc->dev);
+	if (gc->volume_dev) input_unregister_device(gc->volume_dev);
+	if (gc->power_dev) input_unregister_device(gc->power_dev);
+	kfree(gc);
+ err_out:
+	return ERR_PTR(err);
+}
+
+static void gc_remove(struct gc *gc)
+{
+	if (gc->dev)
+		input_unregister_device(gc->dev);
+	if (gc->volume_dev)
+		input_unregister_device(gc->volume_dev);
+	if (gc->power_dev)
+		input_unregister_device(gc->power_dev);
+	kfree(gc);
+}
+
+/**
+ * gc_bcm_peri_base_probe - Find the peripherals address base for
+ * the running Raspberry Pi model. It needs a kernel with runtime Device-Tree
+ * overlay support.
+ *
+ * Based on the userland 'bcm_host' library code from
+ * https://github.com/raspberrypi/userland/blob/2549c149d8aa7f18ff201a1c0429cb26f9e2535a/host_applications/linux/libs/bcm_host/bcm_host.c#L150
+ *
+ * Reference: https://www.raspberrypi.org/documentation/hardware/raspberrypi/peripheral_addresses.md
+ *
+ * If any error occurs reading the device tree nodes/properties, then return 0.
+ */
+static u32 __init gc_bcm_peri_base_probe(void) {
+
+	char *path = "/soc";
+	struct device_node *dt_node;
+	u32 base_address = 1;
+
+	dt_node = of_find_node_by_path(path);
+	if (!dt_node) {
+		printk(KERN_INFO "failed to find device-tree node: %s\n", path);
+		return 0;
+	}
+
+	if (of_property_read_u32_index(dt_node, "ranges", 1, &base_address)) {
+		printk(KERN_INFO "failed to read range index 1\n");
+		return 0;
+	}
+
+	if (base_address == 0) {
+		if (of_property_read_u32_index(dt_node, "ranges", 2, &base_address)) {
+			printk(KERN_INFO "failed to read range index 2\n");
+			return 0;
+		}
+	}
+
+	return base_address == 1 ? 0x02000000 : base_address;
+}
+
+static int gc_init(void)
+{
+	/* BCM board peripherals address base */
+	static u32 gc_bcm2708_peri_base;
+
+	values.flags_val = 1;
+	values.fan_val = 10;
+	values.red_val = 2;
+	values.green_val = 2;
+
+	/* Get the BCM2708 peripheral address */
+	gc_bcm2708_peri_base = gc_bcm_peri_base_probe();
+	if (!gc_bcm2708_peri_base) {
+		printk(KERN_INFO "failed to find peripherals address base via device-tree\n");
+		return -ENODEV;
+	}
+
+	printk(KERN_INFO "peripherals address base at 0x%08x\n", gc_bcm2708_peri_base);
+
+	/* Set up gpio pointer for direct register access */
+   	if ((gpio = ioremap((gc_bcm2708_peri_base + 0x200000), 0xB0)) == NULL) {
+   	   	printk(KERN_INFO "io remap failed\n");
+   	   	return -EBUSY;
+   	}
+
+	gc_base = gc_probe();
+	if (IS_ERR(gc_base)){
+		printk(KERN_INFO "failed to probe controls\n");
+		return -ENODEV;
+	}
+
+	/*Creating a directory in /sys/kernel/ */
+	kobj_ref = kobject_create_and_add("xpi_gamecon",kernel_kobj);
+
+	if(sysfs_create_file(kobj_ref,&version.attr)){
+		printk(KERN_INFO "Cannot create sysfs file......\n");
+		goto r_sysfs;
+	}
+	if(sysfs_create_file(kobj_ref,&flags.attr)){
+		printk(KERN_INFO "Cannot create sysfs file......\n");
+		goto r_sysfs;
+	}
+	if(sysfs_create_file(kobj_ref,&red.attr)){
+		printk(KERN_INFO "Cannot create sysfs file......\n");
+		goto r_sysfs;
+	}
+	if(sysfs_create_file(kobj_ref,&green.attr)){
+		printk(KERN_INFO "Cannot create sysfs file......\n");
+		goto r_sysfs;
+	}
+	if(sysfs_create_file(kobj_ref,&fan.attr)){
+		printk(KERN_INFO "Cannot create sysfs file......\n");
+		goto r_sysfs;
+	}
+	if(sysfs_create_file(kobj_ref,&cur.attr)){
+		printk(KERN_INFO "Cannot create sysfs file......\n");
+		goto r_sysfs;
+	}
+	if(sysfs_create_file(kobj_ref,&batt.attr)){
+		printk(KERN_INFO "Cannot create sysfs file......\n");
+		goto r_sysfs;
+	}
+	if(sysfs_create_file(kobj_ref,&per.attr)){
+		printk(KERN_INFO "Cannot create sysfs file......\n");
+		goto r_sysfs;
+	}
+	if(sysfs_create_file(kobj_ref,&stat.attr)){
+		printk(KERN_INFO "Cannot create sysfs file......\n");
+		goto r_sysfs;
+	}
+	if(sysfs_create_file(kobj_ref,&vol.attr)){
+		printk(KERN_INFO "Cannot create sysfs file......\n");
+		goto r_sysfs;
+	}
+
+	printk(KERN_INFO "Device Driver Insert...Done!!!\n");
+
+	running = 1;
+	mod_timer(&gc_base->timer, jiffies + GC_REFRESH_TIME);
+
+	return 0;
+
+r_sysfs:
+	kobject_put(kobj_ref);
+	sysfs_remove_file(kernel_kobj, &vol.attr);
+	sysfs_remove_file(kernel_kobj, &stat.attr);
+	sysfs_remove_file(kernel_kobj, &per.attr);
+	sysfs_remove_file(kernel_kobj, &batt.attr);
+	sysfs_remove_file(kernel_kobj, &cur.attr);
+	sysfs_remove_file(kernel_kobj, &fan.attr);
+	sysfs_remove_file(kernel_kobj, &green.attr);
+	sysfs_remove_file(kernel_kobj, &red.attr);
+	sysfs_remove_file(kernel_kobj, &flags.attr);
+	sysfs_remove_file(kernel_kobj, &version.attr);
+
+	if (gc_base)
+		gc_remove(gc_base);
+
+	iounmap(gpio);
+
+        return -1;
+}
+
+static void gc_exit(void)
+{
+	running = 0;
+
+	if (gc_base){
+		//del_timer_sync(&gc_base->timer);
+		del_timer(&gc_base->timer);
+		gc_remove(gc_base);
+	}
+
+	iounmap(gpio);
+
+	kobject_put(kobj_ref);
+	sysfs_remove_file(kernel_kobj, &vol.attr);
+	sysfs_remove_file(kernel_kobj, &stat.attr);
+	sysfs_remove_file(kernel_kobj, &per.attr);
+	sysfs_remove_file(kernel_kobj, &batt.attr);
+	sysfs_remove_file(kernel_kobj, &cur.attr);
+	sysfs_remove_file(kernel_kobj, &fan.attr);
+	sysfs_remove_file(kernel_kobj, &green.attr);
+	sysfs_remove_file(kernel_kobj, &red.attr);
+	sysfs_remove_file(kernel_kobj, &flags.attr);
+	sysfs_remove_file(kernel_kobj, &version.attr);
+}
+
+static int expi_probe(struct platform_device *pdev)
+{
+	struct expi *adc_bat;
+	struct power_supply_desc *psy_desc;
+	struct power_supply_config psy_cfg = {};
+
+	int ret = gc_init();
+	if(ret){
+		printk(KERN_INFO "failed to init controls\n");
+		return ret;
+	}
+
+	adc_bat = devm_kzalloc(&pdev->dev, sizeof(*adc_bat), GFP_KERNEL);
+	if (!adc_bat) {
+		dev_err(&pdev->dev, "failed to allocate memory\n");
+		return -ENOMEM;
+	}
+
+	psy_cfg.drv_data = adc_bat;
+	psy_desc = &adc_bat->psy_desc;
+	psy_desc->name = EXPI_DRIVER_NAME;
+
+	/* bootup default values for the battery */
+	adc_bat->cable_plugged = false;
+	adc_bat->status = POWER_SUPPLY_STATUS_DISCHARGING;
+	psy_desc->type = POWER_SUPPLY_TYPE_BATTERY;
+	psy_desc->get_property = expi_get_property;
+
+	adc_bat->psy = power_supply_register(&pdev->dev, psy_desc, &psy_cfg);
+	if (IS_ERR(adc_bat->psy)) {
+		printk(KERN_INFO "failed to register battery\n");
+		goto err_reg_fail;
+	}
+
+	platform_set_drvdata(pdev, adc_bat);
+
+	printk(KERN_INFO "Experimental Pi Driver Insert...Done!!!\n");
+
+	return 0;
+
+err_reg_fail:
+	return PTR_ERR(adc_bat->psy);
+}
+
+static int expi_remove(struct platform_device *pdev)
+{
+	struct expi *adc_bat = platform_get_drvdata(pdev);
+
+	gc_exit();
+
+	power_supply_unregister(adc_bat->psy);
+
+	printk(KERN_INFO "Experimental Pi Driver unloaded");
+
+	return 0;
+}
+
+static struct platform_driver expi_driver = {
+	.driver		= {
+		.name	= EXPI_DRIVER_NAME,
+	},
+	.probe		= expi_probe,
+	.remove		= expi_remove,
+};
+
+//module_platform_driver(expi_driver);
+
+module_init(gc_init);
+module_exit(gc_exit);
+
+

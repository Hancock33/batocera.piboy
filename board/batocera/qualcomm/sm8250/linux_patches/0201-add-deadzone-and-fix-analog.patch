diff --git a/drivers/input/joystick/odin2.c b/drivers/input/joystick/odin2.c
index 53bb2e70d1..fdeea0ef85 100644
--- a/drivers/input/joystick/odin2.c
+++ b/drivers/input/joystick/odin2.c
@@ -6,6 +6,7 @@
  * Copyright (C) 2024 BigfootACA <bigfoot@classfun.cn>
  * Copyright (C) 2024 Teguh Sobirin <teguh@sobir.in>
  * Copyright (C) 2025 ROCKNIX Team <admin@rocknix.org>
+ * Copyright (C) 2025 Daniel Martin <dmanlfc@gmail.com>
  *
  */
 
@@ -25,6 +26,13 @@
 #define DRIVER_NAME "odin2-gamepad"
 #define MAX_DATA_LEN 64
 
+#define RAW_STICK_MAX    0x4B8
+#define RAW_TRIGGER_MAX  1830
+
+static int deadzone = 4000;
+module_param(deadzone, int, 0644);
+MODULE_PARM_DESC(deadzone, "Deadzone threshold in scaled axis units (0..32767)");
+
 #define gamepad_serdev_write_seq(serdev, seq...)                      \
 	do {                                                              \
 		static const u8 d[] = { seq };                                \
@@ -65,6 +73,45 @@ struct gamepad_device {
 static bool rumble_enable = true;
 module_param(rumble_enable, bool, 0660);
 
+static inline int safe_abs(int x)
+{
+	return x < 0 ? -x : x;
+}
+
+static inline int scale_axis_signed(int raw_val, int raw_max)
+{
+	long scaled;
+
+	if (!raw_max)
+		return 0;
+
+	scaled = (long)raw_val * 32767 / raw_max;
+
+	if (scaled > 32767)
+		scaled = 32767;
+	else if (scaled < -32768)
+		scaled = -32768;
+
+	return (int)scaled;
+}
+
+static inline int scale_axis_unsigned(unsigned int raw_val, int raw_max)
+{
+	long scaled;
+
+	if (!raw_max)
+		return 0;
+
+	scaled = (long)raw_val * 32767 / raw_max;
+
+	if (scaled > 32767)
+		scaled = 32767;
+	else if (scaled < 0)
+		scaled = 0;
+
+	return (int)scaled;
+}
+
 static u8 gamepad_data_checksum(const u8 *data, size_t count)
 {
 	const u8 *ptr = data;
@@ -117,20 +164,44 @@ static void gamepad_input_handler(struct gamepad_device *dev,
 		input_report_key(indev, keymap[i], (current_states & BIT(i)));
 	}
 
-	input_report_abs(indev, ABS_Z,
-			 0x755 - (data->data[2] | (data->data[3] << 8)));
-	input_report_abs(indev, ABS_RZ,
-			 0x755 - (data->data[4] | (data->data[5] << 8)));
-	input_report_abs(indev, ABS_X,
-			 -(int16_t)(data->data[6] | (data->data[7] << 8)));
-	input_report_abs(indev, ABS_Y,
-			 -(int16_t)(data->data[8] | (data->data[9] << 8)));
-	input_report_abs(indev, ABS_RX,
-			 -(int16_t)(data->data[10] | (data->data[11] << 8)));
-	input_report_abs(indev, ABS_RY,
-			 -(int16_t)(data->data[12] | (data->data[13] << 8)));
+	int raw_trig_l = 0x755 - (data->data[2] | (data->data[3] << 8));
+	int raw_trig_r = 0x755 - (data->data[4] | (data->data[5] << 8));
+	if (raw_trig_l < 0)
+       raw_trig_l = 0;
+   if (raw_trig_r < 0)
+       raw_trig_r = 0;
+
+	int16_t raw_lx = -(int16_t)(data->data[6]  | (data->data[7]  << 8));
+	int16_t raw_ly = -(int16_t)(data->data[8]  | (data->data[9]  << 8));
+	int16_t raw_rx = -(int16_t)(data->data[10] | (data->data[11] << 8));
+	int16_t raw_ry = -(int16_t)(data->data[12] | (data->data[13] << 8));
+
+	int scaled_z  = scale_axis_unsigned(raw_trig_l, RAW_TRIGGER_MAX);
+	int scaled_rz = scale_axis_unsigned(raw_trig_r, RAW_TRIGGER_MAX);
+
+	int scaled_x  = scale_axis_signed(raw_lx, RAW_STICK_MAX);
+	int scaled_y  = scale_axis_signed(raw_ly, RAW_STICK_MAX);
+	int scaled_rx = scale_axis_signed(raw_rx, RAW_STICK_MAX);
+	int scaled_ry = scale_axis_signed(raw_ry, RAW_STICK_MAX);
+
+	if (safe_abs(scaled_x) <= deadzone)
+		scaled_x = 0;
+	if (safe_abs(scaled_y) <= deadzone)
+		scaled_y = 0;
+	if (safe_abs(scaled_rx) <= deadzone)
+		scaled_rx = 0;
+	if (safe_abs(scaled_ry) <= deadzone)
+		scaled_ry = 0;
+
+	input_report_abs(indev, ABS_Z,  scaled_z);
+	input_report_abs(indev, ABS_RZ, scaled_rz);
+	input_report_abs(indev, ABS_X,  scaled_x);
+	input_report_abs(indev, ABS_Y,  scaled_y);
+	input_report_abs(indev, ABS_RX, scaled_rx);
+	input_report_abs(indev, ABS_RY, scaled_ry);
 
 	input_sync(indev);
+
 	prev_states = keys;
 }
 
@@ -289,7 +363,7 @@ static int gamepad_mcu_uart_probe(struct serdev_device *serdev)
 		return dev_err_probe(dev, -ENOMEM, "Not enough memory for input device\n");
 
 	gamepad_dev->dev_input->phys = DRIVER_NAME"/input0";
-	
+
 	ret = device_property_read_string(dev, "gamepad-name", &gamepad_dev->dev_input->name);
 	if (ret) {
 		gamepad_dev->dev_input->name = "Ayn Odin2 Gamepad";
@@ -310,15 +384,16 @@ static int gamepad_mcu_uart_probe(struct serdev_device *serdev)
 		input_set_capability(gamepad_dev->dev_input, EV_KEY, keymap[i]);
 
 	__set_bit(EV_ABS, gamepad_dev->dev_input->evbit);
-	for (int i = ABS_X; i <= ABS_RZ; i++)
-		input_set_abs_params(gamepad_dev->dev_input, i, -0x580, 0x580,
-				     0, 0);
 
-	input_set_abs_params(gamepad_dev->dev_input, ABS_Z, 0, 1830, 0, 30);
-	input_set_abs_params(gamepad_dev->dev_input, ABS_RZ, 0, 1830, 0, 30);
+	input_set_abs_params(gamepad_dev->dev_input, ABS_X,  -32768, 32767, 0, 0);
+	input_set_abs_params(gamepad_dev->dev_input, ABS_Y,  -32768, 32767, 0, 0);
+	input_set_abs_params(gamepad_dev->dev_input, ABS_RX, -32768, 32767, 0, 0);
+	input_set_abs_params(gamepad_dev->dev_input, ABS_RY, -32768, 32767, 0, 0);
+	input_set_abs_params(gamepad_dev->dev_input, ABS_Z,      0, 32767, 0, 0);
+	input_set_abs_params(gamepad_dev->dev_input, ABS_RZ,     0, 32767, 0, 0);
 
-		input_set_capability(gamepad_dev->dev_input, EV_FF, FF_RUMBLE);
-		input_ff_create_memless(gamepad_dev->dev_input, NULL, retroid_rumble_play);
+	input_set_capability(gamepad_dev->dev_input, EV_FF, FF_RUMBLE);
+	input_ff_create_memless(gamepad_dev->dev_input, NULL, retroid_rumble_play);
 
 	ret = input_register_device(gamepad_dev->dev_input);
 	if (ret)
@@ -363,4 +438,5 @@ MODULE_AUTHOR("Molly Sophia <mollysophia379@gmail.com>");
 MODULE_AUTHOR("BigfootACA <bigfoot@classfun.cn>");
 MODULE_AUTHOR("Teguh Sobirin <teguh@sobir.in>");
 MODULE_AUTHOR("ROCKNIX Team <admin@rocknix.org>");
+MODULE_AUTHOR("Daniel Martin <dmanlfc@gmail.com>");
 MODULE_ALIAS("platform:" DRIVER_NAME);

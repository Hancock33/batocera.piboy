diff --git a/drivers/input/joystick/odin2.c b/drivers/input/joystick/odin2.c
index 4f3b80ffd3..55c3f6f98a 100644
--- a/drivers/input/joystick/odin2.c
+++ b/drivers/input/joystick/odin2.c
@@ -27,7 +27,21 @@
 #define MAX_DATA_LEN 64
 
 #define RAW_STICK_MAX    0x4B8
-#define RAW_TRIGGER_MAX  1830
+
+#define GAMEPAD_RAW_TRIGGER_MIN 354
+#define GAMEPAD_RAW_TRIGGER_MAX 1845
+
+#define GAMEPAD_RAW_SENSOR_FULL_RANGE_VAL 0x755
+
+#ifndef clamp
+#define clamp(val, min, max) ({ \
+	typeof(val) __val = (val); \
+	typeof(min) __min = (min); \
+	typeof(max) __max = (max); \
+	__val = __val < __min ? __min : __val; \
+	__val > __max ? __max : __val; \
+})
+#endif
 
 static int deadzone = 4000;
 module_param(deadzone, int, 0644);
@@ -94,21 +108,30 @@ static inline int scale_axis_signed(int raw_val, int raw_max)
 	return (int)scaled;
 }
 
-static inline int scale_axis_unsigned(unsigned int raw_val, int raw_max)
+static inline int scale_trigger_signed_range(unsigned int raw_val, int raw_min, int raw_max)
 {
-	long scaled;
+    long scaled;
+    long input_range = raw_max - raw_min;
+    long output_min = -32768L;
+    long output_max = 32767L;
+    long output_range = output_max - output_min;
 
-	if (!raw_max)
-		return 0;
+    if (input_range == 0)
+        return 0;
 
-	scaled = (long)raw_val * 32767 / raw_max;
+    long val_shifted = raw_val - raw_min;
 
-	if (scaled > 32767)
-		scaled = 32767;
-	else if (scaled < 0)
-		scaled = 0;
+    if (val_shifted < 0) val_shifted = 0;
+    if (val_shifted > input_range) val_shifted = input_range;
 
-	return (int)scaled;
+    scaled = (val_shifted * output_range / input_range) + output_min;
+
+    if (scaled > 32767)
+        scaled = 32767;
+    else if (scaled < -32768)
+        scaled = -32768;
+
+    return (int)scaled;
 }
 
 static u8 gamepad_data_checksum(const u8 *data, size_t count)
@@ -189,21 +212,20 @@ static void gamepad_input_handler(struct gamepad_device *dev,
 			input_report_key(indev, keymap[i], (keys_no_dpad & BIT(i + 4)) != 0);
 	}
 
-	int raw_trig_l = 0x755 - (data->data[2] | (data->data[3] << 8));
-	int raw_trig_r = 0x755 - (data->data[4] | (data->data[5] << 8));
-	if (raw_trig_l < 0)
-       raw_trig_l = 0;
-   if (raw_trig_r < 0)
-       raw_trig_r = 0;
+	int raw_trig_l_current = GAMEPAD_RAW_SENSOR_FULL_RANGE_VAL - (data->data[2] | (data->data[3] << 8));
+	int raw_trig_r_current = GAMEPAD_RAW_SENSOR_FULL_RANGE_VAL - (data->data[4] | (data->data[5] << 8));
+	
+	int raw_l_clamped = clamp(raw_trig_l_current, GAMEPAD_RAW_TRIGGER_MIN, GAMEPAD_RAW_TRIGGER_MAX);
+	int raw_r_clamped = clamp(raw_trig_r_current, GAMEPAD_RAW_TRIGGER_MIN, GAMEPAD_RAW_TRIGGER_MAX);
+	
+	int scaled_z  = scale_trigger_signed_range(raw_l_clamped, GAMEPAD_RAW_TRIGGER_MIN, GAMEPAD_RAW_TRIGGER_MAX);
+	int scaled_rz = scale_trigger_signed_range(raw_r_clamped, GAMEPAD_RAW_TRIGGER_MIN, GAMEPAD_RAW_TRIGGER_MAX);
 
 	int16_t raw_lx = -(int16_t)(data->data[6]  | (data->data[7]  << 8));
 	int16_t raw_ly = -(int16_t)(data->data[8]  | (data->data[9]  << 8));
 	int16_t raw_rx = -(int16_t)(data->data[10] | (data->data[11] << 8));
 	int16_t raw_ry = -(int16_t)(data->data[12] | (data->data[13] << 8));
 
-	int scaled_z  = scale_axis_unsigned(raw_trig_l, RAW_TRIGGER_MAX);
-	int scaled_rz = scale_axis_unsigned(raw_trig_r, RAW_TRIGGER_MAX);
-
 	int scaled_x  = scale_axis_signed(raw_lx, RAW_STICK_MAX);
 	int scaled_y  = scale_axis_signed(raw_ly, RAW_STICK_MAX);
 	int scaled_rx = scale_axis_signed(raw_rx, RAW_STICK_MAX);

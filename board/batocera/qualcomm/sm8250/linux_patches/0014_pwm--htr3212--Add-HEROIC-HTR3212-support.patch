From 649ab6827deb618a1cca437de3cd710465e146b4 Mon Sep 17 00:00:00 2001
From: Teguh Sobirin <teguh@sobir.in>
Date: Sat, 12 Oct 2024 01:26:37 +0800
Subject: [PATCH] pwm: htr3212: Add HEROIC HTR3212 support

---
 drivers/pwm/Kconfig       |  10 ++
 drivers/pwm/Makefile      |   1 +
 drivers/pwm/pwm-htr3212.c | 308 ++++++++++++++++++++++++++++++++++++++
 3 files changed, 319 insertions(+)
 create mode 100644 drivers/pwm/pwm-htr3212.c

diff --git a/drivers/pwm/Kconfig b/drivers/pwm/Kconfig
index 3e53838990f5..5440e8712ad7 100644
--- a/drivers/pwm/Kconfig
+++ b/drivers/pwm/Kconfig
@@ -257,6 +257,16 @@ config PWM_HIBVT
 	  To compile this driver as a module, choose M here: the module
 	  will be called pwm-hibvt.
 
+config PWM_HTR3212
+	tristate "HEROIC HTR3212 PWM driver"
+	depends on I2C
+	select REGMAP_I2C
+	help
+	  Generic PWM framework driver for HEROIC HTR3212 LED controller.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called pwm-htr3212.
+
 config PWM_IMG
 	tristate "Imagination Technologies PWM driver"
 	depends on HAS_IOMEM
diff --git a/drivers/pwm/Makefile b/drivers/pwm/Makefile
index 0be4f3e6dd43..5e4e8da8a379 100644
--- a/drivers/pwm/Makefile
+++ b/drivers/pwm/Makefile
@@ -21,6 +21,7 @@ obj-$(CONFIG_PWM_EP93XX)	+= pwm-ep93xx.o
 obj-$(CONFIG_PWM_FSL_FTM)	+= pwm-fsl-ftm.o
 obj-$(CONFIG_PWM_GPIO)		+= pwm-gpio.o
 obj-$(CONFIG_PWM_HIBVT)		+= pwm-hibvt.o
+obj-$(CONFIG_PWM_HTR3212)	+= pwm-htr3212.o
 obj-$(CONFIG_PWM_IMG)		+= pwm-img.o
 obj-$(CONFIG_PWM_IMX1)		+= pwm-imx1.o
 obj-$(CONFIG_PWM_IMX27)		+= pwm-imx27.o
diff --git a/drivers/pwm/pwm-htr3212.c b/drivers/pwm/pwm-htr3212.c
new file mode 100644
index 000000000000..cef5a80477c0
--- /dev/null
+++ b/drivers/pwm/pwm-htr3212.c
@@ -0,0 +1,308 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Driver for HEROIC HTR3212 12-channel 8-bit PWM LED controller
+ *
+ * Copyright (c) 2024 Teguh Sobirin <teguh@sobir.in>
+ *
+ */
+
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/platform_device.h>
+#include <linux/pwm.h>
+#include <linux/regmap.h>
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/regulator/consumer.h>
+
+#define HTR3212_CHANNELS 12
+#define HTR3212_SHUTDOWN 0x00
+#define HTR3212_PWM_REGISTER_BASE 0x0d
+#define HTR3212_PWM_UPDATE 0x25
+#define HTR3212_LED_CONTROL_BASE 0x32
+#define HTR3212_GLOBAL_CONTROL 0x4a
+#define HTR3212_OUTPUT_FREQ 0x4b
+#define HTR3212_RESET 0x4f
+
+struct htr3212 {
+	struct device *pdev;
+	struct regmap *regmap;
+	struct mutex lock;
+	struct regulator *vdd;
+	struct gpio_desc *sdb;
+	uint8_t pwm_val[HTR3212_CHANNELS];
+	uint8_t led_ctl[HTR3212_CHANNELS];
+};
+
+static int htr3212_write_reg(struct htr3212 *priv, unsigned int reg,
+			    unsigned int val)
+{
+	int err;
+
+	dev_dbg(priv->pdev, "request regmap_write 0x%x 0x%x\n", reg, val);
+	
+	err = regmap_write(priv->regmap, reg, val);
+	if (err)
+		dev_err(
+			priv->pdev,
+			"regmap_write to register 0x%x failed: %pe\n", reg,
+			ERR_PTR(err));
+
+	return err;
+}
+
+static int htr3212_set_led_reg(struct htr3212 *priv, unsigned int channel,
+			     bool enabled, bool write)
+{
+
+	if (channel >= HTR3212_CHANNELS)
+		return -EINVAL;
+
+
+	dev_dbg(priv->pdev, "channel %u enabled %u\n", channel, enabled);
+
+	priv->led_ctl[channel] = enabled;
+
+	if (!write)
+		return 0;
+
+	return htr3212_write_reg(priv, HTR3212_LED_CONTROL_BASE + channel,
+				priv->led_ctl[channel]);
+}
+
+static int htr3212_set_pwm_reg(struct htr3212 *priv, unsigned int channel,
+			      uint8_t val, bool write)
+{
+	if (channel >= HTR3212_CHANNELS)
+		return -EINVAL;
+	priv->pwm_val[channel] = val;
+	dev_dbg(priv->pdev, "set value reg %u to %u\n", channel,
+		priv->pwm_val[channel]);
+
+	if (!write)
+		return 0;
+
+	return htr3212_write_reg(priv, HTR3212_PWM_REGISTER_BASE + channel,
+				priv->pwm_val[channel]);
+}
+
+static int htr3212_init(struct htr3212 *priv)
+{
+	int i, ret;
+
+	/* enable global control */
+	ret = htr3212_write_reg(priv, HTR3212_GLOBAL_CONTROL, 0x00);
+	if (ret != 0)
+		return ret;
+
+	/* set output frequency */
+	ret = htr3212_write_reg(priv, HTR3212_OUTPUT_FREQ, 0x01);
+	if (ret != 0)
+		return ret;
+
+	/* clear all registers */
+	ret = htr3212_write_reg(priv, HTR3212_RESET, 0x00);
+	if (ret != 0)
+		return ret;
+
+	/* set software enable register */
+	ret = htr3212_write_reg(priv, HTR3212_SHUTDOWN, 0x01);
+	if (ret != 0)
+		return ret;
+
+	/* rewrite pwm value register */
+	for (i = 0; i < HTR3212_CHANNELS; i++) {
+		ret = htr3212_write_reg(priv, HTR3212_PWM_REGISTER_BASE + i,
+				       priv->pwm_val[i]);
+		if (ret != 0)
+			return ret;
+	}
+
+	/* rewrite pwm enable register */
+	for (i = 0; i < HTR3212_CHANNELS; i++) {
+		ret = htr3212_write_reg(priv, HTR3212_LED_CONTROL_BASE + i,
+				       priv->led_ctl[i]);
+		if (ret != 0)
+			return ret;
+	}
+
+	/* apply changes */
+	ret = htr3212_write_reg(priv, HTR3212_PWM_UPDATE, 0x00);
+	if (ret != 0)
+		return ret;
+
+	return 0;
+}
+
+static int htr3212_pwm_request(struct pwm_chip *chip, struct pwm_device *pwm)
+{
+	struct htr3212 *priv = pwmchip_get_drvdata(chip);
+
+	if (pwm->hwpwm >= HTR3212_CHANNELS)
+		return -EINVAL;
+
+	dev_dbg(priv->pdev, "htr3212 request channel %u\n", pwm->hwpwm);
+	pwm->args.period = 1000000;
+	return 0;
+}
+
+static int htr3212_pwm_apply(struct pwm_chip *chip, struct pwm_device *pwm,
+			    const struct pwm_state *state)
+{
+	u64 val = 0;
+	struct htr3212 *priv = pwmchip_get_drvdata(chip);
+
+	if (pwm->hwpwm >= HTR3212_CHANNELS)
+		return -EINVAL;
+
+	if (state->polarity != PWM_POLARITY_NORMAL)
+		return -EINVAL;
+
+	if (state->period <= 0)
+		return -EINVAL;
+
+	val = mul_u64_u64_div_u64(state->duty_cycle, 0xff, state->period);
+	dev_dbg(priv->pdev, "duty_cycle %llu period %llu\n", 
+		state->duty_cycle, state->period);
+	dev_dbg(priv->pdev, "set channel %u value to %llu\n", 
+		pwm->hwpwm, val);
+	dev_dbg(priv->pdev, "set channel %u enabled to %u\n", 
+		pwm->hwpwm, state->enabled);
+
+	mutex_lock(&priv->lock);
+	htr3212_set_led_reg(priv, pwm->hwpwm, state->enabled, true);
+	htr3212_set_pwm_reg(priv, pwm->hwpwm, val, true);
+	htr3212_write_reg(priv, HTR3212_PWM_UPDATE, 0x00);
+	mutex_unlock(&priv->lock);
+
+	return 0;
+}
+
+static const struct pwm_ops htr3212_pwm_ops = {
+	.apply = htr3212_pwm_apply,
+	.request = htr3212_pwm_request,
+};
+
+static const struct regmap_config htr3212_regmap_i2c_config = {
+	.reg_bits = 8,
+	.val_bits = 8,
+	.max_register = 0xff,
+	.cache_type = REGCACHE_NONE,
+};
+
+static int htr3212_pwm_probe(struct i2c_client *client)
+{
+	struct pwm_chip *chip;
+	struct htr3212 *priv;
+	int ret, i;
+
+	chip = devm_pwmchip_alloc(&client->dev, HTR3212_CHANNELS, sizeof(*priv));
+	if (IS_ERR(chip))
+		return PTR_ERR(chip);
+	priv = pwmchip_get_drvdata(chip);
+	priv->pdev = &client->dev;
+
+	/* get shutdown pin */
+	priv->sdb = devm_gpiod_get(priv->pdev, "sdb", GPIOD_OUT_HIGH);
+	if (PTR_ERR(priv->sdb) == -EPROBE_DEFER)
+		return -EPROBE_DEFER;
+
+	/* get power vdd */
+	priv->vdd = devm_regulator_get(priv->pdev, "vdd");
+	if (IS_ERR(priv->vdd)) {
+		ret = PTR_ERR(priv->vdd);
+		dev_err(priv->pdev, "Unable to get vdd regulator: %d\n", ret);
+		return ret;
+	}
+
+	/* turn on power vdd */
+	ret = regulator_enable(priv->vdd);
+	if (ret < 0) {
+		dev_err(priv->pdev, "Unable to enable regulator: %d\n", ret);
+		return ret;
+	}
+
+	/* disable shutdown pin */
+	gpiod_set_value_cansleep(priv->sdb, 1);
+	usleep_range(10000, 11000);
+
+	/* initialize htr3212 (chip does not support read command) */
+	for (i = 0; i < HTR3212_CHANNELS; i++)
+		priv->pwm_val[i] = 0;
+	for (i = 0; i < HTR3212_CHANNELS; i++)
+		priv->led_ctl[i] = 0;
+
+	priv->regmap = devm_regmap_init_i2c(client, &htr3212_regmap_i2c_config);
+	if (IS_ERR(priv->regmap)) {
+		ret = PTR_ERR(priv->regmap);
+		dev_err(priv->pdev, "Failed to initialize register map: %d\n",
+			ret);
+		return ret;
+	}
+
+	i2c_set_clientdata(client, chip);
+	mutex_init(&priv->lock);
+
+	chip->ops = &htr3212_pwm_ops;
+	ret = pwmchip_add(chip);
+	if (ret < 0)
+		return ret;
+
+	/* initialize registers */
+	ret = htr3212_init(priv);
+	if (ret != 0) {
+		dev_err(priv->pdev, "Failed to initialize htr3212: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static void htr3212_pwm_remove(struct i2c_client *client)
+{
+	struct pwm_chip *chip = i2c_get_clientdata(client);
+	struct htr3212 *priv = pwmchip_get_drvdata(chip);
+
+	/* set software enable register */
+	htr3212_write_reg(priv, HTR3212_SHUTDOWN, 0x00);
+
+	/* apply changes */
+	htr3212_write_reg(priv, HTR3212_PWM_UPDATE, 0x00);
+
+	/* enable shutdown pin */
+	gpiod_set_value_cansleep(priv->sdb, 0);
+
+	/* turn off power vdd */
+	regulator_disable(priv->vdd);
+
+	pwmchip_remove(chip);
+}
+
+static const struct i2c_device_id htr3212_id[] = {
+	{ "htr3212", 0 },
+	{ /* sentinel */ },
+};
+MODULE_DEVICE_TABLE(i2c, htr3212_id);
+
+static const struct of_device_id htr3212_dt_ids[] = {
+	{ .compatible = "heroic,htr3212-pwm", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, htr3212_dt_ids);
+
+static struct i2c_driver htr3212_i2c_driver = {
+	.driver = {
+		.name = "htr3212-pwm",
+		.of_match_table = of_match_ptr(htr3212_dt_ids),
+	},
+	.probe = htr3212_pwm_probe,
+	.remove = htr3212_pwm_remove,
+	.id_table = htr3212_id,
+};
+
+module_i2c_driver(htr3212_i2c_driver);
+
+MODULE_AUTHOR("Teguh Sobirin <teguh@sobir.in>");
+MODULE_DESCRIPTION("PWM driver for HEROIC HTR3212");
+MODULE_LICENSE("GPL");
-- 
2.34.1


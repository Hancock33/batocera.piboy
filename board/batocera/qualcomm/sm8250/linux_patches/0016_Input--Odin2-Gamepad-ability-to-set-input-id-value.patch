From f2be2c240c0dddc6d3548543cbefc311a26cb4f7 Mon Sep 17 00:00:00 2001
From: Teguh Sobirin <teguh@sobir.in>
Date: Mon, 14 Oct 2024 18:00:57 +0800
Subject: [PATCH] Input: Odin2 Gamepad ability to set input id values from
 devicetree

---
 drivers/input/joystick/odin2.c | 43 +++++++++++++++++++++++++---------
 1 file changed, 32 insertions(+), 11 deletions(-)

diff --git a/drivers/input/joystick/odin2.c b/drivers/input/joystick/odin2.c
index 1350fc1a291b..1daf0f121b2c 100644
--- a/drivers/input/joystick/odin2.c
+++ b/drivers/input/joystick/odin2.c
@@ -4,6 +4,7 @@
  *
  * Copyright (C) 2024 Molly Sophia <mollysophia379@gmail.com>
  * Copyright (C) 2024 BigfootACA <bigfoot@classfun.cn>
+ * Copyright (C) 2024 Teguh Sobirin <teguh@sobir.in>
  *
  */
 
@@ -19,18 +20,19 @@
 #include <linux/slab.h>
 #include <uapi/linux/sched/types.h>
 
+#define DRIVER_NAME "odin2-gamepad"
 #define MAX_DATA_LEN 64
 
-#define gamepad_serdev_write_seq(serdev, seq...)                              \
-	do {                                                                  \
+#define gamepad_serdev_write_seq(serdev, seq...)                      \
+	do {                                                              \
 		static const u8 d[] = { seq };                                \
 		struct device *dev = &serdev->dev;                            \
 		int ret;                                                      \
 		ret = serdev_device_write_buf(serdev, d, ARRAY_SIZE(d));      \
 		if (ret < 0 || ret < ARRAY_SIZE(d)) {                         \
-			dev_warn_ratelimited(dev, "Unable to write data: %d", \
-					     ret);                            \
-			return;                                               \
+			dev_warn_ratelimited(dev, "Unable to write data: %d",     \
+					     ret);                                        \
+			return;                                                   \
 		}                                                             \
 	} while (0)
 
@@ -180,6 +182,10 @@ static int gamepad_mcu_uart_probe(struct serdev_device *serdev)
 {
 	struct device *dev = &serdev->dev;
 	struct gamepad_device *gamepad_dev;
+	u32 gamepad_bus = 0;
+	u32 gamepad_vid = 0;
+	u32 gamepad_pid = 0;
+	u32 gamepad_rev = 0;
 	int ret;
 
 	gamepad_dev = devm_kzalloc(dev, sizeof(*gamepad_dev), GFP_KERNEL);
@@ -210,15 +216,28 @@ static int gamepad_mcu_uart_probe(struct serdev_device *serdev)
 	if (!gamepad_dev->dev_input)
 		return dev_err_probe(dev, -ENOMEM, "Not enough memory for input device\n");
 
-	gamepad_dev->dev_input->name = "Ayn Odin2 Gamepad";
-	gamepad_dev->dev_input->phys = "odin2-gamepad/input0";
-	__set_bit(EV_ABS, gamepad_dev->dev_input->evbit);
+	gamepad_dev->dev_input->phys = DRIVER_NAME"/input0";
+	
+	ret = device_property_read_string(dev, "gamepad-name", &gamepad_dev->dev_input->name);
+	if (ret) {
+		gamepad_dev->dev_input->name = "Ayn Odin2 Gamepad";
+	}
+
+	device_property_read_u32(dev, "gamepad-bus", &gamepad_bus);
+	device_property_read_u32(dev, "gamepad-vid", &gamepad_vid);
+	device_property_read_u32(dev, "gamepad-pid", &gamepad_pid);
+	device_property_read_u32(dev, "gamepad-rev", &gamepad_rev);
 
+	gamepad_dev->dev_input->id.bustype = (u16)gamepad_bus;
+	gamepad_dev->dev_input->id.vendor  = (u16)gamepad_vid;
+	gamepad_dev->dev_input->id.product = (u16)gamepad_pid;
+	gamepad_dev->dev_input->id.version = (u16)gamepad_rev;
+
+	__set_bit(EV_KEY, gamepad_dev->dev_input->evbit);
 	for (int i = 0; i < ARRAY_SIZE(keymap); i++)
 		input_set_capability(gamepad_dev->dev_input, EV_KEY, keymap[i]);
 
-	input_set_capability(gamepad_dev->dev_input, EV_KEY, BTN_JOYSTICK);
-
+	__set_bit(EV_ABS, gamepad_dev->dev_input->evbit);
 	for (int i = ABS_X; i <= ABS_RZ; i++)
 		input_set_abs_params(gamepad_dev->dev_input, i, -0x580, 0x580,
 				     0, 0);
@@ -245,7 +264,7 @@ MODULE_DEVICE_TABLE(of, gamepad_mcu_uart_of_match);
 
 static struct serdev_device_driver gamepad_mcu_uart_driver = {
 	.driver = {
-		.name = "odin2-gamepad",
+		.name = DRIVER_NAME,
 		.of_match_table = gamepad_mcu_uart_of_match,
 	},
 	.probe = gamepad_mcu_uart_probe,
@@ -257,3 +276,5 @@ MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("Gamepad driver for Ayn Odin2");
 MODULE_AUTHOR("Molly Sophia <mollysophia379@gmail.com>");
 MODULE_AUTHOR("BigfootACA <bigfoot@classfun.cn>");
+MODULE_AUTHOR("Teguh Sobirin <teguh@sobir.in>");
+MODULE_ALIAS("platform:" DRIVER_NAME);
-- 
2.34.1


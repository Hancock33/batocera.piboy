diff --git a/src/video/video.cpp b/src/video/video.cpp
index 69b0c29..2e959bd 100644
--- a/src/video/video.cpp
+++ b/src/video/video.cpp
@@ -51,7 +51,7 @@ using namespace std;
 
 namespace video
 {
-int g_vid_width = 640, g_vid_height = 480; // default video dimensions
+int g_vid_width = 480, g_vid_height = 320; // default video dimensions
 
 #ifdef DEBUG
 const Uint16 cg_normalwidths[]  = {320, 640, 800, 1024, 1280, 1280, 1600};
@@ -93,7 +93,7 @@ int sboverlay_characterset = 1;
 bool g_bForceAspectRatio = true;
 
 // the # of degrees to rotate counter-clockwise in opengl mode
-float g_fRotateDegrees = 0.0;
+float g_fRotateDegrees = -90.0;
 
 // SDL sdl_video_run thread variables
 SDL_Thread *sdl_video_run_thread;
@@ -180,11 +180,8 @@ bool init_display()
             // anything
         }
 
-        // if we're supposed to scale the image...
-        if (g_scalefactor < 100) {
-            g_draw_width  = g_draw_width * g_scalefactor / 100;
-            g_draw_height = g_draw_height * g_scalefactor / 100;
-        }
+        g_draw_height  = g_draw_width * g_scalefactor / 100;
+        g_draw_width = g_draw_height * g_scalefactor / 100;
 
         // by RDG2010
         // Step 2. Create a borderless SDL window.
@@ -803,13 +800,13 @@ void vid_blit () {
 
     // Sadly, we have to RenderCopy the YUV texture on every blitting strike, because
     // the image on the renderer gets "dirty" with previous overlay frames on top of the yuv.
-    SDL_RenderCopy(g_renderer, g_yuv_texture, NULL, NULL); 
+    SDL_RenderCopyEx(g_renderer, g_yuv_texture, NULL, NULL, g_fRotateDegrees, NULL, SDL_FLIP_NONE); 
 
     // If there's an overlay texture, it means we are using some kind of overlay,
     // be it LEDs or any other thing, so RenderCopy it to the renderer ON TOP of the YUV video.
     // ONLY a rect of the LEDs surface size is copied for now.
     if(g_overlay_texture) {
-	SDL_RenderCopy(g_renderer, g_overlay_texture, &g_leds_size_rect, NULL);
+	SDL_RenderCopyEx(g_renderer, g_overlay_texture, &g_leds_size_rect, NULL, g_fRotateDegrees, NULL, SDL_FLIP_NONE);
     }
     // Issue flip.
     SDL_RenderPresent(g_renderer);

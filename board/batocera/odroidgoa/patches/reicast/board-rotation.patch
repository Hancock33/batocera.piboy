diff --git a/core/rend/gles/gles.cpp b/core/rend/gles/gles.cpp
index 5d07d6a..ddd0bb5 100755
--- a/core/rend/gles/gles.cpp
+++ b/core/rend/gles/gles.cpp
@@ -118,7 +118,7 @@ void main() \n\
 #else \n\
 	vpos.z=depth_scale.x+depth_scale.y*vpos.w;  \n\
 #endif \n\
-	\n\
+	vpos.xy = vec2(vpos.y, -vpos.x);  \n\
 	vpos.xy=vpos.xy*scale.xy-scale.zw;  \n\
 	vpos.xy*=vpos.w;  \n\
 	gl_Position = vpos; \n\
@@ -1902,32 +1902,19 @@ bool RenderFrame()
 	/*
 		Handle Dc to screen scaling
 	*/
-	float dc2s_scale_h = screen_height / 480.0;
-	float ds2s_offs_x = (screen_width - dc2s_scale_h * 640.0) / 2;
-	// handle odd screen width
-	if (screen_width % 2) {
-		ds2s_offs_x = (screen_width + 1 - dc2s_scale_h * 640.0) / 2;
-	}
-
-	if (!is_rtt) {
-		ShaderUniforms.scale_coefs[0] = 2.0f / (screen_width / dc2s_scale_h * scale_x);
-		ShaderUniforms.scale_coefs[2] = 1 - 2 * ds2s_offs_x / screen_width;
-	} else {
-		if (dc_width == (FB_X_CLIP.max - FB_X_CLIP.min + 1)) {
-			ShaderUniforms.scale_coefs[0] = 2.0f / (dc_width * scale_x);
-		}
-		else { //is stride
-			ShaderUniforms.scale_coefs[0] = 2.0f / ((FB_X_CLIP.max - FB_X_CLIP.min + 1) * scale_x);
-		}
-		dc2s_scale_h = screen_width / dc_width;
-		ds2s_offs_x = 0;
-		ShaderUniforms.scale_coefs[2] = 1;
-	}
-
-	//-1 -> too much to left
-	ShaderUniforms.scale_coefs[1]=(is_rtt?2:-2)/dc_height;
-	ShaderUniforms.scale_coefs[3]=(is_rtt?1:-1);
-
+	float screen_stretching = settings.rend.ScreenStretching / 100.f;
+	float screen_scaling = settings.rend.ScreenScaling / 100.f;
+
+	float dc2s_scale_h;
+	float ds2s_offs_x;
+
+	dc2s_scale_h = screen_height / 640.0f;
+	ds2s_offs_x =  (screen_width - dc2s_scale_h * 480.0f * screen_stretching) / 2;
+	ShaderUniforms.scale_coefs[0] = 2.0f / (screen_width / dc2s_scale_h * scale_x) * screen_stretching;
+	ShaderUniforms.scale_coefs[1] = -2.0f / dc_width;
+	ShaderUniforms.scale_coefs[2] = 1 - 2 * ds2s_offs_x / screen_width;
+	ShaderUniforms.scale_coefs[3] = 1;
+	
 	ShaderUniforms.depth_coefs[0]=2/(vtx_max_fZ-vtx_min_fZ);
 	ShaderUniforms.depth_coefs[1]=-vtx_min_fZ-1;
 	ShaderUniforms.depth_coefs[2]=0;
@@ -2101,21 +2088,38 @@ bool RenderFrame()
 		printf("SCI: %f, %f, %f, %f\n", offs_x+pvrrc.fb_X_CLIP.min/scale_x,(pvrrc.fb_Y_CLIP.min/scale_y)*dc2s_scale_h,(pvrrc.fb_X_CLIP.max-pvrrc.fb_X_CLIP.min+1)/scale_x*dc2s_scale_h,(pvrrc.fb_Y_CLIP.max-pvrrc.fb_Y_CLIP.min+1)/scale_y*dc2s_scale_h);
 	#endif
 
-	if (is_rtt || (settings.rend.VerticalResolution == 100 && settings.rend.HorizontalResolution == 100)) {
-		glScissor(ds2s_offs_x + 0.5f + pvrrc.fb_X_CLIP.min / scale_x,
-			(pvrrc.fb_Y_CLIP.min / scale_y) * dc2s_scale_h,
-			(pvrrc.fb_X_CLIP.max - pvrrc.fb_X_CLIP.min + 1) / scale_x * dc2s_scale_h,
-			(pvrrc.fb_Y_CLIP.max - pvrrc.fb_Y_CLIP.min + 1) / scale_y * dc2s_scale_h);
-		if (settings.rend.WideScreen)
-		{
-			glDisable(GL_SCISSOR_TEST);
-		}
-		else
-		{
-			glEnable(GL_SCISSOR_TEST);
-		}
+	float width = (pvrrc.fb_X_CLIP.max - pvrrc.fb_X_CLIP.min + 1) / scale_x;
+	float height = (pvrrc.fb_Y_CLIP.max - pvrrc.fb_Y_CLIP.min + 1) / scale_y;
+	float min_x = pvrrc.fb_X_CLIP.min / scale_x;
+	float min_y = pvrrc.fb_Y_CLIP.min / scale_y;
+	
+	float t = width;
+	width = height;
+	height = t;
+	t = min_x;
+	min_x = min_y;
+	min_y = 640 - t - height;
+		
+	// Add x offset for aspect ratio > 4/3
+	min_x = (min_x * dc2s_scale_h * screen_stretching + ds2s_offs_x) * screen_scaling;
+	// Invert y coordinates when rendering to screen
+	min_y = (screen_height - (min_y + height) * dc2s_scale_h) * screen_scaling;
+	width *= dc2s_scale_h * screen_stretching * screen_scaling;
+	height *= dc2s_scale_h * screen_scaling;
+
+	if (ds2s_offs_x > 0)
+	{
+		float scaled_offs_x = ds2s_offs_x * screen_scaling;
+
+		glScissor(0, 0, scaled_offs_x + 0.5f, screen_height * screen_scaling + 0.5f);
+		glClear(GL_COLOR_BUFFER_BIT);
+		glScissor(screen_width * screen_scaling - scaled_offs_x + 0.5f, 0, scaled_offs_x + 1.f, screen_height * screen_scaling + 0.5f);
+		glClear(GL_COLOR_BUFFER_BIT);
 	}
 
+	glScissor(min_x + 0.5f, min_y + 0.5f, width + 0.5f, height + 0.5f);
+	glEnable(GL_SCISSOR_TEST);
+
 	//restore scale_x
 	scale_x /= scissoring_scale_x;
 
diff --git a/core/types.h b/core/types.h
index afb165c..7000329 100644
--- a/core/types.h
+++ b/core/types.h
@@ -620,6 +620,8 @@ struct settings_t
 		bool Clipping;
 		u32 VerticalResolution;
 		u32 HorizontalResolution;
+		int ScreenScaling =  100;		// in percent. 50 means half the native resolution
+		int ScreenStretching = 100;		// in percent. 150 means stretch from 4/3 to 6/3
 	} rend;
 
 	struct
